//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;

namespace DB
{
  public enum DbProvider { MsSql }

  namespace VoteSecurity
  {
    #region aspnetdb Database

    public static partial class VoteSecurityDb
    {
      static string _ConnectionString = @"data source=.\SQLEXPRESS;Integrated Security=SSPI;Database=aspnetdb";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MsSql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteSecurityDb()
      {
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, DbConnection cn)
      {
        return GetCommand(cmdText, cn, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion aspnetdb Database

    #region aspnetdb.aspnet_Applications

    public partial class ApplicationsRow : DataRow
    {
      internal ApplicationsRow(DataRowBuilder rb) : base(rb) {}

      public String ApplicationName
      {
        get { return this["ApplicationName"] as String; }
        set { if (value == null) this["ApplicationName"] = DBNull.Value; else this["ApplicationName"] = value; }
      }

      public String LoweredApplicationName
      {
        get { return this["LoweredApplicationName"] as String; }
        set { if (value == null) this["LoweredApplicationName"] = DBNull.Value; else this["LoweredApplicationName"] = value; }
      }

      public Guid ApplicationId
      {
        get { return (Guid) this["ApplicationId"]; }
        set { this["ApplicationId"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }
    }

    [Serializable]
    public partial class ApplicationsTable : TypedTableBase<ApplicationsRow>
    {
      public ApplicationsRow this[int index] { get { return (ApplicationsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ApplicationsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ApplicationsTable(); }

      new public ApplicationsRow NewRow() { return (ApplicationsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ApplicationsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ApplicationsRow); }

      public void RemoveRow(ApplicationsRow row) { this.Rows.Remove(row); }

      public ApplicationsRow NewRow(String ApplicationName, String LoweredApplicationName, Guid ApplicationId, String Description)
      {
        ApplicationsRow row = NewRow();
        row.ApplicationName = ApplicationName;
        row.LoweredApplicationName = LoweredApplicationName;
        row.ApplicationId = ApplicationId;
        row.Description = Description;
        return row;
      }

      public void AddRow(String ApplicationName, String LoweredApplicationName, Guid ApplicationId, String Description)
      {
        ApplicationsRow row = NewRow(ApplicationName, LoweredApplicationName, ApplicationId, Description);
        AddRow(row);
      }

      public DataColumn ApplicationNameColumn { get { return this.Columns["ApplicationName"]; } }

      public DataColumn LoweredApplicationNameColumn { get { return this.Columns["LoweredApplicationName"]; } }

      public DataColumn ApplicationIdColumn { get { return this.Columns["ApplicationId"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("ApplicationName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LoweredApplicationName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("ApplicationId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Description", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public ApplicationsTable() : this(ColumnSet.All) { }

      public ApplicationsTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Applications";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ApplicationsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Applications
    {
      public enum Column { ApplicationName, LoweredApplicationName, ApplicationId, Description }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ApplicationName, "ApplicationName" },
        { Column.LoweredApplicationName, "LoweredApplicationName" },
        { Column.ApplicationId, "ApplicationId" },
        { Column.Description, "Description" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Applications";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String ApplicationName, String LoweredApplicationName, Guid ApplicationId, String Description)
      {
        Insert(ApplicationName, LoweredApplicationName, ApplicationId, Description, -1);
      }

      public static void Insert(String ApplicationName, String LoweredApplicationName, Guid ApplicationId, String Description, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Applications (ApplicationName,LoweredApplicationName,ApplicationId,Description) VALUES (@ApplicationName,@LoweredApplicationName,@ApplicationId,@Description)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "Description", Description);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications";
        }
      }

      public static ApplicationsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ApplicationsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ApplicationsTable.ColumnSet.All);
      }

      public static ApplicationsTable FillTable(DbCommand command)
      {
        return FillTable(command, ApplicationsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ApplicationsTable FillTable(DbCommand command, ApplicationsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          ApplicationsTable table = new ApplicationsTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ApplicationsTable table)
      {
        UpdateTable(table, ApplicationsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ApplicationsTable table, ApplicationsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ApplicationsTable table, int commandTimeout)
      {
        UpdateTable(table, ApplicationsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ApplicationsTable table, ApplicationsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ApplicationsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ApplicationsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ApplicationsTable table, ApplicationsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ApplicationNameColumnName { get { return "ApplicationName"; } }

      public static string LoweredApplicationNameColumnName { get { return "LoweredApplicationName"; } }

      public static string ApplicationIdColumnName { get { return "ApplicationId"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static int ApplicationNameMaxLength { get { return 256; } }

      public static int LoweredApplicationNameMaxLength { get { return 256; } }

      public static int DescriptionMaxLength { get { return 256; } }

      public static bool LoweredApplicationNameExists(String LoweredApplicationName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetApplicationNameByLoweredApplicationName(String LoweredApplicationName)
      {
        return GetApplicationNameByLoweredApplicationName(LoweredApplicationName, null);
      }

      public static String GetApplicationNameByLoweredApplicationName(String LoweredApplicationName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationName FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Guid? GetApplicationIdByLoweredApplicationName(String LoweredApplicationName)
      {
        return _GetApplicationIdByLoweredApplicationName(LoweredApplicationName, null);
      }

      public static Guid GetApplicationIdByLoweredApplicationName(String LoweredApplicationName, Guid defaultValue)
      {
        return _GetApplicationIdByLoweredApplicationName(LoweredApplicationName, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByLoweredApplicationName(String LoweredApplicationName, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetDescriptionByLoweredApplicationName(String LoweredApplicationName)
      {
        return GetDescriptionByLoweredApplicationName(LoweredApplicationName, null);
      }

      public static String GetDescriptionByLoweredApplicationName(String LoweredApplicationName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Description FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByLoweredApplicationName(Column column, String LoweredApplicationName)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ApplicationsTable GetDataByLoweredApplicationName(String LoweredApplicationName)
      {
        return GetDataByLoweredApplicationName(LoweredApplicationName, -1);
      }

      public static ApplicationsTable GetDataByLoweredApplicationName(String LoweredApplicationName, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        return FillTable(cmd, ApplicationsTable.ColumnSet.All);
      }

      public static int UpdateApplicationNameByLoweredApplicationName(String newValue, String LoweredApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationName=@newValue WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredApplicationNameByLoweredApplicationName(String newValue, String LoweredApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET LoweredApplicationName=@newValue WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateApplicationIdByLoweredApplicationName(Guid newValue, String LoweredApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationId=@newValue WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByLoweredApplicationName(String newValue, String LoweredApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET Description=@newValue WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLoweredApplicationName(Column column, object newValue, String LoweredApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET {0}=@newValue WHERE LoweredApplicationName=@LoweredApplicationName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLoweredApplicationName(String LoweredApplicationName)
      {
        return DeleteByLoweredApplicationName(LoweredApplicationName, -1);
      }

      public static int DeleteByLoweredApplicationName(String LoweredApplicationName, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Applications WHERE LoweredApplicationName=@LoweredApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredApplicationName", LoweredApplicationName);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool ApplicationIdExists(Guid ApplicationId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetApplicationNameByApplicationId(Guid ApplicationId)
      {
        return GetApplicationNameByApplicationId(ApplicationId, null);
      }

      public static String GetApplicationNameByApplicationId(Guid ApplicationId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationName FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLoweredApplicationNameByApplicationId(Guid ApplicationId)
      {
        return GetLoweredApplicationNameByApplicationId(ApplicationId, null);
      }

      public static String GetLoweredApplicationNameByApplicationId(Guid ApplicationId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredApplicationName FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionByApplicationId(Guid ApplicationId)
      {
        return GetDescriptionByApplicationId(ApplicationId, null);
      }

      public static String GetDescriptionByApplicationId(Guid ApplicationId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Description FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByApplicationId(Column column, Guid ApplicationId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ApplicationsTable GetDataByApplicationId(Guid ApplicationId)
      {
        return GetDataByApplicationId(ApplicationId, -1);
      }

      public static ApplicationsTable GetDataByApplicationId(Guid ApplicationId, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        return FillTable(cmd, ApplicationsTable.ColumnSet.All);
      }

      public static int UpdateApplicationNameByApplicationId(String newValue, Guid ApplicationId)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationName=@newValue WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredApplicationNameByApplicationId(String newValue, Guid ApplicationId)
      {
        string cmdText = "UPDATE aspnet_Applications SET LoweredApplicationName=@newValue WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateApplicationIdByApplicationId(Guid newValue, Guid ApplicationId)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByApplicationId(String newValue, Guid ApplicationId)
      {
        string cmdText = "UPDATE aspnet_Applications SET Description=@newValue WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationId(Column column, object newValue, Guid ApplicationId)
      {
        string cmdText = "UPDATE aspnet_Applications SET {0}=@newValue WHERE ApplicationId=@ApplicationId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationId(Guid ApplicationId)
      {
        return DeleteByApplicationId(ApplicationId, -1);
      }

      public static int DeleteByApplicationId(Guid ApplicationId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Applications WHERE ApplicationId=@ApplicationId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool ApplicationNameExists(String ApplicationName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetLoweredApplicationNameByApplicationName(String ApplicationName)
      {
        return GetLoweredApplicationNameByApplicationName(ApplicationName, null);
      }

      public static String GetLoweredApplicationNameByApplicationName(String ApplicationName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredApplicationName FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Guid? GetApplicationIdByApplicationName(String ApplicationName)
      {
        return _GetApplicationIdByApplicationName(ApplicationName, null);
      }

      public static Guid GetApplicationIdByApplicationName(String ApplicationName, Guid defaultValue)
      {
        return _GetApplicationIdByApplicationName(ApplicationName, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByApplicationName(String ApplicationName, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetDescriptionByApplicationName(String ApplicationName)
      {
        return GetDescriptionByApplicationName(ApplicationName, null);
      }

      public static String GetDescriptionByApplicationName(String ApplicationName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Description FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByApplicationName(Column column, String ApplicationName)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ApplicationsTable GetDataByApplicationName(String ApplicationName)
      {
        return GetDataByApplicationName(ApplicationName, -1);
      }

      public static ApplicationsTable GetDataByApplicationName(String ApplicationName, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        return FillTable(cmd, ApplicationsTable.ColumnSet.All);
      }

      public static int UpdateApplicationNameByApplicationName(String newValue, String ApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationName=@newValue WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredApplicationNameByApplicationName(String newValue, String ApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET LoweredApplicationName=@newValue WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateApplicationIdByApplicationName(Guid newValue, String ApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET ApplicationId=@newValue WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByApplicationName(String newValue, String ApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET Description=@newValue WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationName(Column column, object newValue, String ApplicationName)
      {
        string cmdText = "UPDATE aspnet_Applications SET {0}=@newValue WHERE ApplicationName=@ApplicationName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationName(String ApplicationName)
      {
        return DeleteByApplicationName(ApplicationName, -1);
      }

      public static int DeleteByApplicationName(String ApplicationName, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Applications WHERE ApplicationName=@ApplicationName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationName", ApplicationName);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ApplicationsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ApplicationsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Applications

    #region aspnetdb.aspnet_Membership

    public partial class MembershipRow : DataRow
    {
      internal MembershipRow(DataRowBuilder rb) : base(rb) {}

      public Guid ApplicationId
      {
        get { return (Guid) this["ApplicationId"]; }
        set { this["ApplicationId"] = value; }
      }

      public Guid UserId
      {
        get { return (Guid) this["UserId"]; }
        set { this["UserId"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public Int32 PasswordFormat
      {
        get { return (Int32) this["PasswordFormat"]; }
        set { this["PasswordFormat"] = value; }
      }

      public String PasswordSalt
      {
        get { return this["PasswordSalt"] as String; }
        set { if (value == null) this["PasswordSalt"] = DBNull.Value; else this["PasswordSalt"] = value; }
      }

      public String MobilePIN
      {
        get { return this["MobilePIN"] as String; }
        set { if (value == null) this["MobilePIN"] = DBNull.Value; else this["MobilePIN"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String LoweredEmail
      {
        get { return this["LoweredEmail"] as String; }
        set { if (value == null) this["LoweredEmail"] = DBNull.Value; else this["LoweredEmail"] = value; }
      }

      public String PasswordQuestion
      {
        get { return this["PasswordQuestion"] as String; }
        set { if (value == null) this["PasswordQuestion"] = DBNull.Value; else this["PasswordQuestion"] = value; }
      }

      public String PasswordAnswer
      {
        get { return this["PasswordAnswer"] as String; }
        set { if (value == null) this["PasswordAnswer"] = DBNull.Value; else this["PasswordAnswer"] = value; }
      }

      public Boolean IsApproved
      {
        get { return (Boolean) this["IsApproved"]; }
        set { this["IsApproved"] = value; }
      }

      public Boolean IsLockedOut
      {
        get { return (Boolean) this["IsLockedOut"]; }
        set { this["IsLockedOut"] = value; }
      }

      public DateTime CreateDate
      {
        get { return (DateTime) this["CreateDate"]; }
        set { this["CreateDate"] = value; }
      }

      public DateTime LastLoginDate
      {
        get { return (DateTime) this["LastLoginDate"]; }
        set { this["LastLoginDate"] = value; }
      }

      public DateTime LastPasswordChangedDate
      {
        get { return (DateTime) this["LastPasswordChangedDate"]; }
        set { this["LastPasswordChangedDate"] = value; }
      }

      public DateTime LastLockoutDate
      {
        get { return (DateTime) this["LastLockoutDate"]; }
        set { this["LastLockoutDate"] = value; }
      }

      public Int32 FailedPasswordAttemptCount
      {
        get { return (Int32) this["FailedPasswordAttemptCount"]; }
        set { this["FailedPasswordAttemptCount"] = value; }
      }

      public DateTime FailedPasswordAttemptWindowStart
      {
        get { return (DateTime) this["FailedPasswordAttemptWindowStart"]; }
        set { this["FailedPasswordAttemptWindowStart"] = value; }
      }

      public Int32 FailedPasswordAnswerAttemptCount
      {
        get { return (Int32) this["FailedPasswordAnswerAttemptCount"]; }
        set { this["FailedPasswordAnswerAttemptCount"] = value; }
      }

      public DateTime FailedPasswordAnswerAttemptWindowStart
      {
        get { return (DateTime) this["FailedPasswordAnswerAttemptWindowStart"]; }
        set { this["FailedPasswordAnswerAttemptWindowStart"] = value; }
      }

      public String Comment
      {
        get { return this["Comment"] as String; }
        set { if (value == null) this["Comment"] = DBNull.Value; else this["Comment"] = value; }
      }
    }

    [Serializable]
    public partial class MembershipTable : TypedTableBase<MembershipRow>
    {
      public MembershipRow this[int index] { get { return (MembershipRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(MembershipRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new MembershipTable(); }

      new public MembershipRow NewRow() { return (MembershipRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new MembershipRow(rb); }

      protected override Type GetRowType()
      { return typeof(MembershipRow); }

      public void RemoveRow(MembershipRow row) { this.Rows.Remove(row); }

      public MembershipRow NewRow(Guid ApplicationId, Guid UserId, String Password, Int32 PasswordFormat, String PasswordSalt, String MobilePIN, String Email, String LoweredEmail, String PasswordQuestion, String PasswordAnswer, Boolean IsApproved, Boolean IsLockedOut, DateTime CreateDate, DateTime LastLoginDate, DateTime LastPasswordChangedDate, DateTime LastLockoutDate, Int32 FailedPasswordAttemptCount, DateTime FailedPasswordAttemptWindowStart, Int32 FailedPasswordAnswerAttemptCount, DateTime FailedPasswordAnswerAttemptWindowStart, String Comment)
      {
        MembershipRow row = NewRow();
        row.ApplicationId = ApplicationId;
        row.UserId = UserId;
        row.Password = Password;
        row.PasswordFormat = PasswordFormat;
        row.PasswordSalt = PasswordSalt;
        row.MobilePIN = MobilePIN;
        row.Email = Email;
        row.LoweredEmail = LoweredEmail;
        row.PasswordQuestion = PasswordQuestion;
        row.PasswordAnswer = PasswordAnswer;
        row.IsApproved = IsApproved;
        row.IsLockedOut = IsLockedOut;
        row.CreateDate = CreateDate;
        row.LastLoginDate = LastLoginDate;
        row.LastPasswordChangedDate = LastPasswordChangedDate;
        row.LastLockoutDate = LastLockoutDate;
        row.FailedPasswordAttemptCount = FailedPasswordAttemptCount;
        row.FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart;
        row.FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount;
        row.FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart;
        row.Comment = Comment;
        return row;
      }

      public void AddRow(Guid ApplicationId, Guid UserId, String Password, Int32 PasswordFormat, String PasswordSalt, String MobilePIN, String Email, String LoweredEmail, String PasswordQuestion, String PasswordAnswer, Boolean IsApproved, Boolean IsLockedOut, DateTime CreateDate, DateTime LastLoginDate, DateTime LastPasswordChangedDate, DateTime LastLockoutDate, Int32 FailedPasswordAttemptCount, DateTime FailedPasswordAttemptWindowStart, Int32 FailedPasswordAnswerAttemptCount, DateTime FailedPasswordAnswerAttemptWindowStart, String Comment)
      {
        MembershipRow row = NewRow(ApplicationId, UserId, Password, PasswordFormat, PasswordSalt, MobilePIN, Email, LoweredEmail, PasswordQuestion, PasswordAnswer, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, Comment);
        AddRow(row);
      }

      public DataColumn ApplicationIdColumn { get { return this.Columns["ApplicationId"]; } }

      public DataColumn UserIdColumn { get { return this.Columns["UserId"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn PasswordFormatColumn { get { return this.Columns["PasswordFormat"]; } }

      public DataColumn PasswordSaltColumn { get { return this.Columns["PasswordSalt"]; } }

      public DataColumn MobilePINColumn { get { return this.Columns["MobilePIN"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn LoweredEmailColumn { get { return this.Columns["LoweredEmail"]; } }

      public DataColumn PasswordQuestionColumn { get { return this.Columns["PasswordQuestion"]; } }

      public DataColumn PasswordAnswerColumn { get { return this.Columns["PasswordAnswer"]; } }

      public DataColumn IsApprovedColumn { get { return this.Columns["IsApproved"]; } }

      public DataColumn IsLockedOutColumn { get { return this.Columns["IsLockedOut"]; } }

      public DataColumn CreateDateColumn { get { return this.Columns["CreateDate"]; } }

      public DataColumn LastLoginDateColumn { get { return this.Columns["LastLoginDate"]; } }

      public DataColumn LastPasswordChangedDateColumn { get { return this.Columns["LastPasswordChangedDate"]; } }

      public DataColumn LastLockoutDateColumn { get { return this.Columns["LastLockoutDate"]; } }

      public DataColumn FailedPasswordAttemptCountColumn { get { return this.Columns["FailedPasswordAttemptCount"]; } }

      public DataColumn FailedPasswordAttemptWindowStartColumn { get { return this.Columns["FailedPasswordAttemptWindowStart"]; } }

      public DataColumn FailedPasswordAnswerAttemptCountColumn { get { return this.Columns["FailedPasswordAnswerAttemptCount"]; } }

      public DataColumn FailedPasswordAnswerAttemptWindowStartColumn { get { return this.Columns["FailedPasswordAnswerAttemptWindowStart"]; } }

      public DataColumn CommentColumn { get { return this.Columns["Comment"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("ApplicationId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("UserId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Password", typeof(String));
        column.MaxLength = 128;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PasswordFormat", typeof(Int32));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PasswordSalt", typeof(String));
        column.MaxLength = 128;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("MobilePIN", typeof(String));
        column.MaxLength = 16;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Email", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LoweredEmail", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PasswordQuestion", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PasswordAnswer", typeof(String));
        column.MaxLength = 128;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("IsApproved", typeof(Boolean));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("IsLockedOut", typeof(Boolean));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("CreateDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastLoginDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastPasswordChangedDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastLockoutDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("FailedPasswordAttemptCount", typeof(Int32));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("FailedPasswordAttemptWindowStart", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("FailedPasswordAnswerAttemptCount", typeof(Int32));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("FailedPasswordAnswerAttemptWindowStart", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Comment", typeof(String));
        column.MaxLength = 1073741823;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public MembershipTable() : this(ColumnSet.All) { }

      public MembershipTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Membership";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected MembershipTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Membership
    {
      public enum Column { ApplicationId, UserId, Password, PasswordFormat, PasswordSalt, MobilePIN, Email, LoweredEmail, PasswordQuestion, PasswordAnswer, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, Comment }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ApplicationId, "ApplicationId" },
        { Column.UserId, "UserId" },
        { Column.Password, "Password" },
        { Column.PasswordFormat, "PasswordFormat" },
        { Column.PasswordSalt, "PasswordSalt" },
        { Column.MobilePIN, "MobilePIN" },
        { Column.Email, "Email" },
        { Column.LoweredEmail, "LoweredEmail" },
        { Column.PasswordQuestion, "PasswordQuestion" },
        { Column.PasswordAnswer, "PasswordAnswer" },
        { Column.IsApproved, "IsApproved" },
        { Column.IsLockedOut, "IsLockedOut" },
        { Column.CreateDate, "CreateDate" },
        { Column.LastLoginDate, "LastLoginDate" },
        { Column.LastPasswordChangedDate, "LastPasswordChangedDate" },
        { Column.LastLockoutDate, "LastLockoutDate" },
        { Column.FailedPasswordAttemptCount, "FailedPasswordAttemptCount" },
        { Column.FailedPasswordAttemptWindowStart, "FailedPasswordAttemptWindowStart" },
        { Column.FailedPasswordAnswerAttemptCount, "FailedPasswordAnswerAttemptCount" },
        { Column.FailedPasswordAnswerAttemptWindowStart, "FailedPasswordAnswerAttemptWindowStart" },
        { Column.Comment, "Comment" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Membership";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid ApplicationId, Guid UserId, String Password, Int32 PasswordFormat, String PasswordSalt, String MobilePIN, String Email, String LoweredEmail, String PasswordQuestion, String PasswordAnswer, Boolean IsApproved, Boolean IsLockedOut, DateTime CreateDate, DateTime LastLoginDate, DateTime LastPasswordChangedDate, DateTime LastLockoutDate, Int32 FailedPasswordAttemptCount, DateTime FailedPasswordAttemptWindowStart, Int32 FailedPasswordAnswerAttemptCount, DateTime FailedPasswordAnswerAttemptWindowStart, String Comment)
      {
        Insert(ApplicationId, UserId, Password, PasswordFormat, PasswordSalt, MobilePIN, Email, LoweredEmail, PasswordQuestion, PasswordAnswer, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, Comment, -1);
      }

      public static void Insert(Guid ApplicationId, Guid UserId, String Password, Int32 PasswordFormat, String PasswordSalt, String MobilePIN, String Email, String LoweredEmail, String PasswordQuestion, String PasswordAnswer, Boolean IsApproved, Boolean IsLockedOut, DateTime CreateDate, DateTime LastLoginDate, DateTime LastPasswordChangedDate, DateTime LastLockoutDate, Int32 FailedPasswordAttemptCount, DateTime FailedPasswordAttemptWindowStart, Int32 FailedPasswordAnswerAttemptCount, DateTime FailedPasswordAnswerAttemptWindowStart, String Comment, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Membership (ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment) VALUES (@ApplicationId,@UserId,@Password,@PasswordFormat,@PasswordSalt,@MobilePIN,@Email,@LoweredEmail,@PasswordQuestion,@PasswordAnswer,@IsApproved,@IsLockedOut,@CreateDate,@LastLoginDate,@LastPasswordChangedDate,@LastLockoutDate,@FailedPasswordAttemptCount,@FailedPasswordAttemptWindowStart,@FailedPasswordAnswerAttemptCount,@FailedPasswordAnswerAttemptWindowStart,@Comment)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "Password", Password);
        VoteSecurityDb.AddCommandParameter(cmd, "PasswordFormat", PasswordFormat);
        VoteSecurityDb.AddCommandParameter(cmd, "PasswordSalt", PasswordSalt);
        VoteSecurityDb.AddCommandParameter(cmd, "MobilePIN", MobilePIN);
        VoteSecurityDb.AddCommandParameter(cmd, "Email", Email);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "PasswordQuestion", PasswordQuestion);
        VoteSecurityDb.AddCommandParameter(cmd, "PasswordAnswer", PasswordAnswer);
        VoteSecurityDb.AddCommandParameter(cmd, "IsApproved", IsApproved);
        VoteSecurityDb.AddCommandParameter(cmd, "IsLockedOut", IsLockedOut);
        VoteSecurityDb.AddCommandParameter(cmd, "CreateDate", CreateDate);
        VoteSecurityDb.AddCommandParameter(cmd, "LastLoginDate", LastLoginDate);
        VoteSecurityDb.AddCommandParameter(cmd, "LastPasswordChangedDate", LastPasswordChangedDate);
        VoteSecurityDb.AddCommandParameter(cmd, "LastLockoutDate", LastLockoutDate);
        VoteSecurityDb.AddCommandParameter(cmd, "FailedPasswordAttemptCount", FailedPasswordAttemptCount);
        VoteSecurityDb.AddCommandParameter(cmd, "FailedPasswordAttemptWindowStart", FailedPasswordAttemptWindowStart);
        VoteSecurityDb.AddCommandParameter(cmd, "FailedPasswordAnswerAttemptCount", FailedPasswordAnswerAttemptCount);
        VoteSecurityDb.AddCommandParameter(cmd, "FailedPasswordAnswerAttemptWindowStart", FailedPasswordAnswerAttemptWindowStart);
        VoteSecurityDb.AddCommandParameter(cmd, "Comment", Comment);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership";
        }
      }

      public static MembershipTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static MembershipTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, MembershipTable.ColumnSet.All);
      }

      public static MembershipTable FillTable(DbCommand command)
      {
        return FillTable(command, MembershipTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static MembershipTable FillTable(DbCommand command, MembershipTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          MembershipTable table = new MembershipTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(MembershipTable table)
      {
        UpdateTable(table, MembershipTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(MembershipTable table, MembershipTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(MembershipTable table, int commandTimeout)
      {
        UpdateTable(table, MembershipTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(MembershipTable table, MembershipTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(MembershipTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, MembershipTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(MembershipTable table, MembershipTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ApplicationIdColumnName { get { return "ApplicationId"; } }

      public static string UserIdColumnName { get { return "UserId"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string PasswordFormatColumnName { get { return "PasswordFormat"; } }

      public static string PasswordSaltColumnName { get { return "PasswordSalt"; } }

      public static string MobilePINColumnName { get { return "MobilePIN"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string LoweredEmailColumnName { get { return "LoweredEmail"; } }

      public static string PasswordQuestionColumnName { get { return "PasswordQuestion"; } }

      public static string PasswordAnswerColumnName { get { return "PasswordAnswer"; } }

      public static string IsApprovedColumnName { get { return "IsApproved"; } }

      public static string IsLockedOutColumnName { get { return "IsLockedOut"; } }

      public static string CreateDateColumnName { get { return "CreateDate"; } }

      public static string LastLoginDateColumnName { get { return "LastLoginDate"; } }

      public static string LastPasswordChangedDateColumnName { get { return "LastPasswordChangedDate"; } }

      public static string LastLockoutDateColumnName { get { return "LastLockoutDate"; } }

      public static string FailedPasswordAttemptCountColumnName { get { return "FailedPasswordAttemptCount"; } }

      public static string FailedPasswordAttemptWindowStartColumnName { get { return "FailedPasswordAttemptWindowStart"; } }

      public static string FailedPasswordAnswerAttemptCountColumnName { get { return "FailedPasswordAnswerAttemptCount"; } }

      public static string FailedPasswordAnswerAttemptWindowStartColumnName { get { return "FailedPasswordAnswerAttemptWindowStart"; } }

      public static string CommentColumnName { get { return "Comment"; } }

      public static int PasswordMaxLength { get { return 128; } }

      public static int PasswordSaltMaxLength { get { return 128; } }

      public static int MobilePINMaxLength { get { return 16; } }

      public static int EmailMaxLength { get { return 256; } }

      public static int LoweredEmailMaxLength { get { return 256; } }

      public static int PasswordQuestionMaxLength { get { return 256; } }

      public static int PasswordAnswerMaxLength { get { return 128; } }

      public static int CommentMaxLength { get { return 1073741823; } }

      public static int CountByApplicationIdLoweredEmail(Guid ApplicationId, String LoweredEmail)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Membership WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByApplicationIdLoweredEmail(Column column, Guid ApplicationId, String LoweredEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Membership WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static MembershipTable GetDataByApplicationIdLoweredEmail(Guid ApplicationId, String LoweredEmail)
      {
        return GetDataByApplicationIdLoweredEmail(ApplicationId, LoweredEmail, -1);
      }

      public static MembershipTable GetDataByApplicationIdLoweredEmail(Guid ApplicationId, String LoweredEmail, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        return FillTable(cmd, MembershipTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByApplicationIdLoweredEmail(Guid newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByApplicationIdLoweredEmail(Guid newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET UserId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET Password=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordFormatByApplicationIdLoweredEmail(Int32 newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordFormat=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordSaltByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordSalt=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMobilePINByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET MobilePIN=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET Email=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredEmailByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET LoweredEmail=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordQuestionByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordQuestion=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordAnswerByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordAnswer=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsApprovedByApplicationIdLoweredEmail(Boolean newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET IsApproved=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLockedOutByApplicationIdLoweredEmail(Boolean newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET IsLockedOut=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateDateByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET CreateDate=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLoginDateByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastLoginDate=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastPasswordChangedDateByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastPasswordChangedDate=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLockoutDateByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastLockoutDate=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAttemptCountByApplicationIdLoweredEmail(Int32 newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAttemptCount=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAttemptWindowStartByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAttemptWindowStart=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAnswerAttemptCountByApplicationIdLoweredEmail(Int32 newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAnswerAttemptCount=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAnswerAttemptWindowStartByApplicationIdLoweredEmail(DateTime newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAnswerAttemptWindowStart=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCommentByApplicationIdLoweredEmail(String newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET Comment=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationIdLoweredEmail(Column column, object newValue, Guid ApplicationId, String LoweredEmail)
      {
        string cmdText = "UPDATE aspnet_Membership SET {0}=@newValue WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationIdLoweredEmail(Guid ApplicationId, String LoweredEmail)
      {
        return DeleteByApplicationIdLoweredEmail(ApplicationId, LoweredEmail, -1);
      }

      public static int DeleteByApplicationIdLoweredEmail(Guid ApplicationId, String LoweredEmail, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Membership WHERE ApplicationId=@ApplicationId AND LoweredEmail=@LoweredEmail";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredEmail", LoweredEmail);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool UserIdExists(Guid UserId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetApplicationIdByUserId(Guid UserId)
      {
        return _GetApplicationIdByUserId(UserId, null);
      }

      public static Guid GetApplicationIdByUserId(Guid UserId, Guid defaultValue)
      {
        return _GetApplicationIdByUserId(UserId, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByUserId(Guid UserId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetPasswordByUserId(Guid UserId)
      {
        return GetPasswordByUserId(UserId, null);
      }

      public static String GetPasswordByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Password FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetPasswordFormatByUserId(Guid UserId)
      {
        return _GetPasswordFormatByUserId(UserId, null);
      }

      public static Int32 GetPasswordFormatByUserId(Guid UserId, Int32 defaultValue)
      {
        return _GetPasswordFormatByUserId(UserId, defaultValue).Value;
      }

      private static Int32? _GetPasswordFormatByUserId(Guid UserId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PasswordFormat FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPasswordSaltByUserId(Guid UserId)
      {
        return GetPasswordSaltByUserId(UserId, null);
      }

      public static String GetPasswordSaltByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PasswordSalt FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMobilePINByUserId(Guid UserId)
      {
        return GetMobilePINByUserId(UserId, null);
      }

      public static String GetMobilePINByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MobilePIN FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailByUserId(Guid UserId)
      {
        return GetEmailByUserId(UserId, null);
      }

      public static String GetEmailByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Email FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLoweredEmailByUserId(Guid UserId)
      {
        return GetLoweredEmailByUserId(UserId, null);
      }

      public static String GetLoweredEmailByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredEmail FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordQuestionByUserId(Guid UserId)
      {
        return GetPasswordQuestionByUserId(UserId, null);
      }

      public static String GetPasswordQuestionByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PasswordQuestion FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordAnswerByUserId(Guid UserId)
      {
        return GetPasswordAnswerByUserId(UserId, null);
      }

      public static String GetPasswordAnswerByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PasswordAnswer FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsApprovedByUserId(Guid UserId)
      {
        return _GetIsApprovedByUserId(UserId, null);
      }

      public static Boolean GetIsApprovedByUserId(Guid UserId, Boolean defaultValue)
      {
        return _GetIsApprovedByUserId(UserId, defaultValue).Value;
      }

      private static Boolean? _GetIsApprovedByUserId(Guid UserId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsApproved FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsLockedOutByUserId(Guid UserId)
      {
        return _GetIsLockedOutByUserId(UserId, null);
      }

      public static Boolean GetIsLockedOutByUserId(Guid UserId, Boolean defaultValue)
      {
        return _GetIsLockedOutByUserId(UserId, defaultValue).Value;
      }

      private static Boolean? _GetIsLockedOutByUserId(Guid UserId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLockedOut FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetCreateDateByUserId(Guid UserId)
      {
        return _GetCreateDateByUserId(UserId, null);
      }

      public static DateTime GetCreateDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetCreateDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetCreateDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CreateDate FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetLastLoginDateByUserId(Guid UserId)
      {
        return _GetLastLoginDateByUserId(UserId, null);
      }

      public static DateTime GetLastLoginDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetLastLoginDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastLoginDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastLoginDate FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetLastPasswordChangedDateByUserId(Guid UserId)
      {
        return _GetLastPasswordChangedDateByUserId(UserId, null);
      }

      public static DateTime GetLastPasswordChangedDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetLastPasswordChangedDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastPasswordChangedDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastPasswordChangedDate FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetLastLockoutDateByUserId(Guid UserId)
      {
        return _GetLastLockoutDateByUserId(UserId, null);
      }

      public static DateTime GetLastLockoutDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetLastLockoutDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastLockoutDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastLockoutDate FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetFailedPasswordAttemptCountByUserId(Guid UserId)
      {
        return _GetFailedPasswordAttemptCountByUserId(UserId, null);
      }

      public static Int32 GetFailedPasswordAttemptCountByUserId(Guid UserId, Int32 defaultValue)
      {
        return _GetFailedPasswordAttemptCountByUserId(UserId, defaultValue).Value;
      }

      private static Int32? _GetFailedPasswordAttemptCountByUserId(Guid UserId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT FailedPasswordAttemptCount FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetFailedPasswordAttemptWindowStartByUserId(Guid UserId)
      {
        return _GetFailedPasswordAttemptWindowStartByUserId(UserId, null);
      }

      public static DateTime GetFailedPasswordAttemptWindowStartByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetFailedPasswordAttemptWindowStartByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetFailedPasswordAttemptWindowStartByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FailedPasswordAttemptWindowStart FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetFailedPasswordAnswerAttemptCountByUserId(Guid UserId)
      {
        return _GetFailedPasswordAnswerAttemptCountByUserId(UserId, null);
      }

      public static Int32 GetFailedPasswordAnswerAttemptCountByUserId(Guid UserId, Int32 defaultValue)
      {
        return _GetFailedPasswordAnswerAttemptCountByUserId(UserId, defaultValue).Value;
      }

      private static Int32? _GetFailedPasswordAnswerAttemptCountByUserId(Guid UserId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT FailedPasswordAnswerAttemptCount FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetFailedPasswordAnswerAttemptWindowStartByUserId(Guid UserId)
      {
        return _GetFailedPasswordAnswerAttemptWindowStartByUserId(UserId, null);
      }

      public static DateTime GetFailedPasswordAnswerAttemptWindowStartByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetFailedPasswordAnswerAttemptWindowStartByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetFailedPasswordAnswerAttemptWindowStartByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FailedPasswordAnswerAttemptWindowStart FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetCommentByUserId(Guid UserId)
      {
        return GetCommentByUserId(UserId, null);
      }

      public static String GetCommentByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Comment FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByUserId(Column column, Guid UserId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Membership WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static MembershipTable GetDataByUserId(Guid UserId)
      {
        return GetDataByUserId(UserId, -1);
      }

      public static MembershipTable GetDataByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return FillTable(cmd, MembershipTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByUserId(Guid newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET ApplicationId=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByUserId(Guid newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET UserId=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET Password=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordFormatByUserId(Int32 newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordFormat=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordSaltByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordSalt=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMobilePINByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET MobilePIN=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET Email=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredEmailByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET LoweredEmail=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordQuestionByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordQuestion=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordAnswerByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET PasswordAnswer=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsApprovedByUserId(Boolean newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET IsApproved=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLockedOutByUserId(Boolean newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET IsLockedOut=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET CreateDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLoginDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastLoginDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastPasswordChangedDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastPasswordChangedDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLockoutDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET LastLockoutDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAttemptCountByUserId(Int32 newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAttemptCount=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAttemptWindowStartByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAttemptWindowStart=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAnswerAttemptCountByUserId(Int32 newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAnswerAttemptCount=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedPasswordAnswerAttemptWindowStartByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET FailedPasswordAnswerAttemptWindowStart=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCommentByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET Comment=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserId(Column column, object newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Membership SET {0}=@newValue WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserId(Guid UserId)
      {
        return DeleteByUserId(UserId, -1);
      }

      public static int DeleteByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Membership WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(MembershipTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case MembershipTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Membership

    #region aspnetdb.aspnet_Paths

    public partial class PathsRow : DataRow
    {
      internal PathsRow(DataRowBuilder rb) : base(rb) {}

      public Guid ApplicationId
      {
        get { return (Guid) this["ApplicationId"]; }
        set { this["ApplicationId"] = value; }
      }

      public Guid PathId
      {
        get { return (Guid) this["PathId"]; }
        set { this["PathId"] = value; }
      }

      public String Path
      {
        get { return this["Path"] as String; }
        set { if (value == null) this["Path"] = DBNull.Value; else this["Path"] = value; }
      }

      public String LoweredPath
      {
        get { return this["LoweredPath"] as String; }
        set { if (value == null) this["LoweredPath"] = DBNull.Value; else this["LoweredPath"] = value; }
      }
    }

    [Serializable]
    public partial class PathsTable : TypedTableBase<PathsRow>
    {
      public PathsRow this[int index] { get { return (PathsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PathsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PathsTable(); }

      new public PathsRow NewRow() { return (PathsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PathsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PathsRow); }

      public void RemoveRow(PathsRow row) { this.Rows.Remove(row); }

      public PathsRow NewRow(Guid ApplicationId, Guid PathId, String Path, String LoweredPath)
      {
        PathsRow row = NewRow();
        row.ApplicationId = ApplicationId;
        row.PathId = PathId;
        row.Path = Path;
        row.LoweredPath = LoweredPath;
        return row;
      }

      public void AddRow(Guid ApplicationId, Guid PathId, String Path, String LoweredPath)
      {
        PathsRow row = NewRow(ApplicationId, PathId, Path, LoweredPath);
        AddRow(row);
      }

      public DataColumn ApplicationIdColumn { get { return this.Columns["ApplicationId"]; } }

      public DataColumn PathIdColumn { get { return this.Columns["PathId"]; } }

      public DataColumn PathColumn { get { return this.Columns["Path"]; } }

      public DataColumn LoweredPathColumn { get { return this.Columns["LoweredPath"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("ApplicationId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PathId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Path", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LoweredPath", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public PathsTable() : this(ColumnSet.All) { }

      public PathsTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Paths";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PathsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Paths
    {
      public enum Column { ApplicationId, PathId, Path, LoweredPath }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ApplicationId, "ApplicationId" },
        { Column.PathId, "PathId" },
        { Column.Path, "Path" },
        { Column.LoweredPath, "LoweredPath" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Paths";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid ApplicationId, Guid PathId, String Path, String LoweredPath)
      {
        Insert(ApplicationId, PathId, Path, LoweredPath, -1);
      }

      public static void Insert(Guid ApplicationId, Guid PathId, String Path, String LoweredPath, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Paths (ApplicationId,PathId,Path,LoweredPath) VALUES (@ApplicationId,@PathId,@Path,@LoweredPath)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "Path", Path);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ApplicationId,PathId,Path,LoweredPath FROM aspnet_Paths";
        }
      }

      public static PathsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static PathsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,PathId,Path,LoweredPath FROM aspnet_Paths";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PathsTable.ColumnSet.All);
      }

      public static PathsTable FillTable(DbCommand command)
      {
        return FillTable(command, PathsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PathsTable FillTable(DbCommand command, PathsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          PathsTable table = new PathsTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PathsTable table)
      {
        UpdateTable(table, PathsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PathsTable table, PathsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PathsTable table, int commandTimeout)
      {
        UpdateTable(table, PathsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PathsTable table, PathsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PathsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PathsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PathsTable table, PathsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ApplicationIdColumnName { get { return "ApplicationId"; } }

      public static string PathIdColumnName { get { return "PathId"; } }

      public static string PathColumnName { get { return "Path"; } }

      public static string LoweredPathColumnName { get { return "LoweredPath"; } }

      public static int PathMaxLength { get { return 256; } }

      public static int LoweredPathMaxLength { get { return 256; } }

      public static bool ApplicationIdLoweredPathExists(Guid ApplicationId, String LoweredPath)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetPathIdByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath)
      {
        return _GetPathIdByApplicationIdLoweredPath(ApplicationId, LoweredPath, null);
      }

      public static Guid GetPathIdByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath, Guid defaultValue)
      {
        return _GetPathIdByApplicationIdLoweredPath(ApplicationId, LoweredPath, defaultValue).Value;
      }

      private static Guid? _GetPathIdByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT PathId FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetPathByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath)
      {
        return GetPathByApplicationIdLoweredPath(ApplicationId, LoweredPath, null);
      }

      public static String GetPathByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Path FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByApplicationIdLoweredPath(Column column, Guid ApplicationId, String LoweredPath)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PathsTable GetDataByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath)
      {
        return GetDataByApplicationIdLoweredPath(ApplicationId, LoweredPath, -1);
      }

      public static PathsTable GetDataByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,PathId,Path,LoweredPath FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        return FillTable(cmd, PathsTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByApplicationIdLoweredPath(Guid newValue, Guid ApplicationId, String LoweredPath)
      {
        string cmdText = "UPDATE aspnet_Paths SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathIdByApplicationIdLoweredPath(Guid newValue, Guid ApplicationId, String LoweredPath)
      {
        string cmdText = "UPDATE aspnet_Paths SET PathId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathByApplicationIdLoweredPath(String newValue, Guid ApplicationId, String LoweredPath)
      {
        string cmdText = "UPDATE aspnet_Paths SET Path=@newValue WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredPathByApplicationIdLoweredPath(String newValue, Guid ApplicationId, String LoweredPath)
      {
        string cmdText = "UPDATE aspnet_Paths SET LoweredPath=@newValue WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationIdLoweredPath(Column column, object newValue, Guid ApplicationId, String LoweredPath)
      {
        string cmdText = "UPDATE aspnet_Paths SET {0}=@newValue WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath)
      {
        return DeleteByApplicationIdLoweredPath(ApplicationId, LoweredPath, -1);
      }

      public static int DeleteByApplicationIdLoweredPath(Guid ApplicationId, String LoweredPath, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Paths WHERE ApplicationId=@ApplicationId AND LoweredPath=@LoweredPath";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredPath", LoweredPath);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool PathIdExists(Guid PathId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetApplicationIdByPathId(Guid PathId)
      {
        return _GetApplicationIdByPathId(PathId, null);
      }

      public static Guid GetApplicationIdByPathId(Guid PathId, Guid defaultValue)
      {
        return _GetApplicationIdByPathId(PathId, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByPathId(Guid PathId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetPathByPathId(Guid PathId)
      {
        return GetPathByPathId(PathId, null);
      }

      public static String GetPathByPathId(Guid PathId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Path FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLoweredPathByPathId(Guid PathId)
      {
        return GetLoweredPathByPathId(PathId, null);
      }

      public static String GetLoweredPathByPathId(Guid PathId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredPath FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPathId(Column column, Guid PathId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Paths WHERE PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PathsTable GetDataByPathId(Guid PathId)
      {
        return GetDataByPathId(PathId, -1);
      }

      public static PathsTable GetDataByPathId(Guid PathId, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,PathId,Path,LoweredPath FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return FillTable(cmd, PathsTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByPathId(Guid newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_Paths SET ApplicationId=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathIdByPathId(Guid newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_Paths SET PathId=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathByPathId(String newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_Paths SET Path=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredPathByPathId(String newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_Paths SET LoweredPath=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPathId(Column column, object newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_Paths SET {0}=@newValue WHERE PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPathId(Guid PathId)
      {
        return DeleteByPathId(PathId, -1);
      }

      public static int DeleteByPathId(Guid PathId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Paths WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PathsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PathsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Paths

    #region aspnetdb.aspnet_PersonalizationAllUsers

    public partial class PersonalizationAllUsersRow : DataRow
    {
      internal PersonalizationAllUsersRow(DataRowBuilder rb) : base(rb) {}

      public Guid PathId
      {
        get { return (Guid) this["PathId"]; }
        set { this["PathId"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] PageSettings
      {
        get { return this["PageSettings"] as Byte[]; }
        set { if (value == null) this["PageSettings"] = DBNull.Value; else this["PageSettings"] = value; }
      }

      public DateTime LastUpdatedDate
      {
        get { return (DateTime) this["LastUpdatedDate"]; }
        set { this["LastUpdatedDate"] = value; }
      }
    }

    [Serializable]
    public partial class PersonalizationAllUsersTable : TypedTableBase<PersonalizationAllUsersRow>
    {
      public PersonalizationAllUsersRow this[int index] { get { return (PersonalizationAllUsersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PersonalizationAllUsersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PersonalizationAllUsersTable(); }

      new public PersonalizationAllUsersRow NewRow() { return (PersonalizationAllUsersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PersonalizationAllUsersRow(rb); }

      protected override Type GetRowType()
      { return typeof(PersonalizationAllUsersRow); }

      public void RemoveRow(PersonalizationAllUsersRow row) { this.Rows.Remove(row); }

      public PersonalizationAllUsersRow NewRow(Guid PathId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        PersonalizationAllUsersRow row = NewRow();
        row.PathId = PathId;
        row.PageSettings = PageSettings;
        row.LastUpdatedDate = LastUpdatedDate;
        return row;
      }

      public void AddRow(Guid PathId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        PersonalizationAllUsersRow row = NewRow(PathId, PageSettings, LastUpdatedDate);
        AddRow(row);
      }

      public DataColumn PathIdColumn { get { return this.Columns["PathId"]; } }

      public DataColumn PageSettingsColumn { get { return this.Columns["PageSettings"]; } }

      public DataColumn LastUpdatedDateColumn { get { return this.Columns["LastUpdatedDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("PathId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PageSettings", typeof(Byte[]));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastUpdatedDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public PersonalizationAllUsersTable() : this(ColumnSet.All) { }

      public PersonalizationAllUsersTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_PersonalizationAllUsers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PersonalizationAllUsersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PersonalizationAllUsers
    {
      public enum Column { PathId, PageSettings, LastUpdatedDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PathId, "PathId" },
        { Column.PageSettings, "PageSettings" },
        { Column.LastUpdatedDate, "LastUpdatedDate" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationAllUsers";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid PathId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        Insert(PathId, PageSettings, LastUpdatedDate, -1);
      }

      public static void Insert(Guid PathId, Byte[] PageSettings, DateTime LastUpdatedDate, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_PersonalizationAllUsers (PathId,PageSettings,LastUpdatedDate) VALUES (@PathId,@PageSettings,@LastUpdatedDate)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "PageSettings", PageSettings);
        VoteSecurityDb.AddCommandParameter(cmd, "LastUpdatedDate", LastUpdatedDate);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PathId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationAllUsers";
        }
      }

      public static PersonalizationAllUsersTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static PersonalizationAllUsersTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PathId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationAllUsers";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PersonalizationAllUsersTable.ColumnSet.All);
      }

      public static PersonalizationAllUsersTable FillTable(DbCommand command)
      {
        return FillTable(command, PersonalizationAllUsersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PersonalizationAllUsersTable FillTable(DbCommand command, PersonalizationAllUsersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          PersonalizationAllUsersTable table = new PersonalizationAllUsersTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PersonalizationAllUsersTable table)
      {
        UpdateTable(table, PersonalizationAllUsersTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationAllUsersTable table, PersonalizationAllUsersTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationAllUsersTable table, int commandTimeout)
      {
        UpdateTable(table, PersonalizationAllUsersTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationAllUsersTable table, PersonalizationAllUsersTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationAllUsersTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PersonalizationAllUsersTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PersonalizationAllUsersTable table, PersonalizationAllUsersTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PathIdColumnName { get { return "PathId"; } }

      public static string PageSettingsColumnName { get { return "PageSettings"; } }

      public static string LastUpdatedDateColumnName { get { return "LastUpdatedDate"; } }

      public static bool PathIdExists(Guid PathId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Byte[] GetPageSettingsByPathId(Guid PathId)
      {
        return GetPageSettingsByPathId(PathId, null);
      }

      public static Byte[] GetPageSettingsByPathId(Guid PathId, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT PageSettings FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetLastUpdatedDateByPathId(Guid PathId)
      {
        return _GetLastUpdatedDateByPathId(PathId, null);
      }

      public static DateTime GetLastUpdatedDateByPathId(Guid PathId, DateTime defaultValue)
      {
        return _GetLastUpdatedDateByPathId(PathId, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdatedDateByPathId(Guid PathId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdatedDate FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPathId(Column column, Guid PathId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PersonalizationAllUsersTable GetDataByPathId(Guid PathId)
      {
        return GetDataByPathId(PathId, -1);
      }

      public static PersonalizationAllUsersTable GetDataByPathId(Guid PathId, int commandTimeout)
      {
        string cmdText = "SELECT PathId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return FillTable(cmd, PersonalizationAllUsersTable.ColumnSet.All);
      }

      public static int UpdatePathIdByPathId(Guid newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationAllUsers SET PathId=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageSettingsByPathId(Byte[] newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationAllUsers SET PageSettings=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdatedDateByPathId(DateTime newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationAllUsers SET LastUpdatedDate=@newValue WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPathId(Column column, object newValue, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationAllUsers SET {0}=@newValue WHERE PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPathId(Guid PathId)
      {
        return DeleteByPathId(PathId, -1);
      }

      public static int DeleteByPathId(Guid PathId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_PersonalizationAllUsers WHERE PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PersonalizationAllUsersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PersonalizationAllUsersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_PersonalizationAllUsers

    #region aspnetdb.aspnet_PersonalizationPerUser

    public partial class PersonalizationPerUserRow : DataRow
    {
      internal PersonalizationPerUserRow(DataRowBuilder rb) : base(rb) {}

      public Guid Id
      {
        get { return (Guid) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Guid PathId
      {
        get { return (Guid) this["PathId"]; }
        set { this["PathId"] = value; }
      }

      public Guid UserId
      {
        get { return (Guid) this["UserId"]; }
        set { this["UserId"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] PageSettings
      {
        get { return this["PageSettings"] as Byte[]; }
        set { if (value == null) this["PageSettings"] = DBNull.Value; else this["PageSettings"] = value; }
      }

      public DateTime LastUpdatedDate
      {
        get { return (DateTime) this["LastUpdatedDate"]; }
        set { this["LastUpdatedDate"] = value; }
      }
    }

    [Serializable]
    public partial class PersonalizationPerUserTable : TypedTableBase<PersonalizationPerUserRow>
    {
      public PersonalizationPerUserRow this[int index] { get { return (PersonalizationPerUserRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PersonalizationPerUserRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PersonalizationPerUserTable(); }

      new public PersonalizationPerUserRow NewRow() { return (PersonalizationPerUserRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PersonalizationPerUserRow(rb); }

      protected override Type GetRowType()
      { return typeof(PersonalizationPerUserRow); }

      public void RemoveRow(PersonalizationPerUserRow row) { this.Rows.Remove(row); }

      public PersonalizationPerUserRow NewRow(Guid Id, Guid PathId, Guid UserId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        PersonalizationPerUserRow row = NewRow();
        row.Id = Id;
        row.PathId = PathId;
        row.UserId = UserId;
        row.PageSettings = PageSettings;
        row.LastUpdatedDate = LastUpdatedDate;
        return row;
      }

      public void AddRow(Guid Id, Guid PathId, Guid UserId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        PersonalizationPerUserRow row = NewRow(Id, PathId, UserId, PageSettings, LastUpdatedDate);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn PathIdColumn { get { return this.Columns["PathId"]; } }

      public DataColumn UserIdColumn { get { return this.Columns["UserId"]; } }

      public DataColumn PageSettingsColumn { get { return this.Columns["PageSettings"]; } }

      public DataColumn LastUpdatedDateColumn { get { return this.Columns["LastUpdatedDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("Id", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PathId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("UserId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PageSettings", typeof(Byte[]));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastUpdatedDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public PersonalizationPerUserTable() : this(ColumnSet.All) { }

      public PersonalizationPerUserTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_PersonalizationPerUser";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PersonalizationPerUserTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PersonalizationPerUser
    {
      public enum Column { Id, PathId, UserId, PageSettings, LastUpdatedDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.PathId, "PathId" },
        { Column.UserId, "UserId" },
        { Column.PageSettings, "PageSettings" },
        { Column.LastUpdatedDate, "LastUpdatedDate" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationPerUser";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid Id, Guid PathId, Guid UserId, Byte[] PageSettings, DateTime LastUpdatedDate)
      {
        Insert(Id, PathId, UserId, PageSettings, LastUpdatedDate, -1);
      }

      public static void Insert(Guid Id, Guid PathId, Guid UserId, Byte[] PageSettings, DateTime LastUpdatedDate, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_PersonalizationPerUser (Id,PathId,UserId,PageSettings,LastUpdatedDate) VALUES (@Id,@PathId,@UserId,@PageSettings,@LastUpdatedDate)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PageSettings", PageSettings);
        VoteSecurityDb.AddCommandParameter(cmd, "LastUpdatedDate", LastUpdatedDate);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser";
        }
      }

      public static PersonalizationPerUserTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static PersonalizationPerUserTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PersonalizationPerUserTable.ColumnSet.All);
      }

      public static PersonalizationPerUserTable FillTable(DbCommand command)
      {
        return FillTable(command, PersonalizationPerUserTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PersonalizationPerUserTable FillTable(DbCommand command, PersonalizationPerUserTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          PersonalizationPerUserTable table = new PersonalizationPerUserTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PersonalizationPerUserTable table)
      {
        UpdateTable(table, PersonalizationPerUserTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationPerUserTable table, PersonalizationPerUserTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationPerUserTable table, int commandTimeout)
      {
        UpdateTable(table, PersonalizationPerUserTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationPerUserTable table, PersonalizationPerUserTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PersonalizationPerUserTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PersonalizationPerUserTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PersonalizationPerUserTable table, PersonalizationPerUserTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string PathIdColumnName { get { return "PathId"; } }

      public static string UserIdColumnName { get { return "UserId"; } }

      public static string PageSettingsColumnName { get { return "PageSettings"; } }

      public static string LastUpdatedDateColumnName { get { return "LastUpdatedDate"; } }

      public static bool PathIdUserIdExists(Guid PathId, Guid UserId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetIdByPathIdUserId(Guid PathId, Guid UserId)
      {
        return _GetIdByPathIdUserId(PathId, UserId, null);
      }

      public static Guid GetIdByPathIdUserId(Guid PathId, Guid UserId, Guid defaultValue)
      {
        return _GetIdByPathIdUserId(PathId, UserId, defaultValue).Value;
      }

      private static Guid? _GetIdByPathIdUserId(Guid PathId, Guid UserId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static Byte[] GetPageSettingsByPathIdUserId(Guid PathId, Guid UserId)
      {
        return GetPageSettingsByPathIdUserId(PathId, UserId, null);
      }

      public static Byte[] GetPageSettingsByPathIdUserId(Guid PathId, Guid UserId, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT PageSettings FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetLastUpdatedDateByPathIdUserId(Guid PathId, Guid UserId)
      {
        return _GetLastUpdatedDateByPathIdUserId(PathId, UserId, null);
      }

      public static DateTime GetLastUpdatedDateByPathIdUserId(Guid PathId, Guid UserId, DateTime defaultValue)
      {
        return _GetLastUpdatedDateByPathIdUserId(PathId, UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdatedDateByPathIdUserId(Guid PathId, Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPathIdUserId(Column column, Guid PathId, Guid UserId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PersonalizationPerUserTable GetDataByPathIdUserId(Guid PathId, Guid UserId)
      {
        return GetDataByPathIdUserId(PathId, UserId, -1);
      }

      public static PersonalizationPerUserTable GetDataByPathIdUserId(Guid PathId, Guid UserId, int commandTimeout)
      {
        string cmdText = "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return FillTable(cmd, PersonalizationPerUserTable.ColumnSet.All);
      }

      public static int UpdateIdByPathIdUserId(Guid newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET Id=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathIdByPathIdUserId(Guid newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PathId=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByPathIdUserId(Guid newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET UserId=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageSettingsByPathIdUserId(Byte[] newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PageSettings=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdatedDateByPathIdUserId(DateTime newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET LastUpdatedDate=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPathIdUserId(Column column, object newValue, Guid PathId, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET {0}=@newValue WHERE PathId=@PathId AND UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPathIdUserId(Guid PathId, Guid UserId)
      {
        return DeleteByPathIdUserId(PathId, UserId, -1);
      }

      public static int DeleteByPathIdUserId(Guid PathId, Guid UserId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_PersonalizationPerUser WHERE PathId=@PathId AND UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool UserIdPathIdExists(Guid UserId, Guid PathId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetIdByUserIdPathId(Guid UserId, Guid PathId)
      {
        return _GetIdByUserIdPathId(UserId, PathId, null);
      }

      public static Guid GetIdByUserIdPathId(Guid UserId, Guid PathId, Guid defaultValue)
      {
        return _GetIdByUserIdPathId(UserId, PathId, defaultValue).Value;
      }

      private static Guid? _GetIdByUserIdPathId(Guid UserId, Guid PathId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static Byte[] GetPageSettingsByUserIdPathId(Guid UserId, Guid PathId)
      {
        return GetPageSettingsByUserIdPathId(UserId, PathId, null);
      }

      public static Byte[] GetPageSettingsByUserIdPathId(Guid UserId, Guid PathId, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT PageSettings FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetLastUpdatedDateByUserIdPathId(Guid UserId, Guid PathId)
      {
        return _GetLastUpdatedDateByUserIdPathId(UserId, PathId, null);
      }

      public static DateTime GetLastUpdatedDateByUserIdPathId(Guid UserId, Guid PathId, DateTime defaultValue)
      {
        return _GetLastUpdatedDateByUserIdPathId(UserId, PathId, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdatedDateByUserIdPathId(Guid UserId, Guid PathId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByUserIdPathId(Column column, Guid UserId, Guid PathId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PersonalizationPerUserTable GetDataByUserIdPathId(Guid UserId, Guid PathId)
      {
        return GetDataByUserIdPathId(UserId, PathId, -1);
      }

      public static PersonalizationPerUserTable GetDataByUserIdPathId(Guid UserId, Guid PathId, int commandTimeout)
      {
        string cmdText = "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return FillTable(cmd, PersonalizationPerUserTable.ColumnSet.All);
      }

      public static int UpdateIdByUserIdPathId(Guid newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET Id=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathIdByUserIdPathId(Guid newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PathId=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByUserIdPathId(Guid newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET UserId=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageSettingsByUserIdPathId(Byte[] newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PageSettings=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdatedDateByUserIdPathId(DateTime newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET LastUpdatedDate=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserIdPathId(Column column, object newValue, Guid UserId, Guid PathId)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET {0}=@newValue WHERE UserId=@UserId AND PathId=@PathId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserIdPathId(Guid UserId, Guid PathId)
      {
        return DeleteByUserIdPathId(UserId, PathId, -1);
      }

      public static int DeleteByUserIdPathId(Guid UserId, Guid PathId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_PersonalizationPerUser WHERE UserId=@UserId AND PathId=@PathId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PathId", PathId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Guid Id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetPathIdById(Guid Id)
      {
        return _GetPathIdById(Id, null);
      }

      public static Guid GetPathIdById(Guid Id, Guid defaultValue)
      {
        return _GetPathIdById(Id, defaultValue).Value;
      }

      private static Guid? _GetPathIdById(Guid Id, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT PathId FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static Guid? GetUserIdById(Guid Id)
      {
        return _GetUserIdById(Id, null);
      }

      public static Guid GetUserIdById(Guid Id, Guid defaultValue)
      {
        return _GetUserIdById(Id, defaultValue).Value;
      }

      private static Guid? _GetUserIdById(Guid Id, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT UserId FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static Byte[] GetPageSettingsById(Guid Id)
      {
        return GetPageSettingsById(Id, null);
      }

      public static Byte[] GetPageSettingsById(Guid Id, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT PageSettings FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetLastUpdatedDateById(Guid Id)
      {
        return _GetLastUpdatedDateById(Id, null);
      }

      public static DateTime GetLastUpdatedDateById(Guid Id, DateTime defaultValue)
      {
        return _GetLastUpdatedDateById(Id, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdatedDateById(Guid Id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnById(Column column, Guid Id)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PersonalizationPerUserTable GetDataById(Guid Id)
      {
        return GetDataById(Id, -1);
      }

      public static PersonalizationPerUserTable GetDataById(Guid Id, int commandTimeout)
      {
        string cmdText = "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        return FillTable(cmd, PersonalizationPerUserTable.ColumnSet.All);
      }

      public static int UpdateIdById(Guid newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePathIdById(Guid newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PathId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdById(Guid newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET UserId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageSettingsById(Byte[] newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET PageSettings=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdatedDateById(DateTime newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET LastUpdatedDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column column, object newValue, Guid Id)
      {
        string cmdText = "UPDATE aspnet_PersonalizationPerUser SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Guid Id)
      {
        return DeleteById(Id, -1);
      }

      public static int DeleteById(Guid Id, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_PersonalizationPerUser WHERE Id=@Id";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Id", Id);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PersonalizationPerUserTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PersonalizationPerUserTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_PersonalizationPerUser

    #region aspnetdb.aspnet_Profile

    public partial class ProfileRow : DataRow
    {
      internal ProfileRow(DataRowBuilder rb) : base(rb) {}

      public Guid UserId
      {
        get { return (Guid) this["UserId"]; }
        set { this["UserId"] = value; }
      }

      public String PropertyNames
      {
        get { return this["PropertyNames"] as String; }
        set { if (value == null) this["PropertyNames"] = DBNull.Value; else this["PropertyNames"] = value; }
      }

      public String PropertyValuesString
      {
        get { return this["PropertyValuesString"] as String; }
        set { if (value == null) this["PropertyValuesString"] = DBNull.Value; else this["PropertyValuesString"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] PropertyValuesBinary
      {
        get { return this["PropertyValuesBinary"] as Byte[]; }
        set { if (value == null) this["PropertyValuesBinary"] = DBNull.Value; else this["PropertyValuesBinary"] = value; }
      }

      public DateTime LastUpdatedDate
      {
        get { return (DateTime) this["LastUpdatedDate"]; }
        set { this["LastUpdatedDate"] = value; }
      }
    }

    [Serializable]
    public partial class ProfileTable : TypedTableBase<ProfileRow>
    {
      public ProfileRow this[int index] { get { return (ProfileRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ProfileRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ProfileTable(); }

      new public ProfileRow NewRow() { return (ProfileRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ProfileRow(rb); }

      protected override Type GetRowType()
      { return typeof(ProfileRow); }

      public void RemoveRow(ProfileRow row) { this.Rows.Remove(row); }

      public ProfileRow NewRow(Guid UserId, String PropertyNames, String PropertyValuesString, Byte[] PropertyValuesBinary, DateTime LastUpdatedDate)
      {
        ProfileRow row = NewRow();
        row.UserId = UserId;
        row.PropertyNames = PropertyNames;
        row.PropertyValuesString = PropertyValuesString;
        row.PropertyValuesBinary = PropertyValuesBinary;
        row.LastUpdatedDate = LastUpdatedDate;
        return row;
      }

      public void AddRow(Guid UserId, String PropertyNames, String PropertyValuesString, Byte[] PropertyValuesBinary, DateTime LastUpdatedDate)
      {
        ProfileRow row = NewRow(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate);
        AddRow(row);
      }

      public DataColumn UserIdColumn { get { return this.Columns["UserId"]; } }

      public DataColumn PropertyNamesColumn { get { return this.Columns["PropertyNames"]; } }

      public DataColumn PropertyValuesStringColumn { get { return this.Columns["PropertyValuesString"]; } }

      public DataColumn PropertyValuesBinaryColumn { get { return this.Columns["PropertyValuesBinary"]; } }

      public DataColumn LastUpdatedDateColumn { get { return this.Columns["LastUpdatedDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("UserId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PropertyNames", typeof(String));
        column.MaxLength = 1073741823;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PropertyValuesString", typeof(String));
        column.MaxLength = 1073741823;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("PropertyValuesBinary", typeof(Byte[]));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastUpdatedDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public ProfileTable() : this(ColumnSet.All) { }

      public ProfileTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Profile";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ProfileTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Profile
    {
      public enum Column { UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.UserId, "UserId" },
        { Column.PropertyNames, "PropertyNames" },
        { Column.PropertyValuesString, "PropertyValuesString" },
        { Column.PropertyValuesBinary, "PropertyValuesBinary" },
        { Column.LastUpdatedDate, "LastUpdatedDate" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Profile";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid UserId, String PropertyNames, String PropertyValuesString, Byte[] PropertyValuesBinary, DateTime LastUpdatedDate)
      {
        Insert(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate, -1);
      }

      public static void Insert(Guid UserId, String PropertyNames, String PropertyValuesString, Byte[] PropertyValuesBinary, DateTime LastUpdatedDate, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Profile (UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate) VALUES (@UserId,@PropertyNames,@PropertyValuesString,@PropertyValuesBinary,@LastUpdatedDate)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "PropertyNames", PropertyNames);
        VoteSecurityDb.AddCommandParameter(cmd, "PropertyValuesString", PropertyValuesString);
        VoteSecurityDb.AddCommandParameter(cmd, "PropertyValuesBinary", PropertyValuesBinary);
        VoteSecurityDb.AddCommandParameter(cmd, "LastUpdatedDate", LastUpdatedDate);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate FROM aspnet_Profile";
        }
      }

      public static ProfileTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ProfileTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate FROM aspnet_Profile";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ProfileTable.ColumnSet.All);
      }

      public static ProfileTable FillTable(DbCommand command)
      {
        return FillTable(command, ProfileTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ProfileTable FillTable(DbCommand command, ProfileTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          ProfileTable table = new ProfileTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ProfileTable table)
      {
        UpdateTable(table, ProfileTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ProfileTable table, ProfileTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ProfileTable table, int commandTimeout)
      {
        UpdateTable(table, ProfileTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ProfileTable table, ProfileTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ProfileTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ProfileTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ProfileTable table, ProfileTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string UserIdColumnName { get { return "UserId"; } }

      public static string PropertyNamesColumnName { get { return "PropertyNames"; } }

      public static string PropertyValuesStringColumnName { get { return "PropertyValuesString"; } }

      public static string PropertyValuesBinaryColumnName { get { return "PropertyValuesBinary"; } }

      public static string LastUpdatedDateColumnName { get { return "LastUpdatedDate"; } }

      public static int PropertyNamesMaxLength { get { return 1073741823; } }

      public static int PropertyValuesStringMaxLength { get { return 1073741823; } }

      public static bool UserIdExists(Guid UserId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPropertyNamesByUserId(Guid UserId)
      {
        return GetPropertyNamesByUserId(UserId, null);
      }

      public static String GetPropertyNamesByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PropertyNames FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPropertyValuesStringByUserId(Guid UserId)
      {
        return GetPropertyValuesStringByUserId(UserId, null);
      }

      public static String GetPropertyValuesStringByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PropertyValuesString FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Byte[] GetPropertyValuesBinaryByUserId(Guid UserId)
      {
        return GetPropertyValuesBinaryByUserId(UserId, null);
      }

      public static Byte[] GetPropertyValuesBinaryByUserId(Guid UserId, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT PropertyValuesBinary FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetLastUpdatedDateByUserId(Guid UserId)
      {
        return _GetLastUpdatedDateByUserId(UserId, null);
      }

      public static DateTime GetLastUpdatedDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetLastUpdatedDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdatedDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdatedDate FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByUserId(Column column, Guid UserId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Profile WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ProfileTable GetDataByUserId(Guid UserId)
      {
        return GetDataByUserId(UserId, -1);
      }

      public static ProfileTable GetDataByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return FillTable(cmd, ProfileTable.ColumnSet.All);
      }

      public static int UpdateUserIdByUserId(Guid newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET UserId=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePropertyNamesByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET PropertyNames=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePropertyValuesStringByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET PropertyValuesString=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePropertyValuesBinaryByUserId(Byte[] newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET PropertyValuesBinary=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdatedDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET LastUpdatedDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserId(Column column, object newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Profile SET {0}=@newValue WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserId(Guid UserId)
      {
        return DeleteByUserId(UserId, -1);
      }

      public static int DeleteByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Profile WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ProfileTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ProfileTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Profile

    #region aspnetdb.aspnet_Roles

    public partial class RolesRow : DataRow
    {
      internal RolesRow(DataRowBuilder rb) : base(rb) {}

      public Guid ApplicationId
      {
        get { return (Guid) this["ApplicationId"]; }
        set { this["ApplicationId"] = value; }
      }

      public Guid RoleId
      {
        get { return (Guid) this["RoleId"]; }
        set { this["RoleId"] = value; }
      }

      public String RoleName
      {
        get { return this["RoleName"] as String; }
        set { if (value == null) this["RoleName"] = DBNull.Value; else this["RoleName"] = value; }
      }

      public String LoweredRoleName
      {
        get { return this["LoweredRoleName"] as String; }
        set { if (value == null) this["LoweredRoleName"] = DBNull.Value; else this["LoweredRoleName"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }
    }

    [Serializable]
    public partial class RolesTable : TypedTableBase<RolesRow>
    {
      public RolesRow this[int index] { get { return (RolesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(RolesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new RolesTable(); }

      new public RolesRow NewRow() { return (RolesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new RolesRow(rb); }

      protected override Type GetRowType()
      { return typeof(RolesRow); }

      public void RemoveRow(RolesRow row) { this.Rows.Remove(row); }

      public RolesRow NewRow(Guid ApplicationId, Guid RoleId, String RoleName, String LoweredRoleName, String Description)
      {
        RolesRow row = NewRow();
        row.ApplicationId = ApplicationId;
        row.RoleId = RoleId;
        row.RoleName = RoleName;
        row.LoweredRoleName = LoweredRoleName;
        row.Description = Description;
        return row;
      }

      public void AddRow(Guid ApplicationId, Guid RoleId, String RoleName, String LoweredRoleName, String Description)
      {
        RolesRow row = NewRow(ApplicationId, RoleId, RoleName, LoweredRoleName, Description);
        AddRow(row);
      }

      public DataColumn ApplicationIdColumn { get { return this.Columns["ApplicationId"]; } }

      public DataColumn RoleIdColumn { get { return this.Columns["RoleId"]; } }

      public DataColumn RoleNameColumn { get { return this.Columns["RoleName"]; } }

      public DataColumn LoweredRoleNameColumn { get { return this.Columns["LoweredRoleName"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("ApplicationId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LoweredRoleName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Description", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public RolesTable() : this(ColumnSet.All) { }

      public RolesTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Roles";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected RolesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Roles
    {
      public enum Column { ApplicationId, RoleId, RoleName, LoweredRoleName, Description }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ApplicationId, "ApplicationId" },
        { Column.RoleId, "RoleId" },
        { Column.RoleName, "RoleName" },
        { Column.LoweredRoleName, "LoweredRoleName" },
        { Column.Description, "Description" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Roles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid ApplicationId, Guid RoleId, String RoleName, String LoweredRoleName, String Description)
      {
        Insert(ApplicationId, RoleId, RoleName, LoweredRoleName, Description, -1);
      }

      public static void Insert(Guid ApplicationId, Guid RoleId, String RoleName, String LoweredRoleName, String Description, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Roles (ApplicationId,RoleId,RoleName,LoweredRoleName,Description) VALUES (@ApplicationId,@RoleId,@RoleName,@LoweredRoleName,@Description)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleName", RoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "Description", Description);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles";
        }
      }

      public static RolesTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static RolesTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, RolesTable.ColumnSet.All);
      }

      public static RolesTable FillTable(DbCommand command)
      {
        return FillTable(command, RolesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static RolesTable FillTable(DbCommand command, RolesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          RolesTable table = new RolesTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(RolesTable table)
      {
        UpdateTable(table, RolesTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesTable table, RolesTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesTable table, int commandTimeout)
      {
        UpdateTable(table, RolesTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesTable table, RolesTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, RolesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(RolesTable table, RolesTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ApplicationIdColumnName { get { return "ApplicationId"; } }

      public static string RoleIdColumnName { get { return "RoleId"; } }

      public static string RoleNameColumnName { get { return "RoleName"; } }

      public static string LoweredRoleNameColumnName { get { return "LoweredRoleName"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static int RoleNameMaxLength { get { return 256; } }

      public static int LoweredRoleNameMaxLength { get { return 256; } }

      public static int DescriptionMaxLength { get { return 256; } }

      public static bool ApplicationIdLoweredRoleNameExists(Guid ApplicationId, String LoweredRoleName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetRoleIdByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName)
      {
        return _GetRoleIdByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, null);
      }

      public static Guid GetRoleIdByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, Guid defaultValue)
      {
        return _GetRoleIdByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, defaultValue).Value;
      }

      private static Guid? _GetRoleIdByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT RoleId FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetRoleNameByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName)
      {
        return GetRoleNameByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, null);
      }

      public static String GetRoleNameByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RoleName FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName)
      {
        return GetDescriptionByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, null);
      }

      public static String GetDescriptionByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Description FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByApplicationIdLoweredRoleName(Column column, Guid ApplicationId, String LoweredRoleName)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static RolesTable GetDataByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName)
      {
        return GetDataByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, -1);
      }

      public static RolesTable GetDataByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        return FillTable(cmd, RolesTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByApplicationIdLoweredRoleName(Guid newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdByApplicationIdLoweredRoleName(Guid newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET RoleId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleNameByApplicationIdLoweredRoleName(String newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET RoleName=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredRoleNameByApplicationIdLoweredRoleName(String newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET LoweredRoleName=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByApplicationIdLoweredRoleName(String newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET Description=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationIdLoweredRoleName(Column column, object newValue, Guid ApplicationId, String LoweredRoleName)
      {
        string cmdText = "UPDATE aspnet_Roles SET {0}=@newValue WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName)
      {
        return DeleteByApplicationIdLoweredRoleName(ApplicationId, LoweredRoleName, -1);
      }

      public static int DeleteByApplicationIdLoweredRoleName(Guid ApplicationId, String LoweredRoleName, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Roles WHERE ApplicationId=@ApplicationId AND LoweredRoleName=@LoweredRoleName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredRoleName", LoweredRoleName);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool RoleIdExists(Guid RoleId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetApplicationIdByRoleId(Guid RoleId)
      {
        return _GetApplicationIdByRoleId(RoleId, null);
      }

      public static Guid GetApplicationIdByRoleId(Guid RoleId, Guid defaultValue)
      {
        return _GetApplicationIdByRoleId(RoleId, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByRoleId(Guid RoleId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetRoleNameByRoleId(Guid RoleId)
      {
        return GetRoleNameByRoleId(RoleId, null);
      }

      public static String GetRoleNameByRoleId(Guid RoleId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RoleName FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLoweredRoleNameByRoleId(Guid RoleId)
      {
        return GetLoweredRoleNameByRoleId(RoleId, null);
      }

      public static String GetLoweredRoleNameByRoleId(Guid RoleId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredRoleName FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionByRoleId(Guid RoleId)
      {
        return GetDescriptionByRoleId(RoleId, null);
      }

      public static String GetDescriptionByRoleId(Guid RoleId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Description FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByRoleId(Column column, Guid RoleId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Roles WHERE RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static RolesTable GetDataByRoleId(Guid RoleId)
      {
        return GetDataByRoleId(RoleId, -1);
      }

      public static RolesTable GetDataByRoleId(Guid RoleId, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return FillTable(cmd, RolesTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByRoleId(Guid newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET ApplicationId=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdByRoleId(Guid newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET RoleId=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleNameByRoleId(String newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET RoleName=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredRoleNameByRoleId(String newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET LoweredRoleName=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByRoleId(String newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET Description=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRoleId(Column column, object newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_Roles SET {0}=@newValue WHERE RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRoleId(Guid RoleId)
      {
        return DeleteByRoleId(RoleId, -1);
      }

      public static int DeleteByRoleId(Guid RoleId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Roles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(RolesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case RolesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Roles

    #region aspnetdb.aspnet_SchemaVersions

    public partial class SchemaVersionsRow : DataRow
    {
      internal SchemaVersionsRow(DataRowBuilder rb) : base(rb) {}

      public String Feature
      {
        get { return this["Feature"] as String; }
        set { if (value == null) this["Feature"] = DBNull.Value; else this["Feature"] = value; }
      }

      public String CompatibleSchemaVersion
      {
        get { return this["CompatibleSchemaVersion"] as String; }
        set { if (value == null) this["CompatibleSchemaVersion"] = DBNull.Value; else this["CompatibleSchemaVersion"] = value; }
      }

      public Boolean IsCurrentVersion
      {
        get { return (Boolean) this["IsCurrentVersion"]; }
        set { this["IsCurrentVersion"] = value; }
      }
    }

    [Serializable]
    public partial class SchemaVersionsTable : TypedTableBase<SchemaVersionsRow>
    {
      public SchemaVersionsRow this[int index] { get { return (SchemaVersionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SchemaVersionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SchemaVersionsTable(); }

      new public SchemaVersionsRow NewRow() { return (SchemaVersionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SchemaVersionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(SchemaVersionsRow); }

      public void RemoveRow(SchemaVersionsRow row) { this.Rows.Remove(row); }

      public SchemaVersionsRow NewRow(String Feature, String CompatibleSchemaVersion, Boolean IsCurrentVersion)
      {
        SchemaVersionsRow row = NewRow();
        row.Feature = Feature;
        row.CompatibleSchemaVersion = CompatibleSchemaVersion;
        row.IsCurrentVersion = IsCurrentVersion;
        return row;
      }

      public void AddRow(String Feature, String CompatibleSchemaVersion, Boolean IsCurrentVersion)
      {
        SchemaVersionsRow row = NewRow(Feature, CompatibleSchemaVersion, IsCurrentVersion);
        AddRow(row);
      }

      public DataColumn FeatureColumn { get { return this.Columns["Feature"]; } }

      public DataColumn CompatibleSchemaVersionColumn { get { return this.Columns["CompatibleSchemaVersion"]; } }

      public DataColumn IsCurrentVersionColumn { get { return this.Columns["IsCurrentVersion"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("Feature", typeof(String));
        column.MaxLength = 128;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("CompatibleSchemaVersion", typeof(String));
        column.MaxLength = 128;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("IsCurrentVersion", typeof(Boolean));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public SchemaVersionsTable() : this(ColumnSet.All) { }

      public SchemaVersionsTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_SchemaVersions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SchemaVersionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SchemaVersions
    {
      public enum Column { Feature, CompatibleSchemaVersion, IsCurrentVersion }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Feature, "Feature" },
        { Column.CompatibleSchemaVersion, "CompatibleSchemaVersion" },
        { Column.IsCurrentVersion, "IsCurrentVersion" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_SchemaVersions";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String Feature, String CompatibleSchemaVersion, Boolean IsCurrentVersion)
      {
        Insert(Feature, CompatibleSchemaVersion, IsCurrentVersion, -1);
      }

      public static void Insert(String Feature, String CompatibleSchemaVersion, Boolean IsCurrentVersion, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_SchemaVersions (Feature,CompatibleSchemaVersion,IsCurrentVersion) VALUES (@Feature,@CompatibleSchemaVersion,@IsCurrentVersion)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        VoteSecurityDb.AddCommandParameter(cmd, "IsCurrentVersion", IsCurrentVersion);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM aspnet_SchemaVersions";
        }
      }

      public static SchemaVersionsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static SchemaVersionsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM aspnet_SchemaVersions";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SchemaVersionsTable.ColumnSet.All);
      }

      public static SchemaVersionsTable FillTable(DbCommand command)
      {
        return FillTable(command, SchemaVersionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SchemaVersionsTable FillTable(DbCommand command, SchemaVersionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          SchemaVersionsTable table = new SchemaVersionsTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SchemaVersionsTable table)
      {
        UpdateTable(table, SchemaVersionsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SchemaVersionsTable table, SchemaVersionsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SchemaVersionsTable table, int commandTimeout)
      {
        UpdateTable(table, SchemaVersionsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SchemaVersionsTable table, SchemaVersionsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SchemaVersionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SchemaVersionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SchemaVersionsTable table, SchemaVersionsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string FeatureColumnName { get { return "Feature"; } }

      public static string CompatibleSchemaVersionColumnName { get { return "CompatibleSchemaVersion"; } }

      public static string IsCurrentVersionColumnName { get { return "IsCurrentVersion"; } }

      public static int FeatureMaxLength { get { return 128; } }

      public static int CompatibleSchemaVersionMaxLength { get { return 128; } }

      public static bool FeatureCompatibleSchemaVersionExists(String Feature, String CompatibleSchemaVersion)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_SchemaVersions WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Boolean? GetIsCurrentVersionByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion)
      {
        return _GetIsCurrentVersionByFeatureCompatibleSchemaVersion(Feature, CompatibleSchemaVersion, null);
      }

      public static Boolean GetIsCurrentVersionByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion, Boolean defaultValue)
      {
        return _GetIsCurrentVersionByFeatureCompatibleSchemaVersion(Feature, CompatibleSchemaVersion, defaultValue).Value;
      }

      private static Boolean? _GetIsCurrentVersionByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCurrentVersion FROM aspnet_SchemaVersions WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByFeatureCompatibleSchemaVersion(Column column, String Feature, String CompatibleSchemaVersion)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_SchemaVersions WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SchemaVersionsTable GetDataByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion)
      {
        return GetDataByFeatureCompatibleSchemaVersion(Feature, CompatibleSchemaVersion, -1);
      }

      public static SchemaVersionsTable GetDataByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion, int commandTimeout)
      {
        string cmdText = "SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM aspnet_SchemaVersions WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        return FillTable(cmd, SchemaVersionsTable.ColumnSet.All);
      }

      public static int UpdateFeatureByFeatureCompatibleSchemaVersion(String newValue, String Feature, String CompatibleSchemaVersion)
      {
        string cmdText = "UPDATE aspnet_SchemaVersions SET Feature=@newValue WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompatibleSchemaVersionByFeatureCompatibleSchemaVersion(String newValue, String Feature, String CompatibleSchemaVersion)
      {
        string cmdText = "UPDATE aspnet_SchemaVersions SET CompatibleSchemaVersion=@newValue WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCurrentVersionByFeatureCompatibleSchemaVersion(Boolean newValue, String Feature, String CompatibleSchemaVersion)
      {
        string cmdText = "UPDATE aspnet_SchemaVersions SET IsCurrentVersion=@newValue WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFeatureCompatibleSchemaVersion(Column column, object newValue, String Feature, String CompatibleSchemaVersion)
      {
        string cmdText = "UPDATE aspnet_SchemaVersions SET {0}=@newValue WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion)
      {
        return DeleteByFeatureCompatibleSchemaVersion(Feature, CompatibleSchemaVersion, -1);
      }

      public static int DeleteByFeatureCompatibleSchemaVersion(String Feature, String CompatibleSchemaVersion, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_SchemaVersions WHERE Feature=@Feature AND CompatibleSchemaVersion=@CompatibleSchemaVersion";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "Feature", Feature);
        VoteSecurityDb.AddCommandParameter(cmd, "CompatibleSchemaVersion", CompatibleSchemaVersion);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SchemaVersionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SchemaVersionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_SchemaVersions

    #region aspnetdb.aspnet_Users

    public partial class UsersRow : DataRow
    {
      internal UsersRow(DataRowBuilder rb) : base(rb) {}

      public Guid ApplicationId
      {
        get { return (Guid) this["ApplicationId"]; }
        set { this["ApplicationId"] = value; }
      }

      public Guid UserId
      {
        get { return (Guid) this["UserId"]; }
        set { this["UserId"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String LoweredUserName
      {
        get { return this["LoweredUserName"] as String; }
        set { if (value == null) this["LoweredUserName"] = DBNull.Value; else this["LoweredUserName"] = value; }
      }

      public String MobileAlias
      {
        get { return this["MobileAlias"] as String; }
        set { if (value == null) this["MobileAlias"] = DBNull.Value; else this["MobileAlias"] = value; }
      }

      public Boolean IsAnonymous
      {
        get { return (Boolean) this["IsAnonymous"]; }
        set { this["IsAnonymous"] = value; }
      }

      public DateTime LastActivityDate
      {
        get { return (DateTime) this["LastActivityDate"]; }
        set { this["LastActivityDate"] = value; }
      }
    }

    [Serializable]
    public partial class UsersTable : TypedTableBase<UsersRow>
    {
      public UsersRow this[int index] { get { return (UsersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(UsersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new UsersTable(); }

      new public UsersRow NewRow() { return (UsersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new UsersRow(rb); }

      protected override Type GetRowType()
      { return typeof(UsersRow); }

      public void RemoveRow(UsersRow row) { this.Rows.Remove(row); }

      public UsersRow NewRow(Guid ApplicationId, Guid UserId, String UserName, String LoweredUserName, String MobileAlias, Boolean IsAnonymous, DateTime LastActivityDate)
      {
        UsersRow row = NewRow();
        row.ApplicationId = ApplicationId;
        row.UserId = UserId;
        row.UserName = UserName;
        row.LoweredUserName = LoweredUserName;
        row.MobileAlias = MobileAlias;
        row.IsAnonymous = IsAnonymous;
        row.LastActivityDate = LastActivityDate;
        return row;
      }

      public void AddRow(Guid ApplicationId, Guid UserId, String UserName, String LoweredUserName, String MobileAlias, Boolean IsAnonymous, DateTime LastActivityDate)
      {
        UsersRow row = NewRow(ApplicationId, UserId, UserName, LoweredUserName, MobileAlias, IsAnonymous, LastActivityDate);
        AddRow(row);
      }

      public DataColumn ApplicationIdColumn { get { return this.Columns["ApplicationId"]; } }

      public DataColumn UserIdColumn { get { return this.Columns["UserId"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn LoweredUserNameColumn { get { return this.Columns["LoweredUserName"]; } }

      public DataColumn MobileAliasColumn { get { return this.Columns["MobileAlias"]; } }

      public DataColumn IsAnonymousColumn { get { return this.Columns["IsAnonymous"]; } }

      public DataColumn LastActivityDateColumn { get { return this.Columns["LastActivityDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("ApplicationId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("UserId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("UserName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LoweredUserName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("MobileAlias", typeof(String));
        column.MaxLength = 16;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("IsAnonymous", typeof(Boolean));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("LastActivityDate", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public UsersTable() : this(ColumnSet.All) { }

      public UsersTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_Users";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected UsersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Users
    {
      public enum Column { ApplicationId, UserId, UserName, LoweredUserName, MobileAlias, IsAnonymous, LastActivityDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ApplicationId, "ApplicationId" },
        { Column.UserId, "UserId" },
        { Column.UserName, "UserName" },
        { Column.LoweredUserName, "LoweredUserName" },
        { Column.MobileAlias, "MobileAlias" },
        { Column.IsAnonymous, "IsAnonymous" },
        { Column.LastActivityDate, "LastActivityDate" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Users";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid ApplicationId, Guid UserId, String UserName, String LoweredUserName, String MobileAlias, Boolean IsAnonymous, DateTime LastActivityDate)
      {
        Insert(ApplicationId, UserId, UserName, LoweredUserName, MobileAlias, IsAnonymous, LastActivityDate, -1);
      }

      public static void Insert(Guid ApplicationId, Guid UserId, String UserName, String LoweredUserName, String MobileAlias, Boolean IsAnonymous, DateTime LastActivityDate, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_Users (ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate) VALUES (@ApplicationId,@UserId,@UserName,@LoweredUserName,@MobileAlias,@IsAnonymous,@LastActivityDate)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "UserName", UserName);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "MobileAlias", MobileAlias);
        VoteSecurityDb.AddCommandParameter(cmd, "IsAnonymous", IsAnonymous);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users";
        }
      }

      public static UsersTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static UsersTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, UsersTable.ColumnSet.All);
      }

      public static UsersTable FillTable(DbCommand command)
      {
        return FillTable(command, UsersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static UsersTable FillTable(DbCommand command, UsersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          UsersTable table = new UsersTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(UsersTable table)
      {
        UpdateTable(table, UsersTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersTable table, UsersTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersTable table, int commandTimeout)
      {
        UpdateTable(table, UsersTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersTable table, UsersTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, UsersTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(UsersTable table, UsersTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ApplicationIdColumnName { get { return "ApplicationId"; } }

      public static string UserIdColumnName { get { return "UserId"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string LoweredUserNameColumnName { get { return "LoweredUserName"; } }

      public static string MobileAliasColumnName { get { return "MobileAlias"; } }

      public static string IsAnonymousColumnName { get { return "IsAnonymous"; } }

      public static string LastActivityDateColumnName { get { return "LastActivityDate"; } }

      public static int UserNameMaxLength { get { return 256; } }

      public static int LoweredUserNameMaxLength { get { return 256; } }

      public static int MobileAliasMaxLength { get { return 16; } }

      public static bool ApplicationIdLoweredUserNameExists(Guid ApplicationId, String LoweredUserName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetUserIdByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return _GetUserIdByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, null);
      }

      public static Guid GetUserIdByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, Guid defaultValue)
      {
        return _GetUserIdByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, defaultValue).Value;
      }

      private static Guid? _GetUserIdByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT UserId FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetUserNameByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return GetUserNameByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, null);
      }

      public static String GetUserNameByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserName FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMobileAliasByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return GetMobileAliasByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, null);
      }

      public static String GetMobileAliasByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MobileAlias FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsAnonymousByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return _GetIsAnonymousByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, null);
      }

      public static Boolean GetIsAnonymousByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, Boolean defaultValue)
      {
        return _GetIsAnonymousByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, defaultValue).Value;
      }

      private static Boolean? _GetIsAnonymousByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsAnonymous FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetLastActivityDateByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return _GetLastActivityDateByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, null);
      }

      public static DateTime GetLastActivityDateByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, DateTime defaultValue)
      {
        return _GetLastActivityDateByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, defaultValue).Value;
      }

      private static DateTime? _GetLastActivityDateByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastActivityDate FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByApplicationIdLoweredUserName(Column column, Guid ApplicationId, String LoweredUserName)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UsersTable GetDataByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return GetDataByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, -1);
      }

      public static UsersTable GetDataByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        return FillTable(cmd, UsersTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByApplicationIdLoweredUserName(Guid newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByApplicationIdLoweredUserName(Guid newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET UserId=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByApplicationIdLoweredUserName(String newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET UserName=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredUserNameByApplicationIdLoweredUserName(String newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET LoweredUserName=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMobileAliasByApplicationIdLoweredUserName(String newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET MobileAlias=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsAnonymousByApplicationIdLoweredUserName(Boolean newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET IsAnonymous=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastActivityDateByApplicationIdLoweredUserName(DateTime newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET LastActivityDate=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationIdLoweredUserName(Column column, object newValue, Guid ApplicationId, String LoweredUserName)
      {
        string cmdText = "UPDATE aspnet_Users SET {0}=@newValue WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName)
      {
        return DeleteByApplicationIdLoweredUserName(ApplicationId, LoweredUserName, -1);
      }

      public static int DeleteByApplicationIdLoweredUserName(Guid ApplicationId, String LoweredUserName, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LoweredUserName=@LoweredUserName";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LoweredUserName", LoweredUserName);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int CountByApplicationIdLastActivityDate(Guid ApplicationId, DateTime LastActivityDate)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByApplicationIdLastActivityDate(Column column, Guid ApplicationId, DateTime LastActivityDate)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UsersTable GetDataByApplicationIdLastActivityDate(Guid ApplicationId, DateTime LastActivityDate)
      {
        return GetDataByApplicationIdLastActivityDate(ApplicationId, LastActivityDate, -1);
      }

      public static UsersTable GetDataByApplicationIdLastActivityDate(Guid ApplicationId, DateTime LastActivityDate, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        return FillTable(cmd, UsersTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByApplicationIdLastActivityDate(Guid newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET ApplicationId=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByApplicationIdLastActivityDate(Guid newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET UserId=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByApplicationIdLastActivityDate(String newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET UserName=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredUserNameByApplicationIdLastActivityDate(String newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET LoweredUserName=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMobileAliasByApplicationIdLastActivityDate(String newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET MobileAlias=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsAnonymousByApplicationIdLastActivityDate(Boolean newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET IsAnonymous=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastActivityDateByApplicationIdLastActivityDate(DateTime newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET LastActivityDate=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByApplicationIdLastActivityDate(Column column, object newValue, Guid ApplicationId, DateTime LastActivityDate)
      {
        string cmdText = "UPDATE aspnet_Users SET {0}=@newValue WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByApplicationIdLastActivityDate(Guid ApplicationId, DateTime LastActivityDate)
      {
        return DeleteByApplicationIdLastActivityDate(ApplicationId, LastActivityDate, -1);
      }

      public static int DeleteByApplicationIdLastActivityDate(Guid ApplicationId, DateTime LastActivityDate, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Users WHERE ApplicationId=@ApplicationId AND LastActivityDate=@LastActivityDate";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationId", ApplicationId);
        VoteSecurityDb.AddCommandParameter(cmd, "LastActivityDate", LastActivityDate);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool UserIdExists(Guid UserId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Guid? GetApplicationIdByUserId(Guid UserId)
      {
        return _GetApplicationIdByUserId(UserId, null);
      }

      public static Guid GetApplicationIdByUserId(Guid UserId, Guid defaultValue)
      {
        return _GetApplicationIdByUserId(UserId, defaultValue).Value;
      }

      private static Guid? _GetApplicationIdByUserId(Guid UserId, Guid? defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationId FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Guid) result;
      }

      public static String GetUserNameByUserId(Guid UserId)
      {
        return GetUserNameByUserId(UserId, null);
      }

      public static String GetUserNameByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserName FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLoweredUserNameByUserId(Guid UserId)
      {
        return GetLoweredUserNameByUserId(UserId, null);
      }

      public static String GetLoweredUserNameByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LoweredUserName FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMobileAliasByUserId(Guid UserId)
      {
        return GetMobileAliasByUserId(UserId, null);
      }

      public static String GetMobileAliasByUserId(Guid UserId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MobileAlias FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsAnonymousByUserId(Guid UserId)
      {
        return _GetIsAnonymousByUserId(UserId, null);
      }

      public static Boolean GetIsAnonymousByUserId(Guid UserId, Boolean defaultValue)
      {
        return _GetIsAnonymousByUserId(UserId, defaultValue).Value;
      }

      private static Boolean? _GetIsAnonymousByUserId(Guid UserId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsAnonymous FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetLastActivityDateByUserId(Guid UserId)
      {
        return _GetLastActivityDateByUserId(UserId, null);
      }

      public static DateTime GetLastActivityDateByUserId(Guid UserId, DateTime defaultValue)
      {
        return _GetLastActivityDateByUserId(UserId, defaultValue).Value;
      }

      private static DateTime? _GetLastActivityDateByUserId(Guid UserId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastActivityDate FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByUserId(Column column, Guid UserId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_Users WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UsersTable GetDataByUserId(Guid UserId)
      {
        return GetDataByUserId(UserId, -1);
      }

      public static UsersTable GetDataByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return FillTable(cmd, UsersTable.ColumnSet.All);
      }

      public static int UpdateApplicationIdByUserId(Guid newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET ApplicationId=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIdByUserId(Guid newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET UserId=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET UserName=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLoweredUserNameByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET LoweredUserName=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMobileAliasByUserId(String newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET MobileAlias=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsAnonymousByUserId(Boolean newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET IsAnonymous=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastActivityDateByUserId(DateTime newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET LastActivityDate=@newValue WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserId(Column column, object newValue, Guid UserId)
      {
        string cmdText = "UPDATE aspnet_Users SET {0}=@newValue WHERE UserId=@UserId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserId(Guid UserId)
      {
        return DeleteByUserId(UserId, -1);
      }

      public static int DeleteByUserId(Guid UserId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_Users WHERE UserId=@UserId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(UsersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case UsersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_Users

    #region aspnetdb.aspnet_UsersInRoles

    public partial class UsersInRolesRow : DataRow
    {
      internal UsersInRolesRow(DataRowBuilder rb) : base(rb) {}

      public Guid UserId
      {
        get { return (Guid) this["UserId"]; }
        set { this["UserId"] = value; }
      }

      public Guid RoleId
      {
        get { return (Guid) this["RoleId"]; }
        set { this["RoleId"] = value; }
      }
    }

    [Serializable]
    public partial class UsersInRolesTable : TypedTableBase<UsersInRolesRow>
    {
      public UsersInRolesRow this[int index] { get { return (UsersInRolesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(UsersInRolesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new UsersInRolesTable(); }

      new public UsersInRolesRow NewRow() { return (UsersInRolesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new UsersInRolesRow(rb); }

      protected override Type GetRowType()
      { return typeof(UsersInRolesRow); }

      public void RemoveRow(UsersInRolesRow row) { this.Rows.Remove(row); }

      public UsersInRolesRow NewRow(Guid UserId, Guid RoleId)
      {
        UsersInRolesRow row = NewRow();
        row.UserId = UserId;
        row.RoleId = RoleId;
        return row;
      }

      public void AddRow(Guid UserId, Guid RoleId)
      {
        UsersInRolesRow row = NewRow(UserId, RoleId);
        AddRow(row);
      }

      public DataColumn UserIdColumn { get { return this.Columns["UserId"]; } }

      public DataColumn RoleIdColumn { get { return this.Columns["RoleId"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("UserId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleId", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public UsersInRolesTable() : this(ColumnSet.All) { }

      public UsersInRolesTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_UsersInRoles";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected UsersInRolesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class UsersInRoles
    {
      public enum Column { UserId, RoleId }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.UserId, "UserId" },
        { Column.RoleId, "RoleId" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_UsersInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid UserId, Guid RoleId)
      {
        Insert(UserId, RoleId, -1);
      }

      public static void Insert(Guid UserId, Guid RoleId, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_UsersInRoles (UserId,RoleId) VALUES (@UserId,@RoleId)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT UserId,RoleId FROM aspnet_UsersInRoles";
        }
      }

      public static UsersInRolesTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static UsersInRolesTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT UserId,RoleId FROM aspnet_UsersInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, UsersInRolesTable.ColumnSet.All);
      }

      public static UsersInRolesTable FillTable(DbCommand command)
      {
        return FillTable(command, UsersInRolesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static UsersInRolesTable FillTable(DbCommand command, UsersInRolesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          UsersInRolesTable table = new UsersInRolesTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(UsersInRolesTable table)
      {
        UpdateTable(table, UsersInRolesTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersInRolesTable table, UsersInRolesTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersInRolesTable table, int commandTimeout)
      {
        UpdateTable(table, UsersInRolesTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersInRolesTable table, UsersInRolesTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UsersInRolesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, UsersInRolesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(UsersInRolesTable table, UsersInRolesTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string UserIdColumnName { get { return "UserId"; } }

      public static string RoleIdColumnName { get { return "RoleId"; } }

      public static int CountByRoleId(Guid RoleId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_UsersInRoles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRoleId(Column column, Guid RoleId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_UsersInRoles WHERE RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UsersInRolesTable GetDataByRoleId(Guid RoleId)
      {
        return GetDataByRoleId(RoleId, -1);
      }

      public static UsersInRolesTable GetDataByRoleId(Guid RoleId, int commandTimeout)
      {
        string cmdText = "SELECT UserId,RoleId FROM aspnet_UsersInRoles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return FillTable(cmd, UsersInRolesTable.ColumnSet.All);
      }

      public static int UpdateUserIdByRoleId(Guid newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET UserId=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdByRoleId(Guid newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET RoleId=@newValue WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRoleId(Column column, object newValue, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET {0}=@newValue WHERE RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRoleId(Guid RoleId)
      {
        return DeleteByRoleId(RoleId, -1);
      }

      public static int DeleteByRoleId(Guid RoleId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_UsersInRoles WHERE RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool UserIdRoleIdExists(Guid UserId, Guid RoleId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_UsersInRoles WHERE UserId=@UserId AND RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByUserIdRoleId(Column column, Guid UserId, Guid RoleId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_UsersInRoles WHERE UserId=@UserId AND RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UsersInRolesTable GetDataByUserIdRoleId(Guid UserId, Guid RoleId)
      {
        return GetDataByUserIdRoleId(UserId, RoleId, -1);
      }

      public static UsersInRolesTable GetDataByUserIdRoleId(Guid UserId, Guid RoleId, int commandTimeout)
      {
        string cmdText = "SELECT UserId,RoleId FROM aspnet_UsersInRoles WHERE UserId=@UserId AND RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return FillTable(cmd, UsersInRolesTable.ColumnSet.All);
      }

      public static int UpdateUserIdByUserIdRoleId(Guid newValue, Guid UserId, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET UserId=@newValue WHERE UserId=@UserId AND RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdByUserIdRoleId(Guid newValue, Guid UserId, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET RoleId=@newValue WHERE UserId=@UserId AND RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserIdRoleId(Column column, object newValue, Guid UserId, Guid RoleId)
      {
        string cmdText = "UPDATE aspnet_UsersInRoles SET {0}=@newValue WHERE UserId=@UserId AND RoleId=@RoleId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserIdRoleId(Guid UserId, Guid RoleId)
      {
        return DeleteByUserIdRoleId(UserId, RoleId, -1);
      }

      public static int DeleteByUserIdRoleId(Guid UserId, Guid RoleId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_UsersInRoles WHERE UserId=@UserId AND RoleId=@RoleId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "UserId", UserId);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleId", RoleId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(UsersInRolesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case UsersInRolesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_UsersInRoles

    #region aspnetdb.aspnet_WebEvent_Events

    public partial class WebEvent_EventsRow : DataRow
    {
      internal WebEvent_EventsRow(DataRowBuilder rb) : base(rb) {}

      public String EventId
      {
        get { return this["EventId"] as String; }
        set { if (value == null) this["EventId"] = DBNull.Value; else this["EventId"] = value; }
      }

      public DateTime EventTimeUtc
      {
        get { return (DateTime) this["EventTimeUtc"]; }
        set { this["EventTimeUtc"] = value; }
      }

      public DateTime EventTime
      {
        get { return (DateTime) this["EventTime"]; }
        set { this["EventTime"] = value; }
      }

      public String EventType
      {
        get { return this["EventType"] as String; }
        set { if (value == null) this["EventType"] = DBNull.Value; else this["EventType"] = value; }
      }

      public Decimal EventSequence
      {
        get { return (Decimal) this["EventSequence"]; }
        set { this["EventSequence"] = value; }
      }

      public Decimal EventOccurrence
      {
        get { return (Decimal) this["EventOccurrence"]; }
        set { this["EventOccurrence"] = value; }
      }

      public Int32 EventCode
      {
        get { return (Int32) this["EventCode"]; }
        set { this["EventCode"] = value; }
      }

      public Int32 EventDetailCode
      {
        get { return (Int32) this["EventDetailCode"]; }
        set { this["EventDetailCode"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }

      public String ApplicationPath
      {
        get { return this["ApplicationPath"] as String; }
        set { if (value == null) this["ApplicationPath"] = DBNull.Value; else this["ApplicationPath"] = value; }
      }

      public String ApplicationVirtualPath
      {
        get { return this["ApplicationVirtualPath"] as String; }
        set { if (value == null) this["ApplicationVirtualPath"] = DBNull.Value; else this["ApplicationVirtualPath"] = value; }
      }

      public String MachineName
      {
        get { return this["MachineName"] as String; }
        set { if (value == null) this["MachineName"] = DBNull.Value; else this["MachineName"] = value; }
      }

      public String RequestUrl
      {
        get { return this["RequestUrl"] as String; }
        set { if (value == null) this["RequestUrl"] = DBNull.Value; else this["RequestUrl"] = value; }
      }

      public String ExceptionType
      {
        get { return this["ExceptionType"] as String; }
        set { if (value == null) this["ExceptionType"] = DBNull.Value; else this["ExceptionType"] = value; }
      }

      public String Details
      {
        get { return this["Details"] as String; }
        set { if (value == null) this["Details"] = DBNull.Value; else this["Details"] = value; }
      }
    }

    [Serializable]
    public partial class WebEvent_EventsTable : TypedTableBase<WebEvent_EventsRow>
    {
      public WebEvent_EventsRow this[int index] { get { return (WebEvent_EventsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WebEvent_EventsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WebEvent_EventsTable(); }

      new public WebEvent_EventsRow NewRow() { return (WebEvent_EventsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WebEvent_EventsRow(rb); }

      protected override Type GetRowType()
      { return typeof(WebEvent_EventsRow); }

      public void RemoveRow(WebEvent_EventsRow row) { this.Rows.Remove(row); }

      public WebEvent_EventsRow NewRow(String EventId, DateTime EventTimeUtc, DateTime EventTime, String EventType, Decimal EventSequence, Decimal EventOccurrence, Int32 EventCode, Int32 EventDetailCode, String Message, String ApplicationPath, String ApplicationVirtualPath, String MachineName, String RequestUrl, String ExceptionType, String Details)
      {
        WebEvent_EventsRow row = NewRow();
        row.EventId = EventId;
        row.EventTimeUtc = EventTimeUtc;
        row.EventTime = EventTime;
        row.EventType = EventType;
        row.EventSequence = EventSequence;
        row.EventOccurrence = EventOccurrence;
        row.EventCode = EventCode;
        row.EventDetailCode = EventDetailCode;
        row.Message = Message;
        row.ApplicationPath = ApplicationPath;
        row.ApplicationVirtualPath = ApplicationVirtualPath;
        row.MachineName = MachineName;
        row.RequestUrl = RequestUrl;
        row.ExceptionType = ExceptionType;
        row.Details = Details;
        return row;
      }

      public void AddRow(String EventId, DateTime EventTimeUtc, DateTime EventTime, String EventType, Decimal EventSequence, Decimal EventOccurrence, Int32 EventCode, Int32 EventDetailCode, String Message, String ApplicationPath, String ApplicationVirtualPath, String MachineName, String RequestUrl, String ExceptionType, String Details)
      {
        WebEvent_EventsRow row = NewRow(EventId, EventTimeUtc, EventTime, EventType, EventSequence, EventOccurrence, EventCode, EventDetailCode, Message, ApplicationPath, ApplicationVirtualPath, MachineName, RequestUrl, ExceptionType, Details);
        AddRow(row);
      }

      public DataColumn EventIdColumn { get { return this.Columns["EventId"]; } }

      public DataColumn EventTimeUtcColumn { get { return this.Columns["EventTimeUtc"]; } }

      public DataColumn EventTimeColumn { get { return this.Columns["EventTime"]; } }

      public DataColumn EventTypeColumn { get { return this.Columns["EventType"]; } }

      public DataColumn EventSequenceColumn { get { return this.Columns["EventSequence"]; } }

      public DataColumn EventOccurrenceColumn { get { return this.Columns["EventOccurrence"]; } }

      public DataColumn EventCodeColumn { get { return this.Columns["EventCode"]; } }

      public DataColumn EventDetailCodeColumn { get { return this.Columns["EventDetailCode"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public DataColumn ApplicationPathColumn { get { return this.Columns["ApplicationPath"]; } }

      public DataColumn ApplicationVirtualPathColumn { get { return this.Columns["ApplicationVirtualPath"]; } }

      public DataColumn MachineNameColumn { get { return this.Columns["MachineName"]; } }

      public DataColumn RequestUrlColumn { get { return this.Columns["RequestUrl"]; } }

      public DataColumn ExceptionTypeColumn { get { return this.Columns["ExceptionType"]; } }

      public DataColumn DetailsColumn { get { return this.Columns["Details"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("EventId", typeof(String));
        column.MaxLength = 32;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventTimeUtc", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventTime", typeof(DateTime));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventType", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventSequence", typeof(Decimal));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventOccurrence", typeof(Decimal));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventCode", typeof(Int32));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("EventDetailCode", typeof(Int32));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Message", typeof(String));
        column.MaxLength = 1024;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("ApplicationPath", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("ApplicationVirtualPath", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("MachineName", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RequestUrl", typeof(String));
        column.MaxLength = 1024;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("ExceptionType", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("Details", typeof(String));
        column.MaxLength = 1073741823;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public WebEvent_EventsTable() : this(ColumnSet.All) { }

      public WebEvent_EventsTable(ColumnSet columnSet)
      {
        this.TableName = "aspnet_WebEvent_Events";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WebEvent_EventsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WebEvent_Events
    {
      public enum Column { EventId, EventTimeUtc, EventTime, EventType, EventSequence, EventOccurrence, EventCode, EventDetailCode, Message, ApplicationPath, ApplicationVirtualPath, MachineName, RequestUrl, ExceptionType, Details }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.EventId, "EventId" },
        { Column.EventTimeUtc, "EventTimeUtc" },
        { Column.EventTime, "EventTime" },
        { Column.EventType, "EventType" },
        { Column.EventSequence, "EventSequence" },
        { Column.EventOccurrence, "EventOccurrence" },
        { Column.EventCode, "EventCode" },
        { Column.EventDetailCode, "EventDetailCode" },
        { Column.Message, "Message" },
        { Column.ApplicationPath, "ApplicationPath" },
        { Column.ApplicationVirtualPath, "ApplicationVirtualPath" },
        { Column.MachineName, "MachineName" },
        { Column.RequestUrl, "RequestUrl" },
        { Column.ExceptionType, "ExceptionType" },
        { Column.Details, "Details" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_WebEvent_Events";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String EventId, DateTime EventTimeUtc, DateTime EventTime, String EventType, Decimal EventSequence, Decimal EventOccurrence, Int32 EventCode, Int32 EventDetailCode, String Message, String ApplicationPath, String ApplicationVirtualPath, String MachineName, String RequestUrl, String ExceptionType, String Details)
      {
        Insert(EventId, EventTimeUtc, EventTime, EventType, EventSequence, EventOccurrence, EventCode, EventDetailCode, Message, ApplicationPath, ApplicationVirtualPath, MachineName, RequestUrl, ExceptionType, Details, -1);
      }

      public static void Insert(String EventId, DateTime EventTimeUtc, DateTime EventTime, String EventType, Decimal EventSequence, Decimal EventOccurrence, Int32 EventCode, Int32 EventDetailCode, String Message, String ApplicationPath, String ApplicationVirtualPath, String MachineName, String RequestUrl, String ExceptionType, String Details, int commandTimeout)
      {
        string cmdText = "INSERT INTO aspnet_WebEvent_Events (EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details) VALUES (@EventId,@EventTimeUtc,@EventTime,@EventType,@EventSequence,@EventOccurrence,@EventCode,@EventDetailCode,@Message,@ApplicationPath,@ApplicationVirtualPath,@MachineName,@RequestUrl,@ExceptionType,@Details)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "EventTimeUtc", EventTimeUtc);
        VoteSecurityDb.AddCommandParameter(cmd, "EventTime", EventTime);
        VoteSecurityDb.AddCommandParameter(cmd, "EventType", EventType);
        VoteSecurityDb.AddCommandParameter(cmd, "EventSequence", EventSequence);
        VoteSecurityDb.AddCommandParameter(cmd, "EventOccurrence", EventOccurrence);
        VoteSecurityDb.AddCommandParameter(cmd, "EventCode", EventCode);
        VoteSecurityDb.AddCommandParameter(cmd, "EventDetailCode", EventDetailCode);
        VoteSecurityDb.AddCommandParameter(cmd, "Message", Message);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationPath", ApplicationPath);
        VoteSecurityDb.AddCommandParameter(cmd, "ApplicationVirtualPath", ApplicationVirtualPath);
        VoteSecurityDb.AddCommandParameter(cmd, "MachineName", MachineName);
        VoteSecurityDb.AddCommandParameter(cmd, "RequestUrl", RequestUrl);
        VoteSecurityDb.AddCommandParameter(cmd, "ExceptionType", ExceptionType);
        VoteSecurityDb.AddCommandParameter(cmd, "Details", Details);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details FROM aspnet_WebEvent_Events";
        }
      }

      public static WebEvent_EventsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static WebEvent_EventsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details FROM aspnet_WebEvent_Events";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WebEvent_EventsTable.ColumnSet.All);
      }

      public static WebEvent_EventsTable FillTable(DbCommand command)
      {
        return FillTable(command, WebEvent_EventsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WebEvent_EventsTable FillTable(DbCommand command, WebEvent_EventsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          WebEvent_EventsTable table = new WebEvent_EventsTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(WebEvent_EventsTable table)
      {
        UpdateTable(table, WebEvent_EventsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(WebEvent_EventsTable table, WebEvent_EventsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(WebEvent_EventsTable table, int commandTimeout)
      {
        UpdateTable(table, WebEvent_EventsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(WebEvent_EventsTable table, WebEvent_EventsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(WebEvent_EventsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, WebEvent_EventsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(WebEvent_EventsTable table, WebEvent_EventsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EventIdColumnName { get { return "EventId"; } }

      public static string EventTimeUtcColumnName { get { return "EventTimeUtc"; } }

      public static string EventTimeColumnName { get { return "EventTime"; } }

      public static string EventTypeColumnName { get { return "EventType"; } }

      public static string EventSequenceColumnName { get { return "EventSequence"; } }

      public static string EventOccurrenceColumnName { get { return "EventOccurrence"; } }

      public static string EventCodeColumnName { get { return "EventCode"; } }

      public static string EventDetailCodeColumnName { get { return "EventDetailCode"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static string ApplicationPathColumnName { get { return "ApplicationPath"; } }

      public static string ApplicationVirtualPathColumnName { get { return "ApplicationVirtualPath"; } }

      public static string MachineNameColumnName { get { return "MachineName"; } }

      public static string RequestUrlColumnName { get { return "RequestUrl"; } }

      public static string ExceptionTypeColumnName { get { return "ExceptionType"; } }

      public static string DetailsColumnName { get { return "Details"; } }

      public static int EventIdMaxLength { get { return 32; } }

      public static int EventTypeMaxLength { get { return 256; } }

      public static int MessageMaxLength { get { return 1024; } }

      public static int ApplicationPathMaxLength { get { return 256; } }

      public static int ApplicationVirtualPathMaxLength { get { return 256; } }

      public static int MachineNameMaxLength { get { return 256; } }

      public static int RequestUrlMaxLength { get { return 1024; } }

      public static int ExceptionTypeMaxLength { get { return 256; } }

      public static int DetailsMaxLength { get { return 1073741823; } }

      public static bool EventIdExists(String EventId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetEventTimeUtcByEventId(String EventId)
      {
        return _GetEventTimeUtcByEventId(EventId, null);
      }

      public static DateTime GetEventTimeUtcByEventId(String EventId, DateTime defaultValue)
      {
        return _GetEventTimeUtcByEventId(EventId, defaultValue).Value;
      }

      private static DateTime? _GetEventTimeUtcByEventId(String EventId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventTimeUtc FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEventTimeByEventId(String EventId)
      {
        return _GetEventTimeByEventId(EventId, null);
      }

      public static DateTime GetEventTimeByEventId(String EventId, DateTime defaultValue)
      {
        return _GetEventTimeByEventId(EventId, defaultValue).Value;
      }

      private static DateTime? _GetEventTimeByEventId(String EventId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventTime FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEventTypeByEventId(String EventId)
      {
        return GetEventTypeByEventId(EventId, null);
      }

      public static String GetEventTypeByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT EventType FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Decimal? GetEventSequenceByEventId(String EventId)
      {
        return _GetEventSequenceByEventId(EventId, null);
      }

      public static Decimal GetEventSequenceByEventId(String EventId, Decimal defaultValue)
      {
        return _GetEventSequenceByEventId(EventId, defaultValue).Value;
      }

      private static Decimal? _GetEventSequenceByEventId(String EventId, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventSequence FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetEventOccurrenceByEventId(String EventId)
      {
        return _GetEventOccurrenceByEventId(EventId, null);
      }

      public static Decimal GetEventOccurrenceByEventId(String EventId, Decimal defaultValue)
      {
        return _GetEventOccurrenceByEventId(EventId, defaultValue).Value;
      }

      private static Decimal? _GetEventOccurrenceByEventId(String EventId, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventOccurrence FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Int32? GetEventCodeByEventId(String EventId)
      {
        return _GetEventCodeByEventId(EventId, null);
      }

      public static Int32 GetEventCodeByEventId(String EventId, Int32 defaultValue)
      {
        return _GetEventCodeByEventId(EventId, defaultValue).Value;
      }

      private static Int32? _GetEventCodeByEventId(String EventId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventCode FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetEventDetailCodeByEventId(String EventId)
      {
        return _GetEventDetailCodeByEventId(EventId, null);
      }

      public static Int32 GetEventDetailCodeByEventId(String EventId, Int32 defaultValue)
      {
        return _GetEventDetailCodeByEventId(EventId, defaultValue).Value;
      }

      private static Int32? _GetEventDetailCodeByEventId(String EventId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EventDetailCode FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetMessageByEventId(String EventId)
      {
        return GetMessageByEventId(EventId, null);
      }

      public static String GetMessageByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Message FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetApplicationPathByEventId(String EventId)
      {
        return GetApplicationPathByEventId(EventId, null);
      }

      public static String GetApplicationPathByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationPath FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetApplicationVirtualPathByEventId(String EventId)
      {
        return GetApplicationVirtualPathByEventId(EventId, null);
      }

      public static String GetApplicationVirtualPathByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ApplicationVirtualPath FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMachineNameByEventId(String EventId)
      {
        return GetMachineNameByEventId(EventId, null);
      }

      public static String GetMachineNameByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MachineName FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRequestUrlByEventId(String EventId)
      {
        return GetRequestUrlByEventId(EventId, null);
      }

      public static String GetRequestUrlByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RequestUrl FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetExceptionTypeByEventId(String EventId)
      {
        return GetExceptionTypeByEventId(EventId, null);
      }

      public static String GetExceptionTypeByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ExceptionType FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDetailsByEventId(String EventId)
      {
        return GetDetailsByEventId(EventId, null);
      }

      public static String GetDetailsByEventId(String EventId, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Details FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByEventId(Column column, String EventId)
      {
        object result;
        string cmdText = "SELECT {0} FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WebEvent_EventsTable GetDataByEventId(String EventId)
      {
        return GetDataByEventId(EventId, -1);
      }

      public static WebEvent_EventsTable GetDataByEventId(String EventId, int commandTimeout)
      {
        string cmdText = "SELECT EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        return FillTable(cmd, WebEvent_EventsTable.ColumnSet.All);
      }

      public static int UpdateEventIdByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventId=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventTimeUtcByEventId(DateTime newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventTimeUtc=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventTimeByEventId(DateTime newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventTime=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventTypeByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventType=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventSequenceByEventId(Decimal newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventSequence=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventOccurrenceByEventId(Decimal newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventOccurrence=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventCodeByEventId(Int32 newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventCode=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEventDetailCodeByEventId(Int32 newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET EventDetailCode=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET Message=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateApplicationPathByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET ApplicationPath=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateApplicationVirtualPathByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET ApplicationVirtualPath=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineNameByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET MachineName=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequestUrlByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET RequestUrl=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExceptionTypeByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET ExceptionType=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDetailsByEventId(String newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET Details=@newValue WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEventId(Column column, object newValue, String EventId)
      {
        string cmdText = "UPDATE aspnet_WebEvent_Events SET {0}=@newValue WHERE EventId=@EventId";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEventId(String EventId)
      {
        return DeleteByEventId(EventId, -1);
      }

      public static int DeleteByEventId(String EventId, int commandTimeout)
      {
        string cmdText = "DELETE FROM aspnet_WebEvent_Events WHERE EventId=@EventId";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "EventId", EventId);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(WebEvent_EventsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WebEvent_EventsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.aspnet_WebEvent_Events

    #region aspnetdb.RolesInRoles

    public partial class RolesInRolesRow : DataRow
    {
      internal RolesInRolesRow(DataRowBuilder rb) : base(rb) {}

      public Guid RoleIdFrom
      {
        get { return (Guid) this["RoleIdFrom"]; }
        set { this["RoleIdFrom"] = value; }
      }

      public Guid RoleIdTo
      {
        get { return (Guid) this["RoleIdTo"]; }
        set { this["RoleIdTo"] = value; }
      }
    }

    [Serializable]
    public partial class RolesInRolesTable : TypedTableBase<RolesInRolesRow>
    {
      public RolesInRolesRow this[int index] { get { return (RolesInRolesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(RolesInRolesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new RolesInRolesTable(); }

      new public RolesInRolesRow NewRow() { return (RolesInRolesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new RolesInRolesRow(rb); }

      protected override Type GetRowType()
      { return typeof(RolesInRolesRow); }

      public void RemoveRow(RolesInRolesRow row) { this.Rows.Remove(row); }

      public RolesInRolesRow NewRow(Guid RoleIdFrom, Guid RoleIdTo)
      {
        RolesInRolesRow row = NewRow();
        row.RoleIdFrom = RoleIdFrom;
        row.RoleIdTo = RoleIdTo;
        return row;
      }

      public void AddRow(Guid RoleIdFrom, Guid RoleIdTo)
      {
        RolesInRolesRow row = NewRow(RoleIdFrom, RoleIdTo);
        AddRow(row);
      }

      public DataColumn RoleIdFromColumn { get { return this.Columns["RoleIdFrom"]; } }

      public DataColumn RoleIdToColumn { get { return this.Columns["RoleIdTo"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("RoleIdFrom", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleIdTo", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public RolesInRolesTable() : this(ColumnSet.All) { }

      public RolesInRolesTable(ColumnSet columnSet)
      {
        this.TableName = "RolesInRoles";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected RolesInRolesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class RolesInRoles
    {
      public enum Column { RoleIdFrom, RoleIdTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.RoleIdFrom, "RoleIdFrom" },
        { Column.RoleIdTo, "RoleIdTo" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM RolesInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Guid RoleIdFrom, Guid RoleIdTo)
      {
        Insert(RoleIdFrom, RoleIdTo, -1);
      }

      public static void Insert(Guid RoleIdFrom, Guid RoleIdTo, int commandTimeout)
      {
        string cmdText = "INSERT INTO RolesInRoles (RoleIdFrom,RoleIdTo) VALUES (@RoleIdFrom,@RoleIdTo)";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT RoleIdFrom,RoleIdTo FROM RolesInRoles";
        }
      }

      public static RolesInRolesTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static RolesInRolesTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT RoleIdFrom,RoleIdTo FROM RolesInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, RolesInRolesTable.ColumnSet.All);
      }

      public static RolesInRolesTable FillTable(DbCommand command)
      {
        return FillTable(command, RolesInRolesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static RolesInRolesTable FillTable(DbCommand command, RolesInRolesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          RolesInRolesTable table = new RolesInRolesTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(RolesInRolesTable table)
      {
        UpdateTable(table, RolesInRolesTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesInRolesTable table, RolesInRolesTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesInRolesTable table, int commandTimeout)
      {
        UpdateTable(table, RolesInRolesTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesInRolesTable table, RolesInRolesTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(RolesInRolesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, RolesInRolesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(RolesInRolesTable table, RolesInRolesTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(cmd);;
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteSecurityDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string RoleIdFromColumnName { get { return "RoleIdFrom"; } }

      public static string RoleIdToColumnName { get { return "RoleIdTo"; } }

      public static int CountByRoleIdFrom(Guid RoleIdFrom)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRoleIdFrom(Column column, Guid RoleIdFrom)
      {
        object result;
        string cmdText = "SELECT {0} FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static RolesInRolesTable GetDataByRoleIdFrom(Guid RoleIdFrom)
      {
        return GetDataByRoleIdFrom(RoleIdFrom, -1);
      }

      public static RolesInRolesTable GetDataByRoleIdFrom(Guid RoleIdFrom, int commandTimeout)
      {
        string cmdText = "SELECT RoleIdFrom,RoleIdTo FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        return FillTable(cmd, RolesInRolesTable.ColumnSet.All);
      }

      public static int UpdateRoleIdFromByRoleIdFrom(Guid newValue, Guid RoleIdFrom)
      {
        string cmdText = "UPDATE RolesInRoles SET RoleIdFrom=@newValue WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdToByRoleIdFrom(Guid newValue, Guid RoleIdFrom)
      {
        string cmdText = "UPDATE RolesInRoles SET RoleIdTo=@newValue WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRoleIdFrom(Column column, object newValue, Guid RoleIdFrom)
      {
        string cmdText = "UPDATE RolesInRoles SET {0}=@newValue WHERE RoleIdFrom=@RoleIdFrom";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRoleIdFrom(Guid RoleIdFrom)
      {
        return DeleteByRoleIdFrom(RoleIdFrom, -1);
      }

      public static int DeleteByRoleIdFrom(Guid RoleIdFrom, int commandTimeout)
      {
        string cmdText = "DELETE FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static bool RoleIdFromRoleIdToExists(Guid RoleIdFrom, Guid RoleIdTo)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByRoleIdFromRoleIdTo(Column column, Guid RoleIdFrom, Guid RoleIdTo)
      {
        object result;
        string cmdText = "SELECT {0} FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static RolesInRolesTable GetDataByRoleIdFromRoleIdTo(Guid RoleIdFrom, Guid RoleIdTo)
      {
        return GetDataByRoleIdFromRoleIdTo(RoleIdFrom, RoleIdTo, -1);
      }

      public static RolesInRolesTable GetDataByRoleIdFromRoleIdTo(Guid RoleIdFrom, Guid RoleIdTo, int commandTimeout)
      {
        string cmdText = "SELECT RoleIdFrom,RoleIdTo FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        return FillTable(cmd, RolesInRolesTable.ColumnSet.All);
      }

      public static int UpdateRoleIdFromByRoleIdFromRoleIdTo(Guid newValue, Guid RoleIdFrom, Guid RoleIdTo)
      {
        string cmdText = "UPDATE RolesInRoles SET RoleIdFrom=@newValue WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRoleIdToByRoleIdFromRoleIdTo(Guid newValue, Guid RoleIdFrom, Guid RoleIdTo)
      {
        string cmdText = "UPDATE RolesInRoles SET RoleIdTo=@newValue WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRoleIdFromRoleIdTo(Column column, object newValue, Guid RoleIdFrom, Guid RoleIdTo)
      {
        string cmdText = "UPDATE RolesInRoles SET {0}=@newValue WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        VoteSecurityDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRoleIdFromRoleIdTo(Guid RoleIdFrom, Guid RoleIdTo)
      {
        return DeleteByRoleIdFromRoleIdTo(RoleIdFrom, RoleIdTo, -1);
      }

      public static int DeleteByRoleIdFromRoleIdTo(Guid RoleIdFrom, Guid RoleIdTo, int commandTimeout)
      {
        string cmdText = "DELETE FROM RolesInRoles WHERE RoleIdFrom=@RoleIdFrom AND RoleIdTo=@RoleIdTo";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdTo", RoleIdTo);
        return VoteSecurityDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(RolesInRolesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case RolesInRolesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.RolesInRoles

    #region aspnetdb.vw_RolesInRoles

    public partial class RolesInRolesViewRow : DataRow
    {
      internal RolesInRolesViewRow(DataRowBuilder rb) : base(rb) {}

      public Guid RoleIdFrom
      {
        get { return (Guid) this["RoleIdFrom"]; }
        set { this["RoleIdFrom"] = value; }
      }

      public Guid RoleIdTo
      {
        get { return (Guid) this["RoleIdTo"]; }
        set { this["RoleIdTo"] = value; }
      }

      public String RoleNameFrom
      {
        get { return this["RoleNameFrom"] as String; }
        set { if (value == null) this["RoleNameFrom"] = DBNull.Value; else this["RoleNameFrom"] = value; }
      }

      public String RoleNameTo
      {
        get { return this["RoleNameTo"] as String; }
        set { if (value == null) this["RoleNameTo"] = DBNull.Value; else this["RoleNameTo"] = value; }
      }
    }

    [Serializable]
    public partial class RolesInRolesViewTable : TypedTableBase<RolesInRolesViewRow>
    {
      public RolesInRolesViewRow this[int index] { get { return (RolesInRolesViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(RolesInRolesViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new RolesInRolesViewTable(); }

      new public RolesInRolesViewRow NewRow() { return (RolesInRolesViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new RolesInRolesViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(RolesInRolesViewRow); }

      public void RemoveRow(RolesInRolesViewRow row) { this.Rows.Remove(row); }

      public RolesInRolesViewRow NewRow(Guid RoleIdFrom, Guid RoleIdTo, String RoleNameFrom, String RoleNameTo)
      {
        RolesInRolesViewRow row = NewRow();
        row.RoleIdFrom = RoleIdFrom;
        row.RoleIdTo = RoleIdTo;
        row.RoleNameFrom = RoleNameFrom;
        row.RoleNameTo = RoleNameTo;
        return row;
      }

      public void AddRow(Guid RoleIdFrom, Guid RoleIdTo, String RoleNameFrom, String RoleNameTo)
      {
        RolesInRolesViewRow row = NewRow(RoleIdFrom, RoleIdTo, RoleNameFrom, RoleNameTo);
        AddRow(row);
      }

      public DataColumn RoleIdFromColumn { get { return this.Columns["RoleIdFrom"]; } }

      public DataColumn RoleIdToColumn { get { return this.Columns["RoleIdTo"]; } }

      public DataColumn RoleNameFromColumn { get { return this.Columns["RoleNameFrom"]; } }

      public DataColumn RoleNameToColumn { get { return this.Columns["RoleNameTo"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn column;
        column = new DataColumn("RoleIdFrom", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleIdTo", typeof(Guid));
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleNameFrom", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
        column = new DataColumn("RoleNameTo", typeof(String));
        column.MaxLength = 256;
        column.AllowDBNull = false;
        base.Columns.Add(column);
      }

      public RolesInRolesViewTable() : this(ColumnSet.All) { }

      public RolesInRolesViewTable(ColumnSet columnSet)
      {
        this.TableName = "vw_RolesInRoles";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected RolesInRolesViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class RolesInRolesView
    {
      public enum Column { RoleIdFrom, RoleIdTo, RoleNameFrom, RoleNameTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.RoleIdFrom, "RoleIdFrom" },
        { Column.RoleIdTo, "RoleIdTo" },
        { Column.RoleNameFrom, "RoleNameFrom" },
        { Column.RoleNameTo, "RoleNameTo" } };

      public static string GetColumnName(Column column)
      {
        return ColumnDictionary[column];
      }

      public static Column GetColumn(string columnName)
      {
        var match = ColumnDictionary
         .Where(kvp => kvp.Value == columnName)
         .SingleOrDefault();
        if (string.IsNullOrWhiteSpace(match.Value))
          throw new ApplicationException("Column name '" + columnName + "' not found");
        return match.Key;
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM vw_RolesInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT RoleIdFrom,RoleIdTo,RoleNameFrom,RoleNameTo FROM vw_RolesInRoles";
        }
      }

      public static RolesInRolesViewTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static RolesInRolesViewTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT RoleIdFrom,RoleIdTo,RoleNameFrom,RoleNameTo FROM vw_RolesInRoles";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, RolesInRolesViewTable.ColumnSet.All);
      }

      public static RolesInRolesViewTable FillTable(DbCommand command)
      {
        return FillTable(command, RolesInRolesViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static RolesInRolesViewTable FillTable(DbCommand command, RolesInRolesViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteSecurityDb.GetOpenConnection())
        {
          command.Connection = cn;
          RolesInRolesViewTable table = new RolesInRolesViewTable(columnSet);
          DbDataAdapter adapter = VoteSecurityDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string RoleIdFromColumnName { get { return "RoleIdFrom"; } }

      public static string RoleIdToColumnName { get { return "RoleIdTo"; } }

      public static string RoleNameFromColumnName { get { return "RoleNameFrom"; } }

      public static string RoleNameToColumnName { get { return "RoleNameTo"; } }

      public static int RoleNameFromMaxLength { get { return 256; } }

      public static int RoleNameToMaxLength { get { return 256; } }

      public static int CountByRoleIdFrom(Guid RoleIdFrom)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM vw_RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRoleIdFrom(Column column, Guid RoleIdFrom)
      {
        object result;
        string cmdText = "SELECT {0} FROM vw_RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        cmdText = string.Format(cmdText, GetColumnName(column));
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, -1);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        result = VoteSecurityDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static RolesInRolesViewTable GetDataByRoleIdFrom(Guid RoleIdFrom)
      {
        return GetDataByRoleIdFrom(RoleIdFrom, -1);
      }

      public static RolesInRolesViewTable GetDataByRoleIdFrom(Guid RoleIdFrom, int commandTimeout)
      {
        string cmdText = "SELECT RoleIdFrom,RoleIdTo,RoleNameFrom,RoleNameTo FROM vw_RolesInRoles WHERE RoleIdFrom=@RoleIdFrom";
        DbCommand cmd = VoteSecurityDb.GetCommand(cmdText, commandTimeout);
        VoteSecurityDb.AddCommandParameter(cmd, "RoleIdFrom", RoleIdFrom);
        return FillTable(cmd, RolesInRolesViewTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(RolesInRolesViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case RolesInRolesViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }
    }

    #endregion aspnetdb.vw_RolesInRoles
  }
}
