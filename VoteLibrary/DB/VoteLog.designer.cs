//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Web.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using static System.String;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteLog
  {
    #region votelog Database

    public static partial class VoteLogDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=votelog";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteLogDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(WebConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteLog.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (IsNullOrWhiteSpace(connectionString))
          connectionString = WebConfigurationManager.AppSettings["CnVoteLog.MySql"];
        if (!IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout = -1)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion votelog Database

    #region votelog.Log301Redirect

    public partial class Log301RedirectRow : DataRow
    {
      internal Log301RedirectRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String PageFrom
      {
        get { return this["PageFrom"] as String; }
        set { if (value == null) this["PageFrom"] = DBNull.Value; else this["PageFrom"] = value; }
      }

      public String PageTo
      {
        get { return this["PageTo"] as String; }
        set { if (value == null) this["PageTo"] = DBNull.Value; else this["PageTo"] = value; }
      }
    }

    [Serializable]
    public partial class Log301RedirectTable : TypedTableBase<Log301RedirectRow>
    {
      public Log301RedirectRow this[int index] { get { return (Log301RedirectRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Log301RedirectRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Log301RedirectTable(); }

      new public Log301RedirectRow NewRow() { return (Log301RedirectRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Log301RedirectRow(rb); }

      protected override Type GetRowType()
      { return typeof(Log301RedirectRow); }

      public void RemoveRow(Log301RedirectRow row) { this.Rows.Remove(row); }

      public Log301RedirectRow NewRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow(primaryKey, dateStamp, pageFrom, pageTo);
        AddRow(row);
      }

      public Log301RedirectRow NewRow(DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow();
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow(dateStamp, pageFrom, pageTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageFromColumn { get { return this.Columns["PageFrom"]; } }

      public DataColumn PageToColumn { get { return this.Columns["PageTo"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Log301RedirectTable() : this(ColumnSet.All) { }

      public Log301RedirectTable(ColumnSet columnSet)
      {
        this.TableName = "Log301Redirect";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Log301RedirectTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Log301Redirect
    {
      public const string TableName = "Log301Redirect";

      public enum Column { PrimaryKey, DateStamp, PageFrom, PageTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.PageFrom, "PageFrom" },
        { Column.PageTo, "PageTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log301Redirect (PrimaryKey,DateStamp,PageFrom,PageTo) VALUES (@PrimaryKey,@DateStamp,@PageFrom,@PageTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String pageFrom, String pageTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log301Redirect (DateStamp,PageFrom,PageTo) VALUES (@DateStamp,@PageFrom,@PageTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect";
        }
      }

      public static Log301RedirectTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Log301RedirectTable.ColumnSet.All);
      }

      public static Log301RedirectTable FillTable(DbCommand command)
      {
        return FillTable(command, Log301RedirectTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Log301RedirectTable FillTable(DbCommand command, Log301RedirectTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          Log301RedirectTable table = new Log301RedirectTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Log301RedirectTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Log301RedirectTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Log301RedirectTable table, Log301RedirectTable.ColumnSet columnSet = Log301RedirectTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageFromColumnName { get { return "PageFrom"; } }

      public static string PageToColumnName { get { return "PageTo"; } }

      public static int PageFromMaxLength { get { return int.MaxValue; } }

      public static int PageToMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageFrom FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageTo FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Log301RedirectTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, Log301RedirectTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PageFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PageTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Log301RedirectTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Log301RedirectTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Log301Redirect()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.Log301Redirect

    #region votelog.Log404PageNotFound

    public partial class Log404PageNotFoundRow : DataRow
    {
      internal Log404PageNotFoundRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class Log404PageNotFoundTable : TypedTableBase<Log404PageNotFoundRow>
    {
      public Log404PageNotFoundRow this[int index] { get { return (Log404PageNotFoundRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Log404PageNotFoundRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Log404PageNotFoundTable(); }

      new public Log404PageNotFoundRow NewRow() { return (Log404PageNotFoundRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Log404PageNotFoundRow(rb); }

      protected override Type GetRowType()
      { return typeof(Log404PageNotFoundRow); }

      public void RemoveRow(Log404PageNotFoundRow row) { this.Rows.Remove(row); }

      public Log404PageNotFoundRow NewRow(Int32 primaryKey, DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow(primaryKey, dateStamp, page, message);
        AddRow(row);
      }

      public Log404PageNotFoundRow NewRow(DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow(dateStamp, page, message);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Log404PageNotFoundTable() : this(ColumnSet.All) { }

      public Log404PageNotFoundTable(ColumnSet columnSet)
      {
        this.TableName = "Log404PageNotFound";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Log404PageNotFoundTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Log404PageNotFound
    {
      public const string TableName = "Log404PageNotFound";

      public enum Column { PrimaryKey, DateStamp, Page, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Page, "Page" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String page, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log404PageNotFound (PrimaryKey,DateStamp,Page,Message) VALUES (@PrimaryKey,@DateStamp,@Page,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String page, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log404PageNotFound (DateStamp,Page,Message) VALUES (@DateStamp,@Page,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound";
        }
      }

      public static Log404PageNotFoundTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Log404PageNotFoundTable.ColumnSet.All);
      }

      public static Log404PageNotFoundTable FillTable(DbCommand command)
      {
        return FillTable(command, Log404PageNotFoundTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Log404PageNotFoundTable FillTable(DbCommand command, Log404PageNotFoundTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          Log404PageNotFoundTable table = new Log404PageNotFoundTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Log404PageNotFoundTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Log404PageNotFoundTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Log404PageNotFoundTable table, Log404PageNotFoundTable.ColumnSet columnSet = Log404PageNotFoundTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Log404PageNotFoundTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, Log404PageNotFoundTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Log404PageNotFoundTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Log404PageNotFoundTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Log404PageNotFound()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.Log404PageNotFound

    #region votelog.LogAdminData

    public partial class LogAdminDataRow : DataRow
    {
      internal LogAdminDataRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogAdminDataTable : TypedTableBase<LogAdminDataRow>
    {
      public LogAdminDataRow this[int index] { get { return (LogAdminDataRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAdminDataRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAdminDataTable(); }

      new public LogAdminDataRow NewRow() { return (LogAdminDataRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAdminDataRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAdminDataRow); }

      public void RemoveRow(LogAdminDataRow row) { this.Rows.Remove(row); }

      public LogAdminDataRow NewRow(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow();
        row.Id = id;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow(id, dateStamp, userSecurity, userName, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogAdminDataRow NewRow(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow(dateStamp, userSecurity, userName, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogAdminDataTable() : this(ColumnSet.All) { }

      public LogAdminDataTable(ColumnSet columnSet)
      {
        this.TableName = "LogAdminData";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogAdminDataTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAdminData
    {
      public const string TableName = "LogAdminData";

      public enum Column { Id, DateStamp, UserSecurity, UserName, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAdminData (Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo) VALUES (@Id,@DateStamp,@UserSecurity,@UserName,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAdminData (DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData";
        }
      }

      public static LogAdminDataTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.All);
      }

      public static LogAdminDataTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAdminDataTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAdminDataTable FillTable(DbCommand command, LogAdminDataTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAdminDataTable table = new LogAdminDataTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAdminDataTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAdminDataTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAdminDataTable table, LogAdminDataTable.ColumnSet columnSet = LogAdminDataTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAdminData WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAdminDataTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET UserSecurity=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataItem=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataFrom=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataTo=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogAdminData";
        }
      }

      public static LogAdminDataTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogAdminDataTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogAdminDataTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogAdminDataTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogAdminDataTable GetBillingDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogAdminDataTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAdminDataTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogAdminDataTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogAdminData()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogAdminData

    #region votelog.LogBallotSharing

    public partial class LogBallotSharingRow : DataRow
    {
      internal LogBallotSharingRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime Datestamp
      {
        get { return (DateTime) this["Datestamp"]; }
        set { this["Datestamp"] = value; }
      }

      public Int32 Shares
      {
        get { return (Int32) this["Shares"]; }
        set { this["Shares"] = value; }
      }

      public String Url
      {
        get { return this["Url"] as String; }
        set { if (value == null) this["Url"] = DBNull.Value; else this["Url"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String NewElectionKey
      {
        get { return this["NewElectionKey"] as String; }
        set { if (value == null) this["NewElectionKey"] = DBNull.Value; else this["NewElectionKey"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String Choices
      {
        get { return this["Choices"] as String; }
        set { if (value == null) this["Choices"] = DBNull.Value; else this["Choices"] = value; }
      }

      public String District
      {
        get { return this["District"] as String; }
        set { if (value == null) this["District"] = DBNull.Value; else this["District"] = value; }
      }

      public String Place
      {
        get { return this["Place"] as String; }
        set { if (value == null) this["Place"] = DBNull.Value; else this["Place"] = value; }
      }
    }

    [Serializable]
    public partial class LogBallotSharingTable : TypedTableBase<LogBallotSharingRow>
    {
      public LogBallotSharingRow this[int index] { get { return (LogBallotSharingRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogBallotSharingRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogBallotSharingTable(); }

      new public LogBallotSharingRow NewRow() { return (LogBallotSharingRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogBallotSharingRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogBallotSharingRow); }

      public void RemoveRow(LogBallotSharingRow row) { this.Rows.Remove(row); }

      public LogBallotSharingRow NewRow(Int32 id, String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place)
      {
        LogBallotSharingRow row = NewRow();
        row.Id = id;
        row.Name = name;
        row.Email = email;
        row.Datestamp = datestamp;
        row.Shares = shares;
        row.Url = url;
        row.ElectionKey = electionKey;
        row.NewElectionKey = newElectionKey;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.County = county;
        row.Choices = choices;
        row.District = district;
        row.Place = place;
        return row;
      }

      public void AddRow(Int32 id, String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place)
      {
        LogBallotSharingRow row = NewRow(id, name, email, datestamp, shares, url, electionKey, newElectionKey, congress, stateSenate, stateHouse, county, choices, district, place);
        AddRow(row);
      }

      public LogBallotSharingRow NewRow(String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place)
      {
        LogBallotSharingRow row = NewRow();
        row.Name = name;
        row.Email = email;
        row.Datestamp = datestamp;
        row.Shares = shares;
        row.Url = url;
        row.ElectionKey = electionKey;
        row.NewElectionKey = newElectionKey;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.County = county;
        row.Choices = choices;
        row.District = district;
        row.Place = place;
        return row;
      }

      public void AddRow(String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place)
      {
        LogBallotSharingRow row = NewRow(name, email, datestamp, shares, url, electionKey, newElectionKey, congress, stateSenate, stateHouse, county, choices, district, place);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn DatestampColumn { get { return this.Columns["Datestamp"]; } }

      public DataColumn SharesColumn { get { return this.Columns["Shares"]; } }

      public DataColumn UrlColumn { get { return this.Columns["Url"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn NewElectionKeyColumn { get { return this.Columns["NewElectionKey"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn ChoicesColumn { get { return this.Columns["Choices"]; } }

      public DataColumn DistrictColumn { get { return this.Columns["District"]; } }

      public DataColumn PlaceColumn { get { return this.Columns["Place"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Datestamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Shares", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Url", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("NewElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Choices", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("District", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Place", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogBallotSharingTable() : this(ColumnSet.All) { }

      public LogBallotSharingTable(ColumnSet columnSet)
      {
        this.TableName = "LogBallotSharing";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogBallotSharingTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogBallotSharing
    {
      public const string TableName = "LogBallotSharing";

      public enum Column { Id, Name, Email, Datestamp, Shares, Url, ElectionKey, NewElectionKey, Congress, StateSenate, StateHouse, County, Choices, District, Place }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Name, "Name" },
        { Column.Email, "Email" },
        { Column.Datestamp, "Datestamp" },
        { Column.Shares, "Shares" },
        { Column.Url, "Url" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.NewElectionKey, "NewElectionKey" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.County, "County" },
        { Column.Choices, "Choices" },
        { Column.District, "District" },
        { Column.Place, "Place" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogBallotSharing";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogBallotSharing (Id,Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place) VALUES (@Id,@Name,@Email,@Datestamp,@Shares,@Url,@ElectionKey,@NewElectionKey,@Congress,@StateSenate,@StateHouse,@County,@Choices,@District,@Place)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "Name", name);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "Datestamp", datestamp);
        VoteLogDb.AddCommandParameter(cmd, "Shares", shares);
        VoteLogDb.AddCommandParameter(cmd, "Url", url);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "NewElectionKey", newElectionKey);
        VoteLogDb.AddCommandParameter(cmd, "Congress", congress);
        VoteLogDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteLogDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteLogDb.AddCommandParameter(cmd, "County", county);
        VoteLogDb.AddCommandParameter(cmd, "Choices", choices);
        VoteLogDb.AddCommandParameter(cmd, "District", district);
        VoteLogDb.AddCommandParameter(cmd, "Place", place);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String name, String email, DateTime datestamp, Int32 shares, String url, String electionKey, String newElectionKey, String congress, String stateSenate, String stateHouse, String county, String choices, String district, String place, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogBallotSharing (Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place) VALUES (@Name,@Email,@Datestamp,@Shares,@Url,@ElectionKey,@NewElectionKey,@Congress,@StateSenate,@StateHouse,@County,@Choices,@District,@Place)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Name", name);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "Datestamp", datestamp);
        VoteLogDb.AddCommandParameter(cmd, "Shares", shares);
        VoteLogDb.AddCommandParameter(cmd, "Url", url);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "NewElectionKey", newElectionKey);
        VoteLogDb.AddCommandParameter(cmd, "Congress", congress);
        VoteLogDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteLogDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteLogDb.AddCommandParameter(cmd, "County", county);
        VoteLogDb.AddCommandParameter(cmd, "Choices", choices);
        VoteLogDb.AddCommandParameter(cmd, "District", district);
        VoteLogDb.AddCommandParameter(cmd, "Place", place);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place FROM LogBallotSharing";
        }
      }

      public static LogBallotSharingTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place FROM LogBallotSharing";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogBallotSharingTable.ColumnSet.All);
      }

      public static LogBallotSharingTable FillTable(DbCommand command)
      {
        return FillTable(command, LogBallotSharingTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogBallotSharingTable FillTable(DbCommand command, LogBallotSharingTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogBallotSharingTable table = new LogBallotSharingTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogBallotSharingTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogBallotSharingTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogBallotSharingTable table, LogBallotSharingTable.ColumnSet columnSet = LogBallotSharingTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string DatestampColumnName { get { return "Datestamp"; } }

      public static string SharesColumnName { get { return "Shares"; } }

      public static string UrlColumnName { get { return "Url"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string NewElectionKeyColumnName { get { return "NewElectionKey"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string ChoicesColumnName { get { return "Choices"; } }

      public static string DistrictColumnName { get { return "District"; } }

      public static string PlaceColumnName { get { return "Place"; } }

      public static int NameMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 255; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int NewElectionKeyMaxLength { get { return 18; } }

      public static int CongressMaxLength { get { return 3; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int ChoicesMaxLength { get { return int.MaxValue; } }

      public static int DistrictMaxLength { get { return 5; } }

      public static int PlaceMaxLength { get { return 5; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDatestampById(Int32 id)
      {
        return _GetDatestampById(id, null);
      }

      public static DateTime GetDatestampById(Int32 id, DateTime defaultValue)
      {
        return _GetDatestampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDatestampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT Datestamp FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetSharesById(Int32 id)
      {
        return _GetSharesById(id, null);
      }

      public static Int32 GetSharesById(Int32 id, Int32 defaultValue)
      {
        return _GetSharesById(id, defaultValue).Value;
      }

      private static Int32? _GetSharesById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Shares FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Url FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNewElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NewElectionKey FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Congress FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetChoicesById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Choices FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT District FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlaceById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Place FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogBallotSharing WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogBallotSharingTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogBallotSharingTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Name=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatestampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Datestamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSharesById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Shares=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Url=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET NewElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Congress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET StateSenate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET StateHouse=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET County=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateChoicesById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Choices=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET District=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlaceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET Place=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogBallotSharing SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogBallotSharing WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogBallotSharing WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogBallotSharing WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogBallotSharingTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,Email,Datestamp,Shares,Url,ElectionKey,NewElectionKey,Congress,StateSenate,StateHouse,County,Choices,District,Place FROM LogBallotSharing WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LogBallotSharingTable.ColumnSet.All);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Id=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Name=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatestampByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Datestamp=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSharesByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Shares=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Url=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET ElectionKey=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET NewElectionKey=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Congress=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET StateSenate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET StateHouse=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET County=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateChoicesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Choices=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET District=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlaceByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET Place=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LogBallotSharing SET {0}=@newValue WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogBallotSharing WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogBallotSharingTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogBallotSharingTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogBallotSharing()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogBallotSharing

    #region votelog.LogControl

    public partial class LogControlRow : DataRow
    {
      internal LogControlRow(DataRowBuilder rb) : base(rb) {}

      public String PrimaryKey
      {
        get { return this["PrimaryKey"] as String; }
        set { if (value == null) this["PrimaryKey"] = DBNull.Value; else this["PrimaryKey"] = value; }
      }

      public String ReportEmailAddresses
      {
        get { return this["ReportEmailAddresses"] as String; }
        set { if (value == null) this["ReportEmailAddresses"] = DBNull.Value; else this["ReportEmailAddresses"] = value; }
      }

      public String PoliticianSigninEmailAddresses
      {
        get { return this["PoliticianSigninEmailAddresses"] as String; }
        set { if (value == null) this["PoliticianSigninEmailAddresses"] = DBNull.Value; else this["PoliticianSigninEmailAddresses"] = value; }
      }
    }

    [Serializable]
    public partial class LogControlTable : TypedTableBase<LogControlRow>
    {
      public LogControlRow this[int index] { get { return (LogControlRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogControlRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogControlTable(); }

      new public LogControlRow NewRow() { return (LogControlRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogControlRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogControlRow); }

      public void RemoveRow(LogControlRow row) { this.Rows.Remove(row); }

      public LogControlRow NewRow(String primaryKey, String reportEmailAddresses, String politicianSigninEmailAddresses)
      {
        LogControlRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.ReportEmailAddresses = reportEmailAddresses;
        row.PoliticianSigninEmailAddresses = politicianSigninEmailAddresses;
        return row;
      }

      public void AddRow(String primaryKey, String reportEmailAddresses, String politicianSigninEmailAddresses)
      {
        LogControlRow row = NewRow(primaryKey, reportEmailAddresses, politicianSigninEmailAddresses);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn ReportEmailAddressesColumn { get { return this.Columns["ReportEmailAddresses"]; } }

      public DataColumn PoliticianSigninEmailAddressesColumn { get { return this.Columns["PoliticianSigninEmailAddresses"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReportEmailAddresses", typeof(String));
        _column.MaxLength = 1024;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianSigninEmailAddresses", typeof(String));
        _column.MaxLength = 1024;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogControlTable() : this(ColumnSet.All) { }

      public LogControlTable(ColumnSet columnSet)
      {
        this.TableName = "LogControl";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogControlTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogControl
    {
      public const string TableName = "LogControl";

      public enum Column { PrimaryKey, ReportEmailAddresses, PoliticianSigninEmailAddresses }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.ReportEmailAddresses, "ReportEmailAddresses" },
        { Column.PoliticianSigninEmailAddresses, "PoliticianSigninEmailAddresses" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String primaryKey, String reportEmailAddresses, String politicianSigninEmailAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogControl (PrimaryKey,ReportEmailAddresses,PoliticianSigninEmailAddresses) VALUES (@PrimaryKey,@ReportEmailAddresses,@PoliticianSigninEmailAddresses)";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "ReportEmailAddresses", reportEmailAddresses);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianSigninEmailAddresses", politicianSigninEmailAddresses);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,ReportEmailAddresses,PoliticianSigninEmailAddresses FROM LogControl";
        }
      }

      public static LogControlTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,ReportEmailAddresses,PoliticianSigninEmailAddresses FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogControlTable.ColumnSet.All);
      }

      public static LogControlTable FillTable(DbCommand command)
      {
        return FillTable(command, LogControlTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogControlTable FillTable(DbCommand command, LogControlTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogControlTable table = new LogControlTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogControlTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogControlTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogControlTable table, LogControlTable.ColumnSet columnSet = LogControlTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string ReportEmailAddressesColumnName { get { return "ReportEmailAddresses"; } }

      public static string PoliticianSigninEmailAddressesColumnName { get { return "PoliticianSigninEmailAddresses"; } }

      public static int PrimaryKeyMaxLength { get { return 10; } }

      public static int ReportEmailAddressesMaxLength { get { return 1024; } }

      public static int PoliticianSigninEmailAddressesMaxLength { get { return 1024; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPrimaryKey(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PrimaryKey FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReportEmailAddresses(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReportEmailAddresses FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianSigninEmailAddresses(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianSigninEmailAddresses FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogControl";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdatePrimaryKey(String newValue)
      {
        string cmdText = "UPDATE LogControl SET PrimaryKey=@newValue";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReportEmailAddresses(String newValue)
      {
        string cmdText = "UPDATE LogControl SET ReportEmailAddresses=@newValue";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianSigninEmailAddresses(String newValue)
      {
        string cmdText = "UPDATE LogControl SET PoliticianSigninEmailAddresses=@newValue";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE LogControl SET {0}=@newValue";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogControlTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogControlTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogControl()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogControl

    #region votelog.LogDataChange

    public partial class LogDataChangeRow : DataRow
    {
      internal LogDataChangeRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String TableName
      {
        get { return this["TableName"] as String; }
        set { if (value == null) this["TableName"] = DBNull.Value; else this["TableName"] = value; }
      }

      public String ColumnName
      {
        get { return this["ColumnName"] as String; }
        set { if (value == null) this["ColumnName"] = DBNull.Value; else this["ColumnName"] = value; }
      }

      public String KeyValues
      {
        get { return this["KeyValues"] as String; }
        set { if (value == null) this["KeyValues"] = DBNull.Value; else this["KeyValues"] = value; }
      }

      public String OldValue
      {
        get { return this["OldValue"] as String; }
        set { if (value == null) this["OldValue"] = DBNull.Value; else this["OldValue"] = value; }
      }

      public String NewValue
      {
        get { return this["NewValue"] as String; }
        set { if (value == null) this["NewValue"] = DBNull.Value; else this["NewValue"] = value; }
      }

      public String Program
      {
        get { return this["Program"] as String; }
        set { if (value == null) this["Program"] = DBNull.Value; else this["Program"] = value; }
      }

      public Boolean IsBase64
      {
        get { return (Boolean) this["IsBase64"]; }
        set { this["IsBase64"] = value; }
      }

      public String AdditionalInfo
      {
        get { return this["AdditionalInfo"] as String; }
        set { if (value == null) this["AdditionalInfo"] = DBNull.Value; else this["AdditionalInfo"] = value; }
      }
    }

    [Serializable]
    public partial class LogDataChangeTable : TypedTableBase<LogDataChangeRow>
    {
      public LogDataChangeRow this[int index] { get { return (LogDataChangeRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogDataChangeRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogDataChangeTable(); }

      new public LogDataChangeRow NewRow() { return (LogDataChangeRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogDataChangeRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogDataChangeRow); }

      public void RemoveRow(LogDataChangeRow row) { this.Rows.Remove(row); }

      public LogDataChangeRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.Program = program;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, program, isBase64, additionalInfo);
        AddRow(row);
      }

      public LogDataChangeRow NewRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.Program = program;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow(dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, program, isBase64, additionalInfo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn TableNameColumn { get { return this.Columns["TableName"]; } }

      public DataColumn ColumnNameColumn { get { return this.Columns["ColumnName"]; } }

      public DataColumn KeyValuesColumn { get { return this.Columns["KeyValues"]; } }

      public DataColumn OldValueColumn { get { return this.Columns["OldValue"]; } }

      public DataColumn NewValueColumn { get { return this.Columns["NewValue"]; } }

      public DataColumn ProgramColumn { get { return this.Columns["Program"]; } }

      public DataColumn IsBase64Column { get { return this.Columns["IsBase64"]; } }

      public DataColumn AdditionalInfoColumn { get { return this.Columns["AdditionalInfo"]; } }

      public enum ColumnSet { All, DateAndUser, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TableName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("KeyValues", typeof(String));
        _column.MaxLength = 4096;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OldValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("NewValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Program", typeof(String));
        _column.MaxLength = 64;
        base.Columns.Add(_column);
        _column = new DataColumn("IsBase64", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdditionalInfo", typeof(String));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDateAndUserColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TableName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogDataChangeTable() : this(ColumnSet.All) { }

      public LogDataChangeTable(ColumnSet columnSet)
      {
        this.TableName = "LogDataChange";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.DateAndUser:
            InitDateAndUserColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogDataChangeTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogDataChange
    {
      public const string TableName = "LogDataChange";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, TableName, ColumnName, KeyValues, OldValue, NewValue, Program, IsBase64, AdditionalInfo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.TableName, "TableName" },
        { Column.ColumnName, "ColumnName" },
        { Column.KeyValues, "KeyValues" },
        { Column.OldValue, "OldValue" },
        { Column.NewValue, "NewValue" },
        { Column.Program, "Program" },
        { Column.IsBase64, "IsBase64" },
        { Column.AdditionalInfo, "AdditionalInfo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChange (PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@Program,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "Program", program);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChange (DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo) VALUES (@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@Program,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "Program", program);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static LogDataChangeTable FillTable(DbCommand command)
      {
        return FillTable(command, LogDataChangeTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogDataChangeTable FillTable(DbCommand command, LogDataChangeTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogDataChangeTable table = new LogDataChangeTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogDataChangeTable table, LogDataChangeTable.ColumnSet columnSet = LogDataChangeTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string TableNameColumnName { get { return "TableName"; } }

      public static string ColumnNameColumnName { get { return "ColumnName"; } }

      public static string KeyValuesColumnName { get { return "KeyValues"; } }

      public static string OldValueColumnName { get { return "OldValue"; } }

      public static string NewValueColumnName { get { return "NewValue"; } }

      public static string ProgramColumnName { get { return "Program"; } }

      public static string IsBase64ColumnName { get { return "IsBase64"; } }

      public static string AdditionalInfoColumnName { get { return "AdditionalInfo"; } }

      public static int UserNameMaxLength { get { return 256; } }

      public static int UserSecurityMaxLength { get { return 64; } }

      public static int TableNameMaxLength { get { return 256; } }

      public static int ColumnNameMaxLength { get { return 256; } }

      public static int KeyValuesMaxLength { get { return 4096; } }

      public static int OldValueMaxLength { get { return int.MaxValue; } }

      public static int NewValueMaxLength { get { return int.MaxValue; } }

      public static int ProgramMaxLength { get { return 64; } }

      public static int AdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int CountByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTableNameColumnNameKeyValuesDateStamp(Column _column, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByTableNameColumnNameKeyValuesDateStamp(Int32 newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByTableNameColumnNameKeyValuesDateStamp(DateTime newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByTableNameColumnNameKeyValuesDateStamp(Boolean newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableNameColumnNameKeyValuesDateStamp(Column _column, object newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTableNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TableName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetColumnNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ColumnName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetKeyValuesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT KeyValues FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOldValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OldValue FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNewValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NewValue FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetProgramByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Program FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsBase64ByPrimaryKey(Int32 primaryKey)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, null);
      }

      public static Boolean GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean defaultValue)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Boolean? _GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsBase64 FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdditionalInfoByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdditionalInfo FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByPrimaryKey(Boolean newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTableNameColumnNameKeyValues(Column _column, String tableName, String columnName, String keyValues)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByTableNameColumnNameKeyValues(Int32 newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByTableNameColumnNameKeyValues(DateTime newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByTableNameColumnNameKeyValues(Boolean newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableNameColumnNameKeyValues(Column _column, object newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserNameTableName(Column _column, String userName, String tableName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserNameTableName(Int32 newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserNameTableName(DateTime newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByUserNameTableName(Boolean newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserNameTableName(Column _column, object newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectDateAndUserCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllDateAndUserData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.DateAndUser);
      }

      public static void UpdateDateAndUser(LogDataChangeTable table)
      {
        UpdateDateAndUser(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDateAndUser(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.DateAndUser, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName,TableName,ColumnName FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName,TableName,ColumnName FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogDataChangeTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(LogDataChangeTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogDataChangeTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogDataChangeTable.ColumnSet.DateAndUser:
            return SelectDateAndUserCommandText;

          case LogDataChangeTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogDataChange()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogDataChange

    #region votelog.LogDebug

    public partial class LogDebugRow : DataRow
    {
      internal LogDebugRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Debug
      {
        get { return this["Debug"] as String; }
        set { if (value == null) this["Debug"] = DBNull.Value; else this["Debug"] = value; }
      }
    }

    [Serializable]
    public partial class LogDebugTable : TypedTableBase<LogDebugRow>
    {
      public LogDebugRow this[int index] { get { return (LogDebugRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogDebugRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogDebugTable(); }

      new public LogDebugRow NewRow() { return (LogDebugRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogDebugRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogDebugRow); }

      public void RemoveRow(LogDebugRow row) { this.Rows.Remove(row); }

      public LogDebugRow NewRow(Int32 primaryKey, DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Debug = debug;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow(primaryKey, dateStamp, debug);
        AddRow(row);
      }

      public LogDebugRow NewRow(DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Debug = debug;
        return row;
      }

      public void AddRow(DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow(dateStamp, debug);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn DebugColumn { get { return this.Columns["Debug"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Debug", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogDebugTable() : this(ColumnSet.All) { }

      public LogDebugTable(ColumnSet columnSet)
      {
        this.TableName = "LogDebug";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogDebugTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogDebug
    {
      public const string TableName = "LogDebug";

      public enum Column { PrimaryKey, DateStamp, Debug }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Debug, "Debug" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String debug, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDebug (PrimaryKey,DateStamp,Debug) VALUES (@PrimaryKey,@DateStamp,@Debug)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Debug", debug);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String debug, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDebug (DateStamp,Debug) VALUES (@DateStamp,@Debug)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Debug", debug);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug";
        }
      }

      public static LogDebugTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDebugTable.ColumnSet.All);
      }

      public static LogDebugTable FillTable(DbCommand command)
      {
        return FillTable(command, LogDebugTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogDebugTable FillTable(DbCommand command, LogDebugTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogDebugTable table = new LogDebugTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogDebugTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogDebugTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogDebugTable table, LogDebugTable.ColumnSet columnSet = LogDebugTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string DebugColumnName { get { return "Debug"; } }

      public static int DebugMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetDebugByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Debug FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDebugTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogDebugTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDebugByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET Debug=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogDebugTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogDebugTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogDebug()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogDebug

    #region votelog.LogEmail

    public partial class LogEmailRow : DataRow
    {
      internal LogEmailRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 LogBatchId
      {
        get { return (Int32) this["LogBatchId"]; }
        set { this["LogBatchId"] = value; }
      }

      public DateTime SentTime
      {
        get { return (DateTime) this["SentTime"]; }
        set { this["SentTime"] = value; }
      }

      public Boolean WasSent
      {
        get { return (Boolean) this["WasSent"]; }
        set { this["WasSent"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public Int32 VisitorId
      {
        get { return (Int32) this["VisitorId"]; }
        set { this["VisitorId"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ToEmail
      {
        get { return this["ToEmail"] as String; }
        set { if (value == null) this["ToEmail"] = DBNull.Value; else this["ToEmail"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Body
      {
        get { return this["Body"] as String; }
        set { if (value == null) this["Body"] = DBNull.Value; else this["Body"] = value; }
      }

      public Int32 ForwardedCount
      {
        get { return (Int32) this["ForwardedCount"]; }
        set { this["ForwardedCount"] = value; }
      }

      public Boolean IsFlagged
      {
        get { return (Boolean) this["IsFlagged"]; }
        set { this["IsFlagged"] = value; }
      }

      public String ErrorMessage
      {
        get { return this["ErrorMessage"] as String; }
        set { if (value == null) this["ErrorMessage"] = DBNull.Value; else this["ErrorMessage"] = value; }
      }

      public String EmailTypeCode
      {
        get { return this["EmailTypeCode"] as String; }
        set { if (value == null) this["EmailTypeCode"] = DBNull.Value; else this["EmailTypeCode"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailTable : TypedTableBase<LogEmailRow>
    {
      public LogEmailRow this[int index] { get { return (LogEmailRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailTable(); }

      new public LogEmailRow NewRow() { return (LogEmailRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailRow); }

      public void RemoveRow(LogEmailRow row) { this.Rows.Remove(row); }

      public LogEmailRow NewRow(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode)
      {
        LogEmailRow row = NewRow();
        row.Id = id;
        row.LogBatchId = logBatchId;
        row.SentTime = sentTime;
        row.WasSent = wasSent;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.VisitorId = visitorId;
        row.Contact = contact;
        row.ToEmail = toEmail;
        row.Subject = subject;
        row.Body = body;
        row.ForwardedCount = forwardedCount;
        row.IsFlagged = isFlagged;
        row.ErrorMessage = errorMessage;
        row.EmailTypeCode = emailTypeCode;
        return row;
      }

      public void AddRow(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode)
      {
        LogEmailRow row = NewRow(id, logBatchId, sentTime, wasSent, stateCode, countyCode, localKey, electionKey, officeKey, politicianKey, visitorId, contact, toEmail, subject, body, forwardedCount, isFlagged, errorMessage, emailTypeCode);
        AddRow(row);
      }

      public LogEmailRow NewRow(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode)
      {
        LogEmailRow row = NewRow();
        row.LogBatchId = logBatchId;
        row.SentTime = sentTime;
        row.WasSent = wasSent;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.VisitorId = visitorId;
        row.Contact = contact;
        row.ToEmail = toEmail;
        row.Subject = subject;
        row.Body = body;
        row.ForwardedCount = forwardedCount;
        row.IsFlagged = isFlagged;
        row.ErrorMessage = errorMessage;
        row.EmailTypeCode = emailTypeCode;
        return row;
      }

      public void AddRow(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode)
      {
        LogEmailRow row = NewRow(logBatchId, sentTime, wasSent, stateCode, countyCode, localKey, electionKey, officeKey, politicianKey, visitorId, contact, toEmail, subject, body, forwardedCount, isFlagged, errorMessage, emailTypeCode);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LogBatchIdColumn { get { return this.Columns["LogBatchId"]; } }

      public DataColumn SentTimeColumn { get { return this.Columns["SentTime"]; } }

      public DataColumn WasSentColumn { get { return this.Columns["WasSent"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn VisitorIdColumn { get { return this.Columns["VisitorId"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ToEmailColumn { get { return this.Columns["ToEmail"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn BodyColumn { get { return this.Columns["Body"]; } }

      public DataColumn ForwardedCountColumn { get { return this.Columns["ForwardedCount"]; } }

      public DataColumn IsFlaggedColumn { get { return this.Columns["IsFlagged"]; } }

      public DataColumn ErrorMessageColumn { get { return this.Columns["ErrorMessage"]; } }

      public DataColumn EmailTypeCodeColumn { get { return this.Columns["EmailTypeCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("LogBatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SentTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WasSent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VisitorId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ToEmail", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Body", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ForwardedCount", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsFlagged", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ErrorMessage", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailTypeCode", typeof(String));
        _column.MaxLength = 16;
        base.Columns.Add(_column);
      }

      public LogEmailTable() : this(ColumnSet.All) { }

      public LogEmailTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmail";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmail
    {
      public const string TableName = "LogEmail";

      public enum Column { Id, LogBatchId, SentTime, WasSent, StateCode, CountyCode, LocalKey, ElectionKey, OfficeKey, PoliticianKey, VisitorId, Contact, ToEmail, Subject, Body, ForwardedCount, IsFlagged, ErrorMessage, EmailTypeCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LogBatchId, "LogBatchId" },
        { Column.SentTime, "SentTime" },
        { Column.WasSent, "WasSent" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.VisitorId, "VisitorId" },
        { Column.Contact, "Contact" },
        { Column.ToEmail, "ToEmail" },
        { Column.Subject, "Subject" },
        { Column.Body, "Body" },
        { Column.ForwardedCount, "ForwardedCount" },
        { Column.IsFlagged, "IsFlagged" },
        { Column.ErrorMessage, "ErrorMessage" },
        { Column.EmailTypeCode, "EmailTypeCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmail (Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode) VALUES (@Id,@LogBatchId,@SentTime,@WasSent,@StateCode,@CountyCode,@LocalKey,@ElectionKey,@OfficeKey,@PoliticianKey,@VisitorId,@Contact,@ToEmail,@Subject,@Body,@ForwardedCount,@IsFlagged,@ErrorMessage,@EmailTypeCode)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "WasSent", wasSent);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "ToEmail", toEmail);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        VoteLogDb.AddCommandParameter(cmd, "ForwardedCount", forwardedCount);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        VoteLogDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localKey, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, String emailTypeCode, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmail (LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode) VALUES (@LogBatchId,@SentTime,@WasSent,@StateCode,@CountyCode,@LocalKey,@ElectionKey,@OfficeKey,@PoliticianKey,@VisitorId,@Contact,@ToEmail,@Subject,@Body,@ForwardedCount,@IsFlagged,@ErrorMessage,@EmailTypeCode)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "WasSent", wasSent);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "ToEmail", toEmail);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        VoteLogDb.AddCommandParameter(cmd, "ForwardedCount", forwardedCount);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        VoteLogDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail";
        }
      }

      public static LogEmailTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static LogEmailTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailTable FillTable(DbCommand command, LogEmailTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailTable table = new LogEmailTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailTable table, LogEmailTable.ColumnSet columnSet = LogEmailTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LogBatchIdColumnName { get { return "LogBatchId"; } }

      public static string SentTimeColumnName { get { return "SentTime"; } }

      public static string WasSentColumnName { get { return "WasSent"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string VisitorIdColumnName { get { return "VisitorId"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ToEmailColumnName { get { return "ToEmail"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string BodyColumnName { get { return "Body"; } }

      public static string ForwardedCountColumnName { get { return "ForwardedCount"; } }

      public static string IsFlaggedColumnName { get { return "IsFlagged"; } }

      public static string ErrorMessageColumnName { get { return "ErrorMessage"; } }

      public static string EmailTypeCodeColumnName { get { return "EmailTypeCode"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int ContactMaxLength { get { return 200; } }

      public static int ToEmailMaxLength { get { return 500; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int BodyMaxLength { get { return int.MaxValue; } }

      public static int ErrorMessageMaxLength { get { return int.MaxValue; } }

      public static int EmailTypeCodeMaxLength { get { return 16; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetLogBatchIdById(Int32 id)
      {
        return _GetLogBatchIdById(id, null);
      }

      public static Int32 GetLogBatchIdById(Int32 id, Int32 defaultValue)
      {
        return _GetLogBatchIdById(id, defaultValue).Value;
      }

      private static Int32? _GetLogBatchIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT LogBatchId FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetSentTimeById(Int32 id)
      {
        return _GetSentTimeById(id, null);
      }

      public static DateTime GetSentTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetSentTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetSentTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT SentTime FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetWasSentById(Int32 id)
      {
        return _GetWasSentById(id, null);
      }

      public static Boolean GetWasSentById(Int32 id, Boolean defaultValue)
      {
        return _GetWasSentById(id, defaultValue).Value;
      }

      private static Boolean? _GetWasSentById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT WasSent FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetVisitorIdById(Int32 id)
      {
        return _GetVisitorIdById(id, null);
      }

      public static Int32 GetVisitorIdById(Int32 id, Int32 defaultValue)
      {
        return _GetVisitorIdById(id, defaultValue).Value;
      }

      private static Int32? _GetVisitorIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT VisitorId FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetContactById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetToEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ToEmail FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSubjectById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Subject FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBodyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Body FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetForwardedCountById(Int32 id)
      {
        return _GetForwardedCountById(id, null);
      }

      public static Int32 GetForwardedCountById(Int32 id, Int32 defaultValue)
      {
        return _GetForwardedCountById(id, defaultValue).Value;
      }

      private static Int32? _GetForwardedCountById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ForwardedCount FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsFlaggedById(Int32 id)
      {
        return _GetIsFlaggedById(id, null);
      }

      public static Boolean GetIsFlaggedById(Int32 id, Boolean defaultValue)
      {
        return _GetIsFlaggedById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsFlaggedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsFlagged FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetErrorMessageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ErrorMessage FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailTypeCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailTypeCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByLogBatchId(Column _column, Int32 logBatchId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE LogBatchId=@LogBatchId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByLogBatchId(DateTime newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByLogBatchId(Boolean newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByLogBatchId(Boolean newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLogBatchId(Column _column, object newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE LogBatchId=@LogBatchId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnBySentTime(Column _column, DateTime sentTime)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE SentTime=@SentTime";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeBySentTime(DateTime newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentBySentTime(Boolean newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedBySentTime(Boolean newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnBySentTime(Column _column, object newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE SentTime=@SentTime";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByElectionKeyOfficeKeyPoliticianKey(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByVisitorId(Column _column, Int32 visitorId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE VisitorId=@VisitorId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByVisitorId(DateTime newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByVisitorId(Boolean newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByVisitorId(Boolean newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByVisitorId(Column _column, object newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE VisitorId=@VisitorId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIsFlagged(Column _column, Boolean isFlagged)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE IsFlagged=@IsFlagged";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByIsFlagged(DateTime newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByIsFlagged(Boolean newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByIsFlagged(Boolean newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIsFlagged(Column _column, object newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE IsFlagged=@IsFlagged";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalKey,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage,EmailTypeCode FROM LogEmail WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET EmailTypeCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmail()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmail

    #region votelog.LogEmailBatches

    public partial class LogEmailBatchesRow : DataRow
    {
      internal LogEmailBatchesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime CreationTime
      {
        get { return (DateTime) this["CreationTime"]; }
        set { this["CreationTime"] = value; }
      }

      public String ContactType
      {
        get { return this["ContactType"] as String; }
        set { if (value == null) this["ContactType"] = DBNull.Value; else this["ContactType"] = value; }
      }

      public String SelectionCriteria
      {
        get { return this["SelectionCriteria"] as String; }
        set { if (value == null) this["SelectionCriteria"] = DBNull.Value; else this["SelectionCriteria"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }

      public Int32 Found
      {
        get { return (Int32) this["Found"]; }
        set { this["Found"] = value; }
      }

      public Int32 Skipped
      {
        get { return (Int32) this["Skipped"]; }
        set { this["Skipped"] = value; }
      }

      public Int32 Sent
      {
        get { return (Int32) this["Sent"]; }
        set { this["Sent"] = value; }
      }

      public Int32 Failed
      {
        get { return (Int32) this["Failed"]; }
        set { this["Failed"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String FromEmail
      {
        get { return this["FromEmail"] as String; }
        set { if (value == null) this["FromEmail"] = DBNull.Value; else this["FromEmail"] = value; }
      }

      public String CcEmails
      {
        get { return this["CcEmails"] as String; }
        set { if (value == null) this["CcEmails"] = DBNull.Value; else this["CcEmails"] = value; }
      }

      public String BccEmails
      {
        get { return this["BccEmails"] as String; }
        set { if (value == null) this["BccEmails"] = DBNull.Value; else this["BccEmails"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailBatchesTable : TypedTableBase<LogEmailBatchesRow>
    {
      public LogEmailBatchesRow this[int index] { get { return (LogEmailBatchesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailBatchesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailBatchesTable(); }

      new public LogEmailBatchesRow NewRow() { return (LogEmailBatchesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailBatchesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailBatchesRow); }

      public void RemoveRow(LogEmailBatchesRow row) { this.Rows.Remove(row); }

      public LogEmailBatchesRow NewRow(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow();
        row.Id = id;
        row.CreationTime = creationTime;
        row.ContactType = contactType;
        row.SelectionCriteria = selectionCriteria;
        row.Description = description;
        row.Found = found;
        row.Skipped = skipped;
        row.Sent = sent;
        row.Failed = failed;
        row.UserName = userName;
        row.FromEmail = fromEmail;
        row.CcEmails = ccEmails;
        row.BccEmails = bccEmails;
        return row;
      }

      public void AddRow(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow(id, creationTime, contactType, selectionCriteria, description, found, skipped, sent, failed, userName, fromEmail, ccEmails, bccEmails);
        AddRow(row);
      }

      public LogEmailBatchesRow NewRow(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow();
        row.CreationTime = creationTime;
        row.ContactType = contactType;
        row.SelectionCriteria = selectionCriteria;
        row.Description = description;
        row.Found = found;
        row.Skipped = skipped;
        row.Sent = sent;
        row.Failed = failed;
        row.UserName = userName;
        row.FromEmail = fromEmail;
        row.CcEmails = ccEmails;
        row.BccEmails = bccEmails;
        return row;
      }

      public void AddRow(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow(creationTime, contactType, selectionCriteria, description, found, skipped, sent, failed, userName, fromEmail, ccEmails, bccEmails);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CreationTimeColumn { get { return this.Columns["CreationTime"]; } }

      public DataColumn ContactTypeColumn { get { return this.Columns["ContactType"]; } }

      public DataColumn SelectionCriteriaColumn { get { return this.Columns["SelectionCriteria"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public DataColumn FoundColumn { get { return this.Columns["Found"]; } }

      public DataColumn SkippedColumn { get { return this.Columns["Skipped"]; } }

      public DataColumn SentColumn { get { return this.Columns["Sent"]; } }

      public DataColumn FailedColumn { get { return this.Columns["Failed"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn FromEmailColumn { get { return this.Columns["FromEmail"]; } }

      public DataColumn CcEmailsColumn { get { return this.Columns["CcEmails"]; } }

      public DataColumn BccEmailsColumn { get { return this.Columns["BccEmails"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CreationTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SelectionCriteria", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Description", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Found", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Skipped", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sent", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Failed", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FromEmail", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CcEmails", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BccEmails", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogEmailBatchesTable() : this(ColumnSet.All) { }

      public LogEmailBatchesTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmailBatches";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailBatchesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmailBatches
    {
      public const string TableName = "LogEmailBatches";

      public enum Column { Id, CreationTime, ContactType, SelectionCriteria, Description, Found, Skipped, Sent, Failed, UserName, FromEmail, CcEmails, BccEmails }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CreationTime, "CreationTime" },
        { Column.ContactType, "ContactType" },
        { Column.SelectionCriteria, "SelectionCriteria" },
        { Column.Description, "Description" },
        { Column.Found, "Found" },
        { Column.Skipped, "Skipped" },
        { Column.Sent, "Sent" },
        { Column.Failed, "Failed" },
        { Column.UserName, "UserName" },
        { Column.FromEmail, "FromEmail" },
        { Column.CcEmails, "CcEmails" },
        { Column.BccEmails, "BccEmails" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailBatches (Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails) VALUES (@Id,@CreationTime,@ContactType,@SelectionCriteria,@Description,@Found,@Skipped,@Sent,@Failed,@UserName,@FromEmail,@CcEmails,@BccEmails)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "ContactType", contactType);
        VoteLogDb.AddCommandParameter(cmd, "SelectionCriteria", selectionCriteria);
        VoteLogDb.AddCommandParameter(cmd, "Description", description);
        VoteLogDb.AddCommandParameter(cmd, "Found", found);
        VoteLogDb.AddCommandParameter(cmd, "Skipped", skipped);
        VoteLogDb.AddCommandParameter(cmd, "Sent", sent);
        VoteLogDb.AddCommandParameter(cmd, "Failed", failed);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "CcEmails", ccEmails);
        VoteLogDb.AddCommandParameter(cmd, "BccEmails", bccEmails);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailBatches (CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails) VALUES (@CreationTime,@ContactType,@SelectionCriteria,@Description,@Found,@Skipped,@Sent,@Failed,@UserName,@FromEmail,@CcEmails,@BccEmails)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "ContactType", contactType);
        VoteLogDb.AddCommandParameter(cmd, "SelectionCriteria", selectionCriteria);
        VoteLogDb.AddCommandParameter(cmd, "Description", description);
        VoteLogDb.AddCommandParameter(cmd, "Found", found);
        VoteLogDb.AddCommandParameter(cmd, "Skipped", skipped);
        VoteLogDb.AddCommandParameter(cmd, "Sent", sent);
        VoteLogDb.AddCommandParameter(cmd, "Failed", failed);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "CcEmails", ccEmails);
        VoteLogDb.AddCommandParameter(cmd, "BccEmails", bccEmails);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches";
        }
      }

      public static LogEmailBatchesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static LogEmailBatchesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailBatchesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailBatchesTable FillTable(DbCommand command, LogEmailBatchesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailBatchesTable table = new LogEmailBatchesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailBatchesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailBatchesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailBatchesTable table, LogEmailBatchesTable.ColumnSet columnSet = LogEmailBatchesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CreationTimeColumnName { get { return "CreationTime"; } }

      public static string ContactTypeColumnName { get { return "ContactType"; } }

      public static string SelectionCriteriaColumnName { get { return "SelectionCriteria"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static string FoundColumnName { get { return "Found"; } }

      public static string SkippedColumnName { get { return "Skipped"; } }

      public static string SentColumnName { get { return "Sent"; } }

      public static string FailedColumnName { get { return "Failed"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string FromEmailColumnName { get { return "FromEmail"; } }

      public static string CcEmailsColumnName { get { return "CcEmails"; } }

      public static string BccEmailsColumnName { get { return "BccEmails"; } }

      public static int ContactTypeMaxLength { get { return 1; } }

      public static int SelectionCriteriaMaxLength { get { return int.MaxValue; } }

      public static int DescriptionMaxLength { get { return 500; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int FromEmailMaxLength { get { return 100; } }

      public static int CcEmailsMaxLength { get { return 500; } }

      public static int BccEmailsMaxLength { get { return 500; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetCreationTimeById(Int32 id)
      {
        return _GetCreationTimeById(id, null);
      }

      public static DateTime GetCreationTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetCreationTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetCreationTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CreationTime FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContactTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactType FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSelectionCriteriaById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SelectionCriteria FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Description FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetFoundById(Int32 id)
      {
        return _GetFoundById(id, null);
      }

      public static Int32 GetFoundById(Int32 id, Int32 defaultValue)
      {
        return _GetFoundById(id, defaultValue).Value;
      }

      private static Int32? _GetFoundById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Found FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetSkippedById(Int32 id)
      {
        return _GetSkippedById(id, null);
      }

      public static Int32 GetSkippedById(Int32 id, Int32 defaultValue)
      {
        return _GetSkippedById(id, defaultValue).Value;
      }

      private static Int32? _GetSkippedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Skipped FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetSentById(Int32 id)
      {
        return _GetSentById(id, null);
      }

      public static Int32 GetSentById(Int32 id, Int32 defaultValue)
      {
        return _GetSentById(id, defaultValue).Value;
      }

      private static Int32? _GetSentById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Sent FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetFailedById(Int32 id)
      {
        return _GetFailedById(id, null);
      }

      public static Int32 GetFailedById(Int32 id, Int32 defaultValue)
      {
        return _GetFailedById(id, defaultValue).Value;
      }

      private static Int32? _GetFailedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Failed FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetUserNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFromEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FromEmail FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCcEmailsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CcEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBccEmailsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BccEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCreationTime(Column _column, DateTime creationTime)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByCreationTime(DateTime newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCreationTime(Column _column, object newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE CreationTime=@CreationTime";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByFromEmail(Column _column, String fromEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByFromEmail(DateTime newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFromEmail(Column _column, object newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE FromEmail=@FromEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailBatchesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailBatchesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmailBatches()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmailBatches

    #region votelog.LogEmailNotes

    public partial class LogEmailNotesRow : DataRow
    {
      internal LogEmailNotesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 LogEmailId
      {
        get { return (Int32) this["LogEmailId"]; }
        set { this["LogEmailId"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Note
      {
        get { return this["Note"] as String; }
        set { if (value == null) this["Note"] = DBNull.Value; else this["Note"] = value; }
      }

      public Boolean IsSystemNote
      {
        get { return (Boolean) this["IsSystemNote"]; }
        set { this["IsSystemNote"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailNotesTable : TypedTableBase<LogEmailNotesRow>
    {
      public LogEmailNotesRow this[int index] { get { return (LogEmailNotesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailNotesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailNotesTable(); }

      new public LogEmailNotesRow NewRow() { return (LogEmailNotesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailNotesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailNotesRow); }

      public void RemoveRow(LogEmailNotesRow row) { this.Rows.Remove(row); }

      public LogEmailNotesRow NewRow(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow();
        row.Id = id;
        row.LogEmailId = logEmailId;
        row.DateStamp = dateStamp;
        row.Note = note;
        row.IsSystemNote = isSystemNote;
        return row;
      }

      public void AddRow(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow(id, logEmailId, dateStamp, note, isSystemNote);
        AddRow(row);
      }

      public LogEmailNotesRow NewRow(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow();
        row.LogEmailId = logEmailId;
        row.DateStamp = dateStamp;
        row.Note = note;
        row.IsSystemNote = isSystemNote;
        return row;
      }

      public void AddRow(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow(logEmailId, dateStamp, note, isSystemNote);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LogEmailIdColumn { get { return this.Columns["LogEmailId"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn NoteColumn { get { return this.Columns["Note"]; } }

      public DataColumn IsSystemNoteColumn { get { return this.Columns["IsSystemNote"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("LogEmailId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Note", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSystemNote", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogEmailNotesTable() : this(ColumnSet.All) { }

      public LogEmailNotesTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmailNotes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailNotesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmailNotes
    {
      public const string TableName = "LogEmailNotes";

      public enum Column { Id, LogEmailId, DateStamp, Note, IsSystemNote }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LogEmailId, "LogEmailId" },
        { Column.DateStamp, "DateStamp" },
        { Column.Note, "Note" },
        { Column.IsSystemNote, "IsSystemNote" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailNotes (Id,LogEmailId,DateStamp,Note,IsSystemNote) VALUES (@Id,@LogEmailId,@DateStamp,@Note,@IsSystemNote)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        VoteLogDb.AddCommandParameter(cmd, "IsSystemNote", isSystemNote);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailNotes (LogEmailId,DateStamp,Note,IsSystemNote) VALUES (@LogEmailId,@DateStamp,@Note,@IsSystemNote)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        VoteLogDb.AddCommandParameter(cmd, "IsSystemNote", isSystemNote);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes";
        }
      }

      public static LogEmailNotesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static LogEmailNotesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailNotesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailNotesTable FillTable(DbCommand command, LogEmailNotesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailNotesTable table = new LogEmailNotesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailNotesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailNotesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailNotesTable table, LogEmailNotesTable.ColumnSet columnSet = LogEmailNotesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LogEmailIdColumnName { get { return "LogEmailId"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string NoteColumnName { get { return "Note"; } }

      public static string IsSystemNoteColumnName { get { return "IsSystemNote"; } }

      public static int NoteMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetLogEmailIdById(Int32 id)
      {
        return _GetLogEmailIdById(id, null);
      }

      public static Int32 GetLogEmailIdById(Int32 id, Int32 defaultValue)
      {
        return _GetLogEmailIdById(id, defaultValue).Value;
      }

      private static Int32? _GetLogEmailIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT LogEmailId FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetNoteById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Note FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsSystemNoteById(Int32 id)
      {
        return _GetIsSystemNoteById(id, null);
      }

      public static Boolean GetIsSystemNoteById(Int32 id, Boolean defaultValue)
      {
        return _GetIsSystemNoteById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsSystemNoteById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSystemNote FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailNotes WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailNotesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogEmailIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET LogEmailId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET Note=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSystemNoteById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET IsSystemNote=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByLogEmailId(Column _column, Int32 logEmailId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailNotesTable GetDataByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static int UpdateIdByLogEmailId(Int32 newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET Id=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogEmailIdByLogEmailId(Int32 newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET LogEmailId=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByLogEmailId(DateTime newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET DateStamp=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteByLogEmailId(String newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET Note=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSystemNoteByLogEmailId(Boolean newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET IsSystemNote=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLogEmailId(Column _column, object newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET {0}=@newValue WHERE LogEmailId=@LogEmailId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailNotesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailNotesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmailNotes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmailNotes

    #region votelog.LogErrorsAdmin

    public partial class LogErrorsAdminRow : DataRow
    {
      internal LogErrorsAdminRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }

      public String StackTrace
      {
        get { return this["StackTrace"] as String; }
        set { if (value == null) this["StackTrace"] = DBNull.Value; else this["StackTrace"] = value; }
      }
    }

    [Serializable]
    public partial class LogErrorsAdminTable : TypedTableBase<LogErrorsAdminRow>
    {
      public LogErrorsAdminRow this[int index] { get { return (LogErrorsAdminRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogErrorsAdminRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogErrorsAdminTable(); }

      new public LogErrorsAdminRow NewRow() { return (LogErrorsAdminRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogErrorsAdminRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogErrorsAdminRow); }

      public void RemoveRow(LogErrorsAdminRow row) { this.Rows.Remove(row); }

      public LogErrorsAdminRow NewRow(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow(primaryKey, dateStamp, page, message, stackTrace);
        AddRow(row);
      }

      public LogErrorsAdminRow NewRow(DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow(dateStamp, page, message, stackTrace);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public DataColumn StackTraceColumn { get { return this.Columns["StackTrace"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StackTrace", typeof(String));
        _column.MaxLength = 4000;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogErrorsAdminTable() : this(ColumnSet.All) { }

      public LogErrorsAdminTable(ColumnSet columnSet)
      {
        this.TableName = "LogErrorsAdmin";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogErrorsAdminTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogErrorsAdmin
    {
      public const string TableName = "LogErrorsAdmin";

      public enum Column { PrimaryKey, DateStamp, Page, Message, StackTrace }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Page, "Page" },
        { Column.Message, "Message" },
        { Column.StackTrace, "StackTrace" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogErrorsAdmin (PrimaryKey,DateStamp,Page,Message,StackTrace) VALUES (@PrimaryKey,@DateStamp,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogErrorsAdmin (DateStamp,Page,Message,StackTrace) VALUES (@DateStamp,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin";
        }
      }

      public static LogErrorsAdminTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogErrorsAdminTable.ColumnSet.All);
      }

      public static LogErrorsAdminTable FillTable(DbCommand command)
      {
        return FillTable(command, LogErrorsAdminTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogErrorsAdminTable FillTable(DbCommand command, LogErrorsAdminTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogErrorsAdminTable table = new LogErrorsAdminTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogErrorsAdminTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogErrorsAdminTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogErrorsAdminTable table, LogErrorsAdminTable.ColumnSet columnSet = LogErrorsAdminTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static string StackTraceColumnName { get { return "StackTrace"; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static int StackTraceMaxLength { get { return 4000; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStackTraceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StackTrace FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogErrorsAdminTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogErrorsAdminTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET StackTrace=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogErrorsAdminTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogErrorsAdminTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogErrorsAdmin()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogErrorsAdmin

    #region votelog.LogExceptions

    public partial class LogExceptionsRow : DataRow
    {
      internal LogExceptionsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Machine
      {
        get { return this["Machine"] as String; }
        set { if (value == null) this["Machine"] = DBNull.Value; else this["Machine"] = value; }
      }

      public String ErrorType
      {
        get { return this["ErrorType"] as String; }
        set { if (value == null) this["ErrorType"] = DBNull.Value; else this["ErrorType"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }

      public String StackTrace
      {
        get { return this["StackTrace"] as String; }
        set { if (value == null) this["StackTrace"] = DBNull.Value; else this["StackTrace"] = value; }
      }
    }

    [Serializable]
    public partial class LogExceptionsTable : TypedTableBase<LogExceptionsRow>
    {
      public LogExceptionsRow this[int index] { get { return (LogExceptionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogExceptionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogExceptionsTable(); }

      new public LogExceptionsRow NewRow() { return (LogExceptionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogExceptionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogExceptionsRow); }

      public void RemoveRow(LogExceptionsRow row) { this.Rows.Remove(row); }

      public LogExceptionsRow NewRow(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.ErrorType = errorType;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow(primaryKey, dateStamp, machine, errorType, page, message, stackTrace);
        AddRow(row);
      }

      public LogExceptionsRow NewRow(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.ErrorType = errorType;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow(dateStamp, machine, errorType, page, message, stackTrace);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn MachineColumn { get { return this.Columns["Machine"]; } }

      public DataColumn ErrorTypeColumn { get { return this.Columns["ErrorType"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public DataColumn StackTraceColumn { get { return this.Columns["StackTrace"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Machine", typeof(String));
        _column.MaxLength = 32;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ErrorType", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StackTrace", typeof(String));
        base.Columns.Add(_column);
      }

      public LogExceptionsTable() : this(ColumnSet.All) { }

      public LogExceptionsTable(ColumnSet columnSet)
      {
        this.TableName = "LogExceptions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogExceptionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogExceptions
    {
      public const string TableName = "LogExceptions";

      public enum Column { PrimaryKey, DateStamp, Machine, ErrorType, Page, Message, StackTrace }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Machine, "Machine" },
        { Column.ErrorType, "ErrorType" },
        { Column.Page, "Page" },
        { Column.Message, "Message" },
        { Column.StackTrace, "StackTrace" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogExceptions (PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace) VALUES (@PrimaryKey,@DateStamp,@Machine,@ErrorType,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogExceptions (DateStamp,Machine,ErrorType,Page,Message,StackTrace) VALUES (@DateStamp,@Machine,@ErrorType,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions";
        }
      }

      public static LogExceptionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static LogExceptionsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogExceptionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogExceptionsTable FillTable(DbCommand command, LogExceptionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogExceptionsTable table = new LogExceptionsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogExceptionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogExceptionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogExceptionsTable table, LogExceptionsTable.ColumnSet columnSet = LogExceptionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string MachineColumnName { get { return "Machine"; } }

      public static string ErrorTypeColumnName { get { return "ErrorType"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static string StackTraceColumnName { get { return "StackTrace"; } }

      public static int MachineMaxLength { get { return 32; } }

      public static int ErrorTypeMaxLength { get { return 64; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static int StackTraceMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMachineByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Machine FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetErrorTypeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ErrorType FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStackTraceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StackTrace FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByErrorType(String errorType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByErrorType(Column _column, String errorType)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE ErrorType=@ErrorType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByErrorType(String errorType, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByErrorType(Int32 newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByErrorType(DateTime newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByErrorType(Column _column, object newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE ErrorType=@ErrorType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByErrorType(String errorType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMachine(String machine, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMachine(Column _column, String machine)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE Machine=@Machine";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByMachine(Int32 newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByMachine(DateTime newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMachine(Column _column, object newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE Machine=@Machine";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogExceptionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogExceptionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogExceptions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogExceptions

    #region votelog.LogInfo

    public partial class LogInfoRow : DataRow
    {
      internal LogInfoRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Machine
      {
        get { return this["Machine"] as String; }
        set { if (value == null) this["Machine"] = DBNull.Value; else this["Machine"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class LogInfoTable : TypedTableBase<LogInfoRow>
    {
      public LogInfoRow this[int index] { get { return (LogInfoRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogInfoRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogInfoTable(); }

      new public LogInfoRow NewRow() { return (LogInfoRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogInfoRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogInfoRow); }

      public void RemoveRow(LogInfoRow row) { this.Rows.Remove(row); }

      public LogInfoRow NewRow(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.Source = source;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow(primaryKey, dateStamp, machine, source, message);
        AddRow(row);
      }

      public LogInfoRow NewRow(DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.Source = source;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow(dateStamp, machine, source, message);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn MachineColumn { get { return this.Columns["Machine"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Machine", typeof(String));
        _column.MaxLength = 32;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
      }

      public LogInfoTable() : this(ColumnSet.All) { }

      public LogInfoTable(ColumnSet columnSet)
      {
        this.TableName = "LogInfo";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogInfoTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogInfo
    {
      public const string TableName = "LogInfo";

      public enum Column { PrimaryKey, DateStamp, Machine, Source, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Machine, "Machine" },
        { Column.Source, "Source" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogInfo (PrimaryKey,DateStamp,Machine,Source,Message) VALUES (@PrimaryKey,@DateStamp,@Machine,@Source,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String machine, String source, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogInfo (DateStamp,Machine,Source,Message) VALUES (@DateStamp,@Machine,@Source,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo";
        }
      }

      public static LogInfoTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static LogInfoTable FillTable(DbCommand command)
      {
        return FillTable(command, LogInfoTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogInfoTable FillTable(DbCommand command, LogInfoTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogInfoTable table = new LogInfoTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogInfoTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogInfoTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogInfoTable table, LogInfoTable.ColumnSet columnSet = LogInfoTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string MachineColumnName { get { return "Machine"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int MachineMaxLength { get { return 32; } }

      public static int SourceMaxLength { get { return 64; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMachineByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Machine FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSourceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountBySource(String source, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnBySource(Column _column, String source)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE Source=@Source";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataBySource(String source, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyBySource(Int32 newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampBySource(DateTime newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnBySource(Column _column, object newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE Source=@Source";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteBySource(String source, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMachine(String machine, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMachine(Column _column, String machine)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE Machine=@Machine";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByMachine(Int32 newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByMachine(DateTime newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMachine(Column _column, object newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE Machine=@Machine";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogInfoTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogInfoTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogInfo()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogInfo

    #region votelog.LogLogins

    public partial class LogLoginsRow : DataRow
    {
      internal LogLoginsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String UserCountyCode
      {
        get { return this["UserCountyCode"] as String; }
        set { if (value == null) this["UserCountyCode"] = DBNull.Value; else this["UserCountyCode"] = value; }
      }

      public String UserLocalKey
      {
        get { return this["UserLocalKey"] as String; }
        set { if (value == null) this["UserLocalKey"] = DBNull.Value; else this["UserLocalKey"] = value; }
      }

      public String UserDesignCode
      {
        get { return this["UserDesignCode"] as String; }
        set { if (value == null) this["UserDesignCode"] = DBNull.Value; else this["UserDesignCode"] = value; }
      }

      public String UserOrganizationCode
      {
        get { return this["UserOrganizationCode"] as String; }
        set { if (value == null) this["UserOrganizationCode"] = DBNull.Value; else this["UserOrganizationCode"] = value; }
      }

      public String UserIssuesCode
      {
        get { return this["UserIssuesCode"] as String; }
        set { if (value == null) this["UserIssuesCode"] = DBNull.Value; else this["UserIssuesCode"] = value; }
      }

      public String UserPartyKey
      {
        get { return this["UserPartyKey"] as String; }
        set { if (value == null) this["UserPartyKey"] = DBNull.Value; else this["UserPartyKey"] = value; }
      }

      public String UserPoliticianKey
      {
        get { return this["UserPoliticianKey"] as String; }
        set { if (value == null) this["UserPoliticianKey"] = DBNull.Value; else this["UserPoliticianKey"] = value; }
      }
    }

    [Serializable]
    public partial class LogLoginsTable : TypedTableBase<LogLoginsRow>
    {
      public LogLoginsRow this[int index] { get { return (LogLoginsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogLoginsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogLoginsTable(); }

      new public LogLoginsRow NewRow() { return (LogLoginsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogLoginsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogLoginsRow); }

      public void RemoveRow(LogLoginsRow row) { this.Rows.Remove(row); }

      public LogLoginsRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalKey = userLocalKey;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalKey, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public LogLoginsRow NewRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalKey = userLocalKey;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalKey, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn UserCountyCodeColumn { get { return this.Columns["UserCountyCode"]; } }

      public DataColumn UserLocalKeyColumn { get { return this.Columns["UserLocalKey"]; } }

      public DataColumn UserDesignCodeColumn { get { return this.Columns["UserDesignCode"]; } }

      public DataColumn UserOrganizationCodeColumn { get { return this.Columns["UserOrganizationCode"]; } }

      public DataColumn UserIssuesCodeColumn { get { return this.Columns["UserIssuesCode"]; } }

      public DataColumn UserPartyKeyColumn { get { return this.Columns["UserPartyKey"]; } }

      public DataColumn UserPoliticianKeyColumn { get { return this.Columns["UserPoliticianKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserLocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserDesignCode", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserIssuesCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogLoginsTable() : this(ColumnSet.All) { }

      public LogLoginsTable(ColumnSet columnSet)
      {
        this.TableName = "LogLogins";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogLoginsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogLogins
    {
      public const string TableName = "LogLogins";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, UserStateCode, UserCountyCode, UserLocalKey, UserDesignCode, UserOrganizationCode, UserIssuesCode, UserPartyKey, UserPoliticianKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.UserCountyCode, "UserCountyCode" },
        { Column.UserLocalKey, "UserLocalKey" },
        { Column.UserDesignCode, "UserDesignCode" },
        { Column.UserOrganizationCode, "UserOrganizationCode" },
        { Column.UserIssuesCode, "UserIssuesCode" },
        { Column.UserPartyKey, "UserPartyKey" },
        { Column.UserPoliticianKey, "UserPoliticianKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogLogins (PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalKey,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteLogDb.AddCommandParameter(cmd, "UserLocalKey", userLocalKey);
        VoteLogDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteLogDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteLogDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteLogDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteLogDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalKey, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogLogins (DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalKey,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteLogDb.AddCommandParameter(cmd, "UserLocalKey", userLocalKey);
        VoteLogDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteLogDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteLogDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteLogDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteLogDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        }
      }

      public static LogLoginsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static LogLoginsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogLoginsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogLoginsTable FillTable(DbCommand command, LogLoginsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogLoginsTable table = new LogLoginsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogLoginsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogLoginsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogLoginsTable table, LogLoginsTable.ColumnSet columnSet = LogLoginsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string UserCountyCodeColumnName { get { return "UserCountyCode"; } }

      public static string UserLocalKeyColumnName { get { return "UserLocalKey"; } }

      public static string UserDesignCodeColumnName { get { return "UserDesignCode"; } }

      public static string UserOrganizationCodeColumnName { get { return "UserOrganizationCode"; } }

      public static string UserIssuesCodeColumnName { get { return "UserIssuesCode"; } }

      public static string UserPartyKeyColumnName { get { return "UserPartyKey"; } }

      public static string UserPoliticianKeyColumnName { get { return "UserPoliticianKey"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserSecurityMaxLength { get { return 30; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int UserCountyCodeMaxLength { get { return 3; } }

      public static int UserLocalKeyMaxLength { get { return 5; } }

      public static int UserDesignCodeMaxLength { get { return 100; } }

      public static int UserOrganizationCodeMaxLength { get { return 50; } }

      public static int UserIssuesCodeMaxLength { get { return 2; } }

      public static int UserPartyKeyMaxLength { get { return 5; } }

      public static int UserPoliticianKeyMaxLength { get { return 50; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserCountyCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserLocalKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserLocalKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserDesignCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserDesignCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserOrganizationCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserOrganizationCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserIssuesCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserIssuesCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPartyKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPartyKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalKey,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogLoginsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogLoginsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogLogins()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogLogins

    #region votelog.LogSampleBallotRequests

    public partial class LogSampleBallotRequestsRow : DataRow
    {
      internal LogSampleBallotRequestsRow(DataRowBuilder rb) : base(rb) {}

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime? LastUpdateDate
      {
        get { if (this.IsNull("LastUpdateDate")) return null; else return (DateTime) this["LastUpdateDate"]; }
        set { if (value.HasValue) this["LastUpdateDate"] = value.Value; else this["LastUpdateDate"] = DBNull.Value; }
      }

      public String SiteId
      {
        get { return this["SiteId"] as String; }
        set { if (value == null) this["SiteId"] = DBNull.Value; else this["SiteId"] = value; }
      }

      public String Script
      {
        get { return this["Script"] as String; }
        set { if (value == null) this["Script"] = DBNull.Value; else this["Script"] = value; }
      }

      public Boolean? ExplicitOptIn
      {
        get { if (this.IsNull("ExplicitOptIn")) return null; else return (Boolean) this["ExplicitOptIn"]; }
        set { if (value.HasValue) this["ExplicitOptIn"] = value.Value; else this["ExplicitOptIn"] = DBNull.Value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String NewElectionKey
      {
        get { return this["NewElectionKey"] as String; }
        set { if (value == null) this["NewElectionKey"] = DBNull.Value; else this["NewElectionKey"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String District
      {
        get { return this["District"] as String; }
        set { if (value == null) this["District"] = DBNull.Value; else this["District"] = value; }
      }

      public String Place
      {
        get { return this["Place"] as String; }
        set { if (value == null) this["Place"] = DBNull.Value; else this["Place"] = value; }
      }

      public String Elementary
      {
        get { return this["Elementary"] as String; }
        set { if (value == null) this["Elementary"] = DBNull.Value; else this["Elementary"] = value; }
      }

      public String Secondary
      {
        get { return this["Secondary"] as String; }
        set { if (value == null) this["Secondary"] = DBNull.Value; else this["Secondary"] = value; }
      }

      public String Unified
      {
        get { return this["Unified"] as String; }
        set { if (value == null) this["Unified"] = DBNull.Value; else this["Unified"] = value; }
      }

      public String CityCouncil
      {
        get { return this["CityCouncil"] as String; }
        set { if (value == null) this["CityCouncil"] = DBNull.Value; else this["CityCouncil"] = value; }
      }

      public String CountySupervisors
      {
        get { return this["CountySupervisors"] as String; }
        set { if (value == null) this["CountySupervisors"] = DBNull.Value; else this["CountySupervisors"] = value; }
      }

      public String SchoolDistrictDistrict
      {
        get { return this["SchoolDistrictDistrict"] as String; }
        set { if (value == null) this["SchoolDistrictDistrict"] = DBNull.Value; else this["SchoolDistrictDistrict"] = value; }
      }

      public Boolean? TransferredToAddresses
      {
        get { if (this.IsNull("TransferredToAddresses")) return null; else return (Boolean) this["TransferredToAddresses"]; }
        set { if (value.HasValue) this["TransferredToAddresses"] = value.Value; else this["TransferredToAddresses"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class LogSampleBallotRequestsTable : TypedTableBase<LogSampleBallotRequestsRow>
    {
      public LogSampleBallotRequestsRow this[int index] { get { return (LogSampleBallotRequestsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogSampleBallotRequestsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogSampleBallotRequestsTable(); }

      new public LogSampleBallotRequestsRow NewRow() { return (LogSampleBallotRequestsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogSampleBallotRequestsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogSampleBallotRequestsRow); }

      public void RemoveRow(LogSampleBallotRequestsRow row) { this.Rows.Remove(row); }

      public LogSampleBallotRequestsRow NewRow(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String newElectionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Boolean? transferredToAddresses)
      {
        LogSampleBallotRequestsRow row = NewRow();
        row.Email = email;
        row.LastUpdateDate = lastUpdateDate;
        row.SiteId = siteId;
        row.Script = script;
        row.ExplicitOptIn = explicitOptIn;
        row.StateCode = stateCode;
        row.ElectionKey = electionKey;
        row.NewElectionKey = newElectionKey;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.District = district;
        row.Place = place;
        row.Elementary = elementary;
        row.Secondary = secondary;
        row.Unified = unified;
        row.CityCouncil = cityCouncil;
        row.CountySupervisors = countySupervisors;
        row.SchoolDistrictDistrict = schoolDistrictDistrict;
        row.TransferredToAddresses = transferredToAddresses;
        return row;
      }

      public void AddRow(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String newElectionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Boolean? transferredToAddresses)
      {
        LogSampleBallotRequestsRow row = NewRow(email, lastUpdateDate, siteId, script, explicitOptIn, stateCode, electionKey, newElectionKey, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, district, place, elementary, secondary, unified, cityCouncil, countySupervisors, schoolDistrictDistrict, transferredToAddresses);
        AddRow(row);
      }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn LastUpdateDateColumn { get { return this.Columns["LastUpdateDate"]; } }

      public DataColumn SiteIdColumn { get { return this.Columns["SiteId"]; } }

      public DataColumn ScriptColumn { get { return this.Columns["Script"]; } }

      public DataColumn ExplicitOptInColumn { get { return this.Columns["ExplicitOptIn"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn NewElectionKeyColumn { get { return this.Columns["NewElectionKey"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn DistrictColumn { get { return this.Columns["District"]; } }

      public DataColumn PlaceColumn { get { return this.Columns["Place"]; } }

      public DataColumn ElementaryColumn { get { return this.Columns["Elementary"]; } }

      public DataColumn SecondaryColumn { get { return this.Columns["Secondary"]; } }

      public DataColumn UnifiedColumn { get { return this.Columns["Unified"]; } }

      public DataColumn CityCouncilColumn { get { return this.Columns["CityCouncil"]; } }

      public DataColumn CountySupervisorsColumn { get { return this.Columns["CountySupervisors"]; } }

      public DataColumn SchoolDistrictDistrictColumn { get { return this.Columns["SchoolDistrictDistrict"]; } }

      public DataColumn TransferredToAddressesColumn { get { return this.Columns["TransferredToAddresses"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastUpdateDate", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("SiteId", typeof(String));
        _column.MaxLength = 16;
        base.Columns.Add(_column);
        _column = new DataColumn("Script", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("ExplicitOptIn", typeof(Boolean));
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("NewElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("District", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("Place", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("Elementary", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("Secondary", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("Unified", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("CityCouncil", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("CountySupervisors", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("SchoolDistrictDistrict", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("TransferredToAddresses", typeof(Boolean));
        base.Columns.Add(_column);
      }

      public LogSampleBallotRequestsTable() : this(ColumnSet.All) { }

      public LogSampleBallotRequestsTable(ColumnSet columnSet)
      {
        this.TableName = "LogSampleBallotRequests";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogSampleBallotRequestsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogSampleBallotRequests
    {
      public const string TableName = "LogSampleBallotRequests";

      public enum Column { Email, LastUpdateDate, SiteId, Script, ExplicitOptIn, StateCode, ElectionKey, NewElectionKey, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County, District, Place, Elementary, Secondary, Unified, CityCouncil, CountySupervisors, SchoolDistrictDistrict, TransferredToAddresses }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Email, "Email" },
        { Column.LastUpdateDate, "LastUpdateDate" },
        { Column.SiteId, "SiteId" },
        { Column.Script, "Script" },
        { Column.ExplicitOptIn, "ExplicitOptIn" },
        { Column.StateCode, "StateCode" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.NewElectionKey, "NewElectionKey" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" },
        { Column.District, "District" },
        { Column.Place, "Place" },
        { Column.Elementary, "Elementary" },
        { Column.Secondary, "Secondary" },
        { Column.Unified, "Unified" },
        { Column.CityCouncil, "CityCouncil" },
        { Column.CountySupervisors, "CountySupervisors" },
        { Column.SchoolDistrictDistrict, "SchoolDistrictDistrict" },
        { Column.TransferredToAddresses, "TransferredToAddresses" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogSampleBallotRequests";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String newElectionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Boolean? transferredToAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogSampleBallotRequests (Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,NewElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,TransferredToAddresses) VALUES (@Email,@LastUpdateDate,@SiteId,@Script,@ExplicitOptIn,@StateCode,@ElectionKey,@NewElectionKey,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@District,@Place,@Elementary,@Secondary,@Unified,@CityCouncil,@CountySupervisors,@SchoolDistrictDistrict,@TransferredToAddresses)";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "LastUpdateDate", lastUpdateDate);
        VoteLogDb.AddCommandParameter(cmd, "SiteId", siteId);
        VoteLogDb.AddCommandParameter(cmd, "Script", script);
        VoteLogDb.AddCommandParameter(cmd, "ExplicitOptIn", explicitOptIn);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "NewElectionKey", newElectionKey);
        VoteLogDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteLogDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteLogDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteLogDb.AddCommandParameter(cmd, "County", county);
        VoteLogDb.AddCommandParameter(cmd, "District", district);
        VoteLogDb.AddCommandParameter(cmd, "Place", place);
        VoteLogDb.AddCommandParameter(cmd, "Elementary", elementary);
        VoteLogDb.AddCommandParameter(cmd, "Secondary", secondary);
        VoteLogDb.AddCommandParameter(cmd, "Unified", unified);
        VoteLogDb.AddCommandParameter(cmd, "CityCouncil", cityCouncil);
        VoteLogDb.AddCommandParameter(cmd, "CountySupervisors", countySupervisors);
        VoteLogDb.AddCommandParameter(cmd, "SchoolDistrictDistrict", schoolDistrictDistrict);
        VoteLogDb.AddCommandParameter(cmd, "TransferredToAddresses", transferredToAddresses);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,NewElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,TransferredToAddresses FROM LogSampleBallotRequests";
        }
      }

      public static LogSampleBallotRequestsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,NewElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,TransferredToAddresses FROM LogSampleBallotRequests";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      public static LogSampleBallotRequestsReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        return new LogSampleBallotRequestsReader(cmd.ExecuteReader(), cn);
      }

      public static LogSampleBallotRequestsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogSampleBallotRequestsTable FillTable(DbCommand command, LogSampleBallotRequestsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogSampleBallotRequestsTable table = new LogSampleBallotRequestsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogSampleBallotRequestsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogSampleBallotRequestsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogSampleBallotRequestsTable table, LogSampleBallotRequestsTable.ColumnSet columnSet = LogSampleBallotRequestsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EmailColumnName { get { return "Email"; } }

      public static string LastUpdateDateColumnName { get { return "LastUpdateDate"; } }

      public static string SiteIdColumnName { get { return "SiteId"; } }

      public static string ScriptColumnName { get { return "Script"; } }

      public static string ExplicitOptInColumnName { get { return "ExplicitOptIn"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string NewElectionKeyColumnName { get { return "NewElectionKey"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string DistrictColumnName { get { return "District"; } }

      public static string PlaceColumnName { get { return "Place"; } }

      public static string ElementaryColumnName { get { return "Elementary"; } }

      public static string SecondaryColumnName { get { return "Secondary"; } }

      public static string UnifiedColumnName { get { return "Unified"; } }

      public static string CityCouncilColumnName { get { return "CityCouncil"; } }

      public static string CountySupervisorsColumnName { get { return "CountySupervisors"; } }

      public static string SchoolDistrictDistrictColumnName { get { return "SchoolDistrictDistrict"; } }

      public static string TransferredToAddressesColumnName { get { return "TransferredToAddresses"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int SiteIdMaxLength { get { return 16; } }

      public static int ScriptMaxLength { get { return 45; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int NewElectionKeyMaxLength { get { return 18; } }

      public static int CongressionalDistrictMaxLength { get { return 3; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int DistrictMaxLength { get { return 5; } }

      public static int PlaceMaxLength { get { return 5; } }

      public static int ElementaryMaxLength { get { return 5; } }

      public static int SecondaryMaxLength { get { return 5; } }

      public static int UnifiedMaxLength { get { return 5; } }

      public static int CityCouncilMaxLength { get { return 5; } }

      public static int CountySupervisorsMaxLength { get { return 5; } }

      public static int SchoolDistrictDistrictMaxLength { get { return 5; } }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetLastUpdateDateByEmail(String email)
      {
        return _GetLastUpdateDateByEmail(email, null);
      }

      public static DateTime GetLastUpdateDateByEmail(String email, DateTime defaultValue)
      {
        return _GetLastUpdateDateByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdateDateByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdateDate FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetSiteIdByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SiteId FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetScriptByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Script FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetExplicitOptInByEmail(String email)
      {
        return _GetExplicitOptInByEmail(email, null);
      }

      public static Boolean GetExplicitOptInByEmail(String email, Boolean defaultValue)
      {
        return _GetExplicitOptInByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetExplicitOptInByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ExplicitOptIn FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateCodeByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNewElectionKeyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NewElectionKey FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT District FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlaceByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Place FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElementaryByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Elementary FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Secondary FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUnifiedByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Unified FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityCouncilByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityCouncil FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountySupervisorsByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountySupervisors FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSchoolDistrictDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SchoolDistrictDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetTransferredToAddressesByEmail(String email)
      {
        return _GetTransferredToAddressesByEmail(email, null);
      }

      public static Boolean GetTransferredToAddressesByEmail(String email, Boolean defaultValue)
      {
        return _GetTransferredToAddressesByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetTransferredToAddressesByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT TransferredToAddresses FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogSampleBallotRequests WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogSampleBallotRequestsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,NewElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,TransferredToAddresses FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      public static LogSampleBallotRequestsReader GetDataReaderByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogSampleBallotRequestsTable.ColumnSet.All) + " WHERE Email=@Email";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return new LogSampleBallotRequestsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdateDateByEmail(DateTime? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET LastUpdateDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSiteIdByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET SiteId=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateScriptByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Script=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExplicitOptInByEmail(Boolean? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET ExplicitOptIn=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET ElectionKey=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET NewElectionKey=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET CongressionalDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateSenateDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateHouseDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET County=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET District=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlaceByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Place=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElementaryByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Elementary=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Secondary=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUnifiedByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Unified=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityCouncilByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET CityCouncil=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountySupervisorsByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET CountySupervisors=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSchoolDistrictDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET SchoolDistrictDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransferredToAddressesByEmail(Boolean? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET TransferredToAddresses=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET {0}=@newValue WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogSampleBallotRequestsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogSampleBallotRequestsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogSampleBallotRequests()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class LogSampleBallotRequestsReader : DataReaderBase
    {
      public LogSampleBallotRequestsReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public DateTime? LastUpdateDate
      {
        get { if (this.IsDBNull(GetOrdinal("LastUpdateDate"))) return null; else return (DateTime) this["LastUpdateDate"]; }
      }

      public String SiteId
      {
        get { return this["SiteId"] as String; }
      }

      public String Script
      {
        get { return this["Script"] as String; }
      }

      public Boolean? ExplicitOptIn
      {
        get { if (this.IsDBNull(GetOrdinal("ExplicitOptIn"))) return null; else return (Boolean) this["ExplicitOptIn"]; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
      }

      public String NewElectionKey
      {
        get { return this["NewElectionKey"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public String District
      {
        get { return this["District"] as String; }
      }

      public String Place
      {
        get { return this["Place"] as String; }
      }

      public String Elementary
      {
        get { return this["Elementary"] as String; }
      }

      public String Secondary
      {
        get { return this["Secondary"] as String; }
      }

      public String Unified
      {
        get { return this["Unified"] as String; }
      }

      public String CityCouncil
      {
        get { return this["CityCouncil"] as String; }
      }

      public String CountySupervisors
      {
        get { return this["CountySupervisors"] as String; }
      }

      public String SchoolDistrictDistrict
      {
        get { return this["SchoolDistrictDistrict"] as String; }
      }

      public Boolean? TransferredToAddresses
      {
        get { if (this.IsDBNull(GetOrdinal("TransferredToAddresses"))) return null; else return (Boolean) this["TransferredToAddresses"]; }
      }
    }

    #endregion votelog.LogSampleBallotRequests
  }
}
