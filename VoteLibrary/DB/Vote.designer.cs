//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Web.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using static System.String;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  public enum DbProvider { MsSql, MySql }

  public abstract class DataReaderBase : IDataReader, IDisposable, IDataRecord
  {
    DbDataReader _DataReader;
    DbConnection _Connection;
    public DataReaderBase(DbDataReader dataReader, DbConnection connection) { _DataReader = dataReader; _Connection = connection; }
    public DbDataReader DataReader { get { return _DataReader; } }
    public int Depth { get { return _DataReader.Depth; } }
    public int FieldCount { get { return _DataReader.FieldCount; } }
    public bool HasRows { get { return _DataReader.HasRows; } }
    public bool IsClosed { get { return _DataReader.IsClosed; } }
    public int RecordsAffected { get { return _DataReader.RecordsAffected; } }
    public virtual int VisibleFieldCount { get { return _DataReader.VisibleFieldCount; } }
    public object this[int ordinal] { get { return _DataReader[ordinal]; } }
    public object this[string name] { get { return _DataReader[name]; } }
    public void Close() { _DataReader.Close(); }
    public void Dispose() { _DataReader.Dispose(); if (_Connection != null) _Connection.Dispose(); }
    public bool GetBoolean(int ordinal) { return _DataReader.GetBoolean(ordinal); }
    public byte GetByte(int ordinal) { return _DataReader.GetByte(ordinal); }
    public long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) { return _DataReader.GetBytes(ordinal, dataOffset, buffer, bufferOffset, length); }
    public char GetChar(int ordinal) { return _DataReader.GetChar(ordinal); }
    public long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) { return _DataReader.GetChars(ordinal, dataOffset, buffer, bufferOffset, length); }
    public string GetDataTypeName(int ordinal) { return _DataReader.GetDataTypeName(ordinal); }
    public DateTime GetDateTime(int ordinal) { return _DataReader.GetDateTime(ordinal); }
    public decimal GetDecimal(int ordinal) { return _DataReader.GetDecimal(ordinal); }
    public double GetDouble(int ordinal) { return _DataReader.GetDouble(ordinal); }
    public Type GetFieldType(int ordinal) { return _DataReader.GetFieldType(ordinal); }
    public float GetFloat(int ordinal) { return _DataReader.GetFloat(ordinal); }
    public Guid GetGuid(int ordinal) { return _DataReader.GetGuid(ordinal); }
    public short GetInt16(int ordinal) { return _DataReader.GetInt16(ordinal); }
    public int GetInt32(int ordinal) { return _DataReader.GetInt32(ordinal); }
    public long GetInt64(int ordinal) { return _DataReader.GetInt64(ordinal); }
    public string GetName(int ordinal) { return _DataReader.GetName(ordinal); }
    public int GetOrdinal(string name) { return _DataReader.GetOrdinal(name); }
    public virtual Type GetProviderSpecificFieldType(int ordinal) { return _DataReader.GetProviderSpecificFieldType(ordinal); }
    public virtual object GetProviderSpecificValue(int ordinal) { return _DataReader.GetProviderSpecificValue(ordinal); }
    public virtual int GetProviderSpecificValues(object[] values) { return _DataReader.GetProviderSpecificValues(values); }
    public DataTable GetSchemaTable() { return _DataReader.GetSchemaTable(); }
    public string GetString(int ordinal) { return _DataReader.GetString(ordinal); }
    public object GetValue(int ordinal) { return _DataReader.GetValue(ordinal); }
    public int GetValues(object[] values) { return _DataReader.GetValues(values); }
    public bool IsDBNull(int ordinal) { return _DataReader.IsDBNull(ordinal); }
    public bool NextResult() { return _DataReader.NextResult(); }
    public bool Read() { return _DataReader.Read(); }
    IDataReader IDataRecord.GetData(int ordinal) { return _DataReader.GetData(ordinal); }
  }

  namespace Vote
  {
    #region vote Database

    public static partial class VoteDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=vote";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(WebConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVote.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (IsNullOrWhiteSpace(connectionString))
          connectionString = WebConfigurationManager.AppSettings["CnVote.MySql"];
        if (!IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout = -1)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion vote Database

    #region vote.Addresses

    public partial class AddressesRow : DataRow
    {
      internal AddressesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String SourceCode
      {
        get { return this["SourceCode"] as String; }
        set { if (value == null) this["SourceCode"] = DBNull.Value; else this["SourceCode"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }

      public Boolean SendSampleBallots
      {
        get { return (Boolean) this["SendSampleBallots"]; }
        set { this["SendSampleBallots"] = value; }
      }

      public Boolean SentBallotChoices
      {
        get { return (Boolean) this["SentBallotChoices"]; }
        set { this["SentBallotChoices"] = value; }
      }

      public DateTime EmailAttachedDate
      {
        get { return (DateTime) this["EmailAttachedDate"]; }
        set { this["EmailAttachedDate"] = value; }
      }

      public String EmailAttachedSource
      {
        get { return this["EmailAttachedSource"] as String; }
        set { if (value == null) this["EmailAttachedSource"] = DBNull.Value; else this["EmailAttachedSource"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String District
      {
        get { return this["District"] as String; }
        set { if (value == null) this["District"] = DBNull.Value; else this["District"] = value; }
      }

      public String Place
      {
        get { return this["Place"] as String; }
        set { if (value == null) this["Place"] = DBNull.Value; else this["Place"] = value; }
      }

      public String Elementary
      {
        get { return this["Elementary"] as String; }
        set { if (value == null) this["Elementary"] = DBNull.Value; else this["Elementary"] = value; }
      }

      public String Secondary
      {
        get { return this["Secondary"] as String; }
        set { if (value == null) this["Secondary"] = DBNull.Value; else this["Secondary"] = value; }
      }

      public String Unified
      {
        get { return this["Unified"] as String; }
        set { if (value == null) this["Unified"] = DBNull.Value; else this["Unified"] = value; }
      }

      public String CityCouncil
      {
        get { return this["CityCouncil"] as String; }
        set { if (value == null) this["CityCouncil"] = DBNull.Value; else this["CityCouncil"] = value; }
      }

      public String CountySupervisors
      {
        get { return this["CountySupervisors"] as String; }
        set { if (value == null) this["CountySupervisors"] = DBNull.Value; else this["CountySupervisors"] = value; }
      }

      public String SchoolDistrictDistrict
      {
        get { return this["SchoolDistrictDistrict"] as String; }
        set { if (value == null) this["SchoolDistrictDistrict"] = DBNull.Value; else this["SchoolDistrictDistrict"] = value; }
      }

      public Double? Latitude
      {
        get { if (this.IsNull("Latitude")) return null; else return (Double) this["Latitude"]; }
        set { if (value.HasValue) this["Latitude"] = value.Value; else this["Latitude"] = DBNull.Value; }
      }

      public Double? Longitude
      {
        get { if (this.IsNull("Longitude")) return null; else return (Double) this["Longitude"]; }
        set { if (value.HasValue) this["Longitude"] = value.Value; else this["Longitude"] = DBNull.Value; }
      }

      public DateTime DistrictLookupDate
      {
        get { return (DateTime) this["DistrictLookupDate"]; }
        set { this["DistrictLookupDate"] = value; }
      }

      public Int32 CommentCount
      {
        get { return (Int32) this["CommentCount"]; }
        set { this["CommentCount"] = value; }
      }

      public DateTime LastCommentDate
      {
        get { return (DateTime) this["LastCommentDate"]; }
        set { this["LastCommentDate"] = value; }
      }

      public Boolean IsDonor
      {
        get { return (Boolean) this["IsDonor"]; }
        set { this["IsDonor"] = value; }
      }
    }

    [Serializable]
    public partial class AddressesTable : TypedTableBase<AddressesRow>
    {
      public AddressesRow this[int index] { get { return (AddressesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AddressesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AddressesTable(); }

      new public AddressesRow NewRow() { return (AddressesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AddressesRow(rb); }

      protected override Type GetRowType()
      { return typeof(AddressesRow); }

      public void RemoveRow(AddressesRow row) { this.Rows.Remove(row); }

      public AddressesRow NewRow(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor)
      {
        AddressesRow row = NewRow();
        row.Id = id;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Email = email;
        row.Phone = phone;
        row.DateStamp = dateStamp;
        row.SourceCode = sourceCode;
        row.OptOut = optOut;
        row.SendSampleBallots = sendSampleBallots;
        row.SentBallotChoices = sentBallotChoices;
        row.EmailAttachedDate = emailAttachedDate;
        row.EmailAttachedSource = emailAttachedSource;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.District = district;
        row.Place = place;
        row.Elementary = elementary;
        row.Secondary = secondary;
        row.Unified = unified;
        row.CityCouncil = cityCouncil;
        row.CountySupervisors = countySupervisors;
        row.SchoolDistrictDistrict = schoolDistrictDistrict;
        row.Latitude = latitude;
        row.Longitude = longitude;
        row.DistrictLookupDate = districtLookupDate;
        row.CommentCount = commentCount;
        row.LastCommentDate = lastCommentDate;
        row.IsDonor = isDonor;
        return row;
      }

      public void AddRow(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor)
      {
        AddressesRow row = NewRow(id, firstName, lastName, address, city, stateCode, zip5, zip4, email, phone, dateStamp, sourceCode, optOut, sendSampleBallots, sentBallotChoices, emailAttachedDate, emailAttachedSource, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, district, place, elementary, secondary, unified, cityCouncil, countySupervisors, schoolDistrictDistrict, latitude, longitude, districtLookupDate, commentCount, lastCommentDate, isDonor);
        AddRow(row);
      }

      public AddressesRow NewRow(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor)
      {
        AddressesRow row = NewRow();
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Email = email;
        row.Phone = phone;
        row.DateStamp = dateStamp;
        row.SourceCode = sourceCode;
        row.OptOut = optOut;
        row.SendSampleBallots = sendSampleBallots;
        row.SentBallotChoices = sentBallotChoices;
        row.EmailAttachedDate = emailAttachedDate;
        row.EmailAttachedSource = emailAttachedSource;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.District = district;
        row.Place = place;
        row.Elementary = elementary;
        row.Secondary = secondary;
        row.Unified = unified;
        row.CityCouncil = cityCouncil;
        row.CountySupervisors = countySupervisors;
        row.SchoolDistrictDistrict = schoolDistrictDistrict;
        row.Latitude = latitude;
        row.Longitude = longitude;
        row.DistrictLookupDate = districtLookupDate;
        row.CommentCount = commentCount;
        row.LastCommentDate = lastCommentDate;
        row.IsDonor = isDonor;
        return row;
      }

      public void AddRow(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor)
      {
        AddressesRow row = NewRow(firstName, lastName, address, city, stateCode, zip5, zip4, email, phone, dateStamp, sourceCode, optOut, sendSampleBallots, sentBallotChoices, emailAttachedDate, emailAttachedSource, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, district, place, elementary, secondary, unified, cityCouncil, countySupervisors, schoolDistrictDistrict, latitude, longitude, districtLookupDate, commentCount, lastCommentDate, isDonor);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn SourceCodeColumn { get { return this.Columns["SourceCode"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public DataColumn SendSampleBallotsColumn { get { return this.Columns["SendSampleBallots"]; } }

      public DataColumn SentBallotChoicesColumn { get { return this.Columns["SentBallotChoices"]; } }

      public DataColumn EmailAttachedDateColumn { get { return this.Columns["EmailAttachedDate"]; } }

      public DataColumn EmailAttachedSourceColumn { get { return this.Columns["EmailAttachedSource"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn DistrictColumn { get { return this.Columns["District"]; } }

      public DataColumn PlaceColumn { get { return this.Columns["Place"]; } }

      public DataColumn ElementaryColumn { get { return this.Columns["Elementary"]; } }

      public DataColumn SecondaryColumn { get { return this.Columns["Secondary"]; } }

      public DataColumn UnifiedColumn { get { return this.Columns["Unified"]; } }

      public DataColumn CityCouncilColumn { get { return this.Columns["CityCouncil"]; } }

      public DataColumn CountySupervisorsColumn { get { return this.Columns["CountySupervisors"]; } }

      public DataColumn SchoolDistrictDistrictColumn { get { return this.Columns["SchoolDistrictDistrict"]; } }

      public DataColumn LatitudeColumn { get { return this.Columns["Latitude"]; } }

      public DataColumn LongitudeColumn { get { return this.Columns["Longitude"]; } }

      public DataColumn DistrictLookupDateColumn { get { return this.Columns["DistrictLookupDate"]; } }

      public DataColumn CommentCountColumn { get { return this.Columns["CommentCount"]; } }

      public DataColumn LastCommentDateColumn { get { return this.Columns["LastCommentDate"]; } }

      public DataColumn IsDonorColumn { get { return this.Columns["IsDonor"]; } }

      public enum ColumnSet { All, Emails, DistrictCoding }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SourceCode", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SendSampleBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SentBallotChoices", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAttachedDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAttachedSource", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("District", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Place", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Elementary", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Secondary", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Unified", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityCouncil", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountySupervisors", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SchoolDistrictDistrict", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Latitude", typeof(Double));
        base.Columns.Add(_column);
        _column = new DataColumn("Longitude", typeof(Double));
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictLookupDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CommentCount", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastCommentDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsDonor", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDistrictCodingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("District", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Place", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Elementary", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Secondary", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Unified", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityCouncil", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountySupervisors", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SchoolDistrictDistrict", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Latitude", typeof(Double));
        base.Columns.Add(_column);
        _column = new DataColumn("Longitude", typeof(Double));
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictLookupDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public AddressesTable() : this(ColumnSet.All) { }

      public AddressesTable(ColumnSet columnSet)
      {
        this.TableName = "Addresses";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Emails:
            InitEmailsColumns();
            break;

          case ColumnSet.DistrictCoding:
            InitDistrictCodingColumns();
            break;
        }
      }

      protected AddressesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Addresses
    {
      public const string TableName = "Addresses";

      public enum Column { Id, FirstName, LastName, Address, City, StateCode, Zip5, Zip4, Email, Phone, DateStamp, SourceCode, OptOut, SendSampleBallots, SentBallotChoices, EmailAttachedDate, EmailAttachedSource, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County, District, Place, Elementary, Secondary, Unified, CityCouncil, CountySupervisors, SchoolDistrictDistrict, Latitude, Longitude, DistrictLookupDate, CommentCount, LastCommentDate, IsDonor }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.Email, "Email" },
        { Column.Phone, "Phone" },
        { Column.DateStamp, "DateStamp" },
        { Column.SourceCode, "SourceCode" },
        { Column.OptOut, "OptOut" },
        { Column.SendSampleBallots, "SendSampleBallots" },
        { Column.SentBallotChoices, "SentBallotChoices" },
        { Column.EmailAttachedDate, "EmailAttachedDate" },
        { Column.EmailAttachedSource, "EmailAttachedSource" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" },
        { Column.District, "District" },
        { Column.Place, "Place" },
        { Column.Elementary, "Elementary" },
        { Column.Secondary, "Secondary" },
        { Column.Unified, "Unified" },
        { Column.CityCouncil, "CityCouncil" },
        { Column.CountySupervisors, "CountySupervisors" },
        { Column.SchoolDistrictDistrict, "SchoolDistrictDistrict" },
        { Column.Latitude, "Latitude" },
        { Column.Longitude, "Longitude" },
        { Column.DistrictLookupDate, "DistrictLookupDate" },
        { Column.CommentCount, "CommentCount" },
        { Column.LastCommentDate, "LastCommentDate" },
        { Column.IsDonor, "IsDonor" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Addresses (Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor) VALUES (@Id,@FirstName,@LastName,@Address,@City,@StateCode,@Zip5,@Zip4,@Email,@Phone,@DateStamp,@SourceCode,@OptOut,@SendSampleBallots,@SentBallotChoices,@EmailAttachedDate,@EmailAttachedSource,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@District,@Place,@Elementary,@Secondary,@Unified,@CityCouncil,@CountySupervisors,@SchoolDistrictDistrict,@Latitude,@Longitude,@DistrictLookupDate,@CommentCount,@LastCommentDate,@IsDonor)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "SourceCode", sourceCode);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "SendSampleBallots", sendSampleBallots);
        VoteDb.AddCommandParameter(cmd, "SentBallotChoices", sentBallotChoices);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedDate", emailAttachedDate);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedSource", emailAttachedSource);
        VoteDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteDb.AddCommandParameter(cmd, "County", county);
        VoteDb.AddCommandParameter(cmd, "District", district);
        VoteDb.AddCommandParameter(cmd, "Place", place);
        VoteDb.AddCommandParameter(cmd, "Elementary", elementary);
        VoteDb.AddCommandParameter(cmd, "Secondary", secondary);
        VoteDb.AddCommandParameter(cmd, "Unified", unified);
        VoteDb.AddCommandParameter(cmd, "CityCouncil", cityCouncil);
        VoteDb.AddCommandParameter(cmd, "CountySupervisors", countySupervisors);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrict", schoolDistrictDistrict);
        VoteDb.AddCommandParameter(cmd, "Latitude", latitude);
        VoteDb.AddCommandParameter(cmd, "Longitude", longitude);
        VoteDb.AddCommandParameter(cmd, "DistrictLookupDate", districtLookupDate);
        VoteDb.AddCommandParameter(cmd, "CommentCount", commentCount);
        VoteDb.AddCommandParameter(cmd, "LastCommentDate", lastCommentDate);
        VoteDb.AddCommandParameter(cmd, "IsDonor", isDonor);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, Boolean sentBallotChoices, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, String district, String place, String elementary, String secondary, String unified, String cityCouncil, String countySupervisors, String schoolDistrictDistrict, Double? latitude, Double? longitude, DateTime districtLookupDate, Int32 commentCount, DateTime lastCommentDate, Boolean isDonor, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Addresses (FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor) VALUES (@FirstName,@LastName,@Address,@City,@StateCode,@Zip5,@Zip4,@Email,@Phone,@DateStamp,@SourceCode,@OptOut,@SendSampleBallots,@SentBallotChoices,@EmailAttachedDate,@EmailAttachedSource,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@District,@Place,@Elementary,@Secondary,@Unified,@CityCouncil,@CountySupervisors,@SchoolDistrictDistrict,@Latitude,@Longitude,@DistrictLookupDate,@CommentCount,@LastCommentDate,@IsDonor)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "SourceCode", sourceCode);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "SendSampleBallots", sendSampleBallots);
        VoteDb.AddCommandParameter(cmd, "SentBallotChoices", sentBallotChoices);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedDate", emailAttachedDate);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedSource", emailAttachedSource);
        VoteDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteDb.AddCommandParameter(cmd, "County", county);
        VoteDb.AddCommandParameter(cmd, "District", district);
        VoteDb.AddCommandParameter(cmd, "Place", place);
        VoteDb.AddCommandParameter(cmd, "Elementary", elementary);
        VoteDb.AddCommandParameter(cmd, "Secondary", secondary);
        VoteDb.AddCommandParameter(cmd, "Unified", unified);
        VoteDb.AddCommandParameter(cmd, "CityCouncil", cityCouncil);
        VoteDb.AddCommandParameter(cmd, "CountySupervisors", countySupervisors);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrict", schoolDistrictDistrict);
        VoteDb.AddCommandParameter(cmd, "Latitude", latitude);
        VoteDb.AddCommandParameter(cmd, "Longitude", longitude);
        VoteDb.AddCommandParameter(cmd, "DistrictLookupDate", districtLookupDate);
        VoteDb.AddCommandParameter(cmd, "CommentCount", commentCount);
        VoteDb.AddCommandParameter(cmd, "LastCommentDate", lastCommentDate);
        VoteDb.AddCommandParameter(cmd, "IsDonor", isDonor);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor FROM Addresses";
        }
      }

      public static AddressesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static AddressesTable FillTable(DbCommand command)
      {
        return FillTable(command, AddressesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AddressesTable FillTable(DbCommand command, AddressesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AddressesTable table = new AddressesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(AddressesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, AddressesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(AddressesTable table, AddressesTable.ColumnSet columnSet = AddressesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string SourceCodeColumnName { get { return "SourceCode"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static string SendSampleBallotsColumnName { get { return "SendSampleBallots"; } }

      public static string SentBallotChoicesColumnName { get { return "SentBallotChoices"; } }

      public static string EmailAttachedDateColumnName { get { return "EmailAttachedDate"; } }

      public static string EmailAttachedSourceColumnName { get { return "EmailAttachedSource"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string DistrictColumnName { get { return "District"; } }

      public static string PlaceColumnName { get { return "Place"; } }

      public static string ElementaryColumnName { get { return "Elementary"; } }

      public static string SecondaryColumnName { get { return "Secondary"; } }

      public static string UnifiedColumnName { get { return "Unified"; } }

      public static string CityCouncilColumnName { get { return "CityCouncil"; } }

      public static string CountySupervisorsColumnName { get { return "CountySupervisors"; } }

      public static string SchoolDistrictDistrictColumnName { get { return "SchoolDistrictDistrict"; } }

      public static string LatitudeColumnName { get { return "Latitude"; } }

      public static string LongitudeColumnName { get { return "Longitude"; } }

      public static string DistrictLookupDateColumnName { get { return "DistrictLookupDate"; } }

      public static string CommentCountColumnName { get { return "CommentCount"; } }

      public static string LastCommentDateColumnName { get { return "LastCommentDate"; } }

      public static string IsDonorColumnName { get { return "IsDonor"; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int AddressMaxLength { get { return 80; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PhoneMaxLength { get { return 30; } }

      public static int SourceCodeMaxLength { get { return 4; } }

      public static int EmailAttachedSourceMaxLength { get { return 4; } }

      public static int CongressionalDistrictMaxLength { get { return 2; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int DistrictMaxLength { get { return 5; } }

      public static int PlaceMaxLength { get { return 5; } }

      public static int ElementaryMaxLength { get { return 5; } }

      public static int SecondaryMaxLength { get { return 5; } }

      public static int UnifiedMaxLength { get { return 5; } }

      public static int CityCouncilMaxLength { get { return 5; } }

      public static int CountySupervisorsMaxLength { get { return 5; } }

      public static int SchoolDistrictDistrictMaxLength { get { return 5; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetFirstNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FirstName FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastName FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip5ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip5 FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip4ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip4 FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetSourceCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SourceCode FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetOptOutById(Int32 id)
      {
        return _GetOptOutById(id, null);
      }

      public static Boolean GetOptOutById(Int32 id, Boolean defaultValue)
      {
        return _GetOptOutById(id, defaultValue).Value;
      }

      private static Boolean? _GetOptOutById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetSendSampleBallotsById(Int32 id)
      {
        return _GetSendSampleBallotsById(id, null);
      }

      public static Boolean GetSendSampleBallotsById(Int32 id, Boolean defaultValue)
      {
        return _GetSendSampleBallotsById(id, defaultValue).Value;
      }

      private static Boolean? _GetSendSampleBallotsById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT SendSampleBallots FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetSentBallotChoicesById(Int32 id)
      {
        return _GetSentBallotChoicesById(id, null);
      }

      public static Boolean GetSentBallotChoicesById(Int32 id, Boolean defaultValue)
      {
        return _GetSentBallotChoicesById(id, defaultValue).Value;
      }

      private static Boolean? _GetSentBallotChoicesById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT SentBallotChoices FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetEmailAttachedDateById(Int32 id)
      {
        return _GetEmailAttachedDateById(id, null);
      }

      public static DateTime GetEmailAttachedDateById(Int32 id, DateTime defaultValue)
      {
        return _GetEmailAttachedDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetEmailAttachedDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailAttachedDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEmailAttachedSourceById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAttachedSource FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT District FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlaceById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Place FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElementaryById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Elementary FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Secondary FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUnifiedById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Unified FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityCouncilById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityCouncil FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountySupervisorsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountySupervisors FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSchoolDistrictDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SchoolDistrictDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Double? GetLatitudeById(Int32 id)
      {
        return _GetLatitudeById(id, null);
      }

      public static Double GetLatitudeById(Int32 id, Double defaultValue)
      {
        return _GetLatitudeById(id, defaultValue).Value;
      }

      private static Double? _GetLatitudeById(Int32 id, Double? defaultValue)
      {
        object result;
        string cmdText = "SELECT Latitude FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Double) result;
      }

      public static Double? GetLongitudeById(Int32 id)
      {
        return _GetLongitudeById(id, null);
      }

      public static Double GetLongitudeById(Int32 id, Double defaultValue)
      {
        return _GetLongitudeById(id, defaultValue).Value;
      }

      private static Double? _GetLongitudeById(Int32 id, Double? defaultValue)
      {
        object result;
        string cmdText = "SELECT Longitude FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Double) result;
      }

      public static DateTime? GetDistrictLookupDateById(Int32 id)
      {
        return _GetDistrictLookupDateById(id, null);
      }

      public static DateTime GetDistrictLookupDateById(Int32 id, DateTime defaultValue)
      {
        return _GetDistrictLookupDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetDistrictLookupDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DistrictLookupDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetCommentCountById(Int32 id)
      {
        return _GetCommentCountById(id, null);
      }

      public static Int32 GetCommentCountById(Int32 id, Int32 defaultValue)
      {
        return _GetCommentCountById(id, defaultValue).Value;
      }

      private static Int32? _GetCommentCountById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CommentCount FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastCommentDateById(Int32 id)
      {
        return _GetLastCommentDateById(id, null);
      }

      public static DateTime GetLastCommentDateById(Int32 id, DateTime defaultValue)
      {
        return _GetLastCommentDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetLastCommentDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastCommentDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsDonorById(Int32 id)
      {
        return _GetIsDonorById(id, null);
      }

      public static Boolean GetIsDonorById(Int32 id, Boolean defaultValue)
      {
        return _GetIsDonorById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsDonorById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsDonor FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Addresses WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AddressesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetDataReaderById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.All) + " WHERE Id=@Id";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET FirstName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET LastName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Address=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET City=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Zip5=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Zip4=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Phone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SourceCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET OptOut=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSendSampleBallotsById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SendSampleBallots=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentBallotChoicesById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SentBallotChoices=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedSourceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedSource=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET CongressionalDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateSenateDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateHouseDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET County=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET District=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlaceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Place=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElementaryById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Elementary=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Secondary=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUnifiedById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Unified=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityCouncilById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET CityCouncil=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountySupervisorsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET CountySupervisors=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSchoolDistrictDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SchoolDistrictDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeById(Double? newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Latitude=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeById(Double? newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Longitude=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictLookupDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET DistrictLookupDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCommentCountById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET CommentCount=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastCommentDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET LastCommentDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDonorById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET IsDonor=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByEmail(String email)
      {
        return _GetIdByEmail(email, null);
      }

      public static Int32 GetIdByEmail(String email, Int32 defaultValue)
      {
        return _GetIdByEmail(email, defaultValue).Value;
      }

      private static Int32? _GetIdByEmail(String email, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetFirstNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FirstName FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastName FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip5ByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip5 FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip4ByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip4 FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByEmail(String email)
      {
        return _GetDateStampByEmail(email, null);
      }

      public static DateTime GetDateStampByEmail(String email, DateTime defaultValue)
      {
        return _GetDateStampByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetSourceCodeByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SourceCode FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetOptOutByEmail(String email)
      {
        return _GetOptOutByEmail(email, null);
      }

      public static Boolean GetOptOutByEmail(String email, Boolean defaultValue)
      {
        return _GetOptOutByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetOptOutByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetSendSampleBallotsByEmail(String email)
      {
        return _GetSendSampleBallotsByEmail(email, null);
      }

      public static Boolean GetSendSampleBallotsByEmail(String email, Boolean defaultValue)
      {
        return _GetSendSampleBallotsByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetSendSampleBallotsByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT SendSampleBallots FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetSentBallotChoicesByEmail(String email)
      {
        return _GetSentBallotChoicesByEmail(email, null);
      }

      public static Boolean GetSentBallotChoicesByEmail(String email, Boolean defaultValue)
      {
        return _GetSentBallotChoicesByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetSentBallotChoicesByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT SentBallotChoices FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetEmailAttachedDateByEmail(String email)
      {
        return _GetEmailAttachedDateByEmail(email, null);
      }

      public static DateTime GetEmailAttachedDateByEmail(String email, DateTime defaultValue)
      {
        return _GetEmailAttachedDateByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetEmailAttachedDateByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailAttachedDate FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEmailAttachedSourceByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAttachedSource FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateDistrict FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseDistrict FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT District FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlaceByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Place FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElementaryByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Elementary FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Secondary FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUnifiedByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Unified FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityCouncilByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityCouncil FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountySupervisorsByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountySupervisors FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSchoolDistrictDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SchoolDistrictDistrict FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Double? GetLatitudeByEmail(String email)
      {
        return _GetLatitudeByEmail(email, null);
      }

      public static Double GetLatitudeByEmail(String email, Double defaultValue)
      {
        return _GetLatitudeByEmail(email, defaultValue).Value;
      }

      private static Double? _GetLatitudeByEmail(String email, Double? defaultValue)
      {
        object result;
        string cmdText = "SELECT Latitude FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Double) result;
      }

      public static Double? GetLongitudeByEmail(String email)
      {
        return _GetLongitudeByEmail(email, null);
      }

      public static Double GetLongitudeByEmail(String email, Double defaultValue)
      {
        return _GetLongitudeByEmail(email, defaultValue).Value;
      }

      private static Double? _GetLongitudeByEmail(String email, Double? defaultValue)
      {
        object result;
        string cmdText = "SELECT Longitude FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Double) result;
      }

      public static DateTime? GetDistrictLookupDateByEmail(String email)
      {
        return _GetDistrictLookupDateByEmail(email, null);
      }

      public static DateTime GetDistrictLookupDateByEmail(String email, DateTime defaultValue)
      {
        return _GetDistrictLookupDateByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetDistrictLookupDateByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DistrictLookupDate FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetCommentCountByEmail(String email)
      {
        return _GetCommentCountByEmail(email, null);
      }

      public static Int32 GetCommentCountByEmail(String email, Int32 defaultValue)
      {
        return _GetCommentCountByEmail(email, defaultValue).Value;
      }

      private static Int32? _GetCommentCountByEmail(String email, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CommentCount FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastCommentDateByEmail(String email)
      {
        return _GetLastCommentDateByEmail(email, null);
      }

      public static DateTime GetLastCommentDateByEmail(String email, DateTime defaultValue)
      {
        return _GetLastCommentDateByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetLastCommentDateByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastCommentDate FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsDonorByEmail(String email)
      {
        return _GetIsDonorByEmail(email, null);
      }

      public static Boolean GetIsDonorByEmail(String email, Boolean defaultValue)
      {
        return _GetIsDonorByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetIsDonorByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsDonor FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Addresses WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AddressesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,SentBallotChoices,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate,CommentCount,LastCommentDate,IsDonor FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetDataReaderByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.All) + " WHERE Email=@Email";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Id=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET FirstName=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET LastName=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Address=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET City=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Zip5=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Zip4=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Phone=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET DateStamp=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SourceCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET OptOut=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSendSampleBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SendSampleBallots=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentBallotChoicesByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SentBallotChoices=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedSourceByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedSource=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET CongressionalDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateSenateDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateHouseDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET County=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET District=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlaceByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Place=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElementaryByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Elementary=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Secondary=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUnifiedByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Unified=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityCouncilByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET CityCouncil=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountySupervisorsByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET CountySupervisors=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSchoolDistrictDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SchoolDistrictDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByEmail(Double? newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Latitude=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByEmail(Double? newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Longitude=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictLookupDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET DistrictLookupDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCommentCountByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET CommentCount=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastCommentDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET LastCommentDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDonorByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET IsDonor=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET {0}=@newValue WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectEmailsCommandText
      {
        get
        {
          return "SELECT Id,Email FROM Addresses";
        }
      }

      public static AddressesTable GetAllEmailsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.Emails);
      }

      public static AddressesReader GetAllEmailsDataReader(int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.Emails);
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateEmails(AddressesTable table)
      {
        UpdateEmails(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateEmails(AddressesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AddressesTable.ColumnSet.Emails, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectDistrictCodingCommandText
      {
        get
        {
          return "SELECT Id,Address,City,StateCode,Zip5,Zip4,Email,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate FROM Addresses";
        }
      }

      public static AddressesTable GetAllDistrictCodingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Address,City,StateCode,Zip5,Zip4,Email,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,District,Place,Elementary,Secondary,Unified,CityCouncil,CountySupervisors,SchoolDistrictDistrict,Latitude,Longitude,DistrictLookupDate FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.DistrictCoding);
      }

      public static AddressesReader GetAllDistrictCodingDataReader(int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.DistrictCoding);
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateDistrictCoding(AddressesTable table)
      {
        UpdateDistrictCoding(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDistrictCoding(AddressesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AddressesTable.ColumnSet.DistrictCoding, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(AddressesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AddressesTable.ColumnSet.All:
            return SelectAllCommandText;

          case AddressesTable.ColumnSet.Emails:
            return SelectEmailsCommandText;

          case AddressesTable.ColumnSet.DistrictCoding:
            return SelectDistrictCodingCommandText;

          default:
            return null;
        }
      }

      static Addresses()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class AddressesReader : DataReaderBase
    {
      public AddressesReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String SourceCode
      {
        get { return this["SourceCode"] as String; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
      }

      public Boolean SendSampleBallots
      {
        get { return (Boolean) this["SendSampleBallots"]; }
      }

      public Boolean SentBallotChoices
      {
        get { return (Boolean) this["SentBallotChoices"]; }
      }

      public DateTime EmailAttachedDate
      {
        get { return (DateTime) this["EmailAttachedDate"]; }
      }

      public String EmailAttachedSource
      {
        get { return this["EmailAttachedSource"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public String District
      {
        get { return this["District"] as String; }
      }

      public String Place
      {
        get { return this["Place"] as String; }
      }

      public String Elementary
      {
        get { return this["Elementary"] as String; }
      }

      public String Secondary
      {
        get { return this["Secondary"] as String; }
      }

      public String Unified
      {
        get { return this["Unified"] as String; }
      }

      public String CityCouncil
      {
        get { return this["CityCouncil"] as String; }
      }

      public String CountySupervisors
      {
        get { return this["CountySupervisors"] as String; }
      }

      public String SchoolDistrictDistrict
      {
        get { return this["SchoolDistrictDistrict"] as String; }
      }

      public Double? Latitude
      {
        get { if (this.IsDBNull(GetOrdinal("Latitude"))) return null; else return (Double) this["Latitude"]; }
      }

      public Double? Longitude
      {
        get { if (this.IsDBNull(GetOrdinal("Longitude"))) return null; else return (Double) this["Longitude"]; }
      }

      public DateTime DistrictLookupDate
      {
        get { return (DateTime) this["DistrictLookupDate"]; }
      }

      public Int32 CommentCount
      {
        get { return (Int32) this["CommentCount"]; }
      }

      public DateTime LastCommentDate
      {
        get { return (DateTime) this["LastCommentDate"]; }
      }

      public Boolean IsDonor
      {
        get { return (Boolean) this["IsDonor"]; }
      }
    }

    #endregion vote.Addresses

    #region vote.AddressesMaster

    public partial class AddressesMasterRow : DataRow
    {
      internal AddressesMasterRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime? LastRemoveMalformed
      {
        get { if (this.IsNull("LastRemoveMalformed")) return null; else return (DateTime) this["LastRemoveMalformed"]; }
        set { if (value.HasValue) this["LastRemoveMalformed"] = value.Value; else this["LastRemoveMalformed"] = DBNull.Value; }
      }

      public DateTime? LastTransferFromAddressLog
      {
        get { if (this.IsNull("LastTransferFromAddressLog")) return null; else return (DateTime) this["LastTransferFromAddressLog"]; }
        set { if (value.HasValue) this["LastTransferFromAddressLog"] = value.Value; else this["LastTransferFromAddressLog"] = DBNull.Value; }
      }

      public DateTime? LastTransferFromSampleBallotLog
      {
        get { if (this.IsNull("LastTransferFromSampleBallotLog")) return null; else return (DateTime) this["LastTransferFromSampleBallotLog"]; }
        set { if (value.HasValue) this["LastTransferFromSampleBallotLog"] = value.Value; else this["LastTransferFromSampleBallotLog"] = DBNull.Value; }
      }

      public DateTime? LastLookupMissingDistricts
      {
        get { if (this.IsNull("LastLookupMissingDistricts")) return null; else return (DateTime) this["LastLookupMissingDistricts"]; }
        set { if (value.HasValue) this["LastLookupMissingDistricts"] = value.Value; else this["LastLookupMissingDistricts"] = DBNull.Value; }
      }

      public DateTime? LastRefreshAllDistricts
      {
        get { if (this.IsNull("LastRefreshAllDistricts")) return null; else return (DateTime) this["LastRefreshAllDistricts"]; }
        set { if (value.HasValue) this["LastRefreshAllDistricts"] = value.Value; else this["LastRefreshAllDistricts"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class AddressesMasterTable : TypedTableBase<AddressesMasterRow>
    {
      public AddressesMasterRow this[int index] { get { return (AddressesMasterRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AddressesMasterRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AddressesMasterTable(); }

      new public AddressesMasterRow NewRow() { return (AddressesMasterRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AddressesMasterRow(rb); }

      protected override Type GetRowType()
      { return typeof(AddressesMasterRow); }

      public void RemoveRow(AddressesMasterRow row) { this.Rows.Remove(row); }

      public AddressesMasterRow NewRow(Int32 id, DateTime? lastRemoveMalformed, DateTime? lastTransferFromAddressLog, DateTime? lastTransferFromSampleBallotLog, DateTime? lastLookupMissingDistricts, DateTime? lastRefreshAllDistricts)
      {
        AddressesMasterRow row = NewRow();
        row.Id = id;
        row.LastRemoveMalformed = lastRemoveMalformed;
        row.LastTransferFromAddressLog = lastTransferFromAddressLog;
        row.LastTransferFromSampleBallotLog = lastTransferFromSampleBallotLog;
        row.LastLookupMissingDistricts = lastLookupMissingDistricts;
        row.LastRefreshAllDistricts = lastRefreshAllDistricts;
        return row;
      }

      public void AddRow(Int32 id, DateTime? lastRemoveMalformed, DateTime? lastTransferFromAddressLog, DateTime? lastTransferFromSampleBallotLog, DateTime? lastLookupMissingDistricts, DateTime? lastRefreshAllDistricts)
      {
        AddressesMasterRow row = NewRow(id, lastRemoveMalformed, lastTransferFromAddressLog, lastTransferFromSampleBallotLog, lastLookupMissingDistricts, lastRefreshAllDistricts);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LastRemoveMalformedColumn { get { return this.Columns["LastRemoveMalformed"]; } }

      public DataColumn LastTransferFromAddressLogColumn { get { return this.Columns["LastTransferFromAddressLog"]; } }

      public DataColumn LastTransferFromSampleBallotLogColumn { get { return this.Columns["LastTransferFromSampleBallotLog"]; } }

      public DataColumn LastLookupMissingDistrictsColumn { get { return this.Columns["LastLookupMissingDistricts"]; } }

      public DataColumn LastRefreshAllDistrictsColumn { get { return this.Columns["LastRefreshAllDistricts"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastRemoveMalformed", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastTransferFromAddressLog", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastTransferFromSampleBallotLog", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastLookupMissingDistricts", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastRefreshAllDistricts", typeof(DateTime));
        base.Columns.Add(_column);
      }

      public AddressesMasterTable() : this(ColumnSet.All) { }

      public AddressesMasterTable(ColumnSet columnSet)
      {
        this.TableName = "AddressesMaster";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected AddressesMasterTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class AddressesMaster
    {
      public const string TableName = "AddressesMaster";

      public enum Column { Id, LastRemoveMalformed, LastTransferFromAddressLog, LastTransferFromSampleBallotLog, LastLookupMissingDistricts, LastRefreshAllDistricts }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LastRemoveMalformed, "LastRemoveMalformed" },
        { Column.LastTransferFromAddressLog, "LastTransferFromAddressLog" },
        { Column.LastTransferFromSampleBallotLog, "LastTransferFromSampleBallotLog" },
        { Column.LastLookupMissingDistricts, "LastLookupMissingDistricts" },
        { Column.LastRefreshAllDistricts, "LastRefreshAllDistricts" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LastRemoveMalformed,LastTransferFromAddressLog,LastTransferFromSampleBallotLog,LastLookupMissingDistricts,LastRefreshAllDistricts FROM AddressesMaster";
        }
      }

      public static AddressesMasterTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LastRemoveMalformed,LastTransferFromAddressLog,LastTransferFromSampleBallotLog,LastLookupMissingDistricts,LastRefreshAllDistricts FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesMasterTable.ColumnSet.All);
      }

      public static AddressesMasterTable FillTable(DbCommand command)
      {
        return FillTable(command, AddressesMasterTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AddressesMasterTable FillTable(DbCommand command, AddressesMasterTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AddressesMasterTable table = new AddressesMasterTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LastRemoveMalformedColumnName { get { return "LastRemoveMalformed"; } }

      public static string LastTransferFromAddressLogColumnName { get { return "LastTransferFromAddressLog"; } }

      public static string LastTransferFromSampleBallotLogColumnName { get { return "LastTransferFromSampleBallotLog"; } }

      public static string LastLookupMissingDistrictsColumnName { get { return "LastLookupMissingDistricts"; } }

      public static string LastRefreshAllDistrictsColumnName { get { return "LastRefreshAllDistricts"; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM AddressesMaster";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateId(Int32 newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET Id=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastRemoveMalformed(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastRemoveMalformed=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastTransferFromAddressLog(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastTransferFromAddressLog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastTransferFromSampleBallotLog(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastTransferFromSampleBallotLog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLookupMissingDistricts(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastLookupMissingDistricts=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastRefreshAllDistricts(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastRefreshAllDistricts=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET {0}=@newValue";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(AddressesMasterTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AddressesMasterTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static AddressesMaster()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.AddressesMaster

    #region vote.Answers

    public partial class AnswersRow : DataRow
    {
      internal AnswersRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan YouTubeRunningTime
      {
        get { return (TimeSpan) this["YouTubeRunningTime"]; }
        set { this["YouTubeRunningTime"] = value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime YouTubeDate
      {
        get { return (DateTime) this["YouTubeDate"]; }
        set { this["YouTubeDate"] = value; }
      }

      public DateTime YouTubeRefreshTime
      {
        get { return (DateTime) this["YouTubeRefreshTime"]; }
        set { this["YouTubeRefreshTime"] = value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }

      public String FacebookVideoUrl
      {
        get { return this["FacebookVideoUrl"] as String; }
        set { if (value == null) this["FacebookVideoUrl"] = DBNull.Value; else this["FacebookVideoUrl"] = value; }
      }

      public String FacebookVideoDescription
      {
        get { return this["FacebookVideoDescription"] as String; }
        set { if (value == null) this["FacebookVideoDescription"] = DBNull.Value; else this["FacebookVideoDescription"] = value; }
      }

      public TimeSpan FacebookVideoRunningTime
      {
        get { return (TimeSpan) this["FacebookVideoRunningTime"]; }
        set { this["FacebookVideoRunningTime"] = value; }
      }

      public DateTime FacebookVideoDate
      {
        get { return (DateTime) this["FacebookVideoDate"]; }
        set { this["FacebookVideoDate"] = value; }
      }

      public DateTime FacebookVideoRefreshTime
      {
        get { return (DateTime) this["FacebookVideoRefreshTime"]; }
        set { this["FacebookVideoRefreshTime"] = value; }
      }

      public String FacebookVideoAutoDisable
      {
        get { return this["FacebookVideoAutoDisable"] as String; }
        set { if (value == null) this["FacebookVideoAutoDisable"] = DBNull.Value; else this["FacebookVideoAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class AnswersTable : TypedTableBase<AnswersRow>
    {
      public AnswersRow this[int index] { get { return (AnswersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AnswersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AnswersTable(); }

      new public AnswersRow NewRow() { return (AnswersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AnswersRow(rb); }

      protected override Type GetRowType()
      { return typeof(AnswersRow); }

      public void RemoveRow(AnswersRow row) { this.Rows.Remove(row); }

      public AnswersRow NewRow(String politicianKey, String questionKey, Int32 sequence, String stateCode, String issueKey, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        AnswersRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.QuestionKey = questionKey;
        row.Sequence = sequence;
        row.StateCode = stateCode;
        row.IssueKey = issueKey;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.FacebookVideoUrl = facebookVideoUrl;
        row.FacebookVideoDescription = facebookVideoDescription;
        row.FacebookVideoRunningTime = facebookVideoRunningTime;
        row.FacebookVideoDate = facebookVideoDate;
        row.FacebookVideoRefreshTime = facebookVideoRefreshTime;
        row.FacebookVideoAutoDisable = facebookVideoAutoDisable;
        return row;
      }

      public void AddRow(String politicianKey, String questionKey, Int32 sequence, String stateCode, String issueKey, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        AnswersRow row = NewRow(politicianKey, questionKey, sequence, stateCode, issueKey, answer, source, dateStamp, userName, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable, facebookVideoUrl, facebookVideoDescription, facebookVideoRunningTime, facebookVideoDate, facebookVideoRefreshTime, facebookVideoAutoDisable);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public DataColumn FacebookVideoUrlColumn { get { return this.Columns["FacebookVideoUrl"]; } }

      public DataColumn FacebookVideoDescriptionColumn { get { return this.Columns["FacebookVideoDescription"]; } }

      public DataColumn FacebookVideoRunningTimeColumn { get { return this.Columns["FacebookVideoRunningTime"]; } }

      public DataColumn FacebookVideoDateColumn { get { return this.Columns["FacebookVideoDate"]; } }

      public DataColumn FacebookVideoRefreshTimeColumn { get { return this.Columns["FacebookVideoRefreshTime"]; } }

      public DataColumn FacebookVideoAutoDisableColumn { get { return this.Columns["FacebookVideoAutoDisable"]; } }

      public enum ColumnSet { All, VideoDesc, Keys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitVideoDescColumns()
      {
        DataColumn _column;
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public AnswersTable() : this(ColumnSet.All) { }

      public AnswersTable(ColumnSet columnSet)
      {
        this.TableName = "Answers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.VideoDesc:
            InitVideoDescColumns();
            break;

          case ColumnSet.Keys:
            InitKeysColumns();
            break;
        }
      }

      protected AnswersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Answers
    {
      public const string TableName = "Answers";

      public enum Column { PoliticianKey, QuestionKey, Sequence, StateCode, IssueKey, Answer, Source, DateStamp, UserName, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable, FacebookVideoUrl, FacebookVideoDescription, FacebookVideoRunningTime, FacebookVideoDate, FacebookVideoRefreshTime, FacebookVideoAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.QuestionKey, "QuestionKey" },
        { Column.Sequence, "Sequence" },
        { Column.StateCode, "StateCode" },
        { Column.IssueKey, "IssueKey" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" },
        { Column.FacebookVideoUrl, "FacebookVideoUrl" },
        { Column.FacebookVideoDescription, "FacebookVideoDescription" },
        { Column.FacebookVideoRunningTime, "FacebookVideoRunningTime" },
        { Column.FacebookVideoDate, "FacebookVideoDate" },
        { Column.FacebookVideoRefreshTime, "FacebookVideoRefreshTime" },
        { Column.FacebookVideoAutoDisable, "FacebookVideoAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers";
        }
      }

      public static AnswersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static AnswersTable FillTable(DbCommand command)
      {
        return FillTable(command, AnswersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AnswersTable FillTable(DbCommand command, AnswersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AnswersTable table = new AnswersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(AnswersTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, AnswersTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(AnswersTable table, AnswersTable.ColumnSet columnSet = AnswersTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static string FacebookVideoUrlColumnName { get { return "FacebookVideoUrl"; } }

      public static string FacebookVideoDescriptionColumnName { get { return "FacebookVideoDescription"; } }

      public static string FacebookVideoRunningTimeColumnName { get { return "FacebookVideoRunningTime"; } }

      public static string FacebookVideoDateColumnName { get { return "FacebookVideoDate"; } }

      public static string FacebookVideoRefreshTimeColumnName { get { return "FacebookVideoRefreshTime"; } }

      public static string FacebookVideoAutoDisableColumnName { get { return "FacebookVideoAutoDisable"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static int FacebookVideoUrlMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoDescriptionMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoAutoDisableMaxLength { get { return 40; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET QuestionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET Source=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKey(TimeSpan newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKey(TimeSpan newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKeyQuestionKey(Column _column, String politicianKey, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET QuestionKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKeyQuestionKey(Int32 newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Source=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKeyQuestionKey(DateTime newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKeyQuestionKey(TimeSpan newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKeyQuestionKey(DateTime newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKeyQuestionKey(DateTime newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKeyQuestionKey(TimeSpan newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKeyQuestionKey(DateTime newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKeyQuestionKey(DateTime newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKeyQuestionKey(String newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyQuestionKey(Column _column, object newValue, String politicianKey, String questionKey)
      {
        string cmdText = "UPDATE Answers SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PoliticianKeyQuestionKeySequenceExists(String politicianKey, String questionKey, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestionKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT QuestionKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAnswerByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Answer FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSourceByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetDateStampByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetDateStampByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeUrlByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeUrl FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeDescriptionByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeDescription FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static TimeSpan GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan defaultValue)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static TimeSpan? _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRunningTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static String GetYouTubeSourceByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSource FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeSourceUrlByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSourceUrl FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeDate FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRefreshTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetYouTubeAutoDisableByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookVideoUrlByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoUrl FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookVideoDescriptionByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoDescription FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static TimeSpan GetFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan defaultValue)
      {
        return _GetFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static TimeSpan? _GetFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoRunningTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static DateTime? GetFacebookVideoDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetFacebookVideoDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetFacebookVideoDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetFacebookVideoDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetFacebookVideoDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoDate FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoRefreshTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetFacebookVideoAutoDisableByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPoliticianKeyQuestionKeySequence(Column _column, String politicianKey, String questionKey, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET QuestionKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKeyQuestionKeySequence(Int32 newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET Source=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKeyQuestionKeySequence(DateTime newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(TimeSpan newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKeyQuestionKeySequence(DateTime newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(DateTime newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKeyQuestionKeySequence(TimeSpan newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKeyQuestionKeySequence(DateTime newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKeyQuestionKeySequence(DateTime newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKeyQuestionKeySequence(String newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyQuestionKeySequence(Column _column, object newValue, String politicianKey, String questionKey, Int32 sequence)
      {
        string cmdText = "UPDATE Answers SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByQuestionKey(Column _column, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET PoliticianKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET QuestionKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByQuestionKey(Int32 newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Sequence=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET StateCode=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET IssueKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Answer=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET Source=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET DateStamp=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET UserName=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeUrl=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDescription=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByQuestionKey(TimeSpan newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRunningTime=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSource=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeSourceUrl=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeDate=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeRefreshTime=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET YouTubeAutoDisable=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoUrl=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDescription=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByQuestionKey(TimeSpan newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRunningTime=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoDate=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoRefreshTime=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET FacebookVideoAutoDisable=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionKey(Column _column, object newValue, String questionKey)
      {
        string cmdText = "UPDATE Answers SET {0}=@newValue WHERE QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectVideoDescCommandText
      {
        get
        {
          return "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers";
        }
      }

      public static AnswersTable GetAllVideoDescData(int commandTimeout = -1)
      {
        string cmdText = "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AnswersTable.ColumnSet.VideoDesc);
      }

      public static void UpdateVideoDesc(AnswersTable table)
      {
        UpdateVideoDesc(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateVideoDesc(AnswersTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AnswersTable.ColumnSet.VideoDesc, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static AnswersTable GetVideoDescDataByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, AnswersTable.ColumnSet.VideoDesc);
      }

      public static AnswersTable GetVideoDescData(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        return GetVideoDescDataByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, commandTimeout);
      }

      public static string SelectKeysCommandText
      {
        get
        {
          return "SELECT PoliticianKey,QuestionKey,IssueKey FROM Answers";
        }
      }

      public static AnswersTable GetAllKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,IssueKey FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AnswersTable.ColumnSet.Keys);
      }

      public static void UpdateKeys(AnswersTable table)
      {
        UpdateKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateKeys(AnswersTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AnswersTable.ColumnSet.Keys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(AnswersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AnswersTable.ColumnSet.All:
            return SelectAllCommandText;

          case AnswersTable.ColumnSet.VideoDesc:
            return SelectVideoDescCommandText;

          case AnswersTable.ColumnSet.Keys:
            return SelectKeysCommandText;

          default:
            return null;
        }
      }

      static Answers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Answers

    #region vote.Answers2

    public partial class Answers2Row : DataRow
    {
      internal Answers2Row(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan YouTubeRunningTime
      {
        get { return (TimeSpan) this["YouTubeRunningTime"]; }
        set { this["YouTubeRunningTime"] = value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime YouTubeDate
      {
        get { return (DateTime) this["YouTubeDate"]; }
        set { this["YouTubeDate"] = value; }
      }

      public DateTime YouTubeRefreshTime
      {
        get { return (DateTime) this["YouTubeRefreshTime"]; }
        set { this["YouTubeRefreshTime"] = value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }

      public String FacebookVideoUrl
      {
        get { return this["FacebookVideoUrl"] as String; }
        set { if (value == null) this["FacebookVideoUrl"] = DBNull.Value; else this["FacebookVideoUrl"] = value; }
      }

      public String FacebookVideoDescription
      {
        get { return this["FacebookVideoDescription"] as String; }
        set { if (value == null) this["FacebookVideoDescription"] = DBNull.Value; else this["FacebookVideoDescription"] = value; }
      }

      public TimeSpan FacebookVideoRunningTime
      {
        get { return (TimeSpan) this["FacebookVideoRunningTime"]; }
        set { this["FacebookVideoRunningTime"] = value; }
      }

      public DateTime FacebookVideoDate
      {
        get { return (DateTime) this["FacebookVideoDate"]; }
        set { this["FacebookVideoDate"] = value; }
      }

      public DateTime FacebookVideoRefreshTime
      {
        get { return (DateTime) this["FacebookVideoRefreshTime"]; }
        set { this["FacebookVideoRefreshTime"] = value; }
      }

      public String FacebookVideoAutoDisable
      {
        get { return this["FacebookVideoAutoDisable"] as String; }
        set { if (value == null) this["FacebookVideoAutoDisable"] = DBNull.Value; else this["FacebookVideoAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class Answers2Table : TypedTableBase<Answers2Row>
    {
      public Answers2Row this[int index] { get { return (Answers2Row)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Answers2Row row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Answers2Table(); }

      new public Answers2Row NewRow() { return (Answers2Row) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Answers2Row(rb); }

      protected override Type GetRowType()
      { return typeof(Answers2Row); }

      public void RemoveRow(Answers2Row row) { this.Rows.Remove(row); }

      public Answers2Row NewRow(String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        Answers2Row row = NewRow();
        row.PoliticianKey = politicianKey;
        row.QuestionId = questionId;
        row.Sequence = sequence;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.FacebookVideoUrl = facebookVideoUrl;
        row.FacebookVideoDescription = facebookVideoDescription;
        row.FacebookVideoRunningTime = facebookVideoRunningTime;
        row.FacebookVideoDate = facebookVideoDate;
        row.FacebookVideoRefreshTime = facebookVideoRefreshTime;
        row.FacebookVideoAutoDisable = facebookVideoAutoDisable;
        return row;
      }

      public void AddRow(String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        Answers2Row row = NewRow(politicianKey, questionId, sequence, answer, source, dateStamp, userName, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable, facebookVideoUrl, facebookVideoDescription, facebookVideoRunningTime, facebookVideoDate, facebookVideoRefreshTime, facebookVideoAutoDisable);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public DataColumn FacebookVideoUrlColumn { get { return this.Columns["FacebookVideoUrl"]; } }

      public DataColumn FacebookVideoDescriptionColumn { get { return this.Columns["FacebookVideoDescription"]; } }

      public DataColumn FacebookVideoRunningTimeColumn { get { return this.Columns["FacebookVideoRunningTime"]; } }

      public DataColumn FacebookVideoDateColumn { get { return this.Columns["FacebookVideoDate"]; } }

      public DataColumn FacebookVideoRefreshTimeColumn { get { return this.Columns["FacebookVideoRefreshTime"]; } }

      public DataColumn FacebookVideoAutoDisableColumn { get { return this.Columns["FacebookVideoAutoDisable"]; } }

      public enum ColumnSet { All, VideoDesc }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitVideoDescColumns()
      {
        DataColumn _column;
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Answers2Table() : this(ColumnSet.All) { }

      public Answers2Table(ColumnSet columnSet)
      {
        this.TableName = "Answers2";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.VideoDesc:
            InitVideoDescColumns();
            break;
        }
      }

      protected Answers2Table(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Answers2
    {
      public const string TableName = "Answers2";

      public enum Column { PoliticianKey, QuestionId, Sequence, Answer, Source, DateStamp, UserName, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable, FacebookVideoUrl, FacebookVideoDescription, FacebookVideoRunningTime, FacebookVideoDate, FacebookVideoRefreshTime, FacebookVideoAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.QuestionId, "QuestionId" },
        { Column.Sequence, "Sequence" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" },
        { Column.FacebookVideoUrl, "FacebookVideoUrl" },
        { Column.FacebookVideoDescription, "FacebookVideoDescription" },
        { Column.FacebookVideoRunningTime, "FacebookVideoRunningTime" },
        { Column.FacebookVideoDate, "FacebookVideoDate" },
        { Column.FacebookVideoRefreshTime, "FacebookVideoRefreshTime" },
        { Column.FacebookVideoAutoDisable, "FacebookVideoAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Answers2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Answers2 (PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable) VALUES (@PoliticianKey,@QuestionId,@Sequence,@Answer,@Source,@DateStamp,@UserName,@YouTubeUrl,@YouTubeDescription,@YouTubeRunningTime,@YouTubeSource,@YouTubeSourceUrl,@YouTubeDate,@YouTubeRefreshTime,@YouTubeAutoDisable,@FacebookVideoUrl,@FacebookVideoDescription,@FacebookVideoRunningTime,@FacebookVideoDate,@FacebookVideoRefreshTime,@FacebookVideoAutoDisable)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "Answer", answer);
        VoteDb.AddCommandParameter(cmd, "Source", source);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "YouTubeUrl", youTubeUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDescription", youTubeDescription);
        VoteDb.AddCommandParameter(cmd, "YouTubeRunningTime", youTubeRunningTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeSource", youTubeSource);
        VoteDb.AddCommandParameter(cmd, "YouTubeSourceUrl", youTubeSourceUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDate", youTubeDate);
        VoteDb.AddCommandParameter(cmd, "YouTubeRefreshTime", youTubeRefreshTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeAutoDisable", youTubeAutoDisable);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoUrl", facebookVideoUrl);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDescription", facebookVideoDescription);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRunningTime", facebookVideoRunningTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDate", facebookVideoDate);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRefreshTime", facebookVideoRefreshTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoAutoDisable", facebookVideoAutoDisable);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2";
        }
      }

      public static Answers2Table GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Answers2Table.ColumnSet.All);
      }

      public static Answers2Table FillTable(DbCommand command)
      {
        return FillTable(command, Answers2Table.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Answers2Table FillTable(DbCommand command, Answers2Table.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          Answers2Table table = new Answers2Table(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Answers2Table table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Answers2Table.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Answers2Table table, Answers2Table.ColumnSet columnSet = Answers2Table.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static string FacebookVideoUrlColumnName { get { return "FacebookVideoUrl"; } }

      public static string FacebookVideoDescriptionColumnName { get { return "FacebookVideoDescription"; } }

      public static string FacebookVideoRunningTimeColumnName { get { return "FacebookVideoRunningTime"; } }

      public static string FacebookVideoDateColumnName { get { return "FacebookVideoDate"; } }

      public static string FacebookVideoRefreshTimeColumnName { get { return "FacebookVideoRefreshTime"; } }

      public static string FacebookVideoAutoDisableColumnName { get { return "FacebookVideoAutoDisable"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static int FacebookVideoUrlMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoDescriptionMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoAutoDisableMaxLength { get { return 40; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers2 WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers2 WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Answers2Table GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2 WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, Answers2Table.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET QuestionId=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET Source=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKey(TimeSpan newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKey(TimeSpan newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE Answers2 SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers2 WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKeyQuestionId(String politicianKey, Int32 questionId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKeyQuestionId(Column _column, String politicianKey, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Answers2Table GetDataByPoliticianKeyQuestionId(String politicianKey, Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return FillTable(cmd, Answers2Table.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByPoliticianKeyQuestionId(Int32 newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET QuestionId=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKeyQuestionId(Int32 newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Source=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKeyQuestionId(DateTime newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKeyQuestionId(TimeSpan newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKeyQuestionId(DateTime newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKeyQuestionId(DateTime newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKeyQuestionId(TimeSpan newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKeyQuestionId(DateTime newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKeyQuestionId(DateTime newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKeyQuestionId(String newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyQuestionId(Column _column, object newValue, String politicianKey, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyQuestionId(String politicianKey, Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PoliticianKeyQuestionIdSequenceExists(String politicianKey, Int32 questionId, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAnswerByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Answer FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSourceByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetDateStampByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static DateTime GetDateStampByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime defaultValue)
      {
        return _GetDateStampByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeUrlByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeUrl FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeDescriptionByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeDescription FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static TimeSpan GetYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, TimeSpan defaultValue)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static TimeSpan? _GetYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRunningTime FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static String GetYouTubeSourceByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSource FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeSourceUrlByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSourceUrl FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetYouTubeDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static DateTime GetYouTubeDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeDate FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static DateTime GetYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRefreshTime FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetYouTubeAutoDisableByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeAutoDisable FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookVideoUrlByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoUrl FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookVideoDescriptionByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoDescription FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static TimeSpan GetFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, TimeSpan defaultValue)
      {
        return _GetFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static TimeSpan? _GetFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoRunningTime FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static DateTime? GetFacebookVideoDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetFacebookVideoDateByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static DateTime GetFacebookVideoDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime defaultValue)
      {
        return _GetFacebookVideoDateByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static DateTime? _GetFacebookVideoDateByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoDate FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence)
      {
        return _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, null);
      }

      public static DateTime GetFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime defaultValue)
      {
        return _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, defaultValue).Value;
      }

      private static DateTime? _GetFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT FacebookVideoRefreshTime FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetFacebookVideoAutoDisableByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookVideoAutoDisable FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPoliticianKeyQuestionIdSequence(Column _column, String politicianKey, Int32 questionId, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Answers2Table GetDataByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, Answers2Table.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByPoliticianKeyQuestionIdSequence(Int32 newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET QuestionId=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByPoliticianKeyQuestionIdSequence(Int32 newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET Sequence=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET Answer=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET Source=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKeyQuestionIdSequence(DateTime newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKeyQuestionIdSequence(TimeSpan newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSource=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSourceUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByPoliticianKeyQuestionIdSequence(DateTime newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByPoliticianKeyQuestionIdSequence(DateTime newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoUrl=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDescription=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByPoliticianKeyQuestionIdSequence(TimeSpan newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByPoliticianKeyQuestionIdSequence(DateTime newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDate=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByPoliticianKeyQuestionIdSequence(DateTime newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRefreshTime=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByPoliticianKeyQuestionIdSequence(String newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyQuestionIdSequence(Column _column, object newValue, String politicianKey, Int32 questionId, Int32 sequence)
      {
        string cmdText = "UPDATE Answers2 SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByQuestionId(Column _column, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers2 WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Answers2Table GetDataByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM Answers2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return FillTable(cmd, Answers2Table.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET PoliticianKey=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET QuestionId=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Sequence=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Answer=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET Source=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET DateStamp=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET UserName=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDescription=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByQuestionId(TimeSpan newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRunningTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSource=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeSourceUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeDate=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeRefreshTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET YouTubeAutoDisable=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDescription=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByQuestionId(TimeSpan newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRunningTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoDate=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoRefreshTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET FacebookVideoAutoDisable=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionId(Column _column, object newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Answers2 SET {0}=@newValue WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectVideoDescCommandText
      {
        get
        {
          return "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers2";
        }
      }

      public static Answers2Table GetAllVideoDescData(int commandTimeout = -1)
      {
        string cmdText = "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Answers2Table.ColumnSet.VideoDesc);
      }

      public static void UpdateVideoDesc(Answers2Table table)
      {
        UpdateVideoDesc(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateVideoDesc(Answers2Table table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, Answers2Table.ColumnSet.VideoDesc, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static Answers2Table GetVideoDescDataByPoliticianKeyQuestionIdSequence(String politicianKey, Int32 questionId, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT YouTubeDescription,YouTubeRunningTime,FacebookVideoDescription,FacebookVideoRunningTime FROM Answers2 WHERE PoliticianKey=@PoliticianKey AND QuestionId=@QuestionId AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, Answers2Table.ColumnSet.VideoDesc);
      }

      public static Answers2Table GetVideoDescData(String politicianKey, Int32 questionId, Int32 sequence, int commandTimeout = -1)
      {
        return GetVideoDescDataByPoliticianKeyQuestionIdSequence(politicianKey, questionId, sequence, commandTimeout);
      }

      public static string GetSelectCommandText(Answers2Table.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Answers2Table.ColumnSet.All:
            return SelectAllCommandText;

          case Answers2Table.ColumnSet.VideoDesc:
            return SelectVideoDescCommandText;

          default:
            return null;
        }
      }

      static Answers2()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Answers2

    #region vote.AnswersView

    public partial class AnswersViewRow : DataRow
    {
      internal AnswersViewRow(DataRowBuilder rb) : base(rb) {}

      public String IssueGroupKey
      {
        get { return this["IssueGroupKey"] as String; }
        set { if (value == null) this["IssueGroupKey"] = DBNull.Value; else this["IssueGroupKey"] = value; }
      }

      public Int32? IssueGroupOrder
      {
        get { if (this.IsNull("IssueGroupOrder")) return null; else return (Int32) this["IssueGroupOrder"]; }
        set { if (value.HasValue) this["IssueGroupOrder"] = value.Value; else this["IssueGroupOrder"] = DBNull.Value; }
      }

      public String IssueGroupHeading
      {
        get { return this["IssueGroupHeading"] as String; }
        set { if (value == null) this["IssueGroupHeading"] = DBNull.Value; else this["IssueGroupHeading"] = value; }
      }

      public String IssueGroupSubHeading
      {
        get { return this["IssueGroupSubHeading"] as String; }
        set { if (value == null) this["IssueGroupSubHeading"] = DBNull.Value; else this["IssueGroupSubHeading"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32? IssueOrder
      {
        get { if (this.IsNull("IssueOrder")) return null; else return (Int32) this["IssueOrder"]; }
        set { if (value.HasValue) this["IssueOrder"] = value.Value; else this["IssueOrder"] = DBNull.Value; }
      }

      public String IssueLevel
      {
        get { return this["IssueLevel"] as String; }
        set { if (value == null) this["IssueLevel"] = DBNull.Value; else this["IssueLevel"] = value; }
      }

      public String Issue
      {
        get { return this["Issue"] as String; }
        set { if (value == null) this["Issue"] = DBNull.Value; else this["Issue"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Boolean? IsTextSourceOptional
      {
        get { if (this.IsNull("IsTextSourceOptional")) return null; else return (Boolean) this["IsTextSourceOptional"]; }
        set { if (value.HasValue) this["IsTextSourceOptional"] = value.Value; else this["IsTextSourceOptional"] = DBNull.Value; }
      }

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public Int32? QuestionOrder
      {
        get { if (this.IsNull("QuestionOrder")) return null; else return (Int32) this["QuestionOrder"]; }
        set { if (value.HasValue) this["QuestionOrder"] = value.Value; else this["QuestionOrder"] = DBNull.Value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime? DateStamp
      {
        get { if (this.IsNull("DateStamp")) return null; else return (DateTime) this["DateStamp"]; }
        set { if (value.HasValue) this["DateStamp"] = value.Value; else this["DateStamp"] = DBNull.Value; }
      }

      public Int32? Sequence
      {
        get { if (this.IsNull("Sequence")) return null; else return (Int32) this["Sequence"]; }
        set { if (value.HasValue) this["Sequence"] = value.Value; else this["Sequence"] = DBNull.Value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan? YouTubeRunningTime
      {
        get { if (this.IsNull("YouTubeRunningTime")) return null; else return (TimeSpan) this["YouTubeRunningTime"]; }
        set { if (value.HasValue) this["YouTubeRunningTime"] = value.Value; else this["YouTubeRunningTime"] = DBNull.Value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime? YouTubeDate
      {
        get { if (this.IsNull("YouTubeDate")) return null; else return (DateTime) this["YouTubeDate"]; }
        set { if (value.HasValue) this["YouTubeDate"] = value.Value; else this["YouTubeDate"] = DBNull.Value; }
      }

      public DateTime? YouTubeRefreshTime
      {
        get { if (this.IsNull("YouTubeRefreshTime")) return null; else return (DateTime) this["YouTubeRefreshTime"]; }
        set { if (value.HasValue) this["YouTubeRefreshTime"] = value.Value; else this["YouTubeRefreshTime"] = DBNull.Value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }

      public String FacebookVideoUrl
      {
        get { return this["FacebookVideoUrl"] as String; }
        set { if (value == null) this["FacebookVideoUrl"] = DBNull.Value; else this["FacebookVideoUrl"] = value; }
      }

      public String FacebookVideoDescription
      {
        get { return this["FacebookVideoDescription"] as String; }
        set { if (value == null) this["FacebookVideoDescription"] = DBNull.Value; else this["FacebookVideoDescription"] = value; }
      }

      public TimeSpan? FacebookVideoRunningTime
      {
        get { if (this.IsNull("FacebookVideoRunningTime")) return null; else return (TimeSpan) this["FacebookVideoRunningTime"]; }
        set { if (value.HasValue) this["FacebookVideoRunningTime"] = value.Value; else this["FacebookVideoRunningTime"] = DBNull.Value; }
      }

      public DateTime? FacebookVideoDate
      {
        get { if (this.IsNull("FacebookVideoDate")) return null; else return (DateTime) this["FacebookVideoDate"]; }
        set { if (value.HasValue) this["FacebookVideoDate"] = value.Value; else this["FacebookVideoDate"] = DBNull.Value; }
      }

      public DateTime? FacebookVideoRefreshTime
      {
        get { if (this.IsNull("FacebookVideoRefreshTime")) return null; else return (DateTime) this["FacebookVideoRefreshTime"]; }
        set { if (value.HasValue) this["FacebookVideoRefreshTime"] = value.Value; else this["FacebookVideoRefreshTime"] = DBNull.Value; }
      }

      public String FacebookVideoAutoDisable
      {
        get { return this["FacebookVideoAutoDisable"] as String; }
        set { if (value == null) this["FacebookVideoAutoDisable"] = DBNull.Value; else this["FacebookVideoAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class AnswersViewTable : TypedTableBase<AnswersViewRow>
    {
      public AnswersViewRow this[int index] { get { return (AnswersViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AnswersViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AnswersViewTable(); }

      new public AnswersViewRow NewRow() { return (AnswersViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AnswersViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(AnswersViewRow); }

      public void RemoveRow(AnswersViewRow row) { this.Rows.Remove(row); }

      public AnswersViewRow NewRow(String issueGroupKey, Int32? issueGroupOrder, String issueGroupHeading, String issueGroupSubHeading, String issueKey, Int32? issueOrder, String issueLevel, String issue, String stateCode, Boolean? isTextSourceOptional, String questionKey, Int32? questionOrder, String question, String politicianKey, String answer, String source, DateTime? dateStamp, Int32? sequence, String youTubeUrl, String youTubeDescription, TimeSpan? youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime? youTubeDate, DateTime? youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan? facebookVideoRunningTime, DateTime? facebookVideoDate, DateTime? facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        AnswersViewRow row = NewRow();
        row.IssueGroupKey = issueGroupKey;
        row.IssueGroupOrder = issueGroupOrder;
        row.IssueGroupHeading = issueGroupHeading;
        row.IssueGroupSubHeading = issueGroupSubHeading;
        row.IssueKey = issueKey;
        row.IssueOrder = issueOrder;
        row.IssueLevel = issueLevel;
        row.Issue = issue;
        row.StateCode = stateCode;
        row.IsTextSourceOptional = isTextSourceOptional;
        row.QuestionKey = questionKey;
        row.QuestionOrder = questionOrder;
        row.Question = question;
        row.PoliticianKey = politicianKey;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.Sequence = sequence;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.FacebookVideoUrl = facebookVideoUrl;
        row.FacebookVideoDescription = facebookVideoDescription;
        row.FacebookVideoRunningTime = facebookVideoRunningTime;
        row.FacebookVideoDate = facebookVideoDate;
        row.FacebookVideoRefreshTime = facebookVideoRefreshTime;
        row.FacebookVideoAutoDisable = facebookVideoAutoDisable;
        return row;
      }

      public void AddRow(String issueGroupKey, Int32? issueGroupOrder, String issueGroupHeading, String issueGroupSubHeading, String issueKey, Int32? issueOrder, String issueLevel, String issue, String stateCode, Boolean? isTextSourceOptional, String questionKey, Int32? questionOrder, String question, String politicianKey, String answer, String source, DateTime? dateStamp, Int32? sequence, String youTubeUrl, String youTubeDescription, TimeSpan? youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime? youTubeDate, DateTime? youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan? facebookVideoRunningTime, DateTime? facebookVideoDate, DateTime? facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        AnswersViewRow row = NewRow(issueGroupKey, issueGroupOrder, issueGroupHeading, issueGroupSubHeading, issueKey, issueOrder, issueLevel, issue, stateCode, isTextSourceOptional, questionKey, questionOrder, question, politicianKey, answer, source, dateStamp, sequence, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable, facebookVideoUrl, facebookVideoDescription, facebookVideoRunningTime, facebookVideoDate, facebookVideoRefreshTime, facebookVideoAutoDisable);
        AddRow(row);
      }

      public DataColumn IssueGroupKeyColumn { get { return this.Columns["IssueGroupKey"]; } }

      public DataColumn IssueGroupOrderColumn { get { return this.Columns["IssueGroupOrder"]; } }

      public DataColumn IssueGroupHeadingColumn { get { return this.Columns["IssueGroupHeading"]; } }

      public DataColumn IssueGroupSubHeadingColumn { get { return this.Columns["IssueGroupSubHeading"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public DataColumn IssueLevelColumn { get { return this.Columns["IssueLevel"]; } }

      public DataColumn IssueColumn { get { return this.Columns["Issue"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn IsTextSourceOptionalColumn { get { return this.Columns["IsTextSourceOptional"]; } }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn QuestionOrderColumn { get { return this.Columns["QuestionOrder"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public DataColumn FacebookVideoUrlColumn { get { return this.Columns["FacebookVideoUrl"]; } }

      public DataColumn FacebookVideoDescriptionColumn { get { return this.Columns["FacebookVideoDescription"]; } }

      public DataColumn FacebookVideoRunningTimeColumn { get { return this.Columns["FacebookVideoRunningTime"]; } }

      public DataColumn FacebookVideoDateColumn { get { return this.Columns["FacebookVideoDate"]; } }

      public DataColumn FacebookVideoRefreshTimeColumn { get { return this.Columns["FacebookVideoRefreshTime"]; } }

      public DataColumn FacebookVideoAutoDisableColumn { get { return this.Columns["FacebookVideoAutoDisable"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupKey", typeof(String));
        _column.MaxLength = 20;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupHeading", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupSubHeading", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueLevel", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextSourceOptional", typeof(Boolean));
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.MaxLength = 150;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDate", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRefreshTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      public AnswersViewTable() : this(ColumnSet.All) { }

      public AnswersViewTable(ColumnSet columnSet)
      {
        this.TableName = "AnswersView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected AnswersViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class AnswersView
    {
      public const string TableName = "AnswersView";

      public enum Column { IssueGroupKey, IssueGroupOrder, IssueGroupHeading, IssueGroupSubHeading, IssueKey, IssueOrder, IssueLevel, Issue, StateCode, IsTextSourceOptional, QuestionKey, QuestionOrder, Question, PoliticianKey, Answer, Source, DateStamp, Sequence, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable, FacebookVideoUrl, FacebookVideoDescription, FacebookVideoRunningTime, FacebookVideoDate, FacebookVideoRefreshTime, FacebookVideoAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupKey, "IssueGroupKey" },
        { Column.IssueGroupOrder, "IssueGroupOrder" },
        { Column.IssueGroupHeading, "IssueGroupHeading" },
        { Column.IssueGroupSubHeading, "IssueGroupSubHeading" },
        { Column.IssueKey, "IssueKey" },
        { Column.IssueOrder, "IssueOrder" },
        { Column.IssueLevel, "IssueLevel" },
        { Column.Issue, "Issue" },
        { Column.StateCode, "StateCode" },
        { Column.IsTextSourceOptional, "IsTextSourceOptional" },
        { Column.QuestionKey, "QuestionKey" },
        { Column.QuestionOrder, "QuestionOrder" },
        { Column.Question, "Question" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.Sequence, "Sequence" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" },
        { Column.FacebookVideoUrl, "FacebookVideoUrl" },
        { Column.FacebookVideoDescription, "FacebookVideoDescription" },
        { Column.FacebookVideoRunningTime, "FacebookVideoRunningTime" },
        { Column.FacebookVideoDate, "FacebookVideoDate" },
        { Column.FacebookVideoRefreshTime, "FacebookVideoRefreshTime" },
        { Column.FacebookVideoAutoDisable, "FacebookVideoAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AnswersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupKey,IssueGroupOrder,IssueGroupHeading,IssueGroupSubHeading,IssueKey,IssueOrder,IssueLevel,Issue,StateCode,IsTextSourceOptional,QuestionKey,QuestionOrder,Question,PoliticianKey,Answer,Source,DateStamp,Sequence,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM AnswersView";
        }
      }

      public static AnswersViewTable FillTable(DbCommand command)
      {
        return FillTable(command, AnswersViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AnswersViewTable FillTable(DbCommand command, AnswersViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AnswersViewTable table = new AnswersViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IssueGroupKeyColumnName { get { return "IssueGroupKey"; } }

      public static string IssueGroupOrderColumnName { get { return "IssueGroupOrder"; } }

      public static string IssueGroupHeadingColumnName { get { return "IssueGroupHeading"; } }

      public static string IssueGroupSubHeadingColumnName { get { return "IssueGroupSubHeading"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static string IssueLevelColumnName { get { return "IssueLevel"; } }

      public static string IssueColumnName { get { return "Issue"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string IsTextSourceOptionalColumnName { get { return "IsTextSourceOptional"; } }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string QuestionOrderColumnName { get { return "QuestionOrder"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static string FacebookVideoUrlColumnName { get { return "FacebookVideoUrl"; } }

      public static string FacebookVideoDescriptionColumnName { get { return "FacebookVideoDescription"; } }

      public static string FacebookVideoRunningTimeColumnName { get { return "FacebookVideoRunningTime"; } }

      public static string FacebookVideoDateColumnName { get { return "FacebookVideoDate"; } }

      public static string FacebookVideoRefreshTimeColumnName { get { return "FacebookVideoRefreshTime"; } }

      public static string FacebookVideoAutoDisableColumnName { get { return "FacebookVideoAutoDisable"; } }

      public static int IssueGroupKeyMaxLength { get { return 20; } }

      public static int IssueGroupHeadingMaxLength { get { return 255; } }

      public static int IssueGroupSubHeadingMaxLength { get { return 255; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int IssueLevelMaxLength { get { return 1; } }

      public static int IssueMaxLength { get { return 40; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int QuestionMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static int FacebookVideoUrlMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoDescriptionMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoAutoDisableMaxLength { get { return 40; } }

      public static string GetSelectCommandText(AnswersViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AnswersViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static AnswersView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.AnswersView

    #region vote.BallotPediaCsvs

    public partial class BallotPediaCsvsRow : DataRow
    {
      internal BallotPediaCsvsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Filename
      {
        get { return this["Filename"] as String; }
        set { if (value == null) this["Filename"] = DBNull.Value; else this["Filename"] = value; }
      }

      public DateTime UploadTime
      {
        get { return (DateTime) this["UploadTime"]; }
        set { this["UploadTime"] = value; }
      }

      public String Content
      {
        get { return this["Content"] as String; }
        set { if (value == null) this["Content"] = DBNull.Value; else this["Content"] = value; }
      }

      public Int32 Candidates
      {
        get { return (Int32) this["Candidates"]; }
        set { this["Candidates"] = value; }
      }

      public Int32 CandidatesCoded
      {
        get { return (Int32) this["CandidatesCoded"]; }
        set { this["CandidatesCoded"] = value; }
      }

      public Boolean Completed
      {
        get { return (Boolean) this["Completed"]; }
        set { this["Completed"] = value; }
      }
    }

    [Serializable]
    public partial class BallotPediaCsvsTable : TypedTableBase<BallotPediaCsvsRow>
    {
      public BallotPediaCsvsRow this[int index] { get { return (BallotPediaCsvsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(BallotPediaCsvsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new BallotPediaCsvsTable(); }

      new public BallotPediaCsvsRow NewRow() { return (BallotPediaCsvsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new BallotPediaCsvsRow(rb); }

      protected override Type GetRowType()
      { return typeof(BallotPediaCsvsRow); }

      public void RemoveRow(BallotPediaCsvsRow row) { this.Rows.Remove(row); }

      public BallotPediaCsvsRow NewRow(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow();
        row.Id = id;
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.Candidates = candidates;
        row.CandidatesCoded = candidatesCoded;
        row.Completed = completed;
        return row;
      }

      public void AddRow(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow(id, filename, uploadTime, content, candidates, candidatesCoded, completed);
        AddRow(row);
      }

      public BallotPediaCsvsRow NewRow(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow();
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.Candidates = candidates;
        row.CandidatesCoded = candidatesCoded;
        row.Completed = completed;
        return row;
      }

      public void AddRow(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow(filename, uploadTime, content, candidates, candidatesCoded, completed);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn FilenameColumn { get { return this.Columns["Filename"]; } }

      public DataColumn UploadTimeColumn { get { return this.Columns["UploadTime"]; } }

      public DataColumn ContentColumn { get { return this.Columns["Content"]; } }

      public DataColumn CandidatesColumn { get { return this.Columns["Candidates"]; } }

      public DataColumn CandidatesCodedColumn { get { return this.Columns["CandidatesCoded"]; } }

      public DataColumn CompletedColumn { get { return this.Columns["Completed"]; } }

      public enum ColumnSet { All, NoContent }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Content", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Candidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidatesCoded", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitNoContentColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Candidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidatesCoded", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public BallotPediaCsvsTable() : this(ColumnSet.All) { }

      public BallotPediaCsvsTable(ColumnSet columnSet)
      {
        this.TableName = "BallotPediaCsvs";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.NoContent:
            InitNoContentColumns();
            break;
        }
      }

      protected BallotPediaCsvsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class BallotPediaCsvs
    {
      public const string TableName = "BallotPediaCsvs";

      public enum Column { Id, Filename, UploadTime, Content, Candidates, CandidatesCoded, Completed }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Filename, "Filename" },
        { Column.UploadTime, "UploadTime" },
        { Column.Content, "Content" },
        { Column.Candidates, "Candidates" },
        { Column.CandidatesCoded, "CandidatesCoded" },
        { Column.Completed, "Completed" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BallotPediaCsvs (Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed) VALUES (@Id,@Filename,@UploadTime,@Content,@Candidates,@CandidatesCoded,@Completed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "Candidates", candidates);
        VoteDb.AddCommandParameter(cmd, "CandidatesCoded", candidatesCoded);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BallotPediaCsvs (Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed) VALUES (@Filename,@UploadTime,@Content,@Candidates,@CandidatesCoded,@Completed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "Candidates", candidates);
        VoteDb.AddCommandParameter(cmd, "CandidatesCoded", candidatesCoded);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        }
      }

      public static BallotPediaCsvsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static BallotPediaCsvsTable FillTable(DbCommand command)
      {
        return FillTable(command, BallotPediaCsvsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static BallotPediaCsvsTable FillTable(DbCommand command, BallotPediaCsvsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          BallotPediaCsvsTable table = new BallotPediaCsvsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string FilenameColumnName { get { return "Filename"; } }

      public static string UploadTimeColumnName { get { return "UploadTime"; } }

      public static string ContentColumnName { get { return "Content"; } }

      public static string CandidatesColumnName { get { return "Candidates"; } }

      public static string CandidatesCodedColumnName { get { return "CandidatesCoded"; } }

      public static string CompletedColumnName { get { return "Completed"; } }

      public static int FilenameMaxLength { get { return 255; } }

      public static int ContentMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetFilenameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Filename FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetUploadTimeById(Int32 id)
      {
        return _GetUploadTimeById(id, null);
      }

      public static DateTime GetUploadTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetUploadTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetUploadTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT UploadTime FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContentById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Content FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetCandidatesById(Int32 id)
      {
        return _GetCandidatesById(id, null);
      }

      public static Int32 GetCandidatesById(Int32 id, Int32 defaultValue)
      {
        return _GetCandidatesById(id, defaultValue).Value;
      }

      private static Int32? _GetCandidatesById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Candidates FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetCandidatesCodedById(Int32 id)
      {
        return _GetCandidatesCodedById(id, null);
      }

      public static Int32 GetCandidatesCodedById(Int32 id, Int32 defaultValue)
      {
        return _GetCandidatesCodedById(id, defaultValue).Value;
      }

      private static Int32? _GetCandidatesCodedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CandidatesCoded FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetCompletedById(Int32 id)
      {
        return _GetCompletedById(id, null);
      }

      public static Boolean GetCompletedById(Int32 id, Boolean defaultValue)
      {
        return _GetCompletedById(id, defaultValue).Value;
      }

      private static Boolean? _GetCompletedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Completed FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM BallotPediaCsvs WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static BallotPediaCsvsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFilenameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Filename=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUploadTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET UploadTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContentById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Content=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Candidates=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesCodedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET CandidatesCoded=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompletedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Completed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool FilenameExists(String filename)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByFilename(String filename)
      {
        return _GetIdByFilename(filename, null);
      }

      public static Int32 GetIdByFilename(String filename, Int32 defaultValue)
      {
        return _GetIdByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetIdByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetFilenameByFilename(String filename, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Filename FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetUploadTimeByFilename(String filename)
      {
        return _GetUploadTimeByFilename(filename, null);
      }

      public static DateTime GetUploadTimeByFilename(String filename, DateTime defaultValue)
      {
        return _GetUploadTimeByFilename(filename, defaultValue).Value;
      }

      private static DateTime? _GetUploadTimeByFilename(String filename, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT UploadTime FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContentByFilename(String filename, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Content FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetCandidatesByFilename(String filename)
      {
        return _GetCandidatesByFilename(filename, null);
      }

      public static Int32 GetCandidatesByFilename(String filename, Int32 defaultValue)
      {
        return _GetCandidatesByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetCandidatesByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Candidates FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetCandidatesCodedByFilename(String filename)
      {
        return _GetCandidatesCodedByFilename(filename, null);
      }

      public static Int32 GetCandidatesCodedByFilename(String filename, Int32 defaultValue)
      {
        return _GetCandidatesCodedByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetCandidatesCodedByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CandidatesCoded FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetCompletedByFilename(String filename)
      {
        return _GetCompletedByFilename(filename, null);
      }

      public static Boolean GetCompletedByFilename(String filename, Boolean defaultValue)
      {
        return _GetCompletedByFilename(filename, defaultValue).Value;
      }

      private static Boolean? _GetCompletedByFilename(String filename, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Completed FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByFilename(Column _column, String filename)
      {
        object result;
        string cmdText = "SELECT {0} FROM BallotPediaCsvs WHERE Filename=@Filename";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static BallotPediaCsvsTable GetDataByFilename(String filename, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static int UpdateIdByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Id=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFilenameByFilename(String newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Filename=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUploadTimeByFilename(DateTime newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET UploadTime=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContentByFilename(String newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Content=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Candidates=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesCodedByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET CandidatesCoded=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompletedByFilename(Boolean newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Completed=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFilename(Column _column, object newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET {0}=@newValue WHERE Filename=@Filename";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFilename(String filename, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectNoContentCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        }
      }

      public static BallotPediaCsvsTable GetAllNoContentData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.NoContent);
      }

      public static BallotPediaCsvsTable GetNoContentDataByCompleted(Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Completed=@Completed";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.NoContent);
      }

      public static BallotPediaCsvsTable GetNoContentData(Boolean completed, int commandTimeout = -1)
      {
        return GetNoContentDataByCompleted(completed, commandTimeout);
      }

      public static string GetSelectCommandText(BallotPediaCsvsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case BallotPediaCsvsTable.ColumnSet.All:
            return SelectAllCommandText;

          case BallotPediaCsvsTable.ColumnSet.NoContent:
            return SelectNoContentCommandText;

          default:
            return null;
        }
      }

      static BallotPediaCsvs()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.BallotPediaCsvs

    #region vote.BannerAds

    public partial class BannerAdsRow : DataRow
    {
      internal BannerAdsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String AdType
      {
        get { return this["AdType"] as String; }
        set { if (value == null) this["AdType"] = DBNull.Value; else this["AdType"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] AdImage
      {
        get { return this["AdImage"] as Byte[]; }
        set { if (value == null) this["AdImage"] = DBNull.Value; else this["AdImage"] = value; }
      }

      public String AdImageName
      {
        get { return this["AdImageName"] as String; }
        set { if (value == null) this["AdImageName"] = DBNull.Value; else this["AdImageName"] = value; }
      }

      public String AdUrl
      {
        get { return this["AdUrl"] as String; }
        set { if (value == null) this["AdUrl"] = DBNull.Value; else this["AdUrl"] = value; }
      }

      public Boolean AdEnabled
      {
        get { return (Boolean) this["AdEnabled"]; }
        set { this["AdEnabled"] = value; }
      }

      public String AdMediaType
      {
        get { return this["AdMediaType"] as String; }
        set { if (value == null) this["AdMediaType"] = DBNull.Value; else this["AdMediaType"] = value; }
      }

      public String AdYouTubeUrl
      {
        get { return this["AdYouTubeUrl"] as String; }
        set { if (value == null) this["AdYouTubeUrl"] = DBNull.Value; else this["AdYouTubeUrl"] = value; }
      }

      public String AdDescription1
      {
        get { return this["AdDescription1"] as String; }
        set { if (value == null) this["AdDescription1"] = DBNull.Value; else this["AdDescription1"] = value; }
      }

      public String AdDescription2
      {
        get { return this["AdDescription2"] as String; }
        set { if (value == null) this["AdDescription2"] = DBNull.Value; else this["AdDescription2"] = value; }
      }

      public String AdDescriptionUrl
      {
        get { return this["AdDescriptionUrl"] as String; }
        set { if (value == null) this["AdDescriptionUrl"] = DBNull.Value; else this["AdDescriptionUrl"] = value; }
      }

      public Boolean AdIsPaid
      {
        get { return (Boolean) this["AdIsPaid"]; }
        set { this["AdIsPaid"] = value; }
      }
    }

    [Serializable]
    public partial class BannerAdsTable : TypedTableBase<BannerAdsRow>
    {
      public BannerAdsRow this[int index] { get { return (BannerAdsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(BannerAdsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new BannerAdsTable(); }

      new public BannerAdsRow NewRow() { return (BannerAdsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new BannerAdsRow(rb); }

      protected override Type GetRowType()
      { return typeof(BannerAdsRow); }

      public void RemoveRow(BannerAdsRow row) { this.Rows.Remove(row); }

      public BannerAdsRow NewRow(Int32 id, String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid)
      {
        BannerAdsRow row = NewRow();
        row.Id = id;
        row.AdType = adType;
        row.StateCode = stateCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.AdImage = adImage;
        row.AdImageName = adImageName;
        row.AdUrl = adUrl;
        row.AdEnabled = adEnabled;
        row.AdMediaType = adMediaType;
        row.AdYouTubeUrl = adYouTubeUrl;
        row.AdDescription1 = adDescription1;
        row.AdDescription2 = adDescription2;
        row.AdDescriptionUrl = adDescriptionUrl;
        row.AdIsPaid = adIsPaid;
        return row;
      }

      public void AddRow(Int32 id, String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid)
      {
        BannerAdsRow row = NewRow(id, adType, stateCode, electionKey, officeKey, adImage, adImageName, adUrl, adEnabled, adMediaType, adYouTubeUrl, adDescription1, adDescription2, adDescriptionUrl, adIsPaid);
        AddRow(row);
      }

      public BannerAdsRow NewRow(String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid)
      {
        BannerAdsRow row = NewRow();
        row.AdType = adType;
        row.StateCode = stateCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.AdImage = adImage;
        row.AdImageName = adImageName;
        row.AdUrl = adUrl;
        row.AdEnabled = adEnabled;
        row.AdMediaType = adMediaType;
        row.AdYouTubeUrl = adYouTubeUrl;
        row.AdDescription1 = adDescription1;
        row.AdDescription2 = adDescription2;
        row.AdDescriptionUrl = adDescriptionUrl;
        row.AdIsPaid = adIsPaid;
        return row;
      }

      public void AddRow(String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid)
      {
        BannerAdsRow row = NewRow(adType, stateCode, electionKey, officeKey, adImage, adImageName, adUrl, adEnabled, adMediaType, adYouTubeUrl, adDescription1, adDescription2, adDescriptionUrl, adIsPaid);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn AdTypeColumn { get { return this.Columns["AdType"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn AdImageColumn { get { return this.Columns["AdImage"]; } }

      public DataColumn AdImageNameColumn { get { return this.Columns["AdImageName"]; } }

      public DataColumn AdUrlColumn { get { return this.Columns["AdUrl"]; } }

      public DataColumn AdEnabledColumn { get { return this.Columns["AdEnabled"]; } }

      public DataColumn AdMediaTypeColumn { get { return this.Columns["AdMediaType"]; } }

      public DataColumn AdYouTubeUrlColumn { get { return this.Columns["AdYouTubeUrl"]; } }

      public DataColumn AdDescription1Column { get { return this.Columns["AdDescription1"]; } }

      public DataColumn AdDescription2Column { get { return this.Columns["AdDescription2"]; } }

      public DataColumn AdDescriptionUrlColumn { get { return this.Columns["AdDescriptionUrl"]; } }

      public DataColumn AdIsPaidColumn { get { return this.Columns["AdIsPaid"]; } }

      public enum ColumnSet { All, RenderInfo, RenderInfo2 }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("AdType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdImage", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("AdImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdMediaType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdYouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescription1", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescription2", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescriptionUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdIsPaid", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitRenderInfoColumns()
      {
        DataColumn _column;
        _column = new DataColumn("AdUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitRenderInfo2Columns()
      {
        DataColumn _column;
        _column = new DataColumn("AdImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdMediaType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdYouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescription1", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescription2", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdDescriptionUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdIsPaid", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public BannerAdsTable() : this(ColumnSet.All) { }

      public BannerAdsTable(ColumnSet columnSet)
      {
        this.TableName = "BannerAds";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.RenderInfo:
            InitRenderInfoColumns();
            break;

          case ColumnSet.RenderInfo2:
            InitRenderInfo2Columns();
            break;
        }
      }

      protected BannerAdsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class BannerAds
    {
      public const string TableName = "BannerAds";

      public enum Column { Id, AdType, StateCode, ElectionKey, OfficeKey, AdImage, AdImageName, AdUrl, AdEnabled, AdMediaType, AdYouTubeUrl, AdDescription1, AdDescription2, AdDescriptionUrl, AdIsPaid }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.AdType, "AdType" },
        { Column.StateCode, "StateCode" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.AdImage, "AdImage" },
        { Column.AdImageName, "AdImageName" },
        { Column.AdUrl, "AdUrl" },
        { Column.AdEnabled, "AdEnabled" },
        { Column.AdMediaType, "AdMediaType" },
        { Column.AdYouTubeUrl, "AdYouTubeUrl" },
        { Column.AdDescription1, "AdDescription1" },
        { Column.AdDescription2, "AdDescription2" },
        { Column.AdDescriptionUrl, "AdDescriptionUrl" },
        { Column.AdIsPaid, "AdIsPaid" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BannerAds";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BannerAds (Id,AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid) VALUES (@Id,@AdType,@StateCode,@ElectionKey,@OfficeKey,@AdImage,@AdImageName,@AdUrl,@AdEnabled,@AdMediaType,@AdYouTubeUrl,@AdDescription1,@AdDescription2,@AdDescriptionUrl,@AdIsPaid)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "AdImage", adImage);
        VoteDb.AddCommandParameter(cmd, "AdImageName", adImageName);
        VoteDb.AddCommandParameter(cmd, "AdUrl", adUrl);
        VoteDb.AddCommandParameter(cmd, "AdEnabled", adEnabled);
        VoteDb.AddCommandParameter(cmd, "AdMediaType", adMediaType);
        VoteDb.AddCommandParameter(cmd, "AdYouTubeUrl", adYouTubeUrl);
        VoteDb.AddCommandParameter(cmd, "AdDescription1", adDescription1);
        VoteDb.AddCommandParameter(cmd, "AdDescription2", adDescription2);
        VoteDb.AddCommandParameter(cmd, "AdDescriptionUrl", adDescriptionUrl);
        VoteDb.AddCommandParameter(cmd, "AdIsPaid", adIsPaid);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String adType, String stateCode, String electionKey, String officeKey, Byte[] adImage, String adImageName, String adUrl, Boolean adEnabled, String adMediaType, String adYouTubeUrl, String adDescription1, String adDescription2, String adDescriptionUrl, Boolean adIsPaid, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BannerAds (AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid) VALUES (@AdType,@StateCode,@ElectionKey,@OfficeKey,@AdImage,@AdImageName,@AdUrl,@AdEnabled,@AdMediaType,@AdYouTubeUrl,@AdDescription1,@AdDescription2,@AdDescriptionUrl,@AdIsPaid)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "AdImage", adImage);
        VoteDb.AddCommandParameter(cmd, "AdImageName", adImageName);
        VoteDb.AddCommandParameter(cmd, "AdUrl", adUrl);
        VoteDb.AddCommandParameter(cmd, "AdEnabled", adEnabled);
        VoteDb.AddCommandParameter(cmd, "AdMediaType", adMediaType);
        VoteDb.AddCommandParameter(cmd, "AdYouTubeUrl", adYouTubeUrl);
        VoteDb.AddCommandParameter(cmd, "AdDescription1", adDescription1);
        VoteDb.AddCommandParameter(cmd, "AdDescription2", adDescription2);
        VoteDb.AddCommandParameter(cmd, "AdDescriptionUrl", adDescriptionUrl);
        VoteDb.AddCommandParameter(cmd, "AdIsPaid", adIsPaid);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds";
        }
      }

      public static BannerAdsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BannerAdsTable.ColumnSet.All);
      }

      public static BannerAdsTable FillTable(DbCommand command)
      {
        return FillTable(command, BannerAdsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static BannerAdsTable FillTable(DbCommand command, BannerAdsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          BannerAdsTable table = new BannerAdsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(BannerAdsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, BannerAdsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(BannerAdsTable table, BannerAdsTable.ColumnSet columnSet = BannerAdsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string AdTypeColumnName { get { return "AdType"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string AdImageColumnName { get { return "AdImage"; } }

      public static string AdImageNameColumnName { get { return "AdImageName"; } }

      public static string AdUrlColumnName { get { return "AdUrl"; } }

      public static string AdEnabledColumnName { get { return "AdEnabled"; } }

      public static string AdMediaTypeColumnName { get { return "AdMediaType"; } }

      public static string AdYouTubeUrlColumnName { get { return "AdYouTubeUrl"; } }

      public static string AdDescription1ColumnName { get { return "AdDescription1"; } }

      public static string AdDescription2ColumnName { get { return "AdDescription2"; } }

      public static string AdDescriptionUrlColumnName { get { return "AdDescriptionUrl"; } }

      public static string AdIsPaidColumnName { get { return "AdIsPaid"; } }

      public static int AdTypeMaxLength { get { return 1; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int AdImageNameMaxLength { get { return 255; } }

      public static int AdUrlMaxLength { get { return int.MaxValue; } }

      public static int AdMediaTypeMaxLength { get { return 1; } }

      public static int AdYouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int AdDescription1MaxLength { get { return int.MaxValue; } }

      public static int AdDescription2MaxLength { get { return int.MaxValue; } }

      public static int AdDescriptionUrlMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetAdTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdType FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Byte[] GetAdImageById(Int32 id, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImage FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static String GetAdImageNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImageName FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdUrl FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetAdEnabledById(Int32 id)
      {
        return _GetAdEnabledById(id, null);
      }

      public static Boolean GetAdEnabledById(Int32 id, Boolean defaultValue)
      {
        return _GetAdEnabledById(id, defaultValue).Value;
      }

      private static Boolean? _GetAdEnabledById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdEnabled FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdMediaTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdMediaType FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdYouTubeUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdYouTubeUrl FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescription1ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescription1 FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescription2ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescription2 FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescriptionUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescriptionUrl FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetAdIsPaidById(Int32 id)
      {
        return _GetAdIsPaidById(id, null);
      }

      public static Boolean GetAdIsPaidById(Int32 id, Boolean defaultValue)
      {
        return _GetAdIsPaidById(id, defaultValue).Value;
      }

      private static Boolean? _GetAdIsPaidById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdIsPaid FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM BannerAds WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static BannerAdsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, BannerAdsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET OfficeKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageById(Byte[] newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdImage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdImageName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdEnabled=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdMediaTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdMediaType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdYouTubeUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdYouTubeUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescription1ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdDescription1=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescription2ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdDescription2=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescriptionUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdDescriptionUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsPaidById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET AdIsPaid=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE BannerAds SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool AdTypeStateCodeElectionKeyOfficeKeyExists(String adType, String stateCode, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey)
      {
        return _GetIdByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, null);
      }

      public static Int32? GetId(String adType, String stateCode, String electionKey, String officeKey)
      {
        return GetIdByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey);
      }

      public static Int32 GetIdByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Int32 defaultValue)
      {
        return _GetIdByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue).Value;
      }

      public static Int32 GetId(String adType, String stateCode, String electionKey, String officeKey, Int32 defaultValue)
      {
        return GetIdByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      private static Int32? _GetIdByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetAdTypeByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdType FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdType(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdTypeByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetStateCodeByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetStateCodeByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetElectionKeyByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetElectionKeyByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetOfficeKeyByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetOfficeKeyByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static Byte[] GetAdImageByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImage FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetAdImage(String adType, String stateCode, String electionKey, String officeKey, Byte[] defaultValue = null)
      {
        return GetAdImageByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdImageNameByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImageName FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdImageName(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdImageNameByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdUrlByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdUrl FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdUrl(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdUrlByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static Boolean? GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey)
      {
        return _GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, null);
      }

      public static Boolean? GetAdEnabled(String adType, String stateCode, String electionKey, String officeKey)
      {
        return GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey);
      }

      public static Boolean GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Boolean defaultValue)
      {
        return _GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue).Value;
      }

      public static Boolean GetAdEnabled(String adType, String stateCode, String electionKey, String officeKey, Boolean defaultValue)
      {
        return GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      private static Boolean? _GetAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdEnabled FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdMediaTypeByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdMediaType FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdMediaType(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdMediaTypeByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdYouTubeUrlByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdYouTubeUrl FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdYouTubeUrl(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdYouTubeUrlByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdDescription1ByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescription1 FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescription1(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdDescription1ByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdDescription2ByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescription2 FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescription2(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdDescription2ByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static String GetAdDescriptionUrlByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdDescriptionUrl FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdDescriptionUrl(String adType, String stateCode, String electionKey, String officeKey, String defaultValue = null)
      {
        return GetAdDescriptionUrlByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      public static Boolean? GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey)
      {
        return _GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, null);
      }

      public static Boolean? GetAdIsPaid(String adType, String stateCode, String electionKey, String officeKey)
      {
        return GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey);
      }

      public static Boolean GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Boolean defaultValue)
      {
        return _GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue).Value;
      }

      public static Boolean GetAdIsPaid(String adType, String stateCode, String electionKey, String officeKey, Boolean defaultValue)
      {
        return GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, defaultValue);
      }

      private static Boolean? _GetAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdIsPaid FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByAdTypeStateCodeElectionKeyOfficeKey(Column _column, String adType, String stateCode, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String adType, String stateCode, String electionKey, String officeKey)
      {
        return GetColumnByAdTypeStateCodeElectionKeyOfficeKey(_column, adType, stateCode, electionKey, officeKey);
      }

      public static BannerAdsTable GetDataByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,AdType,StateCode,ElectionKey,OfficeKey,AdImage,AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, BannerAdsTable.ColumnSet.All);
      }

      public static BannerAdsTable GetData(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        return GetDataByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, commandTimeout);
      }

      public static int UpdateIdByAdTypeStateCodeElectionKeyOfficeKey(Int32 newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET Id=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateIdByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdTypeByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdType=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdType(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdTypeByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateStateCodeByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET StateCode=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateStateCodeByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateElectionKeyByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET ElectionKey=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateElectionKeyByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateOfficeKeyByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET OfficeKey=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateOfficeKeyByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdImageByAdTypeStateCodeElectionKeyOfficeKey(Byte[] newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdImage=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImage(Byte[] newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdImageByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdImageNameByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdImageName=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageName(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdImageNameByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdUrlByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdUrl=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrl(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdUrlByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(Boolean newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdEnabled=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabled(Boolean newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdEnabledByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdMediaTypeByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdMediaType=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdMediaType(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdMediaTypeByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdYouTubeUrlByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdYouTubeUrl=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdYouTubeUrl(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdYouTubeUrlByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdDescription1ByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdDescription1=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescription1(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdDescription1ByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdDescription2ByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdDescription2=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescription2(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdDescription2ByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdDescriptionUrlByAdTypeStateCodeElectionKeyOfficeKey(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdDescriptionUrl=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdDescriptionUrl(String newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdDescriptionUrlByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(Boolean newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET AdIsPaid=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsPaid(Boolean newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        return UpdateAdIsPaidByAdTypeStateCodeElectionKeyOfficeKey(newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int UpdateColumnByAdTypeStateCodeElectionKeyOfficeKey(Column _column, object newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE BannerAds SET {0}=@newValue WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String adType, String stateCode, String electionKey, String officeKey)
      {
         return UpdateColumnByAdTypeStateCodeElectionKeyOfficeKey(_column, newValue, adType, stateCode, electionKey, officeKey);
      }

      public static int DeleteByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectRenderInfoCommandText
      {
        get
        {
          return "SELECT AdUrl,AdEnabled FROM BannerAds";
        }
      }

      public static BannerAdsTable GetAllRenderInfoData(int commandTimeout = -1)
      {
        string cmdText = "SELECT AdUrl,AdEnabled FROM BannerAds";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo);
      }

      public static void UpdateRenderInfo(BannerAdsTable table)
      {
        UpdateRenderInfo(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateRenderInfo(BannerAdsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, BannerAdsTable.ColumnSet.RenderInfo, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static BannerAdsTable GetRenderInfoDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdUrl,AdEnabled FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo);
      }

      public static BannerAdsTable GetRenderInfoDataByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdUrl,AdEnabled FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo);
      }

      public static BannerAdsTable GetRenderInfoData(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        return GetRenderInfoDataByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, commandTimeout);
      }

      public static string SelectRenderInfo2CommandText
      {
        get
        {
          return "SELECT AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds";
        }
      }

      public static BannerAdsTable GetAllRenderInfo2Data(int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo2);
      }

      public static void UpdateRenderInfo2(BannerAdsTable table)
      {
        UpdateRenderInfo2(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateRenderInfo2(BannerAdsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, BannerAdsTable.ColumnSet.RenderInfo2, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static BannerAdsTable GetRenderInfo2DataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo2);
      }

      public static BannerAdsTable GetRenderInfo2DataByAdTypeStateCodeElectionKeyOfficeKey(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl,AdEnabled,AdMediaType,AdYouTubeUrl,AdDescription1,AdDescription2,AdDescriptionUrl,AdIsPaid FROM BannerAds WHERE AdType=@AdType AND StateCode=@StateCode AND ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, BannerAdsTable.ColumnSet.RenderInfo2);
      }

      public static BannerAdsTable GetRenderInfo2Data(String adType, String stateCode, String electionKey, String officeKey, int commandTimeout = -1)
      {
        return GetRenderInfo2DataByAdTypeStateCodeElectionKeyOfficeKey(adType, stateCode, electionKey, officeKey, commandTimeout);
      }

      public static string GetSelectCommandText(BannerAdsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case BannerAdsTable.ColumnSet.All:
            return SelectAllCommandText;

          case BannerAdsTable.ColumnSet.RenderInfo:
            return SelectRenderInfoCommandText;

          case BannerAdsTable.ColumnSet.RenderInfo2:
            return SelectRenderInfo2CommandText;

          default:
            return null;
        }
      }

      static BannerAds()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.BannerAds

    #region vote.CityCouncil

    public partial class CityCouncilRow : DataRow
    {
      internal CityCouncilRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CityCouncilCode
      {
        get { return this["CityCouncilCode"] as String; }
        set { if (value == null) this["CityCouncilCode"] = DBNull.Value; else this["CityCouncilCode"] = value; }
      }

      public String District
      {
        get { return this["District"] as String; }
        set { if (value == null) this["District"] = DBNull.Value; else this["District"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public Boolean IsInShapefile
      {
        get { return (Boolean) this["IsInShapefile"]; }
        set { this["IsInShapefile"] = value; }
      }
    }

    [Serializable]
    public partial class CityCouncilTable : TypedTableBase<CityCouncilRow>
    {
      public CityCouncilRow this[int index] { get { return (CityCouncilRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CityCouncilRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CityCouncilTable(); }

      new public CityCouncilRow NewRow() { return (CityCouncilRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CityCouncilRow(rb); }

      protected override Type GetRowType()
      { return typeof(CityCouncilRow); }

      public void RemoveRow(CityCouncilRow row) { this.Rows.Remove(row); }

      public CityCouncilRow NewRow(String stateCode, String cityCouncilCode, String district, String name, String tigerCode, Boolean isInShapefile)
      {
        CityCouncilRow row = NewRow();
        row.StateCode = stateCode;
        row.CityCouncilCode = cityCouncilCode;
        row.District = district;
        row.Name = name;
        row.TigerCode = tigerCode;
        row.IsInShapefile = isInShapefile;
        return row;
      }

      public void AddRow(String stateCode, String cityCouncilCode, String district, String name, String tigerCode, Boolean isInShapefile)
      {
        CityCouncilRow row = NewRow(stateCode, cityCouncilCode, district, name, tigerCode, isInShapefile);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CityCouncilCodeColumn { get { return this.Columns["CityCouncilCode"]; } }

      public DataColumn DistrictColumn { get { return this.Columns["District"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn IsInShapefileColumn { get { return this.Columns["IsInShapefile"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityCouncilCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("District", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInShapefile", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CityCouncilTable() : this(ColumnSet.All) { }

      public CityCouncilTable(ColumnSet columnSet)
      {
        this.TableName = "CityCouncil";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected CityCouncilTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class CityCouncil
    {
      public const string TableName = "CityCouncil";

      public enum Column { StateCode, CityCouncilCode, District, Name, TigerCode, IsInShapefile }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CityCouncilCode, "CityCouncilCode" },
        { Column.District, "District" },
        { Column.Name, "Name" },
        { Column.TigerCode, "TigerCode" },
        { Column.IsInShapefile, "IsInShapefile" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CityCouncil";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String cityCouncilCode, String district, String name, String tigerCode, Boolean isInShapefile, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CityCouncil (StateCode,CityCouncilCode,District,Name,TigerCode,IsInShapefile) VALUES (@StateCode,@CityCouncilCode,@District,@Name,@TigerCode,@IsInShapefile)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "District", district);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "IsInShapefile", isInShapefile);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CityCouncilCode,District,Name,TigerCode,IsInShapefile FROM CityCouncil";
        }
      }

      public static CityCouncilTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CityCouncilCode,District,Name,TigerCode,IsInShapefile FROM CityCouncil";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CityCouncilTable.ColumnSet.All);
      }

      public static CityCouncilTable FillTable(DbCommand command)
      {
        return FillTable(command, CityCouncilTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CityCouncilTable FillTable(DbCommand command, CityCouncilTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          CityCouncilTable table = new CityCouncilTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(CityCouncilTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, CityCouncilTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(CityCouncilTable table, CityCouncilTable.ColumnSet columnSet = CityCouncilTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CityCouncilCodeColumnName { get { return "CityCouncilCode"; } }

      public static string DistrictColumnName { get { return "District"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string IsInShapefileColumnName { get { return "IsInShapefile"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CityCouncilCodeMaxLength { get { return 5; } }

      public static int DistrictMaxLength { get { return 100; } }

      public static int NameMaxLength { get { return 100; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static bool StateCodeCityCouncilCodeExists(String stateCode, String cityCouncilCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityCouncilCodeByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityCouncilCode FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT District FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNameByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsInShapefileByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode)
      {
        return _GetIsInShapefileByStateCodeCityCouncilCode(stateCode, cityCouncilCode, null);
      }

      public static Boolean GetIsInShapefileByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, Boolean defaultValue)
      {
        return _GetIsInShapefileByStateCodeCityCouncilCode(stateCode, cityCouncilCode, defaultValue).Value;
      }

      private static Boolean? _GetIsInShapefileByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInShapefile FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeCityCouncilCode(Column _column, String stateCode, String cityCouncilCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CityCouncilTable GetDataByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CityCouncilCode,District,Name,TigerCode,IsInShapefile FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        return FillTable(cmd, CityCouncilTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeCityCouncilCode(String newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET StateCode=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityCouncilCodeByStateCodeCityCouncilCode(String newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET CityCouncilCode=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictByStateCodeCityCouncilCode(String newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET District=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeCityCouncilCode(String newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET Name=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeCityCouncilCode(String newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET TigerCode=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByStateCodeCityCouncilCode(Boolean newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET IsInShapefile=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCityCouncilCode(Column _column, object newValue, String stateCode, String cityCouncilCode)
      {
        string cmdText = "UPDATE CityCouncil SET {0}=@newValue WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCityCouncilCode(String stateCode, String cityCouncilCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CityCouncil WHERE StateCode=@StateCode AND CityCouncilCode=@CityCouncilCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CityCouncilCode", cityCouncilCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTigerCode(String tigerCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CityCouncil WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTigerCode(Column _column, String tigerCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM CityCouncil WHERE TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CityCouncilTable GetDataByTigerCode(String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CityCouncilCode,District,Name,TigerCode,IsInShapefile FROM CityCouncil WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return FillTable(cmd, CityCouncilTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByTigerCode(String newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET StateCode=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityCouncilCodeByTigerCode(String newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET CityCouncilCode=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictByTigerCode(String newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET District=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByTigerCode(String newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET Name=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByTigerCode(String newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET TigerCode=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByTigerCode(Boolean newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET IsInShapefile=@newValue WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTigerCode(Column _column, object newValue, String tigerCode)
      {
        string cmdText = "UPDATE CityCouncil SET {0}=@newValue WHERE TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTigerCode(String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CityCouncil WHERE TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(CityCouncilTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CityCouncilTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static CityCouncil()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.CityCouncil

    #region vote.Counties

    public partial class CountiesRow : DataRow
    {
      internal CountiesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String StateCountyCode
      {
        get { return this["StateCountyCode"] as String; }
        set { if (value == null) this["StateCountyCode"] = DBNull.Value; else this["StateCountyCode"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public String EmailPage
      {
        get { return this["EmailPage"] as String; }
        set { if (value == null) this["EmailPage"] = DBNull.Value; else this["EmailPage"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public Boolean IsCountyTagForDeletion
      {
        get { return (Boolean) this["IsCountyTagForDeletion"]; }
        set { this["IsCountyTagForDeletion"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }
    }

    [Serializable]
    public partial class CountiesTable : TypedTableBase<CountiesRow>
    {
      public CountiesRow this[int index] { get { return (CountiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CountiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CountiesTable(); }

      new public CountiesRow NewRow() { return (CountiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CountiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(CountiesRow); }

      public void RemoveRow(CountiesRow row) { this.Rows.Remove(row); }

      public CountiesRow NewRow(String stateCode, String countyCode, String county, String stateCountyCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isCountyTagForDeletion, Boolean optOut)
      {
        CountiesRow row = NewRow();
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.County = county;
        row.StateCountyCode = stateCountyCode;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.EmailPage = emailPage;
        row.UrlDataPage = urlDataPage;
        row.IsCountyTagForDeletion = isCountyTagForDeletion;
        row.OptOut = optOut;
        return row;
      }

      public void AddRow(String stateCode, String countyCode, String county, String stateCountyCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isCountyTagForDeletion, Boolean optOut)
      {
        CountiesRow row = NewRow(stateCode, countyCode, county, stateCountyCode, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, emailPage, urlDataPage, isCountyTagForDeletion, optOut);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn StateCountyCodeColumn { get { return this.Columns["StateCountyCode"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn EmailPageColumn { get { return this.Columns["EmailPage"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn IsCountyTagForDeletionColumn { get { return this.Columns["IsCountyTagForDeletion"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCountyTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCountyTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CountiesTable() : this(ColumnSet.All) { }

      public CountiesTable(ColumnSet columnSet)
      {
        this.TableName = "Counties";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected CountiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Counties
    {
      public const string TableName = "Counties";

      public enum Column { StateCode, CountyCode, County, StateCountyCode, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, EmailPage, UrlDataPage, IsCountyTagForDeletion, OptOut }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.County, "County" },
        { Column.StateCountyCode, "StateCountyCode" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.EmailPage, "EmailPage" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.IsCountyTagForDeletion, "IsCountyTagForDeletion" },
        { Column.OptOut, "OptOut" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,OptOut FROM Counties";
        }
      }

      public static CountiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,OptOut FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static CountiesTable FillTable(DbCommand command)
      {
        return FillTable(command, CountiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CountiesTable FillTable(DbCommand command, CountiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          CountiesTable table = new CountiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string StateCountyCodeColumnName { get { return "StateCountyCode"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string EmailPageColumnName { get { return "EmailPage"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string IsCountyTagForDeletionColumnName { get { return "IsCountyTagForDeletion"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 100; } }

      public static int StateCountyCodeMaxLength { get { return 3; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int EmailPageMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static bool StateCodeCountyCodeExists(String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetStateCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCountyCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCountyCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCountyByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCounty(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCountyByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetStateCountyCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetStateCountyCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactTitleByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactTitleByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetPhoneByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetPhoneByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltContactByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltContactByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltContactTitleByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltContactTitleByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltPhoneByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltPhoneByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetUrlByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetUrlByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetBallotNameByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetBallotNameByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAddressLine1ByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAddressLine1ByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAddressLine2ByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAddressLine2ByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCityStateZipByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCityStateZipByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetNotesByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetNotesByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetEmailPageByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailPage FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailPage(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetEmailPageByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetUrlDataPageByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetUrlDataPageByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static Boolean? GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode)
      {
        return _GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, null);
      }

      public static Boolean? GetIsCountyTagForDeletion(String stateCode, String countyCode)
      {
        return GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode);
      }

      public static Boolean GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode, Boolean defaultValue)
      {
        return _GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, defaultValue).Value;
      }

      public static Boolean GetIsCountyTagForDeletion(String stateCode, String countyCode, Boolean defaultValue)
      {
        return GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      private static Boolean? _GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCountyTagForDeletion FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetOptOutByStateCodeCountyCode(String stateCode, String countyCode)
      {
        return _GetOptOutByStateCodeCountyCode(stateCode, countyCode, null);
      }

      public static Boolean? GetOptOut(String stateCode, String countyCode)
      {
        return GetOptOutByStateCodeCountyCode(stateCode, countyCode);
      }

      public static Boolean GetOptOutByStateCodeCountyCode(String stateCode, String countyCode, Boolean defaultValue)
      {
        return _GetOptOutByStateCodeCountyCode(stateCode, countyCode, defaultValue).Value;
      }

      public static Boolean GetOptOut(String stateCode, String countyCode, Boolean defaultValue)
      {
        return GetOptOutByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      private static Boolean? _GetOptOutByStateCodeCountyCode(String stateCode, String countyCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode, String countyCode)
      {
        return GetColumnByStateCodeCountyCode(_column, stateCode, countyCode);
      }

      public static CountiesTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,OptOut FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static CountiesTable GetData(String stateCode, String countyCode, int commandTimeout = -1)
      {
        return GetDataByStateCodeCountyCode(stateCode, countyCode, commandTimeout);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateStateCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateCountyCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCountyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCounty(String newValue, String stateCode, String countyCode)
      {
        return UpdateCountyByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateStateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateStateCountyCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactTitleByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdatePhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode, String countyCode)
      {
        return UpdatePhoneByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltContactByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltContactTitleByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltPhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltPhoneByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode, String countyCode)
      {
        return UpdateUrlByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateBallotNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode, String countyCode)
      {
        return UpdateBallotNameByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateElectionsAuthorityByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode, String countyCode)
      {
        return UpdateElectionsAuthorityByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAddressLine1ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode, String countyCode)
      {
        return UpdateAddressLine1ByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAddressLine2ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode, String countyCode)
      {
        return UpdateAddressLine2ByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCityStateZipByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode, String countyCode)
      {
        return UpdateCityStateZipByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateNotesByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode, String countyCode)
      {
        return UpdateNotesByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateEmailPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPage(String newValue, String stateCode, String countyCode)
      {
        return UpdateEmailPageByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateUrlDataPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode, String countyCode)
      {
        return UpdateUrlDataPageByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateIsCountyTagForDeletionByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletion(Boolean newValue, String stateCode, String countyCode)
      {
        return UpdateIsCountyTagForDeletionByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateOptOutByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET OptOut=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOut(Boolean newValue, String stateCode, String countyCode)
      {
        return UpdateOptOutByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode, String countyCode)
      {
         return UpdateColumnByStateCodeCountyCode(_column, newValue, stateCode, countyCode);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountiesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,OptOut FROM Counties WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletionByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Counties SET OptOut=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountiesTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,OptOut FROM Counties WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletionByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET OptOut=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,County,IsCountyTagForDeletion FROM Counties";
        }
      }

      public static CountiesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,IsCountyTagForDeletion FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static CountiesTable GetCacheDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,IsCountyTagForDeletion FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static CountiesTable GetCacheData(String stateCode, String countyCode, int commandTimeout = -1)
      {
        return GetCacheDataByStateCodeCountyCode(stateCode, countyCode, commandTimeout);
      }

      public static CountiesTable GetCacheDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,IsCountyTagForDeletion FROM Counties WHERE StateCode=@StateCode ORDER BY County";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(CountiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CountiesTable.ColumnSet.All:
            return SelectAllCommandText;

          case CountiesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Counties()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Counties

    #region vote.CountySupervisors

    public partial class CountySupervisorsRow : DataRow
    {
      internal CountySupervisorsRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountySupervisorsCode
      {
        get { return this["CountySupervisorsCode"] as String; }
        set { if (value == null) this["CountySupervisorsCode"] = DBNull.Value; else this["CountySupervisorsCode"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public Boolean IsInShapefile
      {
        get { return (Boolean) this["IsInShapefile"]; }
        set { this["IsInShapefile"] = value; }
      }
    }

    [Serializable]
    public partial class CountySupervisorsTable : TypedTableBase<CountySupervisorsRow>
    {
      public CountySupervisorsRow this[int index] { get { return (CountySupervisorsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CountySupervisorsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CountySupervisorsTable(); }

      new public CountySupervisorsRow NewRow() { return (CountySupervisorsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CountySupervisorsRow(rb); }

      protected override Type GetRowType()
      { return typeof(CountySupervisorsRow); }

      public void RemoveRow(CountySupervisorsRow row) { this.Rows.Remove(row); }

      public CountySupervisorsRow NewRow(String stateCode, String countySupervisorsCode, String name, String countyCode, Boolean isInShapefile)
      {
        CountySupervisorsRow row = NewRow();
        row.StateCode = stateCode;
        row.CountySupervisorsCode = countySupervisorsCode;
        row.Name = name;
        row.CountyCode = countyCode;
        row.IsInShapefile = isInShapefile;
        return row;
      }

      public void AddRow(String stateCode, String countySupervisorsCode, String name, String countyCode, Boolean isInShapefile)
      {
        CountySupervisorsRow row = NewRow(stateCode, countySupervisorsCode, name, countyCode, isInShapefile);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountySupervisorsCodeColumn { get { return this.Columns["CountySupervisorsCode"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn IsInShapefileColumn { get { return this.Columns["IsInShapefile"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountySupervisorsCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInShapefile", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CountySupervisorsTable() : this(ColumnSet.All) { }

      public CountySupervisorsTable(ColumnSet columnSet)
      {
        this.TableName = "CountySupervisors";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected CountySupervisorsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class CountySupervisors
    {
      public const string TableName = "CountySupervisors";

      public enum Column { StateCode, CountySupervisorsCode, Name, CountyCode, IsInShapefile }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountySupervisorsCode, "CountySupervisorsCode" },
        { Column.Name, "Name" },
        { Column.CountyCode, "CountyCode" },
        { Column.IsInShapefile, "IsInShapefile" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CountySupervisors";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String countySupervisorsCode, String name, String countyCode, Boolean isInShapefile, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CountySupervisors (StateCode,CountySupervisorsCode,Name,CountyCode,IsInShapefile) VALUES (@StateCode,@CountySupervisorsCode,@Name,@CountyCode,@IsInShapefile)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "IsInShapefile", isInShapefile);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountySupervisorsCode,Name,CountyCode,IsInShapefile FROM CountySupervisors";
        }
      }

      public static CountySupervisorsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountySupervisorsCode,Name,CountyCode,IsInShapefile FROM CountySupervisors";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CountySupervisorsTable.ColumnSet.All);
      }

      public static CountySupervisorsTable FillTable(DbCommand command)
      {
        return FillTable(command, CountySupervisorsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CountySupervisorsTable FillTable(DbCommand command, CountySupervisorsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          CountySupervisorsTable table = new CountySupervisorsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(CountySupervisorsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, CountySupervisorsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(CountySupervisorsTable table, CountySupervisorsTable.ColumnSet columnSet = CountySupervisorsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountySupervisorsCodeColumnName { get { return "CountySupervisorsCode"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string IsInShapefileColumnName { get { return "IsInShapefile"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountySupervisorsCodeMaxLength { get { return 5; } }

      public static int NameMaxLength { get { return 100; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static bool StateCodeCountySupervisorsCodeExists(String stateCode, String countySupervisorsCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountySupervisorsCodeByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountySupervisorsCode FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNameByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsInShapefileByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode)
      {
        return _GetIsInShapefileByStateCodeCountySupervisorsCode(stateCode, countySupervisorsCode, null);
      }

      public static Boolean GetIsInShapefileByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, Boolean defaultValue)
      {
        return _GetIsInShapefileByStateCodeCountySupervisorsCode(stateCode, countySupervisorsCode, defaultValue).Value;
      }

      private static Boolean? _GetIsInShapefileByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInShapefile FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeCountySupervisorsCode(Column _column, String stateCode, String countySupervisorsCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountySupervisorsTable GetDataByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountySupervisorsCode,Name,CountyCode,IsInShapefile FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        return FillTable(cmd, CountySupervisorsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeCountySupervisorsCode(String newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET StateCode=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountySupervisorsCodeByStateCodeCountySupervisorsCode(String newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET CountySupervisorsCode=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeCountySupervisorsCode(String newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET Name=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountySupervisorsCode(String newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByStateCodeCountySupervisorsCode(Boolean newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET IsInShapefile=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountySupervisorsCode(Column _column, object newValue, String stateCode, String countySupervisorsCode)
      {
        string cmdText = "UPDATE CountySupervisors SET {0}=@newValue WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountySupervisorsCode(String stateCode, String countySupervisorsCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CountySupervisors WHERE StateCode=@StateCode AND CountySupervisorsCode=@CountySupervisorsCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountySupervisorsCode", countySupervisorsCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CountySupervisors WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM CountySupervisors WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountySupervisorsTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountySupervisorsCode,Name,CountyCode,IsInShapefile FROM CountySupervisors WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, CountySupervisorsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountySupervisorsCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET CountySupervisorsCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET Name=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET IsInShapefile=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE CountySupervisors SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CountySupervisors WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(CountySupervisorsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CountySupervisorsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static CountySupervisors()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.CountySupervisors

    #region vote.DebugLog

    public partial class DebugLogRow : DataRow
    {
      internal DebugLogRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime? DateTime
      {
        get { if (this.IsNull("DateTime")) return null; else return (DateTime) this["DateTime"]; }
        set { if (value.HasValue) this["DateTime"] = value.Value; else this["DateTime"] = DBNull.Value; }
      }

      public String MessageType
      {
        get { return this["MessageType"] as String; }
        set { if (value == null) this["MessageType"] = DBNull.Value; else this["MessageType"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class DebugLogTable : TypedTableBase<DebugLogRow>
    {
      public DebugLogRow this[int index] { get { return (DebugLogRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DebugLogRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DebugLogTable(); }

      new public DebugLogRow NewRow() { return (DebugLogRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DebugLogRow(rb); }

      protected override Type GetRowType()
      { return typeof(DebugLogRow); }

      public void RemoveRow(DebugLogRow row) { this.Rows.Remove(row); }

      public DebugLogRow NewRow(Int32 id, DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow();
        row.Id = id;
        row.DateTime = dateTime;
        row.MessageType = messageType;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 id, DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow(id, dateTime, messageType, message);
        AddRow(row);
      }

      public DebugLogRow NewRow(DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow();
        row.DateTime = dateTime;
        row.MessageType = messageType;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow(dateTime, messageType, message);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateTimeColumn { get { return this.Columns["DateTime"]; } }

      public DataColumn MessageTypeColumn { get { return this.Columns["MessageType"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("MessageType", typeof(String));
        _column.MaxLength = 128;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
      }

      public DebugLogTable() : this(ColumnSet.All) { }

      public DebugLogTable(ColumnSet columnSet)
      {
        this.TableName = "DebugLog";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DebugLogTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DebugLog
    {
      public const string TableName = "DebugLog";

      public enum Column { Id, DateTime, MessageType, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateTime, "DateTime" },
        { Column.MessageType, "MessageType" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime? dateTime, String messageType, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DebugLog (Id,DateTime,MessageType,Message) VALUES (@Id,@DateTime,@MessageType,@Message)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "DateTime", dateTime);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime? dateTime, String messageType, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DebugLog (DateTime,MessageType,Message) VALUES (@DateTime,@MessageType,@Message)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DateTime", dateTime);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateTime,MessageType,Message FROM DebugLog";
        }
      }

      public static DebugLogTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static DebugLogTable FillTable(DbCommand command)
      {
        return FillTable(command, DebugLogTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DebugLogTable FillTable(DbCommand command, DebugLogTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DebugLogTable table = new DebugLogTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(DebugLogTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, DebugLogTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(DebugLogTable table, DebugLogTable.ColumnSet columnSet = DebugLogTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateTimeColumnName { get { return "DateTime"; } }

      public static string MessageTypeColumnName { get { return "MessageType"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int MessageTypeMaxLength { get { return 128; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateTimeById(Int32 id)
      {
        return _GetDateTimeById(id, null);
      }

      public static DateTime GetDateTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetDateTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateTime FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMessageTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MessageType FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM DebugLog WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DebugLogTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateTimeById(DateTime? newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET DateTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET MessageType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET Message=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMessageType(String messageType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMessageType(Column _column, String messageType)
      {
        object result;
        string cmdText = "SELECT {0} FROM DebugLog WHERE MessageType=@MessageType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DebugLogTable GetDataByMessageType(String messageType, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static int UpdateIdByMessageType(Int32 newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET Id=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateTimeByMessageType(DateTime? newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET DateTime=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageTypeByMessageType(String newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET MessageType=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMessageType(String newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET Message=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMessageType(Column _column, object newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET {0}=@newValue WHERE MessageType=@MessageType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMessageType(String messageType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DebugLogTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DebugLogTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DebugLog()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.DebugLog

    #region vote.DeletedAnswers

    public partial class DeletedAnswersRow : DataRow
    {
      internal DeletedAnswersRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String DeleteUserName
      {
        get { return this["DeleteUserName"] as String; }
        set { if (value == null) this["DeleteUserName"] = DBNull.Value; else this["DeleteUserName"] = value; }
      }

      public DateTime DeleteDate
      {
        get { return (DateTime) this["DeleteDate"]; }
        set { this["DeleteDate"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan YouTubeRunningTime
      {
        get { return (TimeSpan) this["YouTubeRunningTime"]; }
        set { this["YouTubeRunningTime"] = value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime YouTubeDate
      {
        get { return (DateTime) this["YouTubeDate"]; }
        set { this["YouTubeDate"] = value; }
      }

      public DateTime YouTubeRefreshTime
      {
        get { return (DateTime) this["YouTubeRefreshTime"]; }
        set { this["YouTubeRefreshTime"] = value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }

      public String FacebookVideoUrl
      {
        get { return this["FacebookVideoUrl"] as String; }
        set { if (value == null) this["FacebookVideoUrl"] = DBNull.Value; else this["FacebookVideoUrl"] = value; }
      }

      public String FacebookVideoDescription
      {
        get { return this["FacebookVideoDescription"] as String; }
        set { if (value == null) this["FacebookVideoDescription"] = DBNull.Value; else this["FacebookVideoDescription"] = value; }
      }

      public TimeSpan FacebookVideoRunningTime
      {
        get { return (TimeSpan) this["FacebookVideoRunningTime"]; }
        set { this["FacebookVideoRunningTime"] = value; }
      }

      public DateTime FacebookVideoDate
      {
        get { return (DateTime) this["FacebookVideoDate"]; }
        set { this["FacebookVideoDate"] = value; }
      }

      public DateTime FacebookVideoRefreshTime
      {
        get { return (DateTime) this["FacebookVideoRefreshTime"]; }
        set { this["FacebookVideoRefreshTime"] = value; }
      }

      public String FacebookVideoAutoDisable
      {
        get { return this["FacebookVideoAutoDisable"] as String; }
        set { if (value == null) this["FacebookVideoAutoDisable"] = DBNull.Value; else this["FacebookVideoAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class DeletedAnswersTable : TypedTableBase<DeletedAnswersRow>
    {
      public DeletedAnswersRow this[int index] { get { return (DeletedAnswersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DeletedAnswersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DeletedAnswersTable(); }

      new public DeletedAnswersRow NewRow() { return (DeletedAnswersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DeletedAnswersRow(rb); }

      protected override Type GetRowType()
      { return typeof(DeletedAnswersRow); }

      public void RemoveRow(DeletedAnswersRow row) { this.Rows.Remove(row); }

      public DeletedAnswersRow NewRow(Int32 id, String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        DeletedAnswersRow row = NewRow();
        row.Id = id;
        row.DeleteUserName = deleteUserName;
        row.DeleteDate = deleteDate;
        row.PoliticianKey = politicianKey;
        row.QuestionId = questionId;
        row.Sequence = sequence;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.FacebookVideoUrl = facebookVideoUrl;
        row.FacebookVideoDescription = facebookVideoDescription;
        row.FacebookVideoRunningTime = facebookVideoRunningTime;
        row.FacebookVideoDate = facebookVideoDate;
        row.FacebookVideoRefreshTime = facebookVideoRefreshTime;
        row.FacebookVideoAutoDisable = facebookVideoAutoDisable;
        return row;
      }

      public void AddRow(Int32 id, String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        DeletedAnswersRow row = NewRow(id, deleteUserName, deleteDate, politicianKey, questionId, sequence, answer, source, dateStamp, userName, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable, facebookVideoUrl, facebookVideoDescription, facebookVideoRunningTime, facebookVideoDate, facebookVideoRefreshTime, facebookVideoAutoDisable);
        AddRow(row);
      }

      public DeletedAnswersRow NewRow(String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        DeletedAnswersRow row = NewRow();
        row.DeleteUserName = deleteUserName;
        row.DeleteDate = deleteDate;
        row.PoliticianKey = politicianKey;
        row.QuestionId = questionId;
        row.Sequence = sequence;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.FacebookVideoUrl = facebookVideoUrl;
        row.FacebookVideoDescription = facebookVideoDescription;
        row.FacebookVideoRunningTime = facebookVideoRunningTime;
        row.FacebookVideoDate = facebookVideoDate;
        row.FacebookVideoRefreshTime = facebookVideoRefreshTime;
        row.FacebookVideoAutoDisable = facebookVideoAutoDisable;
        return row;
      }

      public void AddRow(String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable)
      {
        DeletedAnswersRow row = NewRow(deleteUserName, deleteDate, politicianKey, questionId, sequence, answer, source, dateStamp, userName, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable, facebookVideoUrl, facebookVideoDescription, facebookVideoRunningTime, facebookVideoDate, facebookVideoRefreshTime, facebookVideoAutoDisable);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DeleteUserNameColumn { get { return this.Columns["DeleteUserName"]; } }

      public DataColumn DeleteDateColumn { get { return this.Columns["DeleteDate"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public DataColumn FacebookVideoUrlColumn { get { return this.Columns["FacebookVideoUrl"]; } }

      public DataColumn FacebookVideoDescriptionColumn { get { return this.Columns["FacebookVideoDescription"]; } }

      public DataColumn FacebookVideoRunningTimeColumn { get { return this.Columns["FacebookVideoRunningTime"]; } }

      public DataColumn FacebookVideoDateColumn { get { return this.Columns["FacebookVideoDate"]; } }

      public DataColumn FacebookVideoRefreshTimeColumn { get { return this.Columns["FacebookVideoRefreshTime"]; } }

      public DataColumn FacebookVideoAutoDisableColumn { get { return this.Columns["FacebookVideoAutoDisable"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DeleteUserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DeleteDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookVideoAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      public DeletedAnswersTable() : this(ColumnSet.All) { }

      public DeletedAnswersTable(ColumnSet columnSet)
      {
        this.TableName = "DeletedAnswers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DeletedAnswersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DeletedAnswers
    {
      public const string TableName = "DeletedAnswers";

      public enum Column { Id, DeleteUserName, DeleteDate, PoliticianKey, QuestionId, Sequence, Answer, Source, DateStamp, UserName, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable, FacebookVideoUrl, FacebookVideoDescription, FacebookVideoRunningTime, FacebookVideoDate, FacebookVideoRefreshTime, FacebookVideoAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DeleteUserName, "DeleteUserName" },
        { Column.DeleteDate, "DeleteDate" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.QuestionId, "QuestionId" },
        { Column.Sequence, "Sequence" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" },
        { Column.FacebookVideoUrl, "FacebookVideoUrl" },
        { Column.FacebookVideoDescription, "FacebookVideoDescription" },
        { Column.FacebookVideoRunningTime, "FacebookVideoRunningTime" },
        { Column.FacebookVideoDate, "FacebookVideoDate" },
        { Column.FacebookVideoRefreshTime, "FacebookVideoRefreshTime" },
        { Column.FacebookVideoAutoDisable, "FacebookVideoAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DeletedAnswers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DeletedAnswers (Id,DeleteUserName,DeleteDate,PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable) VALUES (@Id,@DeleteUserName,@DeleteDate,@PoliticianKey,@QuestionId,@Sequence,@Answer,@Source,@DateStamp,@UserName,@YouTubeUrl,@YouTubeDescription,@YouTubeRunningTime,@YouTubeSource,@YouTubeSourceUrl,@YouTubeDate,@YouTubeRefreshTime,@YouTubeAutoDisable,@FacebookVideoUrl,@FacebookVideoDescription,@FacebookVideoRunningTime,@FacebookVideoDate,@FacebookVideoRefreshTime,@FacebookVideoAutoDisable)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "DeleteUserName", deleteUserName);
        VoteDb.AddCommandParameter(cmd, "DeleteDate", deleteDate);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "Answer", answer);
        VoteDb.AddCommandParameter(cmd, "Source", source);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "YouTubeUrl", youTubeUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDescription", youTubeDescription);
        VoteDb.AddCommandParameter(cmd, "YouTubeRunningTime", youTubeRunningTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeSource", youTubeSource);
        VoteDb.AddCommandParameter(cmd, "YouTubeSourceUrl", youTubeSourceUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDate", youTubeDate);
        VoteDb.AddCommandParameter(cmd, "YouTubeRefreshTime", youTubeRefreshTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeAutoDisable", youTubeAutoDisable);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoUrl", facebookVideoUrl);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDescription", facebookVideoDescription);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRunningTime", facebookVideoRunningTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDate", facebookVideoDate);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRefreshTime", facebookVideoRefreshTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoAutoDisable", facebookVideoAutoDisable);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String deleteUserName, DateTime deleteDate, String politicianKey, Int32 questionId, Int32 sequence, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable, String facebookVideoUrl, String facebookVideoDescription, TimeSpan facebookVideoRunningTime, DateTime facebookVideoDate, DateTime facebookVideoRefreshTime, String facebookVideoAutoDisable, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DeletedAnswers (DeleteUserName,DeleteDate,PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable) VALUES (@DeleteUserName,@DeleteDate,@PoliticianKey,@QuestionId,@Sequence,@Answer,@Source,@DateStamp,@UserName,@YouTubeUrl,@YouTubeDescription,@YouTubeRunningTime,@YouTubeSource,@YouTubeSourceUrl,@YouTubeDate,@YouTubeRefreshTime,@YouTubeAutoDisable,@FacebookVideoUrl,@FacebookVideoDescription,@FacebookVideoRunningTime,@FacebookVideoDate,@FacebookVideoRefreshTime,@FacebookVideoAutoDisable)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DeleteUserName", deleteUserName);
        VoteDb.AddCommandParameter(cmd, "DeleteDate", deleteDate);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "Answer", answer);
        VoteDb.AddCommandParameter(cmd, "Source", source);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "YouTubeUrl", youTubeUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDescription", youTubeDescription);
        VoteDb.AddCommandParameter(cmd, "YouTubeRunningTime", youTubeRunningTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeSource", youTubeSource);
        VoteDb.AddCommandParameter(cmd, "YouTubeSourceUrl", youTubeSourceUrl);
        VoteDb.AddCommandParameter(cmd, "YouTubeDate", youTubeDate);
        VoteDb.AddCommandParameter(cmd, "YouTubeRefreshTime", youTubeRefreshTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeAutoDisable", youTubeAutoDisable);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoUrl", facebookVideoUrl);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDescription", facebookVideoDescription);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRunningTime", facebookVideoRunningTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoDate", facebookVideoDate);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoRefreshTime", facebookVideoRefreshTime);
        VoteDb.AddCommandParameter(cmd, "FacebookVideoAutoDisable", facebookVideoAutoDisable);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DeleteUserName,DeleteDate,PoliticianKey,QuestionId,Sequence,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable,FacebookVideoUrl,FacebookVideoDescription,FacebookVideoRunningTime,FacebookVideoDate,FacebookVideoRefreshTime,FacebookVideoAutoDisable FROM DeletedAnswers";
        }
      }

      public static DeletedAnswersTable FillTable(DbCommand command)
      {
        return FillTable(command, DeletedAnswersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DeletedAnswersTable FillTable(DbCommand command, DeletedAnswersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DeletedAnswersTable table = new DeletedAnswersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DeleteUserNameColumnName { get { return "DeleteUserName"; } }

      public static string DeleteDateColumnName { get { return "DeleteDate"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static string FacebookVideoUrlColumnName { get { return "FacebookVideoUrl"; } }

      public static string FacebookVideoDescriptionColumnName { get { return "FacebookVideoDescription"; } }

      public static string FacebookVideoRunningTimeColumnName { get { return "FacebookVideoRunningTime"; } }

      public static string FacebookVideoDateColumnName { get { return "FacebookVideoDate"; } }

      public static string FacebookVideoRefreshTimeColumnName { get { return "FacebookVideoRefreshTime"; } }

      public static string FacebookVideoAutoDisableColumnName { get { return "FacebookVideoAutoDisable"; } }

      public static int DeleteUserNameMaxLength { get { return 200; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static int FacebookVideoUrlMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoDescriptionMaxLength { get { return int.MaxValue; } }

      public static int FacebookVideoAutoDisableMaxLength { get { return 40; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DeletedAnswers WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM DeletedAnswers WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDeleteUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET DeleteUserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDeleteDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET DeleteDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET PoliticianKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET QuestionId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET Sequence=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET Answer=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET Source=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeDescription=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeById(TimeSpan newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeRunningTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeSource=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeSourceUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeRefreshTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeAutoDisable=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoDescription=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeById(TimeSpan newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoRunningTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoRefreshTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoAutoDisable=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE DeletedAnswers SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DeletedAnswers WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByQuestionId(Column _column, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM DeletedAnswers WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET Id=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDeleteUserNameByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET DeleteUserName=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDeleteDateByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET DeleteDate=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET PoliticianKey=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET QuestionId=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET Sequence=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET Answer=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET Source=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET DateStamp=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET UserName=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeDescription=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByQuestionId(TimeSpan newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeRunningTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeSource=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeSourceUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeSourceUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeDate=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshTimeByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeRefreshTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET YouTubeAutoDisable=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoUrlByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoUrl=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDescriptionByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoDescription=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRunningTimeByQuestionId(TimeSpan newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoRunningTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoDateByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoDate=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoRefreshTimeByQuestionId(DateTime newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoRefreshTime=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookVideoAutoDisableByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET FacebookVideoAutoDisable=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionId(Column _column, object newValue, Int32 questionId)
      {
        string cmdText = "UPDATE DeletedAnswers SET {0}=@newValue WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DeletedAnswersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DeletedAnswersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DeletedAnswers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.DeletedAnswers

    #region vote.Domains

    public partial class DomainsRow : DataRow
    {
      internal DomainsRow(DataRowBuilder rb) : base(rb) {}

      public String DomainServerName
      {
        get { return this["DomainServerName"] as String; }
        set { if (value == null) this["DomainServerName"] = DBNull.Value; else this["DomainServerName"] = value; }
      }

      public String TestServerName
      {
        get { return this["TestServerName"] as String; }
        set { if (value == null) this["TestServerName"] = DBNull.Value; else this["TestServerName"] = value; }
      }

      public Boolean IsCanonical
      {
        get { return (Boolean) this["IsCanonical"]; }
        set { this["IsCanonical"] = value; }
      }

      public String DomainDesignCode
      {
        get { return this["DomainDesignCode"] as String; }
        set { if (value == null) this["DomainDesignCode"] = DBNull.Value; else this["DomainDesignCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String DomainDataCode
      {
        get { return this["DomainDataCode"] as String; }
        set { if (value == null) this["DomainDataCode"] = DBNull.Value; else this["DomainDataCode"] = value; }
      }

      public String GoogleSiteVerificationCode
      {
        get { return this["GoogleSiteVerificationCode"] as String; }
        set { if (value == null) this["GoogleSiteVerificationCode"] = DBNull.Value; else this["GoogleSiteVerificationCode"] = value; }
      }

      public String YahooSiteVerificationCode
      {
        get { return this["YahooSiteVerificationCode"] as String; }
        set { if (value == null) this["YahooSiteVerificationCode"] = DBNull.Value; else this["YahooSiteVerificationCode"] = value; }
      }

      public String BingSiteVerificationCode
      {
        get { return this["BingSiteVerificationCode"] as String; }
        set { if (value == null) this["BingSiteVerificationCode"] = DBNull.Value; else this["BingSiteVerificationCode"] = value; }
      }
    }

    [Serializable]
    public partial class DomainsTable : TypedTableBase<DomainsRow>
    {
      public DomainsRow this[int index] { get { return (DomainsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DomainsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DomainsTable(); }

      new public DomainsRow NewRow() { return (DomainsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DomainsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DomainsRow); }

      public void RemoveRow(DomainsRow row) { this.Rows.Remove(row); }

      public DomainsRow NewRow(String domainServerName, String testServerName, Boolean isCanonical, String domainDesignCode, String stateCode, String domainDataCode, String googleSiteVerificationCode, String yahooSiteVerificationCode, String bingSiteVerificationCode)
      {
        DomainsRow row = NewRow();
        row.DomainServerName = domainServerName;
        row.TestServerName = testServerName;
        row.IsCanonical = isCanonical;
        row.DomainDesignCode = domainDesignCode;
        row.StateCode = stateCode;
        row.DomainDataCode = domainDataCode;
        row.GoogleSiteVerificationCode = googleSiteVerificationCode;
        row.YahooSiteVerificationCode = yahooSiteVerificationCode;
        row.BingSiteVerificationCode = bingSiteVerificationCode;
        return row;
      }

      public void AddRow(String domainServerName, String testServerName, Boolean isCanonical, String domainDesignCode, String stateCode, String domainDataCode, String googleSiteVerificationCode, String yahooSiteVerificationCode, String bingSiteVerificationCode)
      {
        DomainsRow row = NewRow(domainServerName, testServerName, isCanonical, domainDesignCode, stateCode, domainDataCode, googleSiteVerificationCode, yahooSiteVerificationCode, bingSiteVerificationCode);
        AddRow(row);
      }

      public DataColumn DomainServerNameColumn { get { return this.Columns["DomainServerName"]; } }

      public DataColumn TestServerNameColumn { get { return this.Columns["TestServerName"]; } }

      public DataColumn IsCanonicalColumn { get { return this.Columns["IsCanonical"]; } }

      public DataColumn DomainDesignCodeColumn { get { return this.Columns["DomainDesignCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn DomainDataCodeColumn { get { return this.Columns["DomainDataCode"]; } }

      public DataColumn GoogleSiteVerificationCodeColumn { get { return this.Columns["GoogleSiteVerificationCode"]; } }

      public DataColumn YahooSiteVerificationCodeColumn { get { return this.Columns["YahooSiteVerificationCode"]; } }

      public DataColumn BingSiteVerificationCodeColumn { get { return this.Columns["BingSiteVerificationCode"]; } }

      public enum ColumnSet { All, UrlManager }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TestServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCanonical", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDesignCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GoogleSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YahooSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BingSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitUrlManagerColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TestServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCanonical", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDesignCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DomainsTable() : this(ColumnSet.All) { }

      public DomainsTable(ColumnSet columnSet)
      {
        this.TableName = "Domains";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.UrlManager:
            InitUrlManagerColumns();
            break;
        }
      }

      protected DomainsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Domains
    {
      public const string TableName = "Domains";

      public enum Column { DomainServerName, TestServerName, IsCanonical, DomainDesignCode, StateCode, DomainDataCode, GoogleSiteVerificationCode, YahooSiteVerificationCode, BingSiteVerificationCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DomainServerName, "DomainServerName" },
        { Column.TestServerName, "TestServerName" },
        { Column.IsCanonical, "IsCanonical" },
        { Column.DomainDesignCode, "DomainDesignCode" },
        { Column.StateCode, "StateCode" },
        { Column.DomainDataCode, "DomainDataCode" },
        { Column.GoogleSiteVerificationCode, "GoogleSiteVerificationCode" },
        { Column.YahooSiteVerificationCode, "YahooSiteVerificationCode" },
        { Column.BingSiteVerificationCode, "BingSiteVerificationCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains";
        }
      }

      public static DomainsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static DomainsTable FillTable(DbCommand command)
      {
        return FillTable(command, DomainsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DomainsTable FillTable(DbCommand command, DomainsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DomainsTable table = new DomainsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DomainServerNameColumnName { get { return "DomainServerName"; } }

      public static string TestServerNameColumnName { get { return "TestServerName"; } }

      public static string IsCanonicalColumnName { get { return "IsCanonical"; } }

      public static string DomainDesignCodeColumnName { get { return "DomainDesignCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string DomainDataCodeColumnName { get { return "DomainDataCode"; } }

      public static string GoogleSiteVerificationCodeColumnName { get { return "GoogleSiteVerificationCode"; } }

      public static string YahooSiteVerificationCodeColumnName { get { return "YahooSiteVerificationCode"; } }

      public static string BingSiteVerificationCodeColumnName { get { return "BingSiteVerificationCode"; } }

      public static int DomainServerNameMaxLength { get { return 200; } }

      public static int TestServerNameMaxLength { get { return 200; } }

      public static int DomainDesignCodeMaxLength { get { return 10; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int DomainDataCodeMaxLength { get { return 2; } }

      public static int GoogleSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static int YahooSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static int BingSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static bool DomainServerNameExists(String domainServerName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainServerNameByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainServerName FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTestServerNameByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TestServerName FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsCanonicalByDomainServerName(String domainServerName)
      {
        return _GetIsCanonicalByDomainServerName(domainServerName, null);
      }

      public static Boolean GetIsCanonicalByDomainServerName(String domainServerName, Boolean defaultValue)
      {
        return _GetIsCanonicalByDomainServerName(domainServerName, defaultValue).Value;
      }

      private static Boolean? _GetIsCanonicalByDomainServerName(String domainServerName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCanonical FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetDomainDesignCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDesignCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoogleSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoogleSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYahooSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YahooSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBingSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BingSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByDomainServerName(Column _column, String domainServerName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Domains WHERE DomainServerName=@DomainServerName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DomainsTable GetDataByDomainServerName(String domainServerName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static bool TestServerNameExists(String testServerName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainServerNameByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainServerName FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTestServerNameByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TestServerName FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsCanonicalByTestServerName(String testServerName)
      {
        return _GetIsCanonicalByTestServerName(testServerName, null);
      }

      public static Boolean GetIsCanonicalByTestServerName(String testServerName, Boolean defaultValue)
      {
        return _GetIsCanonicalByTestServerName(testServerName, defaultValue).Value;
      }

      private static Boolean? _GetIsCanonicalByTestServerName(String testServerName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCanonical FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetDomainDesignCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDesignCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoogleSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoogleSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYahooSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YahooSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBingSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BingSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByTestServerName(Column _column, String testServerName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Domains WHERE TestServerName=@TestServerName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DomainsTable GetDataByTestServerName(String testServerName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static string SelectUrlManagerCommandText
      {
        get
        {
          return "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode FROM Domains";
        }
      }

      public static DomainsTable GetAllUrlManagerData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DomainsTable.ColumnSet.UrlManager);
      }

      public static string GetSelectCommandText(DomainsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DomainsTable.ColumnSet.All:
            return SelectAllCommandText;

          case DomainsTable.ColumnSet.UrlManager:
            return SelectUrlManagerCommandText;

          default:
            return null;
        }
      }

      static Domains()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Domains

    #region vote.Donations

    public partial class DonationsRow : DataRow
    {
      internal DonationsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime Date
      {
        get { return (DateTime) this["Date"]; }
        set { this["Date"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String FullName
      {
        get { return this["FullName"] as String; }
        set { if (value == null) this["FullName"] = DBNull.Value; else this["FullName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public Decimal Amount
      {
        get { return (Decimal) this["Amount"]; }
        set { this["Amount"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }

      public String PayPalTransactionId
      {
        get { return this["PayPalTransactionId"] as String; }
        set { if (value == null) this["PayPalTransactionId"] = DBNull.Value; else this["PayPalTransactionId"] = value; }
      }
    }

    [Serializable]
    public partial class DonationsTable : TypedTableBase<DonationsRow>
    {
      public DonationsRow this[int index] { get { return (DonationsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DonationsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DonationsTable(); }

      new public DonationsRow NewRow() { return (DonationsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DonationsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DonationsRow); }

      public void RemoveRow(DonationsRow row) { this.Rows.Remove(row); }

      public DonationsRow NewRow(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId)
      {
        DonationsRow row = NewRow();
        row.Id = id;
        row.Email = email;
        row.Date = date;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.FullName = fullName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Phone = phone;
        row.Amount = amount;
        row.OptOut = optOut;
        row.PayPalTransactionId = payPalTransactionId;
        return row;
      }

      public void AddRow(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId)
      {
        DonationsRow row = NewRow(id, email, date, firstName, lastName, fullName, address, city, stateCode, zip5, zip4, phone, amount, optOut, payPalTransactionId);
        AddRow(row);
      }

      public DonationsRow NewRow(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId)
      {
        DonationsRow row = NewRow();
        row.Email = email;
        row.Date = date;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.FullName = fullName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Phone = phone;
        row.Amount = amount;
        row.OptOut = optOut;
        row.PayPalTransactionId = payPalTransactionId;
        return row;
      }

      public void AddRow(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId)
      {
        DonationsRow row = NewRow(email, date, firstName, lastName, fullName, address, city, stateCode, zip5, zip4, phone, amount, optOut, payPalTransactionId);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn DateColumn { get { return this.Columns["Date"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn FullNameColumn { get { return this.Columns["FullName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AmountColumn { get { return this.Columns["Amount"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public DataColumn PayPalTransactionIdColumn { get { return this.Columns["PayPalTransactionId"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Date", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FullName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Amount", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PayPalTransactionId", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
      }

      public DonationsTable() : this(ColumnSet.All) { }

      public DonationsTable(ColumnSet columnSet)
      {
        this.TableName = "Donations";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DonationsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Donations
    {
      public const string TableName = "Donations";

      public enum Column { Id, Email, Date, FirstName, LastName, FullName, Address, City, StateCode, Zip5, Zip4, Phone, Amount, OptOut, PayPalTransactionId }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Email, "Email" },
        { Column.Date, "Date" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.FullName, "FullName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.Phone, "Phone" },
        { Column.Amount, "Amount" },
        { Column.OptOut, "OptOut" },
        { Column.PayPalTransactionId, "PayPalTransactionId" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Donations (Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId) VALUES (@Id,@Email,@Date,@FirstName,@LastName,@FullName,@Address,@City,@StateCode,@Zip5,@Zip4,@Phone,@Amount,@OptOut,@PayPalTransactionId)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "FullName", fullName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Amount", amount);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, Boolean optOut, String payPalTransactionId, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Donations (Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId) VALUES (@Email,@Date,@FirstName,@LastName,@FullName,@Address,@City,@StateCode,@Zip5,@Zip4,@Phone,@Amount,@OptOut,@PayPalTransactionId)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "FullName", fullName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Amount", amount);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId FROM Donations";
        }
      }

      public static DonationsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId FROM Donations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static DonationsTable FillTable(DbCommand command)
      {
        return FillTable(command, DonationsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DonationsTable FillTable(DbCommand command, DonationsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DonationsTable table = new DonationsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(DonationsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, DonationsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(DonationsTable table, DonationsTable.ColumnSet columnSet = DonationsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string DateColumnName { get { return "Date"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string FullNameColumnName { get { return "FullName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AmountColumnName { get { return "Amount"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static string PayPalTransactionIdColumnName { get { return "PayPalTransactionId"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int FullNameMaxLength { get { return 100; } }

      public static int AddressMaxLength { get { return 100; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int PhoneMaxLength { get { return 30; } }

      public static int PayPalTransactionIdMaxLength { get { return 45; } }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Donations WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId FROM Donations WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Donations WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Donations WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PayPalTransactionIdExists(String payPalTransactionId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations WHERE PayPalTransactionId=@PayPalTransactionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByPayPalTransactionId(Column _column, String payPalTransactionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Donations WHERE PayPalTransactionId=@PayPalTransactionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationsTable GetDataByPayPalTransactionId(String payPalTransactionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount,OptOut,PayPalTransactionId FROM Donations WHERE PayPalTransactionId=@PayPalTransactionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static int DeleteByPayPalTransactionId(String payPalTransactionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Donations WHERE PayPalTransactionId=@PayPalTransactionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PayPalTransactionId", payPalTransactionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DonationsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DonationsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Donations()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Donations

    #region vote.ElectionSpreadsheets

    public partial class ElectionSpreadsheetsRow : DataRow
    {
      internal ElectionSpreadsheetsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Filename
      {
        get { return this["Filename"] as String; }
        set { if (value == null) this["Filename"] = DBNull.Value; else this["Filename"] = value; }
      }

      public DateTime UploadTime
      {
        get { return (DateTime) this["UploadTime"]; }
        set { this["UploadTime"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Content
      {
        get { return this["Content"] as Byte[]; }
        set { if (value == null) this["Content"] = DBNull.Value; else this["Content"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public Boolean Completed
      {
        get { return (Boolean) this["Completed"]; }
        set { this["Completed"] = value; }
      }

      public Int32 Columns
      {
        get { return (Int32) this["Columns"]; }
        set { this["Columns"] = value; }
      }

      public Int32 Rows
      {
        get { return (Int32) this["Rows"]; }
        set { this["Rows"] = value; }
      }

      public String JurisdictionScope
      {
        get { return this["JurisdictionScope"] as String; }
        set { if (value == null) this["JurisdictionScope"] = DBNull.Value; else this["JurisdictionScope"] = value; }
      }

      public String ElectionScope
      {
        get { return this["ElectionScope"] as String; }
        set { if (value == null) this["ElectionScope"] = DBNull.Value; else this["ElectionScope"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionSpreadsheetsTable : TypedTableBase<ElectionSpreadsheetsRow>
    {
      public ElectionSpreadsheetsRow this[int index] { get { return (ElectionSpreadsheetsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionSpreadsheetsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionSpreadsheetsTable(); }

      new public ElectionSpreadsheetsRow NewRow() { return (ElectionSpreadsheetsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionSpreadsheetsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionSpreadsheetsRow); }

      public void RemoveRow(ElectionSpreadsheetsRow row) { this.Rows.Remove(row); }

      public ElectionSpreadsheetsRow NewRow(Int32 id, String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope)
      {
        ElectionSpreadsheetsRow row = NewRow();
        row.Id = id;
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.ElectionKey = electionKey;
        row.Completed = completed;
        row.Columns = columns;
        row.Rows = rows;
        row.JurisdictionScope = jurisdictionScope;
        row.ElectionScope = electionScope;
        return row;
      }

      public void AddRow(Int32 id, String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope)
      {
        ElectionSpreadsheetsRow row = NewRow(id, filename, uploadTime, content, electionKey, completed, columns, rows, jurisdictionScope, electionScope);
        AddRow(row);
      }

      public ElectionSpreadsheetsRow NewRow(String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope)
      {
        ElectionSpreadsheetsRow row = NewRow();
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.ElectionKey = electionKey;
        row.Completed = completed;
        row.Columns = columns;
        row.Rows = rows;
        row.JurisdictionScope = jurisdictionScope;
        row.ElectionScope = electionScope;
        return row;
      }

      public void AddRow(String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope)
      {
        ElectionSpreadsheetsRow row = NewRow(filename, uploadTime, content, electionKey, completed, columns, rows, jurisdictionScope, electionScope);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn FilenameColumn { get { return this.Columns["Filename"]; } }

      public DataColumn UploadTimeColumn { get { return this.Columns["UploadTime"]; } }

      public DataColumn ContentColumn { get { return this.Columns["Content"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn CompletedColumn { get { return this.Columns["Completed"]; } }

      public DataColumn ColumnsColumn { get { return this.Columns["Columns"]; } }

      public DataColumn RowsColumn { get { return this.Columns["Rows"]; } }

      public DataColumn JurisdictionScopeColumn { get { return this.Columns["JurisdictionScope"]; } }

      public DataColumn ElectionScopeColumn { get { return this.Columns["ElectionScope"]; } }

      public enum ColumnSet { All, List }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Content", typeof(Byte[]));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Columns", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Rows", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("JurisdictionScope", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionScope", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitListColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Columns", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Rows", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("JurisdictionScope", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionScope", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionSpreadsheetsTable() : this(ColumnSet.All) { }

      public ElectionSpreadsheetsTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionSpreadsheets";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.List:
            InitListColumns();
            break;
        }
      }

      protected ElectionSpreadsheetsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionSpreadsheets
    {
      public const string TableName = "ElectionSpreadsheets";

      public enum Column { Id, Filename, UploadTime, Content, ElectionKey, Completed, Columns, Rows, JurisdictionScope, ElectionScope }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Filename, "Filename" },
        { Column.UploadTime, "UploadTime" },
        { Column.Content, "Content" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.Completed, "Completed" },
        { Column.Columns, "Columns" },
        { Column.Rows, "Rows" },
        { Column.JurisdictionScope, "JurisdictionScope" },
        { Column.ElectionScope, "ElectionScope" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheets";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionSpreadsheets (Id,Filename,UploadTime,Content,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope) VALUES (@Id,@Filename,@UploadTime,@Content,@ElectionKey,@Completed,@Columns,@Rows,@JurisdictionScope,@ElectionScope)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        VoteDb.AddCommandParameter(cmd, "Columns", columns);
        VoteDb.AddCommandParameter(cmd, "Rows", rows);
        VoteDb.AddCommandParameter(cmd, "JurisdictionScope", jurisdictionScope);
        VoteDb.AddCommandParameter(cmd, "ElectionScope", electionScope);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String filename, DateTime uploadTime, Byte[] content, String electionKey, Boolean completed, Int32 columns, Int32 rows, String jurisdictionScope, String electionScope, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionSpreadsheets (Filename,UploadTime,Content,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope) VALUES (@Filename,@UploadTime,@Content,@ElectionKey,@Completed,@Columns,@Rows,@JurisdictionScope,@ElectionScope)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        VoteDb.AddCommandParameter(cmd, "Columns", columns);
        VoteDb.AddCommandParameter(cmd, "Rows", rows);
        VoteDb.AddCommandParameter(cmd, "JurisdictionScope", jurisdictionScope);
        VoteDb.AddCommandParameter(cmd, "ElectionScope", electionScope);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,Content,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets";
        }
      }

      public static ElectionSpreadsheetsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionSpreadsheetsTable.ColumnSet.All);
      }

      public static ElectionSpreadsheetsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionSpreadsheetsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionSpreadsheetsTable FillTable(DbCommand command, ElectionSpreadsheetsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionSpreadsheetsTable table = new ElectionSpreadsheetsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionSpreadsheetsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionSpreadsheetsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionSpreadsheetsTable table, ElectionSpreadsheetsTable.ColumnSet columnSet = ElectionSpreadsheetsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string FilenameColumnName { get { return "Filename"; } }

      public static string UploadTimeColumnName { get { return "UploadTime"; } }

      public static string ContentColumnName { get { return "Content"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string CompletedColumnName { get { return "Completed"; } }

      public static string ColumnsColumnName { get { return "Columns"; } }

      public static string RowsColumnName { get { return "Rows"; } }

      public static string JurisdictionScopeColumnName { get { return "JurisdictionScope"; } }

      public static string ElectionScopeColumnName { get { return "ElectionScope"; } }

      public static int FilenameMaxLength { get { return 255; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int JurisdictionScopeMaxLength { get { return 1; } }

      public static int ElectionScopeMaxLength { get { return 1; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetFilenameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Filename FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetUploadTimeById(Int32 id)
      {
        return _GetUploadTimeById(id, null);
      }

      public static DateTime GetUploadTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetUploadTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetUploadTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT UploadTime FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Byte[] GetContentById(Int32 id, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Content FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetCompletedById(Int32 id)
      {
        return _GetCompletedById(id, null);
      }

      public static Boolean GetCompletedById(Int32 id, Boolean defaultValue)
      {
        return _GetCompletedById(id, defaultValue).Value;
      }

      private static Boolean? _GetCompletedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Completed FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetColumnsById(Int32 id)
      {
        return _GetColumnsById(id, null);
      }

      public static Int32 GetColumnsById(Int32 id, Int32 defaultValue)
      {
        return _GetColumnsById(id, defaultValue).Value;
      }

      private static Int32? _GetColumnsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Columns FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetRowsById(Int32 id)
      {
        return _GetRowsById(id, null);
      }

      public static Int32 GetRowsById(Int32 id, Int32 defaultValue)
      {
        return _GetRowsById(id, defaultValue).Value;
      }

      private static Int32? _GetRowsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Rows FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetJurisdictionScopeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT JurisdictionScope FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionScopeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionScope FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionSpreadsheets WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionSpreadsheetsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, ElectionSpreadsheetsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFilenameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Filename=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUploadTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET UploadTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContentById(Byte[] newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Content=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompletedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Completed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Columns=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRowsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET Rows=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJurisdictionScopeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET JurisdictionScope=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionScopeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET ElectionScope=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheets SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionSpreadsheets WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectListCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets";
        }
      }

      public static ElectionSpreadsheetsTable GetAllListData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionSpreadsheetsTable.ColumnSet.List);
      }

      public static void UpdateList(ElectionSpreadsheetsTable table)
      {
        UpdateList(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateList(ElectionSpreadsheetsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionSpreadsheetsTable.ColumnSet.List, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionSpreadsheetsTable GetListDataByCompleted(Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,ElectionKey,Completed,Columns,Rows,JurisdictionScope,ElectionScope FROM ElectionSpreadsheets WHERE Completed=@Completed";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return FillTable(cmd, ElectionSpreadsheetsTable.ColumnSet.List);
      }

      public static string GetSelectCommandText(ElectionSpreadsheetsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionSpreadsheetsTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionSpreadsheetsTable.ColumnSet.List:
            return SelectListCommandText;

          default:
            return null;
        }
      }

      static ElectionSpreadsheets()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionSpreadsheets

    #region vote.ElectionSpreadsheetsColumns

    public partial class ElectionSpreadsheetsColumnsRow : DataRow
    {
      internal ElectionSpreadsheetsColumnsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String ColumnName
      {
        get { return this["ColumnName"] as String; }
        set { if (value == null) this["ColumnName"] = DBNull.Value; else this["ColumnName"] = value; }
      }

      public String Mapping
      {
        get { return this["Mapping"] as String; }
        set { if (value == null) this["Mapping"] = DBNull.Value; else this["Mapping"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionSpreadsheetsColumnsTable : TypedTableBase<ElectionSpreadsheetsColumnsRow>
    {
      public ElectionSpreadsheetsColumnsRow this[int index] { get { return (ElectionSpreadsheetsColumnsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionSpreadsheetsColumnsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionSpreadsheetsColumnsTable(); }

      new public ElectionSpreadsheetsColumnsRow NewRow() { return (ElectionSpreadsheetsColumnsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionSpreadsheetsColumnsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionSpreadsheetsColumnsRow); }

      public void RemoveRow(ElectionSpreadsheetsColumnsRow row) { this.Rows.Remove(row); }

      public ElectionSpreadsheetsColumnsRow NewRow(Int32 id, Int32 sequence, String columnName, String mapping)
      {
        ElectionSpreadsheetsColumnsRow row = NewRow();
        row.Id = id;
        row.Sequence = sequence;
        row.ColumnName = columnName;
        row.Mapping = mapping;
        return row;
      }

      public void AddRow(Int32 id, Int32 sequence, String columnName, String mapping)
      {
        ElectionSpreadsheetsColumnsRow row = NewRow(id, sequence, columnName, mapping);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn ColumnNameColumn { get { return this.Columns["ColumnName"]; } }

      public DataColumn MappingColumn { get { return this.Columns["Mapping"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Mapping", typeof(String));
        _column.MaxLength = 16;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionSpreadsheetsColumnsTable() : this(ColumnSet.All) { }

      public ElectionSpreadsheetsColumnsTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionSpreadsheetsColumns";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ElectionSpreadsheetsColumnsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionSpreadsheetsColumns
    {
      public const string TableName = "ElectionSpreadsheetsColumns";

      public enum Column { Id, Sequence, ColumnName, Mapping }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Sequence, "Sequence" },
        { Column.ColumnName, "ColumnName" },
        { Column.Mapping, "Mapping" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheetsColumns";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 id, Int32 sequence, String columnName, String mapping, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionSpreadsheetsColumns (Id,Sequence,ColumnName,Mapping) VALUES (@Id,@Sequence,@ColumnName,@Mapping)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteDb.AddCommandParameter(cmd, "Mapping", mapping);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Sequence,ColumnName,Mapping FROM ElectionSpreadsheetsColumns";
        }
      }

      public static ElectionSpreadsheetsColumnsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Sequence,ColumnName,Mapping FROM ElectionSpreadsheetsColumns";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionSpreadsheetsColumnsTable.ColumnSet.All);
      }

      public static ElectionSpreadsheetsColumnsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionSpreadsheetsColumnsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionSpreadsheetsColumnsTable FillTable(DbCommand command, ElectionSpreadsheetsColumnsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionSpreadsheetsColumnsTable table = new ElectionSpreadsheetsColumnsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionSpreadsheetsColumnsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionSpreadsheetsColumnsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionSpreadsheetsColumnsTable table, ElectionSpreadsheetsColumnsTable.ColumnSet columnSet = ElectionSpreadsheetsColumnsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string ColumnNameColumnName { get { return "ColumnName"; } }

      public static string MappingColumnName { get { return "Mapping"; } }

      public static int ColumnNameMaxLength { get { return 255; } }

      public static int MappingMaxLength { get { return 16; } }

      public static int CountById(Int32 id, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheetsColumns WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionSpreadsheetsColumns WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionSpreadsheetsColumnsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Sequence,ColumnName,Mapping FROM ElectionSpreadsheetsColumns WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, ElectionSpreadsheetsColumnsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Sequence=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET ColumnName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMappingById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Mapping=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionSpreadsheetsColumns WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IdSequenceExists(Int32 id, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetColumnNameByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ColumnName FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMappingByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Mapping FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByIdSequence(Column _column, Int32 id, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionSpreadsheetsColumnsTable GetDataByIdSequence(Int32 id, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Sequence,ColumnName,Mapping FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, ElectionSpreadsheetsColumnsTable.ColumnSet.All);
      }

      public static int UpdateIdByIdSequence(Int32 newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Id=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByIdSequence(Int32 newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Sequence=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET ColumnName=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMappingByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET Mapping=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIdSequence(Column _column, object newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsColumns SET {0}=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIdSequence(Int32 id, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionSpreadsheetsColumns WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ElectionSpreadsheetsColumnsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionSpreadsheetsColumnsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ElectionSpreadsheetsColumns()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionSpreadsheetsColumns

    #region vote.ElectionSpreadsheetsRows

    public partial class ElectionSpreadsheetsRowsRow : DataRow
    {
      internal ElectionSpreadsheetsRowsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Status
      {
        get { return this["Status"] as String; }
        set { if (value == null) this["Status"] = DBNull.Value; else this["Status"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionSpreadsheetsRowsTable : TypedTableBase<ElectionSpreadsheetsRowsRow>
    {
      public ElectionSpreadsheetsRowsRow this[int index] { get { return (ElectionSpreadsheetsRowsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionSpreadsheetsRowsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionSpreadsheetsRowsTable(); }

      new public ElectionSpreadsheetsRowsRow NewRow() { return (ElectionSpreadsheetsRowsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionSpreadsheetsRowsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionSpreadsheetsRowsRow); }

      public void RemoveRow(ElectionSpreadsheetsRowsRow row) { this.Rows.Remove(row); }

      public ElectionSpreadsheetsRowsRow NewRow(Int32 id, Int32 sequence, String electionKey, String officeKey, String politicianKey, String status)
      {
        ElectionSpreadsheetsRowsRow row = NewRow();
        row.Id = id;
        row.Sequence = sequence;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.Status = status;
        return row;
      }

      public void AddRow(Int32 id, Int32 sequence, String electionKey, String officeKey, String politicianKey, String status)
      {
        ElectionSpreadsheetsRowsRow row = NewRow(id, sequence, electionKey, officeKey, politicianKey, status);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn StatusColumn { get { return this.Columns["Status"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Status", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionSpreadsheetsRowsTable() : this(ColumnSet.All) { }

      public ElectionSpreadsheetsRowsTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionSpreadsheetsRows";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ElectionSpreadsheetsRowsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionSpreadsheetsRows
    {
      public const string TableName = "ElectionSpreadsheetsRows";

      public enum Column { Id, Sequence, ElectionKey, OfficeKey, PoliticianKey, Status }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Sequence, "Sequence" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Status, "Status" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheetsRows";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 id, Int32 sequence, String electionKey, String officeKey, String politicianKey, String status, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionSpreadsheetsRows (Id,Sequence,ElectionKey,OfficeKey,PoliticianKey,Status) VALUES (@Id,@Sequence,@ElectionKey,@OfficeKey,@PoliticianKey,@Status)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "Status", status);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Sequence,ElectionKey,OfficeKey,PoliticianKey,Status FROM ElectionSpreadsheetsRows";
        }
      }

      public static ElectionSpreadsheetsRowsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Sequence,ElectionKey,OfficeKey,PoliticianKey,Status FROM ElectionSpreadsheetsRows";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionSpreadsheetsRowsTable.ColumnSet.All);
      }

      public static ElectionSpreadsheetsRowsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionSpreadsheetsRowsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionSpreadsheetsRowsTable FillTable(DbCommand command, ElectionSpreadsheetsRowsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionSpreadsheetsRowsTable table = new ElectionSpreadsheetsRowsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionSpreadsheetsRowsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionSpreadsheetsRowsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionSpreadsheetsRowsTable table, ElectionSpreadsheetsRowsTable.ColumnSet columnSet = ElectionSpreadsheetsRowsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string StatusColumnName { get { return "Status"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int StatusMaxLength { get { return 8; } }

      public static bool IdSequenceExists(Int32 id, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStatusByIdSequence(Int32 id, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Status FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByIdSequence(Column _column, Int32 id, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionSpreadsheetsRowsTable GetDataByIdSequence(Int32 id, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Sequence,ElectionKey,OfficeKey,PoliticianKey,Status FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, ElectionSpreadsheetsRowsTable.ColumnSet.All);
      }

      public static int UpdateIdByIdSequence(Int32 newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET Id=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSequenceByIdSequence(Int32 newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET Sequence=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET ElectionKey=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET OfficeKey=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET PoliticianKey=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatusByIdSequence(String newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET Status=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIdSequence(Column _column, object newValue, Int32 id, Int32 sequence)
      {
        string cmdText = "UPDATE ElectionSpreadsheetsRows SET {0}=@newValue WHERE Id=@Id AND Sequence=@Sequence";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIdSequence(Int32 id, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionSpreadsheetsRows WHERE Id=@Id AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ElectionSpreadsheetsRowsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionSpreadsheetsRowsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ElectionSpreadsheetsRows()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionSpreadsheetsRows

    #region vote.Elections

    public partial class ElectionsRow : DataRow
    {
      internal ElectionsRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public DateTime ElectionDate
      {
        get { return (DateTime) this["ElectionDate"]; }
        set { this["ElectionDate"] = value; }
      }

      public String ElectionYYYYMMDD
      {
        get { return this["ElectionYYYYMMDD"] as String; }
        set { if (value == null) this["ElectionYYYYMMDD"] = DBNull.Value; else this["ElectionYYYYMMDD"] = value; }
      }

      public String ElectionType
      {
        get { return this["ElectionType"] as String; }
        set { if (value == null) this["ElectionType"] = DBNull.Value; else this["ElectionType"] = value; }
      }

      public String NationalPartyCode
      {
        get { return this["NationalPartyCode"] as String; }
        set { if (value == null) this["NationalPartyCode"] = DBNull.Value; else this["NationalPartyCode"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }

      public String ElectionStatus
      {
        get { return this["ElectionStatus"] as String; }
        set { if (value == null) this["ElectionStatus"] = DBNull.Value; else this["ElectionStatus"] = value; }
      }

      public String ElectionDesc
      {
        get { return this["ElectionDesc"] as String; }
        set { if (value == null) this["ElectionDesc"] = DBNull.Value; else this["ElectionDesc"] = value; }
      }

      public String ElectionAdditionalInfo
      {
        get { return this["ElectionAdditionalInfo"] as String; }
        set { if (value == null) this["ElectionAdditionalInfo"] = DBNull.Value; else this["ElectionAdditionalInfo"] = value; }
      }

      public String ElectionResultsSource
      {
        get { return this["ElectionResultsSource"] as String; }
        set { if (value == null) this["ElectionResultsSource"] = DBNull.Value; else this["ElectionResultsSource"] = value; }
      }

      public DateTime ElectionResultsDate
      {
        get { return (DateTime) this["ElectionResultsDate"]; }
        set { this["ElectionResultsDate"] = value; }
      }

      public String BallotInstructions
      {
        get { return this["BallotInstructions"] as String; }
        set { if (value == null) this["BallotInstructions"] = DBNull.Value; else this["BallotInstructions"] = value; }
      }

      public Boolean IsViewable
      {
        get { return (Boolean) this["IsViewable"]; }
        set { this["IsViewable"] = value; }
      }

      public String ElectionKeyCanonical
      {
        get { return this["ElectionKeyCanonical"] as String; }
        set { if (value == null) this["ElectionKeyCanonical"] = DBNull.Value; else this["ElectionKeyCanonical"] = value; }
      }

      public Int32 ElectionOrder
      {
        get { return (Int32) this["ElectionOrder"]; }
        set { this["ElectionOrder"] = value; }
      }

      public Boolean IsWinnersIdentified
      {
        get { return (Boolean) this["IsWinnersIdentified"]; }
        set { this["IsWinnersIdentified"] = value; }
      }

      public Boolean IsBallotMeasuresResultsRecorded
      {
        get { return (Boolean) this["IsBallotMeasuresResultsRecorded"]; }
        set { this["IsBallotMeasuresResultsRecorded"] = value; }
      }

      public DateTime RegistrationDeadline
      {
        get { return (DateTime) this["RegistrationDeadline"]; }
        set { this["RegistrationDeadline"] = value; }
      }

      public DateTime EarlyVotingBegin
      {
        get { return (DateTime) this["EarlyVotingBegin"]; }
        set { this["EarlyVotingBegin"] = value; }
      }

      public DateTime EarlyVotingEnd
      {
        get { return (DateTime) this["EarlyVotingEnd"]; }
        set { this["EarlyVotingEnd"] = value; }
      }

      public DateTime MailBallotBegin
      {
        get { return (DateTime) this["MailBallotBegin"]; }
        set { this["MailBallotBegin"] = value; }
      }

      public DateTime MailBallotEnd
      {
        get { return (DateTime) this["MailBallotEnd"]; }
        set { this["MailBallotEnd"] = value; }
      }

      public DateTime MailBallotDeadline
      {
        get { return (DateTime) this["MailBallotDeadline"]; }
        set { this["MailBallotDeadline"] = value; }
      }

      public DateTime AbsenteeBallotBegin
      {
        get { return (DateTime) this["AbsenteeBallotBegin"]; }
        set { this["AbsenteeBallotBegin"] = value; }
      }

      public DateTime AbsenteeBallotEnd
      {
        get { return (DateTime) this["AbsenteeBallotEnd"]; }
        set { this["AbsenteeBallotEnd"] = value; }
      }

      public DateTime AbsenteeBallotDeadline
      {
        get { return (DateTime) this["AbsenteeBallotDeadline"]; }
        set { this["AbsenteeBallotDeadline"] = value; }
      }

      public String ElectionKeyToInclude
      {
        get { return this["ElectionKeyToInclude"] as String; }
        set { if (value == null) this["ElectionKeyToInclude"] = DBNull.Value; else this["ElectionKeyToInclude"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsTable : TypedTableBase<ElectionsRow>
    {
      public ElectionsRow this[int index] { get { return (ElectionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsTable(); }

      new public ElectionsRow NewRow() { return (ElectionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsRow); }

      public void RemoveRow(ElectionsRow row) { this.Rows.Remove(row); }

      public ElectionsRow NewRow(String electionKey, String stateCode, String countyCode, String localKey, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline, String electionKeyToInclude)
      {
        ElectionsRow row = NewRow();
        row.ElectionKey = electionKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.ElectionDate = electionDate;
        row.ElectionYYYYMMDD = electionYYYYMMDD;
        row.ElectionType = electionType;
        row.NationalPartyCode = nationalPartyCode;
        row.PartyCode = partyCode;
        row.ElectionStatus = electionStatus;
        row.ElectionDesc = electionDesc;
        row.ElectionAdditionalInfo = electionAdditionalInfo;
        row.ElectionResultsSource = electionResultsSource;
        row.ElectionResultsDate = electionResultsDate;
        row.BallotInstructions = ballotInstructions;
        row.IsViewable = isViewable;
        row.ElectionKeyCanonical = electionKeyCanonical;
        row.ElectionOrder = electionOrder;
        row.IsWinnersIdentified = isWinnersIdentified;
        row.IsBallotMeasuresResultsRecorded = isBallotMeasuresResultsRecorded;
        row.RegistrationDeadline = registrationDeadline;
        row.EarlyVotingBegin = earlyVotingBegin;
        row.EarlyVotingEnd = earlyVotingEnd;
        row.MailBallotBegin = mailBallotBegin;
        row.MailBallotEnd = mailBallotEnd;
        row.MailBallotDeadline = mailBallotDeadline;
        row.AbsenteeBallotBegin = absenteeBallotBegin;
        row.AbsenteeBallotEnd = absenteeBallotEnd;
        row.AbsenteeBallotDeadline = absenteeBallotDeadline;
        row.ElectionKeyToInclude = electionKeyToInclude;
        return row;
      }

      public void AddRow(String electionKey, String stateCode, String countyCode, String localKey, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline, String electionKeyToInclude)
      {
        ElectionsRow row = NewRow(electionKey, stateCode, countyCode, localKey, electionDate, electionYYYYMMDD, electionType, nationalPartyCode, partyCode, electionStatus, electionDesc, electionAdditionalInfo, electionResultsSource, electionResultsDate, ballotInstructions, isViewable, electionKeyCanonical, electionOrder, isWinnersIdentified, isBallotMeasuresResultsRecorded, registrationDeadline, earlyVotingBegin, earlyVotingEnd, mailBallotBegin, mailBallotEnd, mailBallotDeadline, absenteeBallotBegin, absenteeBallotEnd, absenteeBallotDeadline, electionKeyToInclude);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn ElectionDateColumn { get { return this.Columns["ElectionDate"]; } }

      public DataColumn ElectionYYYYMMDDColumn { get { return this.Columns["ElectionYYYYMMDD"]; } }

      public DataColumn ElectionTypeColumn { get { return this.Columns["ElectionType"]; } }

      public DataColumn NationalPartyCodeColumn { get { return this.Columns["NationalPartyCode"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public DataColumn ElectionStatusColumn { get { return this.Columns["ElectionStatus"]; } }

      public DataColumn ElectionDescColumn { get { return this.Columns["ElectionDesc"]; } }

      public DataColumn ElectionAdditionalInfoColumn { get { return this.Columns["ElectionAdditionalInfo"]; } }

      public DataColumn ElectionResultsSourceColumn { get { return this.Columns["ElectionResultsSource"]; } }

      public DataColumn ElectionResultsDateColumn { get { return this.Columns["ElectionResultsDate"]; } }

      public DataColumn BallotInstructionsColumn { get { return this.Columns["BallotInstructions"]; } }

      public DataColumn IsViewableColumn { get { return this.Columns["IsViewable"]; } }

      public DataColumn ElectionKeyCanonicalColumn { get { return this.Columns["ElectionKeyCanonical"]; } }

      public DataColumn ElectionOrderColumn { get { return this.Columns["ElectionOrder"]; } }

      public DataColumn IsWinnersIdentifiedColumn { get { return this.Columns["IsWinnersIdentified"]; } }

      public DataColumn IsBallotMeasuresResultsRecordedColumn { get { return this.Columns["IsBallotMeasuresResultsRecorded"]; } }

      public DataColumn RegistrationDeadlineColumn { get { return this.Columns["RegistrationDeadline"]; } }

      public DataColumn EarlyVotingBeginColumn { get { return this.Columns["EarlyVotingBegin"]; } }

      public DataColumn EarlyVotingEndColumn { get { return this.Columns["EarlyVotingEnd"]; } }

      public DataColumn MailBallotBeginColumn { get { return this.Columns["MailBallotBegin"]; } }

      public DataColumn MailBallotEndColumn { get { return this.Columns["MailBallotEnd"]; } }

      public DataColumn MailBallotDeadlineColumn { get { return this.Columns["MailBallotDeadline"]; } }

      public DataColumn AbsenteeBallotBeginColumn { get { return this.Columns["AbsenteeBallotBegin"]; } }

      public DataColumn AbsenteeBallotEndColumn { get { return this.Columns["AbsenteeBallotEnd"]; } }

      public DataColumn AbsenteeBallotDeadlineColumn { get { return this.Columns["AbsenteeBallotDeadline"]; } }

      public DataColumn ElectionKeyToIncludeColumn { get { return this.Columns["ElectionKeyToInclude"]; } }

      public enum ColumnSet { All, Display, Cache, Date, Control }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionYYYYMMDD", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("NationalPartyCode", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionStatus", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsViewable", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyCanonical", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinnersIdentified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsBallotMeasuresResultsRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RegistrationDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyToInclude", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDisplayColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsViewable", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("NationalPartyCode", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitControlColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsTable() : this(ColumnSet.All) { }

      public ElectionsTable(ColumnSet columnSet)
      {
        this.TableName = "Elections";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Display:
            InitDisplayColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Date:
            InitDateColumns();
            break;

          case ColumnSet.Control:
            InitControlColumns();
            break;
        }
      }

      protected ElectionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Elections
    {
      public const string TableName = "Elections";

      public enum Column { ElectionKey, StateCode, CountyCode, LocalKey, ElectionDate, ElectionYYYYMMDD, ElectionType, NationalPartyCode, PartyCode, ElectionStatus, ElectionDesc, ElectionAdditionalInfo, ElectionResultsSource, ElectionResultsDate, BallotInstructions, IsViewable, ElectionKeyCanonical, ElectionOrder, IsWinnersIdentified, IsBallotMeasuresResultsRecorded, RegistrationDeadline, EarlyVotingBegin, EarlyVotingEnd, MailBallotBegin, MailBallotEnd, MailBallotDeadline, AbsenteeBallotBegin, AbsenteeBallotEnd, AbsenteeBallotDeadline, ElectionKeyToInclude }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.ElectionDate, "ElectionDate" },
        { Column.ElectionYYYYMMDD, "ElectionYYYYMMDD" },
        { Column.ElectionType, "ElectionType" },
        { Column.NationalPartyCode, "NationalPartyCode" },
        { Column.PartyCode, "PartyCode" },
        { Column.ElectionStatus, "ElectionStatus" },
        { Column.ElectionDesc, "ElectionDesc" },
        { Column.ElectionAdditionalInfo, "ElectionAdditionalInfo" },
        { Column.ElectionResultsSource, "ElectionResultsSource" },
        { Column.ElectionResultsDate, "ElectionResultsDate" },
        { Column.BallotInstructions, "BallotInstructions" },
        { Column.IsViewable, "IsViewable" },
        { Column.ElectionKeyCanonical, "ElectionKeyCanonical" },
        { Column.ElectionOrder, "ElectionOrder" },
        { Column.IsWinnersIdentified, "IsWinnersIdentified" },
        { Column.IsBallotMeasuresResultsRecorded, "IsBallotMeasuresResultsRecorded" },
        { Column.RegistrationDeadline, "RegistrationDeadline" },
        { Column.EarlyVotingBegin, "EarlyVotingBegin" },
        { Column.EarlyVotingEnd, "EarlyVotingEnd" },
        { Column.MailBallotBegin, "MailBallotBegin" },
        { Column.MailBallotEnd, "MailBallotEnd" },
        { Column.MailBallotDeadline, "MailBallotDeadline" },
        { Column.AbsenteeBallotBegin, "AbsenteeBallotBegin" },
        { Column.AbsenteeBallotEnd, "AbsenteeBallotEnd" },
        { Column.AbsenteeBallotDeadline, "AbsenteeBallotDeadline" },
        { Column.ElectionKeyToInclude, "ElectionKeyToInclude" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String stateCode, String countyCode, String localKey, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline, String electionKeyToInclude, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Elections (ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude) VALUES (@ElectionKey,@StateCode,@CountyCode,@LocalKey,@ElectionDate,@ElectionYYYYMMDD,@ElectionType,@NationalPartyCode,@PartyCode,@ElectionStatus,@ElectionDesc,@ElectionAdditionalInfo,@ElectionResultsSource,@ElectionResultsDate,@BallotInstructions,@IsViewable,@ElectionKeyCanonical,@ElectionOrder,@IsWinnersIdentified,@IsBallotMeasuresResultsRecorded,@RegistrationDeadline,@EarlyVotingBegin,@EarlyVotingEnd,@MailBallotBegin,@MailBallotEnd,@MailBallotDeadline,@AbsenteeBallotBegin,@AbsenteeBallotEnd,@AbsenteeBallotDeadline,@ElectionKeyToInclude)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "ElectionDate", electionDate);
        VoteDb.AddCommandParameter(cmd, "ElectionYYYYMMDD", electionYYYYMMDD);
        VoteDb.AddCommandParameter(cmd, "ElectionType", electionType);
        VoteDb.AddCommandParameter(cmd, "NationalPartyCode", nationalPartyCode);
        VoteDb.AddCommandParameter(cmd, "PartyCode", partyCode);
        VoteDb.AddCommandParameter(cmd, "ElectionStatus", electionStatus);
        VoteDb.AddCommandParameter(cmd, "ElectionDesc", electionDesc);
        VoteDb.AddCommandParameter(cmd, "ElectionAdditionalInfo", electionAdditionalInfo);
        VoteDb.AddCommandParameter(cmd, "ElectionResultsSource", electionResultsSource);
        VoteDb.AddCommandParameter(cmd, "ElectionResultsDate", electionResultsDate);
        VoteDb.AddCommandParameter(cmd, "BallotInstructions", ballotInstructions);
        VoteDb.AddCommandParameter(cmd, "IsViewable", isViewable);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyCanonical", electionKeyCanonical);
        VoteDb.AddCommandParameter(cmd, "ElectionOrder", electionOrder);
        VoteDb.AddCommandParameter(cmd, "IsWinnersIdentified", isWinnersIdentified);
        VoteDb.AddCommandParameter(cmd, "IsBallotMeasuresResultsRecorded", isBallotMeasuresResultsRecorded);
        VoteDb.AddCommandParameter(cmd, "RegistrationDeadline", registrationDeadline);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingBegin", earlyVotingBegin);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingEnd", earlyVotingEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotBegin", mailBallotBegin);
        VoteDb.AddCommandParameter(cmd, "MailBallotEnd", mailBallotEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotDeadline", mailBallotDeadline);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotBegin", absenteeBallotBegin);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotEnd", absenteeBallotEnd);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotDeadline", absenteeBallotDeadline);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections";
        }
      }

      public static ElectionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static ElectionsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsTable FillTable(DbCommand command, ElectionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsTable table = new ElectionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsTable table, ElectionsTable.ColumnSet columnSet = ElectionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string ElectionDateColumnName { get { return "ElectionDate"; } }

      public static string ElectionYYYYMMDDColumnName { get { return "ElectionYYYYMMDD"; } }

      public static string ElectionTypeColumnName { get { return "ElectionType"; } }

      public static string NationalPartyCodeColumnName { get { return "NationalPartyCode"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static string ElectionStatusColumnName { get { return "ElectionStatus"; } }

      public static string ElectionDescColumnName { get { return "ElectionDesc"; } }

      public static string ElectionAdditionalInfoColumnName { get { return "ElectionAdditionalInfo"; } }

      public static string ElectionResultsSourceColumnName { get { return "ElectionResultsSource"; } }

      public static string ElectionResultsDateColumnName { get { return "ElectionResultsDate"; } }

      public static string BallotInstructionsColumnName { get { return "BallotInstructions"; } }

      public static string IsViewableColumnName { get { return "IsViewable"; } }

      public static string ElectionKeyCanonicalColumnName { get { return "ElectionKeyCanonical"; } }

      public static string ElectionOrderColumnName { get { return "ElectionOrder"; } }

      public static string IsWinnersIdentifiedColumnName { get { return "IsWinnersIdentified"; } }

      public static string IsBallotMeasuresResultsRecordedColumnName { get { return "IsBallotMeasuresResultsRecorded"; } }

      public static string RegistrationDeadlineColumnName { get { return "RegistrationDeadline"; } }

      public static string EarlyVotingBeginColumnName { get { return "EarlyVotingBegin"; } }

      public static string EarlyVotingEndColumnName { get { return "EarlyVotingEnd"; } }

      public static string MailBallotBeginColumnName { get { return "MailBallotBegin"; } }

      public static string MailBallotEndColumnName { get { return "MailBallotEnd"; } }

      public static string MailBallotDeadlineColumnName { get { return "MailBallotDeadline"; } }

      public static string AbsenteeBallotBeginColumnName { get { return "AbsenteeBallotBegin"; } }

      public static string AbsenteeBallotEndColumnName { get { return "AbsenteeBallotEnd"; } }

      public static string AbsenteeBallotDeadlineColumnName { get { return "AbsenteeBallotDeadline"; } }

      public static string ElectionKeyToIncludeColumnName { get { return "ElectionKeyToInclude"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int ElectionYYYYMMDDMaxLength { get { return 8; } }

      public static int ElectionTypeMaxLength { get { return 1; } }

      public static int NationalPartyCodeMaxLength { get { return 1; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static int ElectionStatusMaxLength { get { return int.MaxValue; } }

      public static int ElectionDescMaxLength { get { return int.MaxValue; } }

      public static int ElectionAdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int ElectionResultsSourceMaxLength { get { return int.MaxValue; } }

      public static int BallotInstructionsMaxLength { get { return int.MaxValue; } }

      public static int ElectionKeyCanonicalMaxLength { get { return 18; } }

      public static int ElectionKeyToIncludeMaxLength { get { return 18; } }

      public static bool ElectionKeyExists(String electionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String electionKey, String defaultValue = null)
      {
        return GetElectionKeyByElectionKey(electionKey, defaultValue);
      }

      public static String GetStateCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionKey, String defaultValue = null)
      {
        return GetStateCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetCountyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String electionKey, String defaultValue = null)
      {
        return GetCountyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetLocalKeyByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String electionKey, String defaultValue = null)
      {
        return GetLocalKeyByElectionKey(electionKey, defaultValue);
      }

      public static DateTime? GetElectionDateByElectionKey(String electionKey)
      {
        return _GetElectionDateByElectionKey(electionKey, null);
      }

      public static DateTime? GetElectionDate(String electionKey)
      {
        return GetElectionDateByElectionKey(electionKey);
      }

      public static DateTime GetElectionDateByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetElectionDateByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetElectionDate(String electionKey, DateTime defaultValue)
      {
        return GetElectionDateByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetElectionDateByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionDate FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetElectionYYYYMMDDByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionYYYYMMDD FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionYYYYMMDD(String electionKey, String defaultValue = null)
      {
        return GetElectionYYYYMMDDByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionTypeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionType FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionType(String electionKey, String defaultValue = null)
      {
        return GetElectionTypeByElectionKey(electionKey, defaultValue);
      }

      public static String GetNationalPartyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NationalPartyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNationalPartyCode(String electionKey, String defaultValue = null)
      {
        return GetNationalPartyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetPartyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCode(String electionKey, String defaultValue = null)
      {
        return GetPartyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionStatusByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionStatus FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionStatus(String electionKey, String defaultValue = null)
      {
        return GetElectionStatusByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionDescByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionDesc FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionDesc(String electionKey, String defaultValue = null)
      {
        return GetElectionDescByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionAdditionalInfoByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionAdditionalInfo FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionAdditionalInfo(String electionKey, String defaultValue = null)
      {
        return GetElectionAdditionalInfoByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionResultsSourceByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionResultsSource FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionResultsSource(String electionKey, String defaultValue = null)
      {
        return GetElectionResultsSourceByElectionKey(electionKey, defaultValue);
      }

      public static DateTime? GetElectionResultsDateByElectionKey(String electionKey)
      {
        return _GetElectionResultsDateByElectionKey(electionKey, null);
      }

      public static DateTime? GetElectionResultsDate(String electionKey)
      {
        return GetElectionResultsDateByElectionKey(electionKey);
      }

      public static DateTime GetElectionResultsDateByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetElectionResultsDateByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetElectionResultsDate(String electionKey, DateTime defaultValue)
      {
        return GetElectionResultsDateByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetElectionResultsDateByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionResultsDate FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetBallotInstructionsByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotInstructions FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotInstructions(String electionKey, String defaultValue = null)
      {
        return GetBallotInstructionsByElectionKey(electionKey, defaultValue);
      }

      public static Boolean? GetIsViewableByElectionKey(String electionKey)
      {
        return _GetIsViewableByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsViewable(String electionKey)
      {
        return GetIsViewableByElectionKey(electionKey);
      }

      public static Boolean GetIsViewableByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsViewableByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsViewable(String electionKey, Boolean defaultValue)
      {
        return GetIsViewableByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsViewableByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsViewable FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetElectionKeyCanonicalByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyCanonical FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyCanonical(String electionKey, String defaultValue = null)
      {
        return GetElectionKeyCanonicalByElectionKey(electionKey, defaultValue);
      }

      public static Int32? GetElectionOrderByElectionKey(String electionKey)
      {
        return _GetElectionOrderByElectionKey(electionKey, null);
      }

      public static Int32? GetElectionOrder(String electionKey)
      {
        return GetElectionOrderByElectionKey(electionKey);
      }

      public static Int32 GetElectionOrderByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetElectionOrderByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetElectionOrder(String electionKey, Int32 defaultValue)
      {
        return GetElectionOrderByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetElectionOrderByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionOrder FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsWinnersIdentifiedByElectionKey(String electionKey)
      {
        return _GetIsWinnersIdentifiedByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsWinnersIdentified(String electionKey)
      {
        return GetIsWinnersIdentifiedByElectionKey(electionKey);
      }

      public static Boolean GetIsWinnersIdentifiedByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsWinnersIdentifiedByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsWinnersIdentified(String electionKey, Boolean defaultValue)
      {
        return GetIsWinnersIdentifiedByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsWinnersIdentifiedByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsWinnersIdentified FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey)
      {
        return _GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsBallotMeasuresResultsRecorded(String electionKey)
      {
        return GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey);
      }

      public static Boolean GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsBallotMeasuresResultsRecorded(String electionKey, Boolean defaultValue)
      {
        return GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsBallotMeasuresResultsRecorded FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetRegistrationDeadlineByElectionKey(String electionKey)
      {
        return _GetRegistrationDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetRegistrationDeadline(String electionKey)
      {
        return GetRegistrationDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetRegistrationDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetRegistrationDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetRegistrationDeadline(String electionKey, DateTime defaultValue)
      {
        return GetRegistrationDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetRegistrationDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT RegistrationDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingBeginByElectionKey(String electionKey)
      {
        return _GetEarlyVotingBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetEarlyVotingBegin(String electionKey)
      {
        return GetEarlyVotingBeginByElectionKey(electionKey);
      }

      public static DateTime GetEarlyVotingBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingBegin(String electionKey, DateTime defaultValue)
      {
        return GetEarlyVotingBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingEndByElectionKey(String electionKey)
      {
        return _GetEarlyVotingEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetEarlyVotingEnd(String electionKey)
      {
        return GetEarlyVotingEndByElectionKey(electionKey);
      }

      public static DateTime GetEarlyVotingEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingEnd(String electionKey, DateTime defaultValue)
      {
        return GetEarlyVotingEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotBeginByElectionKey(String electionKey)
      {
        return _GetMailBallotBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotBegin(String electionKey)
      {
        return GetMailBallotBeginByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotBegin(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotEndByElectionKey(String electionKey)
      {
        return _GetMailBallotEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotEnd(String electionKey)
      {
        return GetMailBallotEndByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotEnd(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotDeadlineByElectionKey(String electionKey)
      {
        return _GetMailBallotDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotDeadline(String electionKey)
      {
        return GetMailBallotDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotDeadline(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotBeginByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotBegin(String electionKey)
      {
        return GetAbsenteeBallotBeginByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotBegin(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotEndByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotEnd(String electionKey)
      {
        return GetAbsenteeBallotEndByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotEnd(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotDeadlineByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotDeadline(String electionKey)
      {
        return GetAbsenteeBallotDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotDeadline(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetElectionKeyToIncludeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyToInclude FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyToInclude(String electionKey, String defaultValue = null)
      {
        return GetElectionKeyToIncludeByElectionKey(electionKey, defaultValue);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Elections WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionKey)
      {
        return GetColumnByElectionKey(_column, electionKey);
      }

      public static ElectionsTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static ElectionsTable GetData(String electionKey, int commandTimeout = -1)
      {
        return GetDataByElectionKey(electionKey, commandTimeout);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String electionKey)
      {
        return UpdateElectionKeyByElectionKey(newValue, electionKey);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionKey)
      {
        return UpdateStateCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String electionKey)
      {
        return UpdateCountyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateLocalKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String electionKey)
      {
        return UpdateLocalKeyByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionDateByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDate=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDate(DateTime newValue, String electionKey)
      {
        return UpdateElectionDateByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionYYYYMMDDByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionYYYYMMDD=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYYYYMMDD(String newValue, String electionKey)
      {
        return UpdateElectionYYYYMMDDByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionTypeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionType=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionType(String newValue, String electionKey)
      {
        return UpdateElectionTypeByElectionKey(newValue, electionKey);
      }

      public static int UpdateNationalPartyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET NationalPartyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNationalPartyCode(String newValue, String electionKey)
      {
        return UpdateNationalPartyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdatePartyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET PartyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCode(String newValue, String electionKey)
      {
        return UpdatePartyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionStatusByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionStatus=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionStatus(String newValue, String electionKey)
      {
        return UpdateElectionStatusByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionDescByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDesc=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDesc(String newValue, String electionKey)
      {
        return UpdateElectionDescByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionAdditionalInfoByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionAdditionalInfo=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfo(String newValue, String electionKey)
      {
        return UpdateElectionAdditionalInfoByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionResultsSourceByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsSource=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsSource(String newValue, String electionKey)
      {
        return UpdateElectionResultsSourceByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionResultsDateByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsDate=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsDate(DateTime newValue, String electionKey)
      {
        return UpdateElectionResultsDateByElectionKey(newValue, electionKey);
      }

      public static int UpdateBallotInstructionsByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET BallotInstructions=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructions(String newValue, String electionKey)
      {
        return UpdateBallotInstructionsByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsViewableByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsViewable=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsViewable(Boolean newValue, String electionKey)
      {
        return UpdateIsViewableByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionKeyCanonicalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyCanonical=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCanonical(String newValue, String electionKey)
      {
        return UpdateElectionKeyCanonicalByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionOrderByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionOrder=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionOrder(Int32 newValue, String electionKey)
      {
        return UpdateElectionOrderByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsWinnersIdentifiedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsWinnersIdentified=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnersIdentified(Boolean newValue, String electionKey)
      {
        return UpdateIsWinnersIdentifiedByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsBallotMeasuresResultsRecordedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsBallotMeasuresResultsRecorded=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBallotMeasuresResultsRecorded(Boolean newValue, String electionKey)
      {
        return UpdateIsBallotMeasuresResultsRecordedByElectionKey(newValue, electionKey);
      }

      public static int UpdateRegistrationDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET RegistrationDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadline(DateTime newValue, String electionKey)
      {
        return UpdateRegistrationDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateEarlyVotingBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBegin(DateTime newValue, String electionKey)
      {
        return UpdateEarlyVotingBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateEarlyVotingEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEnd(DateTime newValue, String electionKey)
      {
        return UpdateEarlyVotingEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBegin(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEnd(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadline(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBegin(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEnd(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadline(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionKeyToIncludeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyToInclude=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyToInclude(String newValue, String electionKey)
      {
        return UpdateElectionKeyToIncludeByElectionKey(newValue, electionKey);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionKey)
      {
         return UpdateColumnByElectionKey(_column, newValue, electionKey);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionKeyToInclude(String electionKeyToInclude, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKeyToInclude(Column _column, String electionKeyToInclude)
      {
        object result;
        string cmdText = "SELECT {0} FROM Elections WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsTable GetDataByElectionKeyToInclude(String electionKeyToInclude, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionKey=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET StateCode=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET CountyCode=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET LocalKey=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDateByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionDate=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYYYYMMDDByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionYYYYMMDD=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionTypeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionType=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNationalPartyCodeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET NationalPartyCode=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCodeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET PartyCode=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionStatusByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionStatus=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDescByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionDesc=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionAdditionalInfo=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsSourceByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsSource=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsDateByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsDate=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET BallotInstructions=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsViewableByElectionKeyToInclude(Boolean newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET IsViewable=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCanonicalByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyCanonical=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionOrderByElectionKeyToInclude(Int32 newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionOrder=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnersIdentifiedByElectionKeyToInclude(Boolean newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET IsWinnersIdentified=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBallotMeasuresResultsRecordedByElectionKeyToInclude(Boolean newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET IsBallotMeasuresResultsRecorded=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadlineByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET RegistrationDeadline=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBeginByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingBegin=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEndByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingEnd=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBeginByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET MailBallotBegin=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEndByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET MailBallotEnd=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadlineByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET MailBallotDeadline=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBeginByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotBegin=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEndByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotEnd=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadlineByElectionKeyToInclude(DateTime newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotDeadline=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyToIncludeByElectionKeyToInclude(String newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyToInclude=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyToInclude(Column _column, object newValue, String electionKeyToInclude)
      {
        string cmdText = "UPDATE Elections SET {0}=@newValue WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyToInclude(String electionKeyToInclude, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Elections WHERE ElectionKeyToInclude=@ElectionKeyToInclude";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyToInclude", electionKeyToInclude);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Elections WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDateByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDate=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYYYYMMDDByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionYYYYMMDD=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionTypeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionType=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNationalPartyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET NationalPartyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET PartyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionStatusByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionStatus=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDescByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDesc=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionAdditionalInfo=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsSourceByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsSource=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsDateByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsDate=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET BallotInstructions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsViewableByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET IsViewable=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCanonicalByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyCanonical=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionOrderByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionOrder=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnersIdentifiedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET IsWinnersIdentified=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBallotMeasuresResultsRecordedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET IsBallotMeasuresResultsRecorded=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadlineByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET RegistrationDeadline=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBeginByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingBegin=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEndByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingEnd=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBeginByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotBegin=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEndByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotEnd=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadlineByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotDeadline=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBeginByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotBegin=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEndByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotEnd=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadlineByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotDeadline=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyToIncludeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyToInclude=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Elections SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Elections WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline,ElectionKeyToInclude FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDateByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionDate=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYYYYMMDDByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionYYYYMMDD=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionTypeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionType=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNationalPartyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET NationalPartyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET PartyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionStatusByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionStatus=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDescByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionDesc=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionAdditionalInfo=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsSourceByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsSource=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsDateByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsDate=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET BallotInstructions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsViewableByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET IsViewable=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCanonicalByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyCanonical=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionOrderByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionOrder=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnersIdentifiedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET IsWinnersIdentified=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBallotMeasuresResultsRecordedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET IsBallotMeasuresResultsRecorded=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadlineByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET RegistrationDeadline=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBeginByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingBegin=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEndByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingEnd=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBeginByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET MailBallotBegin=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEndByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET MailBallotEnd=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadlineByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET MailBallotDeadline=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBeginByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotBegin=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEndByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotEnd=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadlineByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotDeadline=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyToIncludeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyToInclude=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Elections SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectDisplayCommandText
      {
        get
        {
          return "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections";
        }
      }

      public static ElectionsTable GetAllDisplayData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalKey,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Display);
      }

      public static void UpdateDisplay(ElectionsTable table)
      {
        UpdateDisplay(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDisplay(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Display, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections";
        }
      }

      public static ElectionsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ElectionsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsTable GetCacheDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsTable.ColumnSet.Cache);
      }

      public static ElectionsTable GetCacheData(String electionKey, int commandTimeout = -1)
      {
        return GetCacheDataByElectionKey(electionKey, commandTimeout);
      }

      public static string SelectDateCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate FROM Elections";
        }
      }

      public static ElectionsTable GetAllDateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Date);
      }

      public static void UpdateDate(ElectionsTable table)
      {
        UpdateDate(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDate(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Date, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectControlCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate,ElectionDesc,ElectionOrder FROM Elections";
        }
      }

      public static ElectionsTable GetAllControlData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionDesc,ElectionOrder FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Control);
      }

      public static void UpdateControl(ElectionsTable table)
      {
        UpdateControl(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateControl(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Control, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(ElectionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsTable.ColumnSet.Display:
            return SelectDisplayCommandText;

          case ElectionsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ElectionsTable.ColumnSet.Date:
            return SelectDateCommandText;

          case ElectionsTable.ColumnSet.Control:
            return SelectControlCommandText;

          default:
            return null;
        }
      }

      static Elections()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Elections

    #region vote.ElectionsDefaults

    public partial class ElectionsDefaultsRow : DataRow
    {
      internal ElectionsDefaultsRow(DataRowBuilder rb) : base(rb) {}

      public String DefaultElectionKey
      {
        get { return this["DefaultElectionKey"] as String; }
        set { if (value == null) this["DefaultElectionKey"] = DBNull.Value; else this["DefaultElectionKey"] = value; }
      }

      public String ElectionAdditionalInfo
      {
        get { return this["ElectionAdditionalInfo"] as String; }
        set { if (value == null) this["ElectionAdditionalInfo"] = DBNull.Value; else this["ElectionAdditionalInfo"] = value; }
      }

      public String BallotInstructions
      {
        get { return this["BallotInstructions"] as String; }
        set { if (value == null) this["BallotInstructions"] = DBNull.Value; else this["BallotInstructions"] = value; }
      }

      public DateTime RegistrationDeadline
      {
        get { return (DateTime) this["RegistrationDeadline"]; }
        set { this["RegistrationDeadline"] = value; }
      }

      public DateTime EarlyVotingBegin
      {
        get { return (DateTime) this["EarlyVotingBegin"]; }
        set { this["EarlyVotingBegin"] = value; }
      }

      public DateTime EarlyVotingEnd
      {
        get { return (DateTime) this["EarlyVotingEnd"]; }
        set { this["EarlyVotingEnd"] = value; }
      }

      public DateTime MailBallotBegin
      {
        get { return (DateTime) this["MailBallotBegin"]; }
        set { this["MailBallotBegin"] = value; }
      }

      public DateTime MailBallotEnd
      {
        get { return (DateTime) this["MailBallotEnd"]; }
        set { this["MailBallotEnd"] = value; }
      }

      public DateTime MailBallotDeadline
      {
        get { return (DateTime) this["MailBallotDeadline"]; }
        set { this["MailBallotDeadline"] = value; }
      }

      public DateTime AbsenteeBallotBegin
      {
        get { return (DateTime) this["AbsenteeBallotBegin"]; }
        set { this["AbsenteeBallotBegin"] = value; }
      }

      public DateTime AbsenteeBallotEnd
      {
        get { return (DateTime) this["AbsenteeBallotEnd"]; }
        set { this["AbsenteeBallotEnd"] = value; }
      }

      public DateTime AbsenteeBallotDeadline
      {
        get { return (DateTime) this["AbsenteeBallotDeadline"]; }
        set { this["AbsenteeBallotDeadline"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsDefaultsTable : TypedTableBase<ElectionsDefaultsRow>
    {
      public ElectionsDefaultsRow this[int index] { get { return (ElectionsDefaultsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsDefaultsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsDefaultsTable(); }

      new public ElectionsDefaultsRow NewRow() { return (ElectionsDefaultsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsDefaultsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsDefaultsRow); }

      public void RemoveRow(ElectionsDefaultsRow row) { this.Rows.Remove(row); }

      public ElectionsDefaultsRow NewRow(String defaultElectionKey, String electionAdditionalInfo, String ballotInstructions, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline)
      {
        ElectionsDefaultsRow row = NewRow();
        row.DefaultElectionKey = defaultElectionKey;
        row.ElectionAdditionalInfo = electionAdditionalInfo;
        row.BallotInstructions = ballotInstructions;
        row.RegistrationDeadline = registrationDeadline;
        row.EarlyVotingBegin = earlyVotingBegin;
        row.EarlyVotingEnd = earlyVotingEnd;
        row.MailBallotBegin = mailBallotBegin;
        row.MailBallotEnd = mailBallotEnd;
        row.MailBallotDeadline = mailBallotDeadline;
        row.AbsenteeBallotBegin = absenteeBallotBegin;
        row.AbsenteeBallotEnd = absenteeBallotEnd;
        row.AbsenteeBallotDeadline = absenteeBallotDeadline;
        return row;
      }

      public void AddRow(String defaultElectionKey, String electionAdditionalInfo, String ballotInstructions, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline)
      {
        ElectionsDefaultsRow row = NewRow(defaultElectionKey, electionAdditionalInfo, ballotInstructions, registrationDeadline, earlyVotingBegin, earlyVotingEnd, mailBallotBegin, mailBallotEnd, mailBallotDeadline, absenteeBallotBegin, absenteeBallotEnd, absenteeBallotDeadline);
        AddRow(row);
      }

      public DataColumn DefaultElectionKeyColumn { get { return this.Columns["DefaultElectionKey"]; } }

      public DataColumn ElectionAdditionalInfoColumn { get { return this.Columns["ElectionAdditionalInfo"]; } }

      public DataColumn BallotInstructionsColumn { get { return this.Columns["BallotInstructions"]; } }

      public DataColumn RegistrationDeadlineColumn { get { return this.Columns["RegistrationDeadline"]; } }

      public DataColumn EarlyVotingBeginColumn { get { return this.Columns["EarlyVotingBegin"]; } }

      public DataColumn EarlyVotingEndColumn { get { return this.Columns["EarlyVotingEnd"]; } }

      public DataColumn MailBallotBeginColumn { get { return this.Columns["MailBallotBegin"]; } }

      public DataColumn MailBallotEndColumn { get { return this.Columns["MailBallotEnd"]; } }

      public DataColumn MailBallotDeadlineColumn { get { return this.Columns["MailBallotDeadline"]; } }

      public DataColumn AbsenteeBallotBeginColumn { get { return this.Columns["AbsenteeBallotBegin"]; } }

      public DataColumn AbsenteeBallotEndColumn { get { return this.Columns["AbsenteeBallotEnd"]; } }

      public DataColumn AbsenteeBallotDeadlineColumn { get { return this.Columns["AbsenteeBallotDeadline"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DefaultElectionKey", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RegistrationDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsDefaultsTable() : this(ColumnSet.All) { }

      public ElectionsDefaultsTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsDefaults";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ElectionsDefaultsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsDefaults
    {
      public const string TableName = "ElectionsDefaults";

      public enum Column { DefaultElectionKey, ElectionAdditionalInfo, BallotInstructions, RegistrationDeadline, EarlyVotingBegin, EarlyVotingEnd, MailBallotBegin, MailBallotEnd, MailBallotDeadline, AbsenteeBallotBegin, AbsenteeBallotEnd, AbsenteeBallotDeadline }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DefaultElectionKey, "DefaultElectionKey" },
        { Column.ElectionAdditionalInfo, "ElectionAdditionalInfo" },
        { Column.BallotInstructions, "BallotInstructions" },
        { Column.RegistrationDeadline, "RegistrationDeadline" },
        { Column.EarlyVotingBegin, "EarlyVotingBegin" },
        { Column.EarlyVotingEnd, "EarlyVotingEnd" },
        { Column.MailBallotBegin, "MailBallotBegin" },
        { Column.MailBallotEnd, "MailBallotEnd" },
        { Column.MailBallotDeadline, "MailBallotDeadline" },
        { Column.AbsenteeBallotBegin, "AbsenteeBallotBegin" },
        { Column.AbsenteeBallotEnd, "AbsenteeBallotEnd" },
        { Column.AbsenteeBallotDeadline, "AbsenteeBallotDeadline" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsDefaults";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String defaultElectionKey, String electionAdditionalInfo, String ballotInstructions, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsDefaults (DefaultElectionKey,ElectionAdditionalInfo,BallotInstructions,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline) VALUES (@DefaultElectionKey,@ElectionAdditionalInfo,@BallotInstructions,@RegistrationDeadline,@EarlyVotingBegin,@EarlyVotingEnd,@MailBallotBegin,@MailBallotEnd,@MailBallotDeadline,@AbsenteeBallotBegin,@AbsenteeBallotEnd,@AbsenteeBallotDeadline)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "ElectionAdditionalInfo", electionAdditionalInfo);
        VoteDb.AddCommandParameter(cmd, "BallotInstructions", ballotInstructions);
        VoteDb.AddCommandParameter(cmd, "RegistrationDeadline", registrationDeadline);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingBegin", earlyVotingBegin);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingEnd", earlyVotingEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotBegin", mailBallotBegin);
        VoteDb.AddCommandParameter(cmd, "MailBallotEnd", mailBallotEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotDeadline", mailBallotDeadline);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotBegin", absenteeBallotBegin);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotEnd", absenteeBallotEnd);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotDeadline", absenteeBallotDeadline);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DefaultElectionKey,ElectionAdditionalInfo,BallotInstructions,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM ElectionsDefaults";
        }
      }

      public static ElectionsDefaultsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DefaultElectionKey,ElectionAdditionalInfo,BallotInstructions,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM ElectionsDefaults";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsDefaultsTable.ColumnSet.All);
      }

      public static ElectionsDefaultsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsDefaultsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsDefaultsTable FillTable(DbCommand command, ElectionsDefaultsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsDefaultsTable table = new ElectionsDefaultsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsDefaultsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsDefaultsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsDefaultsTable table, ElectionsDefaultsTable.ColumnSet columnSet = ElectionsDefaultsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string DefaultElectionKeyColumnName { get { return "DefaultElectionKey"; } }

      public static string ElectionAdditionalInfoColumnName { get { return "ElectionAdditionalInfo"; } }

      public static string BallotInstructionsColumnName { get { return "BallotInstructions"; } }

      public static string RegistrationDeadlineColumnName { get { return "RegistrationDeadline"; } }

      public static string EarlyVotingBeginColumnName { get { return "EarlyVotingBegin"; } }

      public static string EarlyVotingEndColumnName { get { return "EarlyVotingEnd"; } }

      public static string MailBallotBeginColumnName { get { return "MailBallotBegin"; } }

      public static string MailBallotEndColumnName { get { return "MailBallotEnd"; } }

      public static string MailBallotDeadlineColumnName { get { return "MailBallotDeadline"; } }

      public static string AbsenteeBallotBeginColumnName { get { return "AbsenteeBallotBegin"; } }

      public static string AbsenteeBallotEndColumnName { get { return "AbsenteeBallotEnd"; } }

      public static string AbsenteeBallotDeadlineColumnName { get { return "AbsenteeBallotDeadline"; } }

      public static int DefaultElectionKeyMaxLength { get { return 10; } }

      public static int ElectionAdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int BallotInstructionsMaxLength { get { return int.MaxValue; } }

      public static bool DefaultElectionKeyExists(String defaultElectionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDefaultElectionKeyByDefaultElectionKey(String defaultElectionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DefaultElectionKey FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDefaultElectionKey(String defaultElectionKey, String defaultValue = null)
      {
        return GetDefaultElectionKeyByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      public static String GetElectionAdditionalInfoByDefaultElectionKey(String defaultElectionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionAdditionalInfo FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionAdditionalInfo(String defaultElectionKey, String defaultValue = null)
      {
        return GetElectionAdditionalInfoByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      public static String GetBallotInstructionsByDefaultElectionKey(String defaultElectionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotInstructions FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotInstructions(String defaultElectionKey, String defaultValue = null)
      {
        return GetBallotInstructionsByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      public static DateTime? GetRegistrationDeadlineByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetRegistrationDeadlineByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetRegistrationDeadline(String defaultElectionKey)
      {
        return GetRegistrationDeadlineByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetRegistrationDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetRegistrationDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetRegistrationDeadline(String defaultElectionKey, DateTime defaultValue)
      {
        return GetRegistrationDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetRegistrationDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT RegistrationDeadline FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingBeginByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetEarlyVotingBeginByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetEarlyVotingBegin(String defaultElectionKey)
      {
        return GetEarlyVotingBeginByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetEarlyVotingBeginByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingBeginByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingBegin(String defaultElectionKey, DateTime defaultValue)
      {
        return GetEarlyVotingBeginByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingBeginByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingBegin FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingEndByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetEarlyVotingEndByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetEarlyVotingEnd(String defaultElectionKey)
      {
        return GetEarlyVotingEndByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetEarlyVotingEndByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingEndByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingEnd(String defaultElectionKey, DateTime defaultValue)
      {
        return GetEarlyVotingEndByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingEndByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingEnd FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotBeginByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetMailBallotBeginByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetMailBallotBegin(String defaultElectionKey)
      {
        return GetMailBallotBeginByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetMailBallotBeginByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetMailBallotBeginByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotBegin(String defaultElectionKey, DateTime defaultValue)
      {
        return GetMailBallotBeginByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotBeginByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotBegin FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotEndByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetMailBallotEndByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetMailBallotEnd(String defaultElectionKey)
      {
        return GetMailBallotEndByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetMailBallotEndByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetMailBallotEndByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotEnd(String defaultElectionKey, DateTime defaultValue)
      {
        return GetMailBallotEndByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotEndByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotEnd FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotDeadlineByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetMailBallotDeadlineByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetMailBallotDeadline(String defaultElectionKey)
      {
        return GetMailBallotDeadlineByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetMailBallotDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetMailBallotDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotDeadline(String defaultElectionKey, DateTime defaultValue)
      {
        return GetMailBallotDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotDeadline FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotBeginByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetAbsenteeBallotBeginByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetAbsenteeBallotBegin(String defaultElectionKey)
      {
        return GetAbsenteeBallotBeginByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetAbsenteeBallotBeginByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotBeginByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotBegin(String defaultElectionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotBeginByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotBeginByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotBegin FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotEndByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetAbsenteeBallotEndByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetAbsenteeBallotEnd(String defaultElectionKey)
      {
        return GetAbsenteeBallotEndByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetAbsenteeBallotEndByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotEndByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotEnd(String defaultElectionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotEndByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotEndByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotEnd FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotDeadlineByDefaultElectionKey(String defaultElectionKey)
      {
        return _GetAbsenteeBallotDeadlineByDefaultElectionKey(defaultElectionKey, null);
      }

      public static DateTime? GetAbsenteeBallotDeadline(String defaultElectionKey)
      {
        return GetAbsenteeBallotDeadlineByDefaultElectionKey(defaultElectionKey);
      }

      public static DateTime GetAbsenteeBallotDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotDeadline(String defaultElectionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotDeadlineByDefaultElectionKey(defaultElectionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotDeadlineByDefaultElectionKey(String defaultElectionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotDeadline FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByDefaultElectionKey(Column _column, String defaultElectionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String defaultElectionKey)
      {
        return GetColumnByDefaultElectionKey(_column, defaultElectionKey);
      }

      public static ElectionsDefaultsTable GetDataByDefaultElectionKey(String defaultElectionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DefaultElectionKey,ElectionAdditionalInfo,BallotInstructions,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        return FillTable(cmd, ElectionsDefaultsTable.ColumnSet.All);
      }

      public static ElectionsDefaultsTable GetData(String defaultElectionKey, int commandTimeout = -1)
      {
        return GetDataByDefaultElectionKey(defaultElectionKey, commandTimeout);
      }

      public static int UpdateDefaultElectionKeyByDefaultElectionKey(String newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET DefaultElectionKey=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDefaultElectionKey(String newValue, String defaultElectionKey)
      {
        return UpdateDefaultElectionKeyByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateElectionAdditionalInfoByDefaultElectionKey(String newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET ElectionAdditionalInfo=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfo(String newValue, String defaultElectionKey)
      {
        return UpdateElectionAdditionalInfoByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateBallotInstructionsByDefaultElectionKey(String newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET BallotInstructions=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructions(String newValue, String defaultElectionKey)
      {
        return UpdateBallotInstructionsByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateRegistrationDeadlineByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET RegistrationDeadline=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadline(DateTime newValue, String defaultElectionKey)
      {
        return UpdateRegistrationDeadlineByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateEarlyVotingBeginByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET EarlyVotingBegin=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBegin(DateTime newValue, String defaultElectionKey)
      {
        return UpdateEarlyVotingBeginByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateEarlyVotingEndByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET EarlyVotingEnd=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEnd(DateTime newValue, String defaultElectionKey)
      {
        return UpdateEarlyVotingEndByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateMailBallotBeginByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET MailBallotBegin=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBegin(DateTime newValue, String defaultElectionKey)
      {
        return UpdateMailBallotBeginByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateMailBallotEndByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET MailBallotEnd=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEnd(DateTime newValue, String defaultElectionKey)
      {
        return UpdateMailBallotEndByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateMailBallotDeadlineByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET MailBallotDeadline=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadline(DateTime newValue, String defaultElectionKey)
      {
        return UpdateMailBallotDeadlineByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateAbsenteeBallotBeginByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET AbsenteeBallotBegin=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBegin(DateTime newValue, String defaultElectionKey)
      {
        return UpdateAbsenteeBallotBeginByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateAbsenteeBallotEndByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET AbsenteeBallotEnd=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEnd(DateTime newValue, String defaultElectionKey)
      {
        return UpdateAbsenteeBallotEndByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateAbsenteeBallotDeadlineByDefaultElectionKey(DateTime newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET AbsenteeBallotDeadline=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadline(DateTime newValue, String defaultElectionKey)
      {
        return UpdateAbsenteeBallotDeadlineByDefaultElectionKey(newValue, defaultElectionKey);
      }

      public static int UpdateColumnByDefaultElectionKey(Column _column, object newValue, String defaultElectionKey)
      {
        string cmdText = "UPDATE ElectionsDefaults SET {0}=@newValue WHERE DefaultElectionKey=@DefaultElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String defaultElectionKey)
      {
         return UpdateColumnByDefaultElectionKey(_column, newValue, defaultElectionKey);
      }

      public static int DeleteByDefaultElectionKey(String defaultElectionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsDefaults WHERE DefaultElectionKey=@DefaultElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DefaultElectionKey", defaultElectionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ElectionsDefaultsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsDefaultsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ElectionsDefaults()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsDefaults

    #region vote.ElectionsIncumbentsRemoved

    public partial class ElectionsIncumbentsRemovedRow : DataRow
    {
      internal ElectionsIncumbentsRemovedRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsIncumbentsRemovedTable : TypedTableBase<ElectionsIncumbentsRemovedRow>
    {
      public ElectionsIncumbentsRemovedRow this[int index] { get { return (ElectionsIncumbentsRemovedRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsIncumbentsRemovedRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsIncumbentsRemovedTable(); }

      new public ElectionsIncumbentsRemovedRow NewRow() { return (ElectionsIncumbentsRemovedRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsIncumbentsRemovedRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsIncumbentsRemovedRow); }

      public void RemoveRow(ElectionsIncumbentsRemovedRow row) { this.Rows.Remove(row); }

      public ElectionsIncumbentsRemovedRow NewRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        ElectionsIncumbentsRemovedRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.DataLastUpdated = dataLastUpdated;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        ElectionsIncumbentsRemovedRow row = NewRow(electionKey, officeKey, politicianKey, runningMateKey, stateCode, countyCode, localKey, districtCode, dataLastUpdated, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsIncumbentsRemovedTable() : this(ColumnSet.All) { }

      public ElectionsIncumbentsRemovedTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsIncumbentsRemoved";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ElectionsIncumbentsRemovedTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsIncumbentsRemoved
    {
      public const string TableName = "ElectionsIncumbentsRemoved";

      public enum Column { ElectionKey, OfficeKey, PoliticianKey, RunningMateKey, StateCode, CountyCode, LocalKey, DistrictCode, DataLastUpdated, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsIncumbentsRemoved (ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName) VALUES (@ElectionKey,@OfficeKey,@PoliticianKey,@RunningMateKey,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@DataLastUpdated,@UserSecurity,@UserName)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved";
        }
      }

      public static ElectionsIncumbentsRemovedTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static ElectionsIncumbentsRemovedTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsIncumbentsRemovedTable FillTable(DbCommand command, ElectionsIncumbentsRemovedTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsIncumbentsRemovedTable table = new ElectionsIncumbentsRemovedTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsIncumbentsRemovedTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsIncumbentsRemovedTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsIncumbentsRemovedTable table, ElectionsIncumbentsRemovedTable.ColumnSet columnSet = ElectionsIncumbentsRemovedTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int UserSecurityMaxLength { get { return 12; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyPoliticianKeyExists(String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByElectionKeyOfficeKeyPoliticianKey(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRunningMateKey(Column _column, String runningMateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByRunningMateKey(DateTime newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRunningMateKey(Column _column, object newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ElectionsIncumbentsRemovedTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsIncumbentsRemovedTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ElectionsIncumbentsRemoved()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsIncumbentsRemoved

    #region vote.ElectionsOffices

    public partial class ElectionsOfficesRow : DataRow
    {
      internal ElectionsOfficesRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String ElectionKeyFederal
      {
        get { return this["ElectionKeyFederal"] as String; }
        set { if (value == null) this["ElectionKeyFederal"] = DBNull.Value; else this["ElectionKeyFederal"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Boolean IsWinnerIdentified
      {
        get { return (Boolean) this["IsWinnerIdentified"]; }
        set { this["IsWinnerIdentified"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsOfficesTable : TypedTableBase<ElectionsOfficesRow>
    {
      public ElectionsOfficesRow this[int index] { get { return (ElectionsOfficesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsOfficesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsOfficesTable(); }

      new public ElectionsOfficesRow NewRow() { return (ElectionsOfficesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsOfficesRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsOfficesRow); }

      public void RemoveRow(ElectionsOfficesRow row) { this.Rows.Remove(row); }

      public ElectionsOfficesRow NewRow(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified)
      {
        ElectionsOfficesRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.ElectionKeyState = electionKeyState;
        row.ElectionKeyFederal = electionKeyFederal;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.OfficeLevel = officeLevel;
        row.IsWinnerIdentified = isWinnerIdentified;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified)
      {
        ElectionsOfficesRow row = NewRow(electionKey, officeKey, electionKeyState, electionKeyFederal, stateCode, countyCode, localKey, districtCode, officeLevel, isWinnerIdentified);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn ElectionKeyFederalColumn { get { return this.Columns["ElectionKeyFederal"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn IsWinnerIdentifiedColumn { get { return this.Columns["IsWinnerIdentified"]; } }

      public enum ColumnSet { All, OfficeKeys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyFederal", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinnerIdentified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsOfficesTable() : this(ColumnSet.All) { }

      public ElectionsOfficesTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsOffices";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKeys:
            InitOfficeKeysColumns();
            break;
        }
      }

      protected ElectionsOfficesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsOffices
    {
      public const string TableName = "ElectionsOffices";

      public enum Column { ElectionKey, OfficeKey, ElectionKeyState, ElectionKeyFederal, StateCode, CountyCode, LocalKey, DistrictCode, OfficeLevel, IsWinnerIdentified }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.ElectionKeyFederal, "ElectionKeyFederal" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.IsWinnerIdentified, "IsWinnerIdentified" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsOffices (ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified) VALUES (@ElectionKey,@OfficeKey,@ElectionKeyState,@ElectionKeyFederal,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@OfficeLevel,@IsWinnerIdentified)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyFederal", electionKeyFederal);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "IsWinnerIdentified", isWinnerIdentified);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices";
        }
      }

      public static ElectionsOfficesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static ElectionsOfficesTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsOfficesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsOfficesTable FillTable(DbCommand command, ElectionsOfficesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsOfficesTable table = new ElectionsOfficesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsOfficesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsOfficesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsOfficesTable table, ElectionsOfficesTable.ColumnSet columnSet = ElectionsOfficesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string ElectionKeyFederalColumnName { get { return "ElectionKeyFederal"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string IsWinnerIdentifiedColumnName { get { return "IsWinnerIdentified"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int ElectionKeyFederalMaxLength { get { return 12; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyExists(String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByElectionKeyOfficeKey(Column _column, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByElectionKeyOfficeKey(Int32 newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKey(Column _column, object newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeysCommandText
      {
        get
        {
          return "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices";
        }
      }

      public static ElectionsOfficesTable GetAllOfficeKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.OfficeKeys);
      }

      public static void UpdateOfficeKeys(ElectionsOfficesTable table)
      {
        UpdateOfficeKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKeys(ElectionsOfficesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsOfficesTable.ColumnSet.OfficeKeys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsOfficesTable GetOfficeKeysDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.OfficeKeys);
      }

      public static ElectionsOfficesTable GetOfficeKeysData(String electionKey, int commandTimeout = -1)
      {
        return GetOfficeKeysDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ElectionsOfficesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsOfficesTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsOfficesTable.ColumnSet.OfficeKeys:
            return SelectOfficeKeysCommandText;

          default:
            return null;
        }
      }

      static ElectionsOffices()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsOffices

    #region vote.ElectionsPoliticians

    public partial class ElectionsPoliticiansRow : DataRow
    {
      internal ElectionsPoliticiansRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String ElectionKeyFederal
      {
        get { return this["ElectionKeyFederal"] as String; }
        set { if (value == null) this["ElectionKeyFederal"] = DBNull.Value; else this["ElectionKeyFederal"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Int32 OrderOnBallot
      {
        get { return (Int32) this["OrderOnBallot"]; }
        set { this["OrderOnBallot"] = value; }
      }

      public Boolean IsWinner
      {
        get { return (Boolean) this["IsWinner"]; }
        set { this["IsWinner"] = value; }
      }

      public Boolean IsIncumbent
      {
        get { return (Boolean) this["IsIncumbent"]; }
        set { this["IsIncumbent"] = value; }
      }

      public Boolean AdvanceToRunoff
      {
        get { return (Boolean) this["AdvanceToRunoff"]; }
        set { this["AdvanceToRunoff"] = value; }
      }

      public String AdType
      {
        get { return this["AdType"] as String; }
        set { if (value == null) this["AdType"] = DBNull.Value; else this["AdType"] = value; }
      }

      public String AdUrl
      {
        get { return this["AdUrl"] as String; }
        set { if (value == null) this["AdUrl"] = DBNull.Value; else this["AdUrl"] = value; }
      }

      public String AdThumbnailUrl
      {
        get { return this["AdThumbnailUrl"] as String; }
        set { if (value == null) this["AdThumbnailUrl"] = DBNull.Value; else this["AdThumbnailUrl"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] AdImage
      {
        get { return this["AdImage"] as Byte[]; }
        set { if (value == null) this["AdImage"] = DBNull.Value; else this["AdImage"] = value; }
      }

      public String AdImageName
      {
        get { return this["AdImageName"] as String; }
        set { if (value == null) this["AdImageName"] = DBNull.Value; else this["AdImageName"] = value; }
      }

      public Boolean AdEnabled
      {
        get { return (Boolean) this["AdEnabled"]; }
        set { this["AdEnabled"] = value; }
      }

      public DateTime AdTimeStamp
      {
        get { return (DateTime) this["AdTimeStamp"]; }
        set { this["AdTimeStamp"] = value; }
      }

      public String AdSponsor
      {
        get { return this["AdSponsor"] as String; }
        set { if (value == null) this["AdSponsor"] = DBNull.Value; else this["AdSponsor"] = value; }
      }

      public String AdSponsorUrl
      {
        get { return this["AdSponsorUrl"] as String; }
        set { if (value == null) this["AdSponsorUrl"] = DBNull.Value; else this["AdSponsorUrl"] = value; }
      }

      public Boolean AdIsCandidateSponsored
      {
        get { return (Boolean) this["AdIsCandidateSponsored"]; }
        set { this["AdIsCandidateSponsored"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsPoliticiansTable : TypedTableBase<ElectionsPoliticiansRow>
    {
      public ElectionsPoliticiansRow this[int index] { get { return (ElectionsPoliticiansRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsPoliticiansRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsPoliticiansTable(); }

      new public ElectionsPoliticiansRow NewRow() { return (ElectionsPoliticiansRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsPoliticiansRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsPoliticiansRow); }

      public void RemoveRow(ElectionsPoliticiansRow row) { this.Rows.Remove(row); }

      public ElectionsPoliticiansRow NewRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff, String adType, String adUrl, String adThumbnailUrl, Byte[] adImage, String adImageName, Boolean adEnabled, DateTime adTimeStamp, String adSponsor, String adSponsorUrl, Boolean adIsCandidateSponsored)
      {
        ElectionsPoliticiansRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.ElectionKeyState = electionKeyState;
        row.ElectionKeyFederal = electionKeyFederal;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.OrderOnBallot = orderOnBallot;
        row.IsWinner = isWinner;
        row.IsIncumbent = isIncumbent;
        row.AdvanceToRunoff = advanceToRunoff;
        row.AdType = adType;
        row.AdUrl = adUrl;
        row.AdThumbnailUrl = adThumbnailUrl;
        row.AdImage = adImage;
        row.AdImageName = adImageName;
        row.AdEnabled = adEnabled;
        row.AdTimeStamp = adTimeStamp;
        row.AdSponsor = adSponsor;
        row.AdSponsorUrl = adSponsorUrl;
        row.AdIsCandidateSponsored = adIsCandidateSponsored;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff, String adType, String adUrl, String adThumbnailUrl, Byte[] adImage, String adImageName, Boolean adEnabled, DateTime adTimeStamp, String adSponsor, String adSponsorUrl, Boolean adIsCandidateSponsored)
      {
        ElectionsPoliticiansRow row = NewRow(electionKey, officeKey, politicianKey, runningMateKey, electionKeyState, electionKeyFederal, stateCode, countyCode, localKey, districtCode, orderOnBallot, isWinner, isIncumbent, advanceToRunoff, adType, adUrl, adThumbnailUrl, adImage, adImageName, adEnabled, adTimeStamp, adSponsor, adSponsorUrl, adIsCandidateSponsored);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn ElectionKeyFederalColumn { get { return this.Columns["ElectionKeyFederal"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn OrderOnBallotColumn { get { return this.Columns["OrderOnBallot"]; } }

      public DataColumn IsWinnerColumn { get { return this.Columns["IsWinner"]; } }

      public DataColumn IsIncumbentColumn { get { return this.Columns["IsIncumbent"]; } }

      public DataColumn AdvanceToRunoffColumn { get { return this.Columns["AdvanceToRunoff"]; } }

      public DataColumn AdTypeColumn { get { return this.Columns["AdType"]; } }

      public DataColumn AdUrlColumn { get { return this.Columns["AdUrl"]; } }

      public DataColumn AdThumbnailUrlColumn { get { return this.Columns["AdThumbnailUrl"]; } }

      public DataColumn AdImageColumn { get { return this.Columns["AdImage"]; } }

      public DataColumn AdImageNameColumn { get { return this.Columns["AdImageName"]; } }

      public DataColumn AdEnabledColumn { get { return this.Columns["AdEnabled"]; } }

      public DataColumn AdTimeStampColumn { get { return this.Columns["AdTimeStamp"]; } }

      public DataColumn AdSponsorColumn { get { return this.Columns["AdSponsor"]; } }

      public DataColumn AdSponsorUrlColumn { get { return this.Columns["AdSponsorUrl"]; } }

      public DataColumn AdIsCandidateSponsoredColumn { get { return this.Columns["AdIsCandidateSponsored"]; } }

      public enum ColumnSet { All, OfficeKey, Cache, Winners }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyFederal", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdvanceToRunoff", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdThumbnailUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AdImage", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("AdImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdTimeStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdSponsor", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdSponsorUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdIsCandidateSponsored", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitWinnersColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdvanceToRunoff", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsPoliticiansTable() : this(ColumnSet.All) { }

      public ElectionsPoliticiansTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsPoliticians";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKey:
            InitOfficeKeyColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Winners:
            InitWinnersColumns();
            break;
        }
      }

      protected ElectionsPoliticiansTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsPoliticians
    {
      public const string TableName = "ElectionsPoliticians";

      public enum Column { ElectionKey, OfficeKey, PoliticianKey, RunningMateKey, ElectionKeyState, ElectionKeyFederal, StateCode, CountyCode, LocalKey, DistrictCode, OrderOnBallot, IsWinner, IsIncumbent, AdvanceToRunoff, AdType, AdUrl, AdThumbnailUrl, AdImage, AdImageName, AdEnabled, AdTimeStamp, AdSponsor, AdSponsorUrl, AdIsCandidateSponsored }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.ElectionKeyFederal, "ElectionKeyFederal" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.OrderOnBallot, "OrderOnBallot" },
        { Column.IsWinner, "IsWinner" },
        { Column.IsIncumbent, "IsIncumbent" },
        { Column.AdvanceToRunoff, "AdvanceToRunoff" },
        { Column.AdType, "AdType" },
        { Column.AdUrl, "AdUrl" },
        { Column.AdThumbnailUrl, "AdThumbnailUrl" },
        { Column.AdImage, "AdImage" },
        { Column.AdImageName, "AdImageName" },
        { Column.AdEnabled, "AdEnabled" },
        { Column.AdTimeStamp, "AdTimeStamp" },
        { Column.AdSponsor, "AdSponsor" },
        { Column.AdSponsorUrl, "AdSponsorUrl" },
        { Column.AdIsCandidateSponsored, "AdIsCandidateSponsored" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String stateCode, String countyCode, String localKey, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff, String adType, String adUrl, String adThumbnailUrl, Byte[] adImage, String adImageName, Boolean adEnabled, DateTime adTimeStamp, String adSponsor, String adSponsorUrl, Boolean adIsCandidateSponsored, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsPoliticians (ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored) VALUES (@ElectionKey,@OfficeKey,@PoliticianKey,@RunningMateKey,@ElectionKeyState,@ElectionKeyFederal,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@OrderOnBallot,@IsWinner,@IsIncumbent,@AdvanceToRunoff,@AdType,@AdUrl,@AdThumbnailUrl,@AdImage,@AdImageName,@AdEnabled,@AdTimeStamp,@AdSponsor,@AdSponsorUrl,@AdIsCandidateSponsored)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyFederal", electionKeyFederal);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        VoteDb.AddCommandParameter(cmd, "IsWinner", isWinner);
        VoteDb.AddCommandParameter(cmd, "IsIncumbent", isIncumbent);
        VoteDb.AddCommandParameter(cmd, "AdvanceToRunoff", advanceToRunoff);
        VoteDb.AddCommandParameter(cmd, "AdType", adType);
        VoteDb.AddCommandParameter(cmd, "AdUrl", adUrl);
        VoteDb.AddCommandParameter(cmd, "AdThumbnailUrl", adThumbnailUrl);
        VoteDb.AddCommandParameter(cmd, "AdImage", adImage);
        VoteDb.AddCommandParameter(cmd, "AdImageName", adImageName);
        VoteDb.AddCommandParameter(cmd, "AdEnabled", adEnabled);
        VoteDb.AddCommandParameter(cmd, "AdTimeStamp", adTimeStamp);
        VoteDb.AddCommandParameter(cmd, "AdSponsor", adSponsor);
        VoteDb.AddCommandParameter(cmd, "AdSponsorUrl", adSponsorUrl);
        VoteDb.AddCommandParameter(cmd, "AdIsCandidateSponsored", adIsCandidateSponsored);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static ElectionsPoliticiansTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsPoliticiansTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsPoliticiansTable FillTable(DbCommand command, ElectionsPoliticiansTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsPoliticiansTable table = new ElectionsPoliticiansTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsPoliticiansTable table, ElectionsPoliticiansTable.ColumnSet columnSet = ElectionsPoliticiansTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string ElectionKeyFederalColumnName { get { return "ElectionKeyFederal"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string OrderOnBallotColumnName { get { return "OrderOnBallot"; } }

      public static string IsWinnerColumnName { get { return "IsWinner"; } }

      public static string IsIncumbentColumnName { get { return "IsIncumbent"; } }

      public static string AdvanceToRunoffColumnName { get { return "AdvanceToRunoff"; } }

      public static string AdTypeColumnName { get { return "AdType"; } }

      public static string AdUrlColumnName { get { return "AdUrl"; } }

      public static string AdThumbnailUrlColumnName { get { return "AdThumbnailUrl"; } }

      public static string AdImageColumnName { get { return "AdImage"; } }

      public static string AdImageNameColumnName { get { return "AdImageName"; } }

      public static string AdEnabledColumnName { get { return "AdEnabled"; } }

      public static string AdTimeStampColumnName { get { return "AdTimeStamp"; } }

      public static string AdSponsorColumnName { get { return "AdSponsor"; } }

      public static string AdSponsorUrlColumnName { get { return "AdSponsorUrl"; } }

      public static string AdIsCandidateSponsoredColumnName { get { return "AdIsCandidateSponsored"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int ElectionKeyFederalMaxLength { get { return 12; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int AdTypeMaxLength { get { return 1; } }

      public static int AdUrlMaxLength { get { return int.MaxValue; } }

      public static int AdThumbnailUrlMaxLength { get { return int.MaxValue; } }

      public static int AdImageNameMaxLength { get { return 255; } }

      public static int AdSponsorMaxLength { get { return 255; } }

      public static int AdSponsorUrlMaxLength { get { return int.MaxValue; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByElectionKey(Byte[] newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKeyOfficeKey(Column _column, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKeyOfficeKey(Int32 newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByElectionKeyOfficeKey(Byte[] newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByElectionKeyOfficeKey(DateTime newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKey(Column _column, object newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyPoliticianKeyExists(String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetElectionKeyByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetOfficeKeyByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetPoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RunningMateKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRunningMateKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyState(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyFederal FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyFederal(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetStateCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetStateCodeByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetCountyCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetCountyCodeByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetLocalKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetLocalKeyByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCode(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetDistrictCodeByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static Int32? GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Int32? GetOrderOnBallot(String electionKey, String officeKey, String politicianKey)
      {
        return GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Int32 GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Int32 GetOrderOnBallot(String electionKey, String officeKey, String politicianKey, Int32 defaultValue)
      {
        return GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Int32? _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean? GetIsWinner(String electionKey, String officeKey, String politicianKey)
      {
        return GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Boolean GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Boolean GetIsWinner(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Boolean? _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsWinner FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean? GetIsIncumbent(String electionKey, String officeKey, String politicianKey)
      {
        return GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Boolean GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Boolean GetIsIncumbent(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Boolean? _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbent FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean? GetAdvanceToRunoff(String electionKey, String officeKey, String politicianKey)
      {
        return GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Boolean GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Boolean GetAdvanceToRunoff(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Boolean? _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdTypeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdType FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdType(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdTypeByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetAdUrlByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdUrl FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdUrl(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdUrlByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetAdThumbnailUrlByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdThumbnailUrl FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdThumbnailUrl(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdThumbnailUrlByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static Byte[] GetAdImageByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImage FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetAdImage(String electionKey, String officeKey, String politicianKey, Byte[] defaultValue = null)
      {
        return GetAdImageByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetAdImageNameByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImageName FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdImageName(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdImageNameByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static Boolean? GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean? GetAdEnabled(String electionKey, String officeKey, String politicianKey)
      {
        return GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Boolean GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Boolean GetAdEnabled(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Boolean? _GetAdEnabledByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdEnabled FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static DateTime? GetAdTimeStamp(String electionKey, String officeKey, String politicianKey)
      {
        return GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static DateTime GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, DateTime defaultValue)
      {
        return _GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static DateTime GetAdTimeStamp(String electionKey, String officeKey, String politicianKey, DateTime defaultValue)
      {
        return GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static DateTime? _GetAdTimeStampByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdTimeStamp FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetAdSponsorByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdSponsor FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdSponsor(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdSponsorByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static String GetAdSponsorUrlByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdSponsorUrl FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdSponsorUrl(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        return GetAdSponsorUrlByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      public static Boolean? GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean? GetAdIsCandidateSponsored(String electionKey, String officeKey, String politicianKey)
      {
        return GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey);
      }

      public static Boolean GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      public static Boolean GetAdIsCandidateSponsored(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue);
      }

      private static Boolean? _GetAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdIsCandidateSponsored FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        return GetColumnByElectionKeyOfficeKeyPoliticianKey(_column, electionKey, officeKey, politicianKey);
      }

      public static ElectionsPoliticiansTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static ElectionsPoliticiansTable GetData(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        return GetDataByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, commandTimeout);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyState(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederal(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateLocalKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateLocalKeyByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCode(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateDistrictCodeByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallot(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateIsWinnerByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinner(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateIsWinnerByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateIsIncumbentByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbent(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateIsIncumbentByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoff(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdTypeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdType(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdTypeByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdUrlByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrl(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdUrlByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdThumbnailUrlByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrl(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdThumbnailUrlByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdImageByElectionKeyOfficeKeyPoliticianKey(Byte[] newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImage(Byte[] newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdImageByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdImageNameByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageName(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdImageNameByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdEnabledByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabled(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdEnabledByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdTimeStampByElectionKeyOfficeKeyPoliticianKey(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStamp(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdTimeStampByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdSponsorByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsor(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdSponsorByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdSponsorUrlByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrl(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdSponsorUrlByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsored(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        return UpdateAdIsCandidateSponsoredByElectionKeyOfficeKeyPoliticianKey(newValue, electionKey, officeKey, politicianKey);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
         return UpdateColumnByElectionKeyOfficeKeyPoliticianKey(_column, newValue, electionKey, officeKey, politicianKey);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRunningMateKey(Column _column, String runningMateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByRunningMateKey(Int32 newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByRunningMateKey(Boolean newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByRunningMateKey(Boolean newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByRunningMateKey(Boolean newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByRunningMateKey(Byte[] newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByRunningMateKey(Boolean newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByRunningMateKey(DateTime newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByRunningMateKey(Boolean newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRunningMateKey(Column _column, object newValue, String runningMateKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByStateCodeLocalKey(Byte[] newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByStateCodeCountyCode(Byte[] newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,StateCode,CountyCode,LocalKey,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff,AdType,AdUrl,AdThumbnailUrl,AdImage,AdImageName,AdEnabled,AdTimeStamp,AdSponsor,AdSponsorUrl,AdIsCandidateSponsored FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTypeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdType=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdUrl=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdThumbnailUrlByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdThumbnailUrl=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByOfficeKey(Byte[] newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImage=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdImageName=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdEnabledByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdEnabled=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdTimeStampByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdTimeStamp=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsor=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdSponsorUrlByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdSponsorUrl=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdIsCandidateSponsoredByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdIsCandidateSponsored=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeyCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllOfficeKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static void UpdateOfficeKey(ElectionsPoliticiansTable table)
      {
        UpdateOfficeKey(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKey(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.OfficeKey, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyData(String politicianKey, int commandTimeout = -1)
      {
        return GetOfficeKeyDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyDataByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ElectionsPoliticiansTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetCacheDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey ORDER BY OrderOnBallot";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Cache);
      }

      public static string SelectWinnersCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllWinnersData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Winners);
      }

      public static void UpdateWinners(ElectionsPoliticiansTable table)
      {
        UpdateWinners(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateWinners(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.Winners, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetWinnersDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Winners);
      }

      public static ElectionsPoliticiansTable GetWinnersData(String electionKey, int commandTimeout = -1)
      {
        return GetWinnersDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ElectionsPoliticiansTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsPoliticiansTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsPoliticiansTable.ColumnSet.OfficeKey:
            return SelectOfficeKeyCommandText;

          case ElectionsPoliticiansTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ElectionsPoliticiansTable.ColumnSet.Winners:
            return SelectWinnersCommandText;

          default:
            return null;
        }
      }

      static ElectionsPoliticians()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsPoliticians

    #region vote.EmailTemplates

    public partial class EmailTemplatesRow : DataRow
    {
      internal EmailTemplatesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String OwnerType
      {
        get { return this["OwnerType"] as String; }
        set { if (value == null) this["OwnerType"] = DBNull.Value; else this["OwnerType"] = value; }
      }

      public String Owner
      {
        get { return this["Owner"] as String; }
        set { if (value == null) this["Owner"] = DBNull.Value; else this["Owner"] = value; }
      }

      public Boolean IsPublic
      {
        get { return (Boolean) this["IsPublic"]; }
        set { this["IsPublic"] = value; }
      }

      public DateTime CreateTime
      {
        get { return (DateTime) this["CreateTime"]; }
        set { this["CreateTime"] = value; }
      }

      public DateTime LastUsedTime
      {
        get { return (DateTime) this["LastUsedTime"]; }
        set { this["LastUsedTime"] = value; }
      }

      public DateTime ModTime
      {
        get { return (DateTime) this["ModTime"]; }
        set { this["ModTime"] = value; }
      }

      public String Requirements
      {
        get { return this["Requirements"] as String; }
        set { if (value == null) this["Requirements"] = DBNull.Value; else this["Requirements"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Body
      {
        get { return this["Body"] as String; }
        set { if (value == null) this["Body"] = DBNull.Value; else this["Body"] = value; }
      }

      public String SelectRecipientOptions
      {
        get { return this["SelectRecipientOptions"] as String; }
        set { if (value == null) this["SelectRecipientOptions"] = DBNull.Value; else this["SelectRecipientOptions"] = value; }
      }

      public String EmailOptions
      {
        get { return this["EmailOptions"] as String; }
        set { if (value == null) this["EmailOptions"] = DBNull.Value; else this["EmailOptions"] = value; }
      }

      public String EmailTypeCode
      {
        get { return this["EmailTypeCode"] as String; }
        set { if (value == null) this["EmailTypeCode"] = DBNull.Value; else this["EmailTypeCode"] = value; }
      }
    }

    [Serializable]
    public partial class EmailTemplatesTable : TypedTableBase<EmailTemplatesRow>
    {
      public EmailTemplatesRow this[int index] { get { return (EmailTemplatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailTemplatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailTemplatesTable(); }

      new public EmailTemplatesRow NewRow() { return (EmailTemplatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailTemplatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailTemplatesRow); }

      public void RemoveRow(EmailTemplatesRow row) { this.Rows.Remove(row); }

      public EmailTemplatesRow NewRow(Int32 id, String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions, String emailTypeCode)
      {
        EmailTemplatesRow row = NewRow();
        row.Id = id;
        row.Name = name;
        row.OwnerType = ownerType;
        row.Owner = owner;
        row.IsPublic = isPublic;
        row.CreateTime = createTime;
        row.LastUsedTime = lastUsedTime;
        row.ModTime = modTime;
        row.Requirements = requirements;
        row.Subject = subject;
        row.Body = body;
        row.SelectRecipientOptions = selectRecipientOptions;
        row.EmailOptions = emailOptions;
        row.EmailTypeCode = emailTypeCode;
        return row;
      }

      public void AddRow(Int32 id, String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions, String emailTypeCode)
      {
        EmailTemplatesRow row = NewRow(id, name, ownerType, owner, isPublic, createTime, lastUsedTime, modTime, requirements, subject, body, selectRecipientOptions, emailOptions, emailTypeCode);
        AddRow(row);
      }

      public EmailTemplatesRow NewRow(String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions, String emailTypeCode)
      {
        EmailTemplatesRow row = NewRow();
        row.Name = name;
        row.OwnerType = ownerType;
        row.Owner = owner;
        row.IsPublic = isPublic;
        row.CreateTime = createTime;
        row.LastUsedTime = lastUsedTime;
        row.ModTime = modTime;
        row.Requirements = requirements;
        row.Subject = subject;
        row.Body = body;
        row.SelectRecipientOptions = selectRecipientOptions;
        row.EmailOptions = emailOptions;
        row.EmailTypeCode = emailTypeCode;
        return row;
      }

      public void AddRow(String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions, String emailTypeCode)
      {
        EmailTemplatesRow row = NewRow(name, ownerType, owner, isPublic, createTime, lastUsedTime, modTime, requirements, subject, body, selectRecipientOptions, emailOptions, emailTypeCode);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn OwnerTypeColumn { get { return this.Columns["OwnerType"]; } }

      public DataColumn OwnerColumn { get { return this.Columns["Owner"]; } }

      public DataColumn IsPublicColumn { get { return this.Columns["IsPublic"]; } }

      public DataColumn CreateTimeColumn { get { return this.Columns["CreateTime"]; } }

      public DataColumn LastUsedTimeColumn { get { return this.Columns["LastUsedTime"]; } }

      public DataColumn ModTimeColumn { get { return this.Columns["ModTime"]; } }

      public DataColumn RequirementsColumn { get { return this.Columns["Requirements"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn BodyColumn { get { return this.Columns["Body"]; } }

      public DataColumn SelectRecipientOptionsColumn { get { return this.Columns["SelectRecipientOptions"]; } }

      public DataColumn EmailOptionsColumn { get { return this.Columns["EmailOptions"]; } }

      public DataColumn EmailTypeCodeColumn { get { return this.Columns["EmailTypeCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OwnerType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Owner", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPublic", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CreateTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastUsedTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ModTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Requirements", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Body", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SelectRecipientOptions", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailOptions", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailTypeCode", typeof(String));
        _column.MaxLength = 16;
        base.Columns.Add(_column);
      }

      public EmailTemplatesTable() : this(ColumnSet.All) { }

      public EmailTemplatesTable(ColumnSet columnSet)
      {
        this.TableName = "EmailTemplates";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailTemplatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailTemplates
    {
      public const string TableName = "EmailTemplates";

      public enum Column { Id, Name, OwnerType, Owner, IsPublic, CreateTime, LastUsedTime, ModTime, Requirements, Subject, Body, SelectRecipientOptions, EmailOptions, EmailTypeCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Name, "Name" },
        { Column.OwnerType, "OwnerType" },
        { Column.Owner, "Owner" },
        { Column.IsPublic, "IsPublic" },
        { Column.CreateTime, "CreateTime" },
        { Column.LastUsedTime, "LastUsedTime" },
        { Column.ModTime, "ModTime" },
        { Column.Requirements, "Requirements" },
        { Column.Subject, "Subject" },
        { Column.Body, "Body" },
        { Column.SelectRecipientOptions, "SelectRecipientOptions" },
        { Column.EmailOptions, "EmailOptions" },
        { Column.EmailTypeCode, "EmailTypeCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions,EmailTypeCode FROM EmailTemplates";
        }
      }

      public static EmailTemplatesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions,EmailTypeCode FROM EmailTemplates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static EmailTemplatesTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailTemplatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailTemplatesTable FillTable(DbCommand command, EmailTemplatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailTemplatesTable table = new EmailTemplatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(EmailTemplatesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, EmailTemplatesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(EmailTemplatesTable table, EmailTemplatesTable.ColumnSet columnSet = EmailTemplatesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string OwnerTypeColumnName { get { return "OwnerType"; } }

      public static string OwnerColumnName { get { return "Owner"; } }

      public static string IsPublicColumnName { get { return "IsPublic"; } }

      public static string CreateTimeColumnName { get { return "CreateTime"; } }

      public static string LastUsedTimeColumnName { get { return "LastUsedTime"; } }

      public static string ModTimeColumnName { get { return "ModTime"; } }

      public static string RequirementsColumnName { get { return "Requirements"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string BodyColumnName { get { return "Body"; } }

      public static string SelectRecipientOptionsColumnName { get { return "SelectRecipientOptions"; } }

      public static string EmailOptionsColumnName { get { return "EmailOptions"; } }

      public static string EmailTypeCodeColumnName { get { return "EmailTypeCode"; } }

      public static int NameMaxLength { get { return 255; } }

      public static int OwnerTypeMaxLength { get { return 1; } }

      public static int OwnerMaxLength { get { return 200; } }

      public static int RequirementsMaxLength { get { return 150; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int BodyMaxLength { get { return int.MaxValue; } }

      public static int SelectRecipientOptionsMaxLength { get { return int.MaxValue; } }

      public static int EmailOptionsMaxLength { get { return int.MaxValue; } }

      public static int EmailTypeCodeMaxLength { get { return 16; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailTemplates WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailTemplatesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions,EmailTypeCode FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Name=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET OwnerType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Owner=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPublicById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET IsPublic=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET CreateTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUsedTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET LastUsedTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateModTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET ModTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequirementsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Requirements=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Subject=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Body=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectRecipientOptionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET SelectRecipientOptions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailOptionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailOptions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailTypeCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool NameOwnerTypeOwnerExists(String name, String ownerType, String owner)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByNameOwnerTypeOwner(Column _column, String name, String ownerType, String owner)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailTemplatesTable GetDataByNameOwnerTypeOwner(String name, String ownerType, String owner, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions,EmailTypeCode FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static int UpdateIdByNameOwnerTypeOwner(Int32 newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Id=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Name=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerTypeByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET OwnerType=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Owner=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPublicByNameOwnerTypeOwner(Boolean newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET IsPublic=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET CreateTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUsedTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET LastUsedTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateModTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET ModTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequirementsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Requirements=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Subject=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Body=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectRecipientOptionsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET SelectRecipientOptions=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailOptionsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailOptions=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTypeCodeByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailTypeCode=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByNameOwnerTypeOwner(Column _column, object newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET {0}=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByNameOwnerTypeOwner(String name, String ownerType, String owner, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(EmailTemplatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailTemplatesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailTemplates()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailTemplates

    #region vote.EmailTypes

    public partial class EmailTypesRow : DataRow
    {
      internal EmailTypesRow(DataRowBuilder rb) : base(rb) {}

      public String EmailTypeCode
      {
        get { return this["EmailTypeCode"] as String; }
        set { if (value == null) this["EmailTypeCode"] = DBNull.Value; else this["EmailTypeCode"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }
    }

    [Serializable]
    public partial class EmailTypesTable : TypedTableBase<EmailTypesRow>
    {
      public EmailTypesRow this[int index] { get { return (EmailTypesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailTypesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailTypesTable(); }

      new public EmailTypesRow NewRow() { return (EmailTypesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailTypesRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailTypesRow); }

      public void RemoveRow(EmailTypesRow row) { this.Rows.Remove(row); }

      public EmailTypesRow NewRow(String emailTypeCode, String description)
      {
        EmailTypesRow row = NewRow();
        row.EmailTypeCode = emailTypeCode;
        row.Description = description;
        return row;
      }

      public void AddRow(String emailTypeCode, String description)
      {
        EmailTypesRow row = NewRow(emailTypeCode, description);
        AddRow(row);
      }

      public DataColumn EmailTypeCodeColumn { get { return this.Columns["EmailTypeCode"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("EmailTypeCode", typeof(String));
        _column.MaxLength = 16;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Description", typeof(String));
        _column.MaxLength = 45;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public EmailTypesTable() : this(ColumnSet.All) { }

      public EmailTypesTable(ColumnSet columnSet)
      {
        this.TableName = "EmailTypes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailTypesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailTypes
    {
      public const string TableName = "EmailTypes";

      public enum Column { EmailTypeCode, Description }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.EmailTypeCode, "EmailTypeCode" },
        { Column.Description, "Description" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String emailTypeCode, String description, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO EmailTypes (EmailTypeCode,Description) VALUES (@EmailTypeCode,@Description)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        VoteDb.AddCommandParameter(cmd, "Description", description);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT EmailTypeCode,Description FROM EmailTypes";
        }
      }

      public static EmailTypesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailTypeCode,Description FROM EmailTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, EmailTypesTable.ColumnSet.All);
      }

      public static EmailTypesTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailTypesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailTypesTable FillTable(DbCommand command, EmailTypesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailTypesTable table = new EmailTypesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(EmailTypesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, EmailTypesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(EmailTypesTable table, EmailTypesTable.ColumnSet columnSet = EmailTypesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EmailTypeCodeColumnName { get { return "EmailTypeCode"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static int EmailTypeCodeMaxLength { get { return 16; } }

      public static int DescriptionMaxLength { get { return 45; } }

      public static bool EmailTypeCodeExists(String emailTypeCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailTypeCodeByEmailTypeCode(String emailTypeCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailTypeCode FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionByEmailTypeCode(String emailTypeCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Description FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByEmailTypeCode(Column _column, String emailTypeCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailTypesTable GetDataByEmailTypeCode(String emailTypeCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailTypeCode,Description FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        return FillTable(cmd, EmailTypesTable.ColumnSet.All);
      }

      public static int UpdateEmailTypeCodeByEmailTypeCode(String newValue, String emailTypeCode)
      {
        string cmdText = "UPDATE EmailTypes SET EmailTypeCode=@newValue WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByEmailTypeCode(String newValue, String emailTypeCode)
      {
        string cmdText = "UPDATE EmailTypes SET Description=@newValue WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailTypeCode(Column _column, object newValue, String emailTypeCode)
      {
        string cmdText = "UPDATE EmailTypes SET {0}=@newValue WHERE EmailTypeCode=@EmailTypeCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmailTypeCode(String emailTypeCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM EmailTypes WHERE EmailTypeCode=@EmailTypeCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTypeCode", emailTypeCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(EmailTypesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailTypesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailTypes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailTypes

    #region vote.InstructionalVideos

    public partial class InstructionalVideosRow : DataRow
    {
      internal InstructionalVideosRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }

      public String EmbedCode
      {
        get { return this["EmbedCode"] as String; }
        set { if (value == null) this["EmbedCode"] = DBNull.Value; else this["EmbedCode"] = value; }
      }

      public String Url
      {
        get { return this["Url"] as String; }
        set { if (value == null) this["Url"] = DBNull.Value; else this["Url"] = value; }
      }

      public Int32 AdminOrder
      {
        get { return (Int32) this["AdminOrder"]; }
        set { this["AdminOrder"] = value; }
      }

      public Int32 VolunteersOrder
      {
        get { return (Int32) this["VolunteersOrder"]; }
        set { this["VolunteersOrder"] = value; }
      }
    }

    [Serializable]
    public partial class InstructionalVideosTable : TypedTableBase<InstructionalVideosRow>
    {
      public InstructionalVideosRow this[int index] { get { return (InstructionalVideosRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(InstructionalVideosRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new InstructionalVideosTable(); }

      new public InstructionalVideosRow NewRow() { return (InstructionalVideosRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new InstructionalVideosRow(rb); }

      protected override Type GetRowType()
      { return typeof(InstructionalVideosRow); }

      public void RemoveRow(InstructionalVideosRow row) { this.Rows.Remove(row); }

      public InstructionalVideosRow NewRow(Int32 id, String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder)
      {
        InstructionalVideosRow row = NewRow();
        row.Id = id;
        row.Title = title;
        row.Description = description;
        row.EmbedCode = embedCode;
        row.Url = url;
        row.AdminOrder = adminOrder;
        row.VolunteersOrder = volunteersOrder;
        return row;
      }

      public void AddRow(Int32 id, String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder)
      {
        InstructionalVideosRow row = NewRow(id, title, description, embedCode, url, adminOrder, volunteersOrder);
        AddRow(row);
      }

      public InstructionalVideosRow NewRow(String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder)
      {
        InstructionalVideosRow row = NewRow();
        row.Title = title;
        row.Description = description;
        row.EmbedCode = embedCode;
        row.Url = url;
        row.AdminOrder = adminOrder;
        row.VolunteersOrder = volunteersOrder;
        return row;
      }

      public void AddRow(String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder)
      {
        InstructionalVideosRow row = NewRow(title, description, embedCode, url, adminOrder, volunteersOrder);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public DataColumn EmbedCodeColumn { get { return this.Columns["EmbedCode"]; } }

      public DataColumn UrlColumn { get { return this.Columns["Url"]; } }

      public DataColumn AdminOrderColumn { get { return this.Columns["AdminOrder"]; } }

      public DataColumn VolunteersOrderColumn { get { return this.Columns["VolunteersOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Description", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmbedCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Url", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdminOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VolunteersOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public InstructionalVideosTable() : this(ColumnSet.All) { }

      public InstructionalVideosTable(ColumnSet columnSet)
      {
        this.TableName = "InstructionalVideos";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected InstructionalVideosTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class InstructionalVideos
    {
      public const string TableName = "InstructionalVideos";

      public enum Column { Id, Title, Description, EmbedCode, Url, AdminOrder, VolunteersOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Title, "Title" },
        { Column.Description, "Description" },
        { Column.EmbedCode, "EmbedCode" },
        { Column.Url, "Url" },
        { Column.AdminOrder, "AdminOrder" },
        { Column.VolunteersOrder, "VolunteersOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM InstructionalVideos";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO InstructionalVideos (Id,Title,Description,EmbedCode,Url,AdminOrder,VolunteersOrder) VALUES (@Id,@Title,@Description,@EmbedCode,@Url,@AdminOrder,@VolunteersOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Title", title);
        VoteDb.AddCommandParameter(cmd, "Description", description);
        VoteDb.AddCommandParameter(cmd, "EmbedCode", embedCode);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "AdminOrder", adminOrder);
        VoteDb.AddCommandParameter(cmd, "VolunteersOrder", volunteersOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String title, String description, String embedCode, String url, Int32 adminOrder, Int32 volunteersOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO InstructionalVideos (Title,Description,EmbedCode,Url,AdminOrder,VolunteersOrder) VALUES (@Title,@Description,@EmbedCode,@Url,@AdminOrder,@VolunteersOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Title", title);
        VoteDb.AddCommandParameter(cmd, "Description", description);
        VoteDb.AddCommandParameter(cmd, "EmbedCode", embedCode);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "AdminOrder", adminOrder);
        VoteDb.AddCommandParameter(cmd, "VolunteersOrder", volunteersOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Title,Description,EmbedCode,Url,AdminOrder,VolunteersOrder FROM InstructionalVideos";
        }
      }

      public static InstructionalVideosTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Title,Description,EmbedCode,Url,AdminOrder,VolunteersOrder FROM InstructionalVideos";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, InstructionalVideosTable.ColumnSet.All);
      }

      public static InstructionalVideosTable FillTable(DbCommand command)
      {
        return FillTable(command, InstructionalVideosTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static InstructionalVideosTable FillTable(DbCommand command, InstructionalVideosTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          InstructionalVideosTable table = new InstructionalVideosTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(InstructionalVideosTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, InstructionalVideosTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(InstructionalVideosTable table, InstructionalVideosTable.ColumnSet columnSet = InstructionalVideosTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static string EmbedCodeColumnName { get { return "EmbedCode"; } }

      public static string UrlColumnName { get { return "Url"; } }

      public static string AdminOrderColumnName { get { return "AdminOrder"; } }

      public static string VolunteersOrderColumnName { get { return "VolunteersOrder"; } }

      public static int TitleMaxLength { get { return int.MaxValue; } }

      public static int DescriptionMaxLength { get { return int.MaxValue; } }

      public static int EmbedCodeMaxLength { get { return int.MaxValue; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetTitleById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Description FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmbedCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmbedCode FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Url FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetAdminOrderById(Int32 id)
      {
        return _GetAdminOrderById(id, null);
      }

      public static Int32 GetAdminOrderById(Int32 id, Int32 defaultValue)
      {
        return _GetAdminOrderById(id, defaultValue).Value;
      }

      private static Int32? _GetAdminOrderById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdminOrder FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetVolunteersOrderById(Int32 id)
      {
        return _GetVolunteersOrderById(id, null);
      }

      public static Int32 GetVolunteersOrderById(Int32 id, Int32 defaultValue)
      {
        return _GetVolunteersOrderById(id, defaultValue).Value;
      }

      private static Int32? _GetVolunteersOrderById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT VolunteersOrder FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM InstructionalVideos WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static InstructionalVideosTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Title,Description,EmbedCode,Url,AdminOrder,VolunteersOrder FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, InstructionalVideosTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET Title=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET Description=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmbedCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET EmbedCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET Url=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdminOrderById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET AdminOrder=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVolunteersOrderById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET VolunteersOrder=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE InstructionalVideos SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM InstructionalVideos WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(InstructionalVideosTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case InstructionalVideosTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static InstructionalVideos()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.InstructionalVideos

    #region vote.IssueGroups

    public partial class IssueGroupsRow : DataRow
    {
      internal IssueGroupsRow(DataRowBuilder rb) : base(rb) {}

      public String IssueGroupKey
      {
        get { return this["IssueGroupKey"] as String; }
        set { if (value == null) this["IssueGroupKey"] = DBNull.Value; else this["IssueGroupKey"] = value; }
      }

      public Int32 IssueGroupOrder
      {
        get { return (Int32) this["IssueGroupOrder"]; }
        set { this["IssueGroupOrder"] = value; }
      }

      public Boolean IsEnabled
      {
        get { return (Boolean) this["IsEnabled"]; }
        set { this["IsEnabled"] = value; }
      }

      public String Heading
      {
        get { return this["Heading"] as String; }
        set { if (value == null) this["Heading"] = DBNull.Value; else this["Heading"] = value; }
      }

      public String SubHeading
      {
        get { return this["SubHeading"] as String; }
        set { if (value == null) this["SubHeading"] = DBNull.Value; else this["SubHeading"] = value; }
      }
    }

    [Serializable]
    public partial class IssueGroupsTable : TypedTableBase<IssueGroupsRow>
    {
      public IssueGroupsRow this[int index] { get { return (IssueGroupsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssueGroupsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssueGroupsTable(); }

      new public IssueGroupsRow NewRow() { return (IssueGroupsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssueGroupsRow(rb); }

      protected override Type GetRowType()
      { return typeof(IssueGroupsRow); }

      public void RemoveRow(IssueGroupsRow row) { this.Rows.Remove(row); }

      public IssueGroupsRow NewRow(String issueGroupKey, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroupsRow row = NewRow();
        row.IssueGroupKey = issueGroupKey;
        row.IssueGroupOrder = issueGroupOrder;
        row.IsEnabled = isEnabled;
        row.Heading = heading;
        row.SubHeading = subHeading;
        return row;
      }

      public void AddRow(String issueGroupKey, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroupsRow row = NewRow(issueGroupKey, issueGroupOrder, isEnabled, heading, subHeading);
        AddRow(row);
      }

      public DataColumn IssueGroupKeyColumn { get { return this.Columns["IssueGroupKey"]; } }

      public DataColumn IssueGroupOrderColumn { get { return this.Columns["IssueGroupOrder"]; } }

      public DataColumn IsEnabledColumn { get { return this.Columns["IsEnabled"]; } }

      public DataColumn HeadingColumn { get { return this.Columns["Heading"]; } }

      public DataColumn SubHeadingColumn { get { return this.Columns["SubHeading"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupKey", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Heading", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SubHeading", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssueGroupsTable() : this(ColumnSet.All) { }

      public IssueGroupsTable(ColumnSet columnSet)
      {
        this.TableName = "IssueGroups";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected IssueGroupsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class IssueGroups
    {
      public const string TableName = "IssueGroups";

      public enum Column { IssueGroupKey, IssueGroupOrder, IsEnabled, Heading, SubHeading }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupKey, "IssueGroupKey" },
        { Column.IssueGroupOrder, "IssueGroupOrder" },
        { Column.IsEnabled, "IsEnabled" },
        { Column.Heading, "Heading" },
        { Column.SubHeading, "SubHeading" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroups";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String issueGroupKey, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssueGroups (IssueGroupKey,IssueGroupOrder,IsEnabled,Heading,SubHeading) VALUES (@IssueGroupKey,@IssueGroupOrder,@IsEnabled,@Heading,@SubHeading)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueGroupOrder", issueGroupOrder);
        VoteDb.AddCommandParameter(cmd, "IsEnabled", isEnabled);
        VoteDb.AddCommandParameter(cmd, "Heading", heading);
        VoteDb.AddCommandParameter(cmd, "SubHeading", subHeading);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupKey,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups";
        }
      }

      public static IssueGroupsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupKey,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssueGroupsTable.ColumnSet.All);
      }

      public static IssueGroupsTable FillTable(DbCommand command)
      {
        return FillTable(command, IssueGroupsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssueGroupsTable FillTable(DbCommand command, IssueGroupsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssueGroupsTable table = new IssueGroupsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(IssueGroupsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, IssueGroupsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(IssueGroupsTable table, IssueGroupsTable.ColumnSet columnSet = IssueGroupsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueGroupKeyColumnName { get { return "IssueGroupKey"; } }

      public static string IssueGroupOrderColumnName { get { return "IssueGroupOrder"; } }

      public static string IsEnabledColumnName { get { return "IsEnabled"; } }

      public static string HeadingColumnName { get { return "Heading"; } }

      public static string SubHeadingColumnName { get { return "SubHeading"; } }

      public static int IssueGroupKeyMaxLength { get { return 20; } }

      public static int HeadingMaxLength { get { return 255; } }

      public static int SubHeadingMaxLength { get { return 255; } }

      public static bool IssueGroupKeyExists(String issueGroupKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIssueGroupKeyByIssueGroupKey(String issueGroupKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueGroupKey FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetIssueGroupOrderByIssueGroupKey(String issueGroupKey)
      {
        return _GetIssueGroupOrderByIssueGroupKey(issueGroupKey, null);
      }

      public static Int32 GetIssueGroupOrderByIssueGroupKey(String issueGroupKey, Int32 defaultValue)
      {
        return _GetIssueGroupOrderByIssueGroupKey(issueGroupKey, defaultValue).Value;
      }

      private static Int32? _GetIssueGroupOrderByIssueGroupKey(String issueGroupKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueGroupOrder FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsEnabledByIssueGroupKey(String issueGroupKey)
      {
        return _GetIsEnabledByIssueGroupKey(issueGroupKey, null);
      }

      public static Boolean GetIsEnabledByIssueGroupKey(String issueGroupKey, Boolean defaultValue)
      {
        return _GetIsEnabledByIssueGroupKey(issueGroupKey, defaultValue).Value;
      }

      private static Boolean? _GetIsEnabledByIssueGroupKey(String issueGroupKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsEnabled FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHeadingByIssueGroupKey(String issueGroupKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Heading FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSubHeadingByIssueGroupKey(String issueGroupKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SubHeading FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByIssueGroupKey(Column _column, String issueGroupKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroupsTable GetDataByIssueGroupKey(String issueGroupKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupKey,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        return FillTable(cmd, IssueGroupsTable.ColumnSet.All);
      }

      public static int UpdateIssueGroupKeyByIssueGroupKey(String newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET IssueGroupKey=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueGroupOrderByIssueGroupKey(Int32 newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET IssueGroupOrder=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsEnabledByIssueGroupKey(Boolean newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET IsEnabled=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadingByIssueGroupKey(String newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET Heading=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubHeadingByIssueGroupKey(String newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET SubHeading=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueGroupKey(Column _column, object newValue, String issueGroupKey)
      {
        string cmdText = "UPDATE IssueGroups SET {0}=@newValue WHERE IssueGroupKey=@IssueGroupKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueGroupKey(String issueGroupKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroups WHERE IssueGroupKey=@IssueGroupKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(IssueGroupsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssueGroupsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static IssueGroups()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.IssueGroups

    #region vote.IssueGroups2

    public partial class IssueGroups2Row : DataRow
    {
      internal IssueGroups2Row(DataRowBuilder rb) : base(rb) {}

      public Int32 IssueGroupId
      {
        get { return (Int32) this["IssueGroupId"]; }
        set { this["IssueGroupId"] = value; }
      }

      public Int32 IssueGroupOrder
      {
        get { return (Int32) this["IssueGroupOrder"]; }
        set { this["IssueGroupOrder"] = value; }
      }

      public Boolean IsEnabled
      {
        get { return (Boolean) this["IsEnabled"]; }
        set { this["IsEnabled"] = value; }
      }

      public String Heading
      {
        get { return this["Heading"] as String; }
        set { if (value == null) this["Heading"] = DBNull.Value; else this["Heading"] = value; }
      }

      public String SubHeading
      {
        get { return this["SubHeading"] as String; }
        set { if (value == null) this["SubHeading"] = DBNull.Value; else this["SubHeading"] = value; }
      }
    }

    [Serializable]
    public partial class IssueGroups2Table : TypedTableBase<IssueGroups2Row>
    {
      public IssueGroups2Row this[int index] { get { return (IssueGroups2Row)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssueGroups2Row row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssueGroups2Table(); }

      new public IssueGroups2Row NewRow() { return (IssueGroups2Row) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssueGroups2Row(rb); }

      protected override Type GetRowType()
      { return typeof(IssueGroups2Row); }

      public void RemoveRow(IssueGroups2Row row) { this.Rows.Remove(row); }

      public IssueGroups2Row NewRow(Int32 issueGroupId, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroups2Row row = NewRow();
        row.IssueGroupId = issueGroupId;
        row.IssueGroupOrder = issueGroupOrder;
        row.IsEnabled = isEnabled;
        row.Heading = heading;
        row.SubHeading = subHeading;
        return row;
      }

      public void AddRow(Int32 issueGroupId, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroups2Row row = NewRow(issueGroupId, issueGroupOrder, isEnabled, heading, subHeading);
        AddRow(row);
      }

      public IssueGroups2Row NewRow(Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroups2Row row = NewRow();
        row.IssueGroupOrder = issueGroupOrder;
        row.IsEnabled = isEnabled;
        row.Heading = heading;
        row.SubHeading = subHeading;
        return row;
      }

      public void AddRow(Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading)
      {
        IssueGroups2Row row = NewRow(issueGroupOrder, isEnabled, heading, subHeading);
        AddRow(row);
      }

      public DataColumn IssueGroupIdColumn { get { return this.Columns["IssueGroupId"]; } }

      public DataColumn IssueGroupOrderColumn { get { return this.Columns["IssueGroupOrder"]; } }

      public DataColumn IsEnabledColumn { get { return this.Columns["IsEnabled"]; } }

      public DataColumn HeadingColumn { get { return this.Columns["Heading"]; } }

      public DataColumn SubHeadingColumn { get { return this.Columns["SubHeading"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Heading", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SubHeading", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssueGroups2Table() : this(ColumnSet.All) { }

      public IssueGroups2Table(ColumnSet columnSet)
      {
        this.TableName = "IssueGroups2";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected IssueGroups2Table(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class IssueGroups2
    {
      public const string TableName = "IssueGroups2";

      public enum Column { IssueGroupId, IssueGroupOrder, IsEnabled, Heading, SubHeading }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupId, "IssueGroupId" },
        { Column.IssueGroupOrder, "IssueGroupOrder" },
        { Column.IsEnabled, "IsEnabled" },
        { Column.Heading, "Heading" },
        { Column.SubHeading, "SubHeading" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroups2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE IssueGroups2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 issueGroupId, Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssueGroups2 (IssueGroupId,IssueGroupOrder,IsEnabled,Heading,SubHeading) VALUES (@IssueGroupId,@IssueGroupOrder,@IsEnabled,@Heading,@SubHeading)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueGroupOrder", issueGroupOrder);
        VoteDb.AddCommandParameter(cmd, "IsEnabled", isEnabled);
        VoteDb.AddCommandParameter(cmd, "Heading", heading);
        VoteDb.AddCommandParameter(cmd, "SubHeading", subHeading);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 issueGroupOrder, Boolean isEnabled, String heading, String subHeading, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssueGroups2 (IssueGroupOrder,IsEnabled,Heading,SubHeading) VALUES (@IssueGroupOrder,@IsEnabled,@Heading,@SubHeading)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupOrder", issueGroupOrder);
        VoteDb.AddCommandParameter(cmd, "IsEnabled", isEnabled);
        VoteDb.AddCommandParameter(cmd, "Heading", heading);
        VoteDb.AddCommandParameter(cmd, "SubHeading", subHeading);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupId,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups2";
        }
      }

      public static IssueGroups2Table GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupId,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssueGroups2Table.ColumnSet.All);
      }

      public static IssueGroups2Table FillTable(DbCommand command)
      {
        return FillTable(command, IssueGroups2Table.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssueGroups2Table FillTable(DbCommand command, IssueGroups2Table.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssueGroups2Table table = new IssueGroups2Table(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(IssueGroups2Table table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, IssueGroups2Table.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(IssueGroups2Table table, IssueGroups2Table.ColumnSet columnSet = IssueGroups2Table.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueGroupIdColumnName { get { return "IssueGroupId"; } }

      public static string IssueGroupOrderColumnName { get { return "IssueGroupOrder"; } }

      public static string IsEnabledColumnName { get { return "IsEnabled"; } }

      public static string HeadingColumnName { get { return "Heading"; } }

      public static string SubHeadingColumnName { get { return "SubHeading"; } }

      public static int HeadingMaxLength { get { return 255; } }

      public static int SubHeadingMaxLength { get { return 255; } }

      public static bool IssueGroupIdExists(Int32 issueGroupId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIssueGroupOrderByIssueGroupId(Int32 issueGroupId)
      {
        return _GetIssueGroupOrderByIssueGroupId(issueGroupId, null);
      }

      public static Int32 GetIssueGroupOrderByIssueGroupId(Int32 issueGroupId, Int32 defaultValue)
      {
        return _GetIssueGroupOrderByIssueGroupId(issueGroupId, defaultValue).Value;
      }

      private static Int32? _GetIssueGroupOrderByIssueGroupId(Int32 issueGroupId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueGroupOrder FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsEnabledByIssueGroupId(Int32 issueGroupId)
      {
        return _GetIsEnabledByIssueGroupId(issueGroupId, null);
      }

      public static Boolean GetIsEnabledByIssueGroupId(Int32 issueGroupId, Boolean defaultValue)
      {
        return _GetIsEnabledByIssueGroupId(issueGroupId, defaultValue).Value;
      }

      private static Boolean? _GetIsEnabledByIssueGroupId(Int32 issueGroupId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsEnabled FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHeadingByIssueGroupId(Int32 issueGroupId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Heading FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSubHeadingByIssueGroupId(Int32 issueGroupId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SubHeading FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByIssueGroupId(Column _column, Int32 issueGroupId)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroups2Table GetDataByIssueGroupId(Int32 issueGroupId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupId,IssueGroupOrder,IsEnabled,Heading,SubHeading FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        return FillTable(cmd, IssueGroups2Table.ColumnSet.All);
      }

      public static int UpdateIssueGroupIdByIssueGroupId(Int32 newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET IssueGroupId=@newValue WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueGroupOrderByIssueGroupId(Int32 newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET IssueGroupOrder=@newValue WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsEnabledByIssueGroupId(Boolean newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET IsEnabled=@newValue WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadingByIssueGroupId(String newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET Heading=@newValue WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubHeadingByIssueGroupId(String newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET SubHeading=@newValue WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueGroupId(Column _column, object newValue, Int32 issueGroupId)
      {
        string cmdText = "UPDATE IssueGroups2 SET {0}=@newValue WHERE IssueGroupId=@IssueGroupId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueGroupId(Int32 issueGroupId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroups2 WHERE IssueGroupId=@IssueGroupId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(IssueGroups2Table.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssueGroups2Table.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static IssueGroups2()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.IssueGroups2

    #region vote.IssueGroupsIssues

    public partial class IssueGroupsIssuesRow : DataRow
    {
      internal IssueGroupsIssuesRow(DataRowBuilder rb) : base(rb) {}

      public String IssueGroupKey
      {
        get { return this["IssueGroupKey"] as String; }
        set { if (value == null) this["IssueGroupKey"] = DBNull.Value; else this["IssueGroupKey"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 IssueOrder
      {
        get { return (Int32) this["IssueOrder"]; }
        set { this["IssueOrder"] = value; }
      }
    }

    [Serializable]
    public partial class IssueGroupsIssuesTable : TypedTableBase<IssueGroupsIssuesRow>
    {
      public IssueGroupsIssuesRow this[int index] { get { return (IssueGroupsIssuesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssueGroupsIssuesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssueGroupsIssuesTable(); }

      new public IssueGroupsIssuesRow NewRow() { return (IssueGroupsIssuesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssueGroupsIssuesRow(rb); }

      protected override Type GetRowType()
      { return typeof(IssueGroupsIssuesRow); }

      public void RemoveRow(IssueGroupsIssuesRow row) { this.Rows.Remove(row); }

      public IssueGroupsIssuesRow NewRow(String issueGroupKey, String issueKey, Int32 issueOrder)
      {
        IssueGroupsIssuesRow row = NewRow();
        row.IssueGroupKey = issueGroupKey;
        row.IssueKey = issueKey;
        row.IssueOrder = issueOrder;
        return row;
      }

      public void AddRow(String issueGroupKey, String issueKey, Int32 issueOrder)
      {
        IssueGroupsIssuesRow row = NewRow(issueGroupKey, issueKey, issueOrder);
        AddRow(row);
      }

      public DataColumn IssueGroupKeyColumn { get { return this.Columns["IssueGroupKey"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupKey", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssueGroupsIssuesTable() : this(ColumnSet.All) { }

      public IssueGroupsIssuesTable(ColumnSet columnSet)
      {
        this.TableName = "IssueGroupsIssues";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected IssueGroupsIssuesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class IssueGroupsIssues
    {
      public const string TableName = "IssueGroupsIssues";

      public enum Column { IssueGroupKey, IssueKey, IssueOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupKey, "IssueGroupKey" },
        { Column.IssueKey, "IssueKey" },
        { Column.IssueOrder, "IssueOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String issueGroupKey, String issueKey, Int32 issueOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssueGroupsIssues (IssueGroupKey,IssueKey,IssueOrder) VALUES (@IssueGroupKey,@IssueKey,@IssueOrder)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "IssueOrder", issueOrder);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupKey,IssueKey,IssueOrder FROM IssueGroupsIssues";
        }
      }

      public static IssueGroupsIssuesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupKey,IssueKey,IssueOrder FROM IssueGroupsIssues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssueGroupsIssuesTable.ColumnSet.All);
      }

      public static IssueGroupsIssuesTable FillTable(DbCommand command)
      {
        return FillTable(command, IssueGroupsIssuesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssueGroupsIssuesTable FillTable(DbCommand command, IssueGroupsIssuesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssueGroupsIssuesTable table = new IssueGroupsIssuesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(IssueGroupsIssuesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, IssueGroupsIssuesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(IssueGroupsIssuesTable table, IssueGroupsIssuesTable.ColumnSet columnSet = IssueGroupsIssuesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueGroupKeyColumnName { get { return "IssueGroupKey"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static int IssueGroupKeyMaxLength { get { return 20; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static bool IssueGroupKeyIssueKeyExists(String issueGroupKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIssueGroupKeyByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueGroupKey FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetIssueOrderByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey)
      {
        return _GetIssueOrderByIssueGroupKeyIssueKey(issueGroupKey, issueKey, null);
      }

      public static Int32 GetIssueOrderByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, Int32 defaultValue)
      {
        return _GetIssueOrderByIssueGroupKeyIssueKey(issueGroupKey, issueKey, defaultValue).Value;
      }

      private static Int32? _GetIssueOrderByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueOrder FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByIssueGroupKeyIssueKey(Column _column, String issueGroupKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroupsIssuesTable GetDataByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupKey,IssueKey,IssueOrder FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssueGroupsIssuesTable.ColumnSet.All);
      }

      public static int UpdateIssueGroupKeyByIssueGroupKeyIssueKey(String newValue, String issueGroupKey, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueGroupKey=@newValue WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByIssueGroupKeyIssueKey(String newValue, String issueGroupKey, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueKey=@newValue WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByIssueGroupKeyIssueKey(Int32 newValue, String issueGroupKey, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueOrder=@newValue WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueGroupKeyIssueKey(Column _column, object newValue, String issueGroupKey, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET {0}=@newValue WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueGroupKeyIssueKey(String issueGroupKey, String issueKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroupsIssues WHERE IssueGroupKey=@IssueGroupKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupKey", issueGroupKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIssueKey(String issueKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIssueKey(Column _column, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroupsIssues WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroupsIssuesTable GetDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupKey,IssueKey,IssueOrder FROM IssueGroupsIssues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssueGroupsIssuesTable.ColumnSet.All);
      }

      public static int UpdateIssueGroupKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueGroupKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByIssueKey(Int32 newValue, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET IssueOrder=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueKey(Column _column, object newValue, String issueKey)
      {
        string cmdText = "UPDATE IssueGroupsIssues SET {0}=@newValue WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroupsIssues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(IssueGroupsIssuesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssueGroupsIssuesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static IssueGroupsIssues()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.IssueGroupsIssues

    #region vote.IssueGroupsIssues2

    public partial class IssueGroupsIssues2Row : DataRow
    {
      internal IssueGroupsIssues2Row(DataRowBuilder rb) : base(rb) {}

      public Int32 IssueGroupId
      {
        get { return (Int32) this["IssueGroupId"]; }
        set { this["IssueGroupId"] = value; }
      }

      public Int32 IssueId
      {
        get { return (Int32) this["IssueId"]; }
        set { this["IssueId"] = value; }
      }

      public Int32 IssueOrder
      {
        get { return (Int32) this["IssueOrder"]; }
        set { this["IssueOrder"] = value; }
      }
    }

    [Serializable]
    public partial class IssueGroupsIssues2Table : TypedTableBase<IssueGroupsIssues2Row>
    {
      public IssueGroupsIssues2Row this[int index] { get { return (IssueGroupsIssues2Row)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssueGroupsIssues2Row row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssueGroupsIssues2Table(); }

      new public IssueGroupsIssues2Row NewRow() { return (IssueGroupsIssues2Row) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssueGroupsIssues2Row(rb); }

      protected override Type GetRowType()
      { return typeof(IssueGroupsIssues2Row); }

      public void RemoveRow(IssueGroupsIssues2Row row) { this.Rows.Remove(row); }

      public IssueGroupsIssues2Row NewRow(Int32 issueGroupId, Int32 issueId, Int32 issueOrder)
      {
        IssueGroupsIssues2Row row = NewRow();
        row.IssueGroupId = issueGroupId;
        row.IssueId = issueId;
        row.IssueOrder = issueOrder;
        return row;
      }

      public void AddRow(Int32 issueGroupId, Int32 issueId, Int32 issueOrder)
      {
        IssueGroupsIssues2Row row = NewRow(issueGroupId, issueId, issueOrder);
        AddRow(row);
      }

      public DataColumn IssueGroupIdColumn { get { return this.Columns["IssueGroupId"]; } }

      public DataColumn IssueIdColumn { get { return this.Columns["IssueId"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssueGroupsIssues2Table() : this(ColumnSet.All) { }

      public IssueGroupsIssues2Table(ColumnSet columnSet)
      {
        this.TableName = "IssueGroupsIssues2";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected IssueGroupsIssues2Table(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class IssueGroupsIssues2
    {
      public const string TableName = "IssueGroupsIssues2";

      public enum Column { IssueGroupId, IssueId, IssueOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupId, "IssueGroupId" },
        { Column.IssueId, "IssueId" },
        { Column.IssueOrder, "IssueOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE IssueGroupsIssues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(Int32 issueGroupId, Int32 issueId, Int32 issueOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssueGroupsIssues2 (IssueGroupId,IssueId,IssueOrder) VALUES (@IssueGroupId,@IssueId,@IssueOrder)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "IssueOrder", issueOrder);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupId,IssueId,IssueOrder FROM IssueGroupsIssues2";
        }
      }

      public static IssueGroupsIssues2Table GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupId,IssueId,IssueOrder FROM IssueGroupsIssues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssueGroupsIssues2Table.ColumnSet.All);
      }

      public static IssueGroupsIssues2Table FillTable(DbCommand command)
      {
        return FillTable(command, IssueGroupsIssues2Table.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssueGroupsIssues2Table FillTable(DbCommand command, IssueGroupsIssues2Table.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssueGroupsIssues2Table table = new IssueGroupsIssues2Table(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(IssueGroupsIssues2Table table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, IssueGroupsIssues2Table.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(IssueGroupsIssues2Table table, IssueGroupsIssues2Table.ColumnSet columnSet = IssueGroupsIssues2Table.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueGroupIdColumnName { get { return "IssueGroupId"; } }

      public static string IssueIdColumnName { get { return "IssueId"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static bool IssueGroupIdIssueIdExists(Int32 issueGroupId, Int32 issueId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues2 WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIssueOrderByIssueGroupIdIssueId(Int32 issueGroupId, Int32 issueId)
      {
        return _GetIssueOrderByIssueGroupIdIssueId(issueGroupId, issueId, null);
      }

      public static Int32 GetIssueOrderByIssueGroupIdIssueId(Int32 issueGroupId, Int32 issueId, Int32 defaultValue)
      {
        return _GetIssueOrderByIssueGroupIdIssueId(issueGroupId, issueId, defaultValue).Value;
      }

      private static Int32? _GetIssueOrderByIssueGroupIdIssueId(Int32 issueGroupId, Int32 issueId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueOrder FROM IssueGroupsIssues2 WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByIssueGroupIdIssueId(Column _column, Int32 issueGroupId, Int32 issueId)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroupsIssues2 WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroupsIssues2Table GetDataByIssueGroupIdIssueId(Int32 issueGroupId, Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupId,IssueId,IssueOrder FROM IssueGroupsIssues2 WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return FillTable(cmd, IssueGroupsIssues2Table.ColumnSet.All);
      }

      public static int UpdateIssueGroupIdByIssueGroupIdIssueId(Int32 newValue, Int32 issueGroupId, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueGroupId=@newValue WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueIdByIssueGroupIdIssueId(Int32 newValue, Int32 issueGroupId, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueId=@newValue WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByIssueGroupIdIssueId(Int32 newValue, Int32 issueGroupId, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueOrder=@newValue WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueGroupIdIssueId(Column _column, object newValue, Int32 issueGroupId, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET {0}=@newValue WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueGroupIdIssueId(Int32 issueGroupId, Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroupsIssues2 WHERE IssueGroupId=@IssueGroupId AND IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueGroupId", issueGroupId);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssueGroupsIssues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIssueId(Column _column, Int32 issueId)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssueGroupsIssues2 WHERE IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssueGroupsIssues2Table GetDataByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueGroupId,IssueId,IssueOrder FROM IssueGroupsIssues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return FillTable(cmd, IssueGroupsIssues2Table.ColumnSet.All);
      }

      public static int UpdateIssueGroupIdByIssueId(Int32 newValue, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueGroupId=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueIdByIssueId(Int32 newValue, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueId=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByIssueId(Int32 newValue, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET IssueOrder=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueId(Column _column, object newValue, Int32 issueId)
      {
        string cmdText = "UPDATE IssueGroupsIssues2 SET {0}=@newValue WHERE IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssueGroupsIssues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(IssueGroupsIssues2Table.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssueGroupsIssues2Table.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static IssueGroupsIssues2()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.IssueGroupsIssues2

    #region vote.Issues

    public partial class IssuesRow : DataRow
    {
      internal IssuesRow(DataRowBuilder rb) : base(rb) {}

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 IssueOrder
      {
        get { return (Int32) this["IssueOrder"]; }
        set { this["IssueOrder"] = value; }
      }

      public String Issue
      {
        get { return this["Issue"] as String; }
        set { if (value == null) this["Issue"] = DBNull.Value; else this["Issue"] = value; }
      }

      public String IssueLevel
      {
        get { return this["IssueLevel"] as String; }
        set { if (value == null) this["IssueLevel"] = DBNull.Value; else this["IssueLevel"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public Boolean IsIssueOmit
      {
        get { return (Boolean) this["IsIssueOmit"]; }
        set { this["IsIssueOmit"] = value; }
      }

      public Boolean IsTextSourceOptional
      {
        get { return (Boolean) this["IsTextSourceOptional"]; }
        set { this["IsTextSourceOptional"] = value; }
      }
    }

    [Serializable]
    public partial class IssuesTable : TypedTableBase<IssuesRow>
    {
      public IssuesRow this[int index] { get { return (IssuesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssuesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssuesTable(); }

      new public IssuesRow NewRow() { return (IssuesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssuesRow(rb); }

      protected override Type GetRowType()
      { return typeof(IssuesRow); }

      public void RemoveRow(IssuesRow row) { this.Rows.Remove(row); }

      public IssuesRow NewRow(String issueKey, Int32 issueOrder, String issue, String issueLevel, String stateCode, String countyCode, String localKey, Boolean isIssueOmit, Boolean isTextSourceOptional)
      {
        IssuesRow row = NewRow();
        row.IssueKey = issueKey;
        row.IssueOrder = issueOrder;
        row.Issue = issue;
        row.IssueLevel = issueLevel;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.IsIssueOmit = isIssueOmit;
        row.IsTextSourceOptional = isTextSourceOptional;
        return row;
      }

      public void AddRow(String issueKey, Int32 issueOrder, String issue, String issueLevel, String stateCode, String countyCode, String localKey, Boolean isIssueOmit, Boolean isTextSourceOptional)
      {
        IssuesRow row = NewRow(issueKey, issueOrder, issue, issueLevel, stateCode, countyCode, localKey, isIssueOmit, isTextSourceOptional);
        AddRow(row);
      }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public DataColumn IssueColumn { get { return this.Columns["Issue"]; } }

      public DataColumn IssueLevelColumn { get { return this.Columns["IssueLevel"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn IsIssueOmitColumn { get { return this.Columns["IsIssueOmit"]; } }

      public DataColumn IsTextSourceOptionalColumn { get { return this.Columns["IsTextSourceOptional"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueLevel", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIssueOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextSourceOptional", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssuesTable() : this(ColumnSet.All) { }

      public IssuesTable(ColumnSet columnSet)
      {
        this.TableName = "Issues";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected IssuesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Issues
    {
      public const string TableName = "Issues";

      public enum Column { IssueKey, IssueOrder, Issue, IssueLevel, StateCode, CountyCode, LocalKey, IsIssueOmit, IsTextSourceOptional }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueKey, "IssueKey" },
        { Column.IssueOrder, "IssueOrder" },
        { Column.Issue, "Issue" },
        { Column.IssueLevel, "IssueLevel" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.IsIssueOmit, "IsIssueOmit" },
        { Column.IsTextSourceOptional, "IsTextSourceOptional" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String issueKey, Int32 issueOrder, String issue, String issueLevel, String stateCode, String countyCode, String localKey, Boolean isIssueOmit, Boolean isTextSourceOptional, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Issues (IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional) VALUES (@IssueKey,@IssueOrder,@Issue,@IssueLevel,@StateCode,@CountyCode,@LocalKey,@IsIssueOmit,@IsTextSourceOptional)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "IssueOrder", issueOrder);
        VoteDb.AddCommandParameter(cmd, "Issue", issue);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "IsIssueOmit", isIssueOmit);
        VoteDb.AddCommandParameter(cmd, "IsTextSourceOptional", isTextSourceOptional);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues";
        }
      }

      public static IssuesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static IssuesTable FillTable(DbCommand command)
      {
        return FillTable(command, IssuesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssuesTable FillTable(DbCommand command, IssuesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssuesTable table = new IssuesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static string IssueColumnName { get { return "Issue"; } }

      public static string IssueLevelColumnName { get { return "IssueLevel"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string IsIssueOmitColumnName { get { return "IsIssueOmit"; } }

      public static string IsTextSourceOptionalColumnName { get { return "IsTextSourceOptional"; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int IssueMaxLength { get { return 40; } }

      public static int IssueLevelMaxLength { get { return 1; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int CountByStateCode(String stateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssuesTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static int UpdateIssueKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET IssueKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET IssueOrder=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET Issue=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevelByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET IssueLevel=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET StateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET CountyCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET LocalKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIssueOmitByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET IsIssueOmit=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsTextSourceOptionalByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET IsTextSourceOptional=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCode(Column _column, object newValue, String stateCode)
      {
        string cmdText = "UPDATE Issues SET {0}=@newValue WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Issues WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IssueKeyExists(String issueKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIssueKeyByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKey(String issueKey, String defaultValue = null)
      {
        return GetIssueKeyByIssueKey(issueKey, defaultValue);
      }

      public static Int32? GetIssueOrderByIssueKey(String issueKey)
      {
        return _GetIssueOrderByIssueKey(issueKey, null);
      }

      public static Int32? GetIssueOrder(String issueKey)
      {
        return GetIssueOrderByIssueKey(issueKey);
      }

      public static Int32 GetIssueOrderByIssueKey(String issueKey, Int32 defaultValue)
      {
        return _GetIssueOrderByIssueKey(issueKey, defaultValue).Value;
      }

      public static Int32 GetIssueOrder(String issueKey, Int32 defaultValue)
      {
        return GetIssueOrderByIssueKey(issueKey, defaultValue);
      }

      private static Int32? _GetIssueOrderByIssueKey(String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueOrder FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetIssueByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Issue FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssue(String issueKey, String defaultValue = null)
      {
        return GetIssueByIssueKey(issueKey, defaultValue);
      }

      public static String GetIssueLevelByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueLevel FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueLevel(String issueKey, String defaultValue = null)
      {
        return GetIssueLevelByIssueKey(issueKey, defaultValue);
      }

      public static String GetStateCodeByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String issueKey, String defaultValue = null)
      {
        return GetStateCodeByIssueKey(issueKey, defaultValue);
      }

      public static String GetCountyCodeByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String issueKey, String defaultValue = null)
      {
        return GetCountyCodeByIssueKey(issueKey, defaultValue);
      }

      public static String GetLocalKeyByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String issueKey, String defaultValue = null)
      {
        return GetLocalKeyByIssueKey(issueKey, defaultValue);
      }

      public static Boolean? GetIsIssueOmitByIssueKey(String issueKey)
      {
        return _GetIsIssueOmitByIssueKey(issueKey, null);
      }

      public static Boolean? GetIsIssueOmit(String issueKey)
      {
        return GetIsIssueOmitByIssueKey(issueKey);
      }

      public static Boolean GetIsIssueOmitByIssueKey(String issueKey, Boolean defaultValue)
      {
        return _GetIsIssueOmitByIssueKey(issueKey, defaultValue).Value;
      }

      public static Boolean GetIsIssueOmit(String issueKey, Boolean defaultValue)
      {
        return GetIsIssueOmitByIssueKey(issueKey, defaultValue);
      }

      private static Boolean? _GetIsIssueOmitByIssueKey(String issueKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIssueOmit FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsTextSourceOptionalByIssueKey(String issueKey)
      {
        return _GetIsTextSourceOptionalByIssueKey(issueKey, null);
      }

      public static Boolean? GetIsTextSourceOptional(String issueKey)
      {
        return GetIsTextSourceOptionalByIssueKey(issueKey);
      }

      public static Boolean GetIsTextSourceOptionalByIssueKey(String issueKey, Boolean defaultValue)
      {
        return _GetIsTextSourceOptionalByIssueKey(issueKey, defaultValue).Value;
      }

      public static Boolean GetIsTextSourceOptional(String issueKey, Boolean defaultValue)
      {
        return GetIsTextSourceOptionalByIssueKey(issueKey, defaultValue);
      }

      private static Boolean? _GetIsTextSourceOptionalByIssueKey(String issueKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextSourceOptional FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByIssueKey(Column _column, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String issueKey)
      {
        return GetColumnByIssueKey(_column, issueKey);
      }

      public static IssuesTable GetDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static IssuesTable GetData(String issueKey, int commandTimeout = -1)
      {
        return GetDataByIssueKey(issueKey, commandTimeout);
      }

      public static int UpdateIssueKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET IssueKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKey(String newValue, String issueKey)
      {
        return UpdateIssueKeyByIssueKey(newValue, issueKey);
      }

      public static int UpdateIssueOrderByIssueKey(Int32 newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET IssueOrder=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrder(Int32 newValue, String issueKey)
      {
        return UpdateIssueOrderByIssueKey(newValue, issueKey);
      }

      public static int UpdateIssueByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET Issue=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssue(String newValue, String issueKey)
      {
        return UpdateIssueByIssueKey(newValue, issueKey);
      }

      public static int UpdateIssueLevelByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET IssueLevel=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevel(String newValue, String issueKey)
      {
        return UpdateIssueLevelByIssueKey(newValue, issueKey);
      }

      public static int UpdateStateCodeByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET StateCode=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String issueKey)
      {
        return UpdateStateCodeByIssueKey(newValue, issueKey);
      }

      public static int UpdateCountyCodeByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET CountyCode=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String issueKey)
      {
        return UpdateCountyCodeByIssueKey(newValue, issueKey);
      }

      public static int UpdateLocalKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET LocalKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String issueKey)
      {
        return UpdateLocalKeyByIssueKey(newValue, issueKey);
      }

      public static int UpdateIsIssueOmitByIssueKey(Boolean newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET IsIssueOmit=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIssueOmit(Boolean newValue, String issueKey)
      {
        return UpdateIsIssueOmitByIssueKey(newValue, issueKey);
      }

      public static int UpdateIsTextSourceOptionalByIssueKey(Boolean newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET IsTextSourceOptional=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsTextSourceOptional(Boolean newValue, String issueKey)
      {
        return UpdateIsTextSourceOptionalByIssueKey(newValue, issueKey);
      }

      public static int UpdateColumnByIssueKey(Column _column, object newValue, String issueKey)
      {
        string cmdText = "UPDATE Issues SET {0}=@newValue WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String issueKey)
      {
         return UpdateColumnByIssueKey(_column, newValue, issueKey);
      }

      public static int DeleteByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssuesTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static int UpdateIssueKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET IssueKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET IssueOrder=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET Issue=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevelByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET IssueLevel=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIssueOmitByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET IsIssueOmit=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsTextSourceOptionalByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET IsTextSourceOptional=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Issues SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Issues WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssuesTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalKey,IsIssueOmit,IsTextSourceOptional FROM Issues WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static int UpdateIssueKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET IssueKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET IssueOrder=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET Issue=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevelByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET IssueLevel=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIssueOmitByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET IsIssueOmit=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsTextSourceOptionalByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET IsTextSourceOptional=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Issues SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Issues WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT IssueKey,Issue FROM Issues";
        }
      }

      public static IssuesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,Issue FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssuesTable.ColumnSet.Cache);
      }

      public static IssuesTable GetCacheDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,Issue FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssuesTable.ColumnSet.Cache);
      }

      public static IssuesTable GetCacheData(String issueKey, int commandTimeout = -1)
      {
        return GetCacheDataByIssueKey(issueKey, commandTimeout);
      }

      public static string GetSelectCommandText(IssuesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssuesTable.ColumnSet.All:
            return SelectAllCommandText;

          case IssuesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Issues()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Issues

    #region vote.Issues2

    public partial class Issues2Row : DataRow
    {
      internal Issues2Row(DataRowBuilder rb) : base(rb) {}

      public Int32 IssueId
      {
        get { return (Int32) this["IssueId"]; }
        set { this["IssueId"] = value; }
      }

      public Int32 IssueOrder
      {
        get { return (Int32) this["IssueOrder"]; }
        set { this["IssueOrder"] = value; }
      }

      public String Issue
      {
        get { return this["Issue"] as String; }
        set { if (value == null) this["Issue"] = DBNull.Value; else this["Issue"] = value; }
      }

      public Boolean IsIssueOmit
      {
        get { return (Boolean) this["IsIssueOmit"]; }
        set { this["IsIssueOmit"] = value; }
      }
    }

    [Serializable]
    public partial class Issues2Table : TypedTableBase<Issues2Row>
    {
      public Issues2Row this[int index] { get { return (Issues2Row)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Issues2Row row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Issues2Table(); }

      new public Issues2Row NewRow() { return (Issues2Row) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Issues2Row(rb); }

      protected override Type GetRowType()
      { return typeof(Issues2Row); }

      public void RemoveRow(Issues2Row row) { this.Rows.Remove(row); }

      public Issues2Row NewRow(Int32 issueId, Int32 issueOrder, String issue, Boolean isIssueOmit)
      {
        Issues2Row row = NewRow();
        row.IssueId = issueId;
        row.IssueOrder = issueOrder;
        row.Issue = issue;
        row.IsIssueOmit = isIssueOmit;
        return row;
      }

      public void AddRow(Int32 issueId, Int32 issueOrder, String issue, Boolean isIssueOmit)
      {
        Issues2Row row = NewRow(issueId, issueOrder, issue, isIssueOmit);
        AddRow(row);
      }

      public Issues2Row NewRow(Int32 issueOrder, String issue, Boolean isIssueOmit)
      {
        Issues2Row row = NewRow();
        row.IssueOrder = issueOrder;
        row.Issue = issue;
        row.IsIssueOmit = isIssueOmit;
        return row;
      }

      public void AddRow(Int32 issueOrder, String issue, Boolean isIssueOmit)
      {
        Issues2Row row = NewRow(issueOrder, issue, isIssueOmit);
        AddRow(row);
      }

      public DataColumn IssueIdColumn { get { return this.Columns["IssueId"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public DataColumn IssueColumn { get { return this.Columns["Issue"]; } }

      public DataColumn IsIssueOmitColumn { get { return this.Columns["IsIssueOmit"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIssueOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Issues2Table() : this(ColumnSet.All) { }

      public Issues2Table(ColumnSet columnSet)
      {
        this.TableName = "Issues2";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected Issues2Table(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Issues2
    {
      public const string TableName = "Issues2";

      public enum Column { IssueId, IssueOrder, Issue, IsIssueOmit }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueId, "IssueId" },
        { Column.IssueOrder, "IssueOrder" },
        { Column.Issue, "Issue" },
        { Column.IsIssueOmit, "IsIssueOmit" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Issues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 issueId, Int32 issueOrder, String issue, Boolean isIssueOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Issues2 (IssueId,IssueOrder,Issue,IsIssueOmit) VALUES (@IssueId,@IssueOrder,@Issue,@IsIssueOmit)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "IssueOrder", issueOrder);
        VoteDb.AddCommandParameter(cmd, "Issue", issue);
        VoteDb.AddCommandParameter(cmd, "IsIssueOmit", isIssueOmit);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 issueOrder, String issue, Boolean isIssueOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Issues2 (IssueOrder,Issue,IsIssueOmit) VALUES (@IssueOrder,@Issue,@IsIssueOmit)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueOrder", issueOrder);
        VoteDb.AddCommandParameter(cmd, "Issue", issue);
        VoteDb.AddCommandParameter(cmd, "IsIssueOmit", isIssueOmit);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueId,IssueOrder,Issue,IsIssueOmit FROM Issues2";
        }
      }

      public static Issues2Table GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,IssueOrder,Issue,IsIssueOmit FROM Issues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Issues2Table.ColumnSet.All);
      }

      public static Issues2Table FillTable(DbCommand command)
      {
        return FillTable(command, Issues2Table.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Issues2Table FillTable(DbCommand command, Issues2Table.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          Issues2Table table = new Issues2Table(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Issues2Table table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Issues2Table.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Issues2Table table, Issues2Table.ColumnSet columnSet = Issues2Table.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueIdColumnName { get { return "IssueId"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static string IssueColumnName { get { return "Issue"; } }

      public static string IsIssueOmitColumnName { get { return "IsIssueOmit"; } }

      public static int IssueMaxLength { get { return 80; } }

      public static bool IssueIdExists(Int32 issueId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIssueOrderByIssueId(Int32 issueId)
      {
        return _GetIssueOrderByIssueId(issueId, null);
      }

      public static Int32 GetIssueOrderByIssueId(Int32 issueId, Int32 defaultValue)
      {
        return _GetIssueOrderByIssueId(issueId, defaultValue).Value;
      }

      private static Int32? _GetIssueOrderByIssueId(Int32 issueId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueOrder FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetIssueByIssueId(Int32 issueId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Issue FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsIssueOmitByIssueId(Int32 issueId)
      {
        return _GetIsIssueOmitByIssueId(issueId, null);
      }

      public static Boolean GetIsIssueOmitByIssueId(Int32 issueId, Boolean defaultValue)
      {
        return _GetIsIssueOmitByIssueId(issueId, defaultValue).Value;
      }

      private static Boolean? _GetIsIssueOmitByIssueId(Int32 issueId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIssueOmit FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByIssueId(Column _column, Int32 issueId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues2 WHERE IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Issues2Table GetDataByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,IssueOrder,Issue,IsIssueOmit FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return FillTable(cmd, Issues2Table.ColumnSet.All);
      }

      public static int UpdateIssueIdByIssueId(Int32 newValue, Int32 issueId)
      {
        string cmdText = "UPDATE Issues2 SET IssueId=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueOrderByIssueId(Int32 newValue, Int32 issueId)
      {
        string cmdText = "UPDATE Issues2 SET IssueOrder=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueByIssueId(String newValue, Int32 issueId)
      {
        string cmdText = "UPDATE Issues2 SET Issue=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIssueOmitByIssueId(Boolean newValue, Int32 issueId)
      {
        string cmdText = "UPDATE Issues2 SET IsIssueOmit=@newValue WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueId(Column _column, object newValue, Int32 issueId)
      {
        string cmdText = "UPDATE Issues2 SET {0}=@newValue WHERE IssueId=@IssueId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT IssueId,Issue FROM Issues2";
        }
      }

      public static Issues2Table GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,Issue FROM Issues2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Issues2Table.ColumnSet.Cache);
      }

      public static void UpdateCache(Issues2Table table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(Issues2Table table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, Issues2Table.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static Issues2Table GetCacheDataByIssueId(Int32 issueId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,Issue FROM Issues2 WHERE IssueId=@IssueId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        return FillTable(cmd, Issues2Table.ColumnSet.Cache);
      }

      public static Issues2Table GetCacheData(Int32 issueId, int commandTimeout = -1)
      {
        return GetCacheDataByIssueId(issueId, commandTimeout);
      }

      public static string GetSelectCommandText(Issues2Table.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Issues2Table.ColumnSet.All:
            return SelectAllCommandText;

          case Issues2Table.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Issues2()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Issues2

    #region vote.IssuesQuestions

    public partial class IssuesQuestionsRow : DataRow
    {
      internal IssuesQuestionsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 IssueId
      {
        get { return (Int32) this["IssueId"]; }
        set { this["IssueId"] = value; }
      }

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public Int32? QuestionOrder
      {
        get { if (this.IsNull("QuestionOrder")) return null; else return (Int32) this["QuestionOrder"]; }
        set { if (value.HasValue) this["QuestionOrder"] = value.Value; else this["QuestionOrder"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class IssuesQuestionsTable : TypedTableBase<IssuesQuestionsRow>
    {
      public IssuesQuestionsRow this[int index] { get { return (IssuesQuestionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssuesQuestionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssuesQuestionsTable(); }

      new public IssuesQuestionsRow NewRow() { return (IssuesQuestionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssuesQuestionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(IssuesQuestionsRow); }

      public void RemoveRow(IssuesQuestionsRow row) { this.Rows.Remove(row); }

      public IssuesQuestionsRow NewRow(Int32 issueId, Int32 questionId, Int32? questionOrder)
      {
        IssuesQuestionsRow row = NewRow();
        row.IssueId = issueId;
        row.QuestionId = questionId;
        row.QuestionOrder = questionOrder;
        return row;
      }

      public void AddRow(Int32 issueId, Int32 questionId, Int32? questionOrder)
      {
        IssuesQuestionsRow row = NewRow(issueId, questionId, questionOrder);
        AddRow(row);
      }

      public DataColumn IssueIdColumn { get { return this.Columns["IssueId"]; } }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn QuestionOrderColumn { get { return this.Columns["QuestionOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionOrder", typeof(Int32));
        base.Columns.Add(_column);
      }

      public IssuesQuestionsTable() : this(ColumnSet.All) { }

      public IssuesQuestionsTable(ColumnSet columnSet)
      {
        this.TableName = "IssuesQuestions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected IssuesQuestionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class IssuesQuestions
    {
      public const string TableName = "IssuesQuestions";

      public enum Column { IssueId, QuestionId, QuestionOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueId, "IssueId" },
        { Column.QuestionId, "QuestionId" },
        { Column.QuestionOrder, "QuestionOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssuesQuestions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE IssuesQuestions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(Int32 issueId, Int32 questionId, Int32? questionOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO IssuesQuestions (IssueId,QuestionId,QuestionOrder) VALUES (@IssueId,@QuestionId,@QuestionOrder)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "QuestionOrder", questionOrder);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueId,QuestionId,QuestionOrder FROM IssuesQuestions";
        }
      }

      public static IssuesQuestionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,QuestionId,QuestionOrder FROM IssuesQuestions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssuesQuestionsTable.ColumnSet.All);
      }

      public static IssuesQuestionsTable FillTable(DbCommand command)
      {
        return FillTable(command, IssuesQuestionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssuesQuestionsTable FillTable(DbCommand command, IssuesQuestionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssuesQuestionsTable table = new IssuesQuestionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(IssuesQuestionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, IssuesQuestionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(IssuesQuestionsTable table, IssuesQuestionsTable.ColumnSet columnSet = IssuesQuestionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IssueIdColumnName { get { return "IssueId"; } }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string QuestionOrderColumnName { get { return "QuestionOrder"; } }

      public static int CountByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssuesQuestions WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByQuestionId(Column _column, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssuesQuestions WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssuesQuestionsTable GetDataByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,QuestionId,QuestionOrder FROM IssuesQuestions WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return FillTable(cmd, IssuesQuestionsTable.ColumnSet.All);
      }

      public static int UpdateIssueIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET IssueId=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET QuestionId=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrderByQuestionId(Int32? newValue, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET QuestionOrder=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionId(Column _column, object newValue, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET {0}=@newValue WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssuesQuestions WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IssueIdQuestionIdExists(Int32 issueId, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM IssuesQuestions WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetQuestionOrderByIssueIdQuestionId(Int32 issueId, Int32 questionId)
      {
        return _GetQuestionOrderByIssueIdQuestionId(issueId, questionId, null);
      }

      public static Int32 GetQuestionOrderByIssueIdQuestionId(Int32 issueId, Int32 questionId, Int32 defaultValue)
      {
        return _GetQuestionOrderByIssueIdQuestionId(issueId, questionId, defaultValue).Value;
      }

      private static Int32? _GetQuestionOrderByIssueIdQuestionId(Int32 issueId, Int32 questionId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT QuestionOrder FROM IssuesQuestions WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByIssueIdQuestionId(Column _column, Int32 issueId, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM IssuesQuestions WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static IssuesQuestionsTable GetDataByIssueIdQuestionId(Int32 issueId, Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueId,QuestionId,QuestionOrder FROM IssuesQuestions WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return FillTable(cmd, IssuesQuestionsTable.ColumnSet.All);
      }

      public static int UpdateIssueIdByIssueIdQuestionId(Int32 newValue, Int32 issueId, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET IssueId=@newValue WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdByIssueIdQuestionId(Int32 newValue, Int32 issueId, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET QuestionId=@newValue WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrderByIssueIdQuestionId(Int32? newValue, Int32 issueId, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET QuestionOrder=@newValue WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueIdQuestionId(Column _column, object newValue, Int32 issueId, Int32 questionId)
      {
        string cmdText = "UPDATE IssuesQuestions SET {0}=@newValue WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueIdQuestionId(Int32 issueId, Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM IssuesQuestions WHERE IssueId=@IssueId AND QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueId", issueId);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(IssuesQuestionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssuesQuestionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static IssuesQuestions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.IssuesQuestions

    #region vote.LocalDistricts

    public partial class LocalDistrictsRow : DataRow
    {
      internal LocalDistrictsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public String EmailPage
      {
        get { return this["EmailPage"] as String; }
        set { if (value == null) this["EmailPage"] = DBNull.Value; else this["EmailPage"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public Boolean IsLocalDistrictTagForDeletion
      {
        get { return (Boolean) this["IsLocalDistrictTagForDeletion"]; }
        set { this["IsLocalDistrictTagForDeletion"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }
    }

    [Serializable]
    public partial class LocalDistrictsTable : TypedTableBase<LocalDistrictsRow>
    {
      public LocalDistrictsRow this[int index] { get { return (LocalDistrictsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LocalDistrictsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LocalDistrictsTable(); }

      new public LocalDistrictsRow NewRow() { return (LocalDistrictsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LocalDistrictsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LocalDistrictsRow); }

      public void RemoveRow(LocalDistrictsRow row) { this.Rows.Remove(row); }

      public LocalDistrictsRow NewRow(Int32 id, String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut)
      {
        LocalDistrictsRow row = NewRow();
        row.Id = id;
        row.StateCode = stateCode;
        row.LocalKey = localKey;
        row.LocalDistrict = localDistrict;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.EmailPage = emailPage;
        row.UrlDataPage = urlDataPage;
        row.IsLocalDistrictTagForDeletion = isLocalDistrictTagForDeletion;
        row.OptOut = optOut;
        return row;
      }

      public void AddRow(Int32 id, String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut)
      {
        LocalDistrictsRow row = NewRow(id, stateCode, localKey, localDistrict, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, emailPage, urlDataPage, isLocalDistrictTagForDeletion, optOut);
        AddRow(row);
      }

      public LocalDistrictsRow NewRow(String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut)
      {
        LocalDistrictsRow row = NewRow();
        row.StateCode = stateCode;
        row.LocalKey = localKey;
        row.LocalDistrict = localDistrict;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.EmailPage = emailPage;
        row.UrlDataPage = urlDataPage;
        row.IsLocalDistrictTagForDeletion = isLocalDistrictTagForDeletion;
        row.OptOut = optOut;
        return row;
      }

      public void AddRow(String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut)
      {
        LocalDistrictsRow row = NewRow(stateCode, localKey, localDistrict, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, emailPage, urlDataPage, isLocalDistrictTagForDeletion, optOut);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn EmailPageColumn { get { return this.Columns["EmailPage"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn IsLocalDistrictTagForDeletionColumn { get { return this.Columns["IsLocalDistrictTagForDeletion"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailPage", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("IsLocalDistrictTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LocalDistrictsTable() : this(ColumnSet.All) { }

      public LocalDistrictsTable(ColumnSet columnSet)
      {
        this.TableName = "LocalDistricts";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected LocalDistrictsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LocalDistricts
    {
      public const string TableName = "LocalDistricts";

      public enum Column { Id, StateCode, LocalKey, LocalDistrict, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, EmailPage, UrlDataPage, IsLocalDistrictTagForDeletion, OptOut }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.StateCode, "StateCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.LocalDistrict, "LocalDistrict" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.EmailPage, "EmailPage" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.IsLocalDistrictTagForDeletion, "IsLocalDistrictTagForDeletion" },
        { Column.OptOut, "OptOut" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LocalDistricts (Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut) VALUES (@Id,@StateCode,@LocalKey,@LocalDistrict,@Contact,@ContactTitle,@ContactEmail,@Phone,@AltContact,@AltContactTitle,@AltEmail,@AltPhone,@Email,@Url,@BallotName,@ElectionsAuthority,@AddressLine1,@AddressLine2,@CityStateZip,@Notes,@EmailPage,@UrlDataPage,@IsLocalDistrictTagForDeletion,@OptOut)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "LocalDistrict", localDistrict);
        VoteDb.AddCommandParameter(cmd, "Contact", contact);
        VoteDb.AddCommandParameter(cmd, "ContactTitle", contactTitle);
        VoteDb.AddCommandParameter(cmd, "ContactEmail", contactEmail);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "AltContact", altContact);
        VoteDb.AddCommandParameter(cmd, "AltContactTitle", altContactTitle);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "AltPhone", altPhone);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "BallotName", ballotName);
        VoteDb.AddCommandParameter(cmd, "ElectionsAuthority", electionsAuthority);
        VoteDb.AddCommandParameter(cmd, "AddressLine1", addressLine1);
        VoteDb.AddCommandParameter(cmd, "AddressLine2", addressLine2);
        VoteDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        VoteDb.AddCommandParameter(cmd, "EmailPage", emailPage);
        VoteDb.AddCommandParameter(cmd, "UrlDataPage", urlDataPage);
        VoteDb.AddCommandParameter(cmd, "IsLocalDistrictTagForDeletion", isLocalDistrictTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String stateCode, String localKey, String localDistrict, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, Boolean optOut, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LocalDistricts (StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut) VALUES (@StateCode,@LocalKey,@LocalDistrict,@Contact,@ContactTitle,@ContactEmail,@Phone,@AltContact,@AltContactTitle,@AltEmail,@AltPhone,@Email,@Url,@BallotName,@ElectionsAuthority,@AddressLine1,@AddressLine2,@CityStateZip,@Notes,@EmailPage,@UrlDataPage,@IsLocalDistrictTagForDeletion,@OptOut)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "LocalDistrict", localDistrict);
        VoteDb.AddCommandParameter(cmd, "Contact", contact);
        VoteDb.AddCommandParameter(cmd, "ContactTitle", contactTitle);
        VoteDb.AddCommandParameter(cmd, "ContactEmail", contactEmail);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "AltContact", altContact);
        VoteDb.AddCommandParameter(cmd, "AltContactTitle", altContactTitle);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "AltPhone", altPhone);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "BallotName", ballotName);
        VoteDb.AddCommandParameter(cmd, "ElectionsAuthority", electionsAuthority);
        VoteDb.AddCommandParameter(cmd, "AddressLine1", addressLine1);
        VoteDb.AddCommandParameter(cmd, "AddressLine2", addressLine2);
        VoteDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        VoteDb.AddCommandParameter(cmd, "EmailPage", emailPage);
        VoteDb.AddCommandParameter(cmd, "UrlDataPage", urlDataPage);
        VoteDb.AddCommandParameter(cmd, "IsLocalDistrictTagForDeletion", isLocalDistrictTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static LocalDistrictsTable FillTable(DbCommand command)
      {
        return FillTable(command, LocalDistrictsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LocalDistrictsTable FillTable(DbCommand command, LocalDistrictsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          LocalDistrictsTable table = new LocalDistrictsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string EmailPageColumnName { get { return "EmailPage"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string IsLocalDistrictTagForDeletionColumnName { get { return "IsLocalDistrictTagForDeletion"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int EmailPageMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalDistrict FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitleById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitleById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthorityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZipById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotesById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailPageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailPage FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsLocalDistrictTagForDeletionById(Int32 id)
      {
        return _GetIsLocalDistrictTagForDeletionById(id, null);
      }

      public static Boolean GetIsLocalDistrictTagForDeletionById(Int32 id, Boolean defaultValue)
      {
        return _GetIsLocalDistrictTagForDeletionById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsLocalDistrictTagForDeletionById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLocalDistrictTagForDeletion FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetOptOutById(Int32 id)
      {
        return _GetOptOutById(id, null);
      }

      public static Boolean GetOptOutById(Int32 id, Boolean defaultValue)
      {
        return _GetOptOutById(id, defaultValue).Value;
      }

      private static Boolean? _GetOptOutById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET OptOut=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalDistricts WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool StateCodeLocalKeyExists(String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByStateCodeLocalKey(String stateCode, String localKey)
      {
        return _GetIdByStateCodeLocalKey(stateCode, localKey, null);
      }

      public static Int32? GetId(String stateCode, String localKey)
      {
        return GetIdByStateCodeLocalKey(stateCode, localKey);
      }

      public static Int32 GetIdByStateCodeLocalKey(String stateCode, String localKey, Int32 defaultValue)
      {
        return _GetIdByStateCodeLocalKey(stateCode, localKey, defaultValue).Value;
      }

      public static Int32 GetId(String stateCode, String localKey, Int32 defaultValue)
      {
        return GetIdByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      private static Int32? _GetIdByStateCodeLocalKey(String stateCode, String localKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetStateCodeByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String localKey, String defaultValue = null)
      {
        return GetStateCodeByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetLocalKeyByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        return GetLocalKeyByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetLocalDistrictByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalDistrict(String stateCode, String localKey, String defaultValue = null)
      {
        return GetLocalDistrictByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetContactByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String localKey, String defaultValue = null)
      {
        return GetContactByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetContactTitleByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String localKey, String defaultValue = null)
      {
        return GetContactTitleByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetContactEmailByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String localKey, String defaultValue = null)
      {
        return GetContactEmailByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetPhoneByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String localKey, String defaultValue = null)
      {
        return GetPhoneByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAltContactByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAltContactByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAltContactTitleByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAltContactTitleByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAltEmailByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAltEmailByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAltPhoneByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAltPhoneByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetEmailByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String localKey, String defaultValue = null)
      {
        return GetEmailByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetUrlByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String localKey, String defaultValue = null)
      {
        return GetUrlByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetBallotNameByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String localKey, String defaultValue = null)
      {
        return GetBallotNameByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String localKey, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAddressLine1ByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAddressLine1ByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetAddressLine2ByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String localKey, String defaultValue = null)
      {
        return GetAddressLine2ByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetCityStateZipByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String localKey, String defaultValue = null)
      {
        return GetCityStateZipByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetNotesByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String localKey, String defaultValue = null)
      {
        return GetNotesByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetEmailPageByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailPage FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailPage(String stateCode, String localKey, String defaultValue = null)
      {
        return GetEmailPageByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static String GetUrlDataPageByStateCodeLocalKey(String stateCode, String localKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String localKey, String defaultValue = null)
      {
        return GetUrlDataPageByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      public static Boolean? GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(String stateCode, String localKey)
      {
        return _GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(stateCode, localKey, null);
      }

      public static Boolean? GetIsLocalDistrictTagForDeletion(String stateCode, String localKey)
      {
        return GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(stateCode, localKey);
      }

      public static Boolean GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(String stateCode, String localKey, Boolean defaultValue)
      {
        return _GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(stateCode, localKey, defaultValue).Value;
      }

      public static Boolean GetIsLocalDistrictTagForDeletion(String stateCode, String localKey, Boolean defaultValue)
      {
        return GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      private static Boolean? _GetIsLocalDistrictTagForDeletionByStateCodeLocalKey(String stateCode, String localKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLocalDistrictTagForDeletion FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetOptOutByStateCodeLocalKey(String stateCode, String localKey)
      {
        return _GetOptOutByStateCodeLocalKey(stateCode, localKey, null);
      }

      public static Boolean? GetOptOut(String stateCode, String localKey)
      {
        return GetOptOutByStateCodeLocalKey(stateCode, localKey);
      }

      public static Boolean GetOptOutByStateCodeLocalKey(String stateCode, String localKey, Boolean defaultValue)
      {
        return _GetOptOutByStateCodeLocalKey(stateCode, localKey, defaultValue).Value;
      }

      public static Boolean GetOptOut(String stateCode, String localKey, Boolean defaultValue)
      {
        return GetOptOutByStateCodeLocalKey(stateCode, localKey, defaultValue);
      }

      private static Boolean? _GetOptOutByStateCodeLocalKey(String stateCode, String localKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode, String localKey)
      {
        return GetColumnByStateCodeLocalKey(_column, stateCode, localKey);
      }

      public static LocalDistrictsTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static LocalDistrictsTable GetData(String stateCode, String localKey, int commandTimeout = -1)
      {
        return GetDataByStateCodeLocalKey(stateCode, localKey, commandTimeout);
      }

      public static int UpdateIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET Id=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String stateCode, String localKey)
      {
        return UpdateIdByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode, String localKey)
      {
        return UpdateStateCodeByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String stateCode, String localKey)
      {
        return UpdateLocalKeyByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateLocalDistrictByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrict(String newValue, String stateCode, String localKey)
      {
        return UpdateLocalDistrictByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateContactByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode, String localKey)
      {
        return UpdateContactByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateContactTitleByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode, String localKey)
      {
        return UpdateContactTitleByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateContactEmailByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode, String localKey)
      {
        return UpdateContactEmailByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdatePhoneByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode, String localKey)
      {
        return UpdatePhoneByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAltContactByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode, String localKey)
      {
        return UpdateAltContactByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAltContactTitleByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode, String localKey)
      {
        return UpdateAltContactTitleByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAltEmailByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode, String localKey)
      {
        return UpdateAltEmailByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAltPhoneByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode, String localKey)
      {
        return UpdateAltPhoneByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateEmailByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode, String localKey)
      {
        return UpdateEmailByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode, String localKey)
      {
        return UpdateUrlByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateBallotNameByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode, String localKey)
      {
        return UpdateBallotNameByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateElectionsAuthorityByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode, String localKey)
      {
        return UpdateElectionsAuthorityByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAddressLine1ByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode, String localKey)
      {
        return UpdateAddressLine1ByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateAddressLine2ByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode, String localKey)
      {
        return UpdateAddressLine2ByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateCityStateZipByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode, String localKey)
      {
        return UpdateCityStateZipByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateNotesByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode, String localKey)
      {
        return UpdateNotesByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateEmailPageByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPage(String newValue, String stateCode, String localKey)
      {
        return UpdateEmailPageByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateUrlDataPageByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode, String localKey)
      {
        return UpdateUrlDataPageByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletion(Boolean newValue, String stateCode, String localKey)
      {
        return UpdateIsLocalDistrictTagForDeletionByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateOptOutByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET OptOut=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOut(Boolean newValue, String stateCode, String localKey)
      {
        return UpdateOptOutByStateCodeLocalKey(newValue, stateCode, localKey);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode, String localKey)
      {
         return UpdateColumnByStateCodeLocalKey(_column, newValue, stateCode, localKey);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Id=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalKey=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET OptOut=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalDistricts WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalKey,LocalDistrict,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,OptOut FROM LocalDistricts WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateIdByAltEmail(Int32 newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Id=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalKey=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET OptOut=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalDistricts WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,LocalKey,LocalDistrict FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,LocalKey,LocalDistrict FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Cache);
      }

      public static LocalDistrictsTable GetCacheDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,LocalKey,LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Cache);
      }

      public static LocalDistrictsTable GetCacheDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,LocalKey,LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode ORDER BY LocalDistrict";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(LocalDistrictsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LocalDistrictsTable.ColumnSet.All:
            return SelectAllCommandText;

          case LocalDistrictsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static LocalDistricts()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.LocalDistricts

    #region vote.LocalIdsCodes

    public partial class LocalIdsCodesRow : DataRow
    {
      internal LocalIdsCodesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String LocalType
      {
        get { return this["LocalType"] as String; }
        set { if (value == null) this["LocalType"] = DBNull.Value; else this["LocalType"] = value; }
      }

      public String LocalId
      {
        get { return this["LocalId"] as String; }
        set { if (value == null) this["LocalId"] = DBNull.Value; else this["LocalId"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }
    }

    [Serializable]
    public partial class LocalIdsCodesTable : TypedTableBase<LocalIdsCodesRow>
    {
      public LocalIdsCodesRow this[int index] { get { return (LocalIdsCodesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LocalIdsCodesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LocalIdsCodesTable(); }

      new public LocalIdsCodesRow NewRow() { return (LocalIdsCodesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LocalIdsCodesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LocalIdsCodesRow); }

      public void RemoveRow(LocalIdsCodesRow row) { this.Rows.Remove(row); }

      public LocalIdsCodesRow NewRow(Int32 id, String stateCode, String localType, String localId, String localKey)
      {
        LocalIdsCodesRow row = NewRow();
        row.Id = id;
        row.StateCode = stateCode;
        row.LocalType = localType;
        row.LocalId = localId;
        row.LocalKey = localKey;
        return row;
      }

      public void AddRow(Int32 id, String stateCode, String localType, String localId, String localKey)
      {
        LocalIdsCodesRow row = NewRow(id, stateCode, localType, localId, localKey);
        AddRow(row);
      }

      public LocalIdsCodesRow NewRow(String stateCode, String localType, String localId, String localKey)
      {
        LocalIdsCodesRow row = NewRow();
        row.StateCode = stateCode;
        row.LocalType = localType;
        row.LocalId = localId;
        row.LocalKey = localKey;
        return row;
      }

      public void AddRow(String stateCode, String localType, String localId, String localKey)
      {
        LocalIdsCodesRow row = NewRow(stateCode, localType, localId, localKey);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn LocalTypeColumn { get { return this.Columns["LocalType"]; } }

      public DataColumn LocalIdColumn { get { return this.Columns["LocalId"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalId", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LocalIdsCodesTable() : this(ColumnSet.All) { }

      public LocalIdsCodesTable(ColumnSet columnSet)
      {
        this.TableName = "LocalIdsCodes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LocalIdsCodesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LocalIdsCodes
    {
      public const string TableName = "LocalIdsCodes";

      public enum Column { Id, StateCode, LocalType, LocalId, LocalKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.StateCode, "StateCode" },
        { Column.LocalType, "LocalType" },
        { Column.LocalId, "LocalId" },
        { Column.LocalKey, "LocalKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalIdsCodes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String stateCode, String localType, String localId, String localKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LocalIdsCodes (Id,StateCode,LocalType,LocalId,LocalKey) VALUES (@Id,@StateCode,@LocalType,@LocalId,@LocalKey)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalType", localType);
        VoteDb.AddCommandParameter(cmd, "LocalId", localId);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String stateCode, String localType, String localId, String localKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LocalIdsCodes (StateCode,LocalType,LocalId,LocalKey) VALUES (@StateCode,@LocalType,@LocalId,@LocalKey)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalType", localType);
        VoteDb.AddCommandParameter(cmd, "LocalId", localId);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,StateCode,LocalType,LocalId,LocalKey FROM LocalIdsCodes";
        }
      }

      public static LocalIdsCodesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalType,LocalId,LocalKey FROM LocalIdsCodes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalIdsCodesTable.ColumnSet.All);
      }

      public static LocalIdsCodesTable FillTable(DbCommand command)
      {
        return FillTable(command, LocalIdsCodesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LocalIdsCodesTable FillTable(DbCommand command, LocalIdsCodesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          LocalIdsCodesTable table = new LocalIdsCodesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LocalIdsCodesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LocalIdsCodesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LocalIdsCodesTable table, LocalIdsCodesTable.ColumnSet columnSet = LocalIdsCodesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string LocalTypeColumnName { get { return "LocalType"; } }

      public static string LocalIdColumnName { get { return "LocalId"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int LocalTypeMaxLength { get { return 1; } }

      public static int LocalIdMaxLength { get { return 5; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalType FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalIdById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalId FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalIdsCodes WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalIdsCodesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalType,LocalId,LocalKey FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LocalIdsCodesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalIdById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LocalIdsCodes SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalIdsCodes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalIdsCodes WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalIdsCodes WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalIdsCodesTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,StateCode,LocalType,LocalId,LocalKey FROM LocalIdsCodes WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, LocalIdsCodesTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET Id=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalTypeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalType=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalIdByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalId=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE LocalIdsCodes SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LocalIdsCodes WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LocalIdsCodesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LocalIdsCodesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LocalIdsCodes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.LocalIdsCodes

    #region vote.Master

    public partial class MasterRow : DataRow
    {
      internal MasterRow(DataRowBuilder rb) : base(rb) {}

      public String ID
      {
        get { return this["ID"] as String; }
        set { if (value == null) this["ID"] = DBNull.Value; else this["ID"] = value; }
      }

      public Boolean IsLog301And404Errors
      {
        get { return (Boolean) this["IsLog301And404Errors"]; }
        set { this["IsLog301And404Errors"] = value; }
      }

      public Boolean PresentGetFutureSampleBallotsDialog
      {
        get { return (Boolean) this["PresentGetFutureSampleBallotsDialog"]; }
        set { this["PresentGetFutureSampleBallotsDialog"] = value; }
      }

      public Int32 WeNeedYourHelpNagFrequency
      {
        get { return (Int32) this["WeNeedYourHelpNagFrequency"]; }
        set { this["WeNeedYourHelpNagFrequency"] = value; }
      }

      public Int32 ShareBallotAbandons
      {
        get { return (Int32) this["ShareBallotAbandons"]; }
        set { this["ShareBallotAbandons"] = value; }
      }

      public Decimal HomeAdRate
      {
        get { return (Decimal) this["HomeAdRate"]; }
        set { this["HomeAdRate"] = value; }
      }

      public Decimal BallotAdRate
      {
        get { return (Decimal) this["BallotAdRate"]; }
        set { this["BallotAdRate"] = value; }
      }

      public Decimal ElectedAdRate
      {
        get { return (Decimal) this["ElectedAdRate"]; }
        set { this["ElectedAdRate"] = value; }
      }

      public Decimal ContestAdRate
      {
        get { return (Decimal) this["ContestAdRate"]; }
        set { this["ContestAdRate"] = value; }
      }
    }

    [Serializable]
    public partial class MasterTable : TypedTableBase<MasterRow>
    {
      public MasterRow this[int index] { get { return (MasterRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(MasterRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new MasterTable(); }

      new public MasterRow NewRow() { return (MasterRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new MasterRow(rb); }

      protected override Type GetRowType()
      { return typeof(MasterRow); }

      public void RemoveRow(MasterRow row) { this.Rows.Remove(row); }

      public MasterRow NewRow(String id, Boolean isLog301And404Errors, Boolean presentGetFutureSampleBallotsDialog, Int32 weNeedYourHelpNagFrequency, Int32 shareBallotAbandons, Decimal homeAdRate, Decimal ballotAdRate, Decimal electedAdRate, Decimal contestAdRate)
      {
        MasterRow row = NewRow();
        row.ID = id;
        row.IsLog301And404Errors = isLog301And404Errors;
        row.PresentGetFutureSampleBallotsDialog = presentGetFutureSampleBallotsDialog;
        row.WeNeedYourHelpNagFrequency = weNeedYourHelpNagFrequency;
        row.ShareBallotAbandons = shareBallotAbandons;
        row.HomeAdRate = homeAdRate;
        row.BallotAdRate = ballotAdRate;
        row.ElectedAdRate = electedAdRate;
        row.ContestAdRate = contestAdRate;
        return row;
      }

      public void AddRow(String id, Boolean isLog301And404Errors, Boolean presentGetFutureSampleBallotsDialog, Int32 weNeedYourHelpNagFrequency, Int32 shareBallotAbandons, Decimal homeAdRate, Decimal ballotAdRate, Decimal electedAdRate, Decimal contestAdRate)
      {
        MasterRow row = NewRow(id, isLog301And404Errors, presentGetFutureSampleBallotsDialog, weNeedYourHelpNagFrequency, shareBallotAbandons, homeAdRate, ballotAdRate, electedAdRate, contestAdRate);
        AddRow(row);
      }

      public DataColumn IDColumn { get { return this.Columns["ID"]; } }

      public DataColumn IsLog301And404ErrorsColumn { get { return this.Columns["IsLog301And404Errors"]; } }

      public DataColumn PresentGetFutureSampleBallotsDialogColumn { get { return this.Columns["PresentGetFutureSampleBallotsDialog"]; } }

      public DataColumn WeNeedYourHelpNagFrequencyColumn { get { return this.Columns["WeNeedYourHelpNagFrequency"]; } }

      public DataColumn ShareBallotAbandonsColumn { get { return this.Columns["ShareBallotAbandons"]; } }

      public DataColumn HomeAdRateColumn { get { return this.Columns["HomeAdRate"]; } }

      public DataColumn BallotAdRateColumn { get { return this.Columns["BallotAdRate"]; } }

      public DataColumn ElectedAdRateColumn { get { return this.Columns["ElectedAdRate"]; } }

      public DataColumn ContestAdRateColumn { get { return this.Columns["ContestAdRate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ID", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsLog301And404Errors", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PresentGetFutureSampleBallotsDialog", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WeNeedYourHelpNagFrequency", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShareBallotAbandons", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HomeAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectedAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContestAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public MasterTable() : this(ColumnSet.All) { }

      public MasterTable(ColumnSet columnSet)
      {
        this.TableName = "Master";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected MasterTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Master
    {
      public const string TableName = "Master";

      public enum Column { ID, IsLog301And404Errors, PresentGetFutureSampleBallotsDialog, WeNeedYourHelpNagFrequency, ShareBallotAbandons, HomeAdRate, BallotAdRate, ElectedAdRate, ContestAdRate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ID, "ID" },
        { Column.IsLog301And404Errors, "IsLog301And404Errors" },
        { Column.PresentGetFutureSampleBallotsDialog, "PresentGetFutureSampleBallotsDialog" },
        { Column.WeNeedYourHelpNagFrequency, "WeNeedYourHelpNagFrequency" },
        { Column.ShareBallotAbandons, "ShareBallotAbandons" },
        { Column.HomeAdRate, "HomeAdRate" },
        { Column.BallotAdRate, "BallotAdRate" },
        { Column.ElectedAdRate, "ElectedAdRate" },
        { Column.ContestAdRate, "ContestAdRate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ID,IsLog301And404Errors,PresentGetFutureSampleBallotsDialog,WeNeedYourHelpNagFrequency,ShareBallotAbandons,HomeAdRate,BallotAdRate,ElectedAdRate,ContestAdRate FROM Master";
        }
      }

      public static MasterTable FillTable(DbCommand command)
      {
        return FillTable(command, MasterTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static MasterTable FillTable(DbCommand command, MasterTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          MasterTable table = new MasterTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IDColumnName { get { return "ID"; } }

      public static string IsLog301And404ErrorsColumnName { get { return "IsLog301And404Errors"; } }

      public static string PresentGetFutureSampleBallotsDialogColumnName { get { return "PresentGetFutureSampleBallotsDialog"; } }

      public static string WeNeedYourHelpNagFrequencyColumnName { get { return "WeNeedYourHelpNagFrequency"; } }

      public static string ShareBallotAbandonsColumnName { get { return "ShareBallotAbandons"; } }

      public static string HomeAdRateColumnName { get { return "HomeAdRate"; } }

      public static string BallotAdRateColumnName { get { return "BallotAdRate"; } }

      public static string ElectedAdRateColumnName { get { return "ElectedAdRate"; } }

      public static string ContestAdRateColumnName { get { return "ContestAdRate"; } }

      public static int IDMaxLength { get { return 6; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetID(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ID FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsLog301And404Errors()
      {
        return _GetIsLog301And404Errors(null);
      }

      public static Boolean GetIsLog301And404Errors(Boolean defaultValue)
      {
        return _GetIsLog301And404Errors(defaultValue).Value;
      }

      private static Boolean? _GetIsLog301And404Errors(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLog301And404Errors FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetPresentGetFutureSampleBallotsDialog()
      {
        return _GetPresentGetFutureSampleBallotsDialog(null);
      }

      public static Boolean GetPresentGetFutureSampleBallotsDialog(Boolean defaultValue)
      {
        return _GetPresentGetFutureSampleBallotsDialog(defaultValue).Value;
      }

      private static Boolean? _GetPresentGetFutureSampleBallotsDialog(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresentGetFutureSampleBallotsDialog FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetWeNeedYourHelpNagFrequency()
      {
        return _GetWeNeedYourHelpNagFrequency(null);
      }

      public static Int32 GetWeNeedYourHelpNagFrequency(Int32 defaultValue)
      {
        return _GetWeNeedYourHelpNagFrequency(defaultValue).Value;
      }

      private static Int32? _GetWeNeedYourHelpNagFrequency(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WeNeedYourHelpNagFrequency FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetShareBallotAbandons()
      {
        return _GetShareBallotAbandons(null);
      }

      public static Int32 GetShareBallotAbandons(Int32 defaultValue)
      {
        return _GetShareBallotAbandons(defaultValue).Value;
      }

      private static Int32? _GetShareBallotAbandons(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShareBallotAbandons FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Decimal? GetHomeAdRate()
      {
        return _GetHomeAdRate(null);
      }

      public static Decimal GetHomeAdRate(Decimal defaultValue)
      {
        return _GetHomeAdRate(defaultValue).Value;
      }

      private static Decimal? _GetHomeAdRate(Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT HomeAdRate FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetBallotAdRate()
      {
        return _GetBallotAdRate(null);
      }

      public static Decimal GetBallotAdRate(Decimal defaultValue)
      {
        return _GetBallotAdRate(defaultValue).Value;
      }

      private static Decimal? _GetBallotAdRate(Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT BallotAdRate FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetElectedAdRate()
      {
        return _GetElectedAdRate(null);
      }

      public static Decimal GetElectedAdRate(Decimal defaultValue)
      {
        return _GetElectedAdRate(defaultValue).Value;
      }

      private static Decimal? _GetElectedAdRate(Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectedAdRate FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetContestAdRate()
      {
        return _GetContestAdRate(null);
      }

      public static Decimal GetContestAdRate(Decimal defaultValue)
      {
        return _GetContestAdRate(defaultValue).Value;
      }

      private static Decimal? _GetContestAdRate(Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT ContestAdRate FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM Master";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateID(String newValue)
      {
        string cmdText = "UPDATE Master SET ID=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLog301And404Errors(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsLog301And404Errors=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresentGetFutureSampleBallotsDialog(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET PresentGetFutureSampleBallotsDialog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWeNeedYourHelpNagFrequency(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET WeNeedYourHelpNagFrequency=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShareBallotAbandons(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET ShareBallotAbandons=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomeAdRate(Decimal newValue)
      {
        string cmdText = "UPDATE Master SET HomeAdRate=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotAdRate(Decimal newValue)
      {
        string cmdText = "UPDATE Master SET BallotAdRate=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectedAdRate(Decimal newValue)
      {
        string cmdText = "UPDATE Master SET ElectedAdRate=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContestAdRate(Decimal newValue)
      {
        string cmdText = "UPDATE Master SET ContestAdRate=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE Master SET {0}=@newValue";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(MasterTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case MasterTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Master()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Master

    #region vote.OfficeClasses

    public partial class OfficeClassesRow : DataRow
    {
      internal OfficeClassesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 AlternateOfficeLevel
      {
        get { return (Int32) this["AlternateOfficeLevel"]; }
        set { this["AlternateOfficeLevel"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public Decimal GeneralAdRate
      {
        get { return (Decimal) this["GeneralAdRate"]; }
        set { this["GeneralAdRate"] = value; }
      }

      public Decimal PrimaryAdRate
      {
        get { return (Decimal) this["PrimaryAdRate"]; }
        set { this["PrimaryAdRate"] = value; }
      }
    }

    [Serializable]
    public partial class OfficeClassesTable : TypedTableBase<OfficeClassesRow>
    {
      public OfficeClassesRow this[int index] { get { return (OfficeClassesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficeClassesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficeClassesTable(); }

      new public OfficeClassesRow NewRow() { return (OfficeClassesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficeClassesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficeClassesRow); }

      public void RemoveRow(OfficeClassesRow row) { this.Rows.Remove(row); }

      public OfficeClassesRow NewRow(Int32 officeLevel, Int32 alternateOfficeLevel, String name, Decimal generalAdRate, Decimal primaryAdRate)
      {
        OfficeClassesRow row = NewRow();
        row.OfficeLevel = officeLevel;
        row.AlternateOfficeLevel = alternateOfficeLevel;
        row.Name = name;
        row.GeneralAdRate = generalAdRate;
        row.PrimaryAdRate = primaryAdRate;
        return row;
      }

      public void AddRow(Int32 officeLevel, Int32 alternateOfficeLevel, String name, Decimal generalAdRate, Decimal primaryAdRate)
      {
        OfficeClassesRow row = NewRow(officeLevel, alternateOfficeLevel, name, generalAdRate, primaryAdRate);
        AddRow(row);
      }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn AlternateOfficeLevelColumn { get { return this.Columns["AlternateOfficeLevel"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn GeneralAdRateColumn { get { return this.Columns["GeneralAdRate"]; } }

      public DataColumn PrimaryAdRateColumn { get { return this.Columns["PrimaryAdRate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlternateOfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 45;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GeneralAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficeClassesTable() : this(ColumnSet.All) { }

      public OfficeClassesTable(ColumnSet columnSet)
      {
        this.TableName = "OfficeClasses";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OfficeClassesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficeClasses
    {
      public const string TableName = "OfficeClasses";

      public enum Column { OfficeLevel, AlternateOfficeLevel, Name, GeneralAdRate, PrimaryAdRate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.AlternateOfficeLevel, "AlternateOfficeLevel" },
        { Column.Name, "Name" },
        { Column.GeneralAdRate, "GeneralAdRate" },
        { Column.PrimaryAdRate, "PrimaryAdRate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficeClasses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 officeLevel, Int32 alternateOfficeLevel, String name, Decimal generalAdRate, Decimal primaryAdRate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OfficeClasses (OfficeLevel,AlternateOfficeLevel,Name,GeneralAdRate,PrimaryAdRate) VALUES (@OfficeLevel,@AlternateOfficeLevel,@Name,@GeneralAdRate,@PrimaryAdRate)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "GeneralAdRate", generalAdRate);
        VoteDb.AddCommandParameter(cmd, "PrimaryAdRate", primaryAdRate);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeLevel,AlternateOfficeLevel,Name,GeneralAdRate,PrimaryAdRate FROM OfficeClasses";
        }
      }

      public static OfficeClassesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeLevel,AlternateOfficeLevel,Name,GeneralAdRate,PrimaryAdRate FROM OfficeClasses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficeClassesTable.ColumnSet.All);
      }

      public static OfficeClassesTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficeClassesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficeClassesTable FillTable(DbCommand command, OfficeClassesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficeClassesTable table = new OfficeClassesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OfficeClassesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OfficeClassesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OfficeClassesTable table, OfficeClassesTable.ColumnSet columnSet = OfficeClassesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string AlternateOfficeLevelColumnName { get { return "AlternateOfficeLevel"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string GeneralAdRateColumnName { get { return "GeneralAdRate"; } }

      public static string PrimaryAdRateColumnName { get { return "PrimaryAdRate"; } }

      public static int NameMaxLength { get { return 45; } }

      public static bool OfficeLevelAlternateOfficeLevelExists(Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetNameByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Decimal? GetGeneralAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        return _GetGeneralAdRateByOfficeLevelAlternateOfficeLevel(officeLevel, alternateOfficeLevel, null);
      }

      public static Decimal GetGeneralAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, Decimal defaultValue)
      {
        return _GetGeneralAdRateByOfficeLevelAlternateOfficeLevel(officeLevel, alternateOfficeLevel, defaultValue).Value;
      }

      private static Decimal? _GetGeneralAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralAdRate FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetPrimaryAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        return _GetPrimaryAdRateByOfficeLevelAlternateOfficeLevel(officeLevel, alternateOfficeLevel, null);
      }

      public static Decimal GetPrimaryAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, Decimal defaultValue)
      {
        return _GetPrimaryAdRateByOfficeLevelAlternateOfficeLevel(officeLevel, alternateOfficeLevel, defaultValue).Value;
      }

      private static Decimal? _GetPrimaryAdRateByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryAdRate FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static object GetColumnByOfficeLevelAlternateOfficeLevel(Column _column, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficeClassesTable GetDataByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeLevel,AlternateOfficeLevel,Name,GeneralAdRate,PrimaryAdRate FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        return FillTable(cmd, OfficeClassesTable.ColumnSet.All);
      }

      public static int UpdateOfficeLevelByOfficeLevelAlternateOfficeLevel(Int32 newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET OfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByOfficeLevelAlternateOfficeLevel(Int32 newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET AlternateOfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByOfficeLevelAlternateOfficeLevel(String newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET Name=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByOfficeLevelAlternateOfficeLevel(Decimal newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET GeneralAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByOfficeLevelAlternateOfficeLevel(Decimal newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET PrimaryAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeLevelAlternateOfficeLevel(Column _column, object newValue, Int32 officeLevel, Int32 alternateOfficeLevel)
      {
        string cmdText = "UPDATE OfficeClasses SET {0}=@newValue WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeLevelAlternateOfficeLevel(Int32 officeLevel, Int32 alternateOfficeLevel, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficeClasses WHERE OfficeLevel=@OfficeLevel AND AlternateOfficeLevel=@AlternateOfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OfficeClassesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficeClassesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OfficeClasses()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficeClasses

    #region vote.Offices

    public partial class OfficesRow : DataRow
    {
      internal OfficesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 AlternateOfficeLevel
      {
        get { return (Int32) this["AlternateOfficeLevel"]; }
        set { this["AlternateOfficeLevel"] = value; }
      }

      public Int32 OfficeOrderWithinLevel
      {
        get { return (Int32) this["OfficeOrderWithinLevel"]; }
        set { this["OfficeOrderWithinLevel"] = value; }
      }

      public Boolean IsRunningMateOffice
      {
        get { return (Boolean) this["IsRunningMateOffice"]; }
        set { this["IsRunningMateOffice"] = value; }
      }

      public Boolean IsPrimaryRunningMateOffice
      {
        get { return (Boolean) this["IsPrimaryRunningMateOffice"]; }
        set { this["IsPrimaryRunningMateOffice"] = value; }
      }

      public Boolean IsOnlyForPrimaries
      {
        get { return (Boolean) this["IsOnlyForPrimaries"]; }
        set { this["IsOnlyForPrimaries"] = value; }
      }

      public Int32 Incumbents
      {
        get { return (Int32) this["Incumbents"]; }
        set { this["Incumbents"] = value; }
      }

      public String VoteInstructions
      {
        get { return this["VoteInstructions"] as String; }
        set { if (value == null) this["VoteInstructions"] = DBNull.Value; else this["VoteInstructions"] = value; }
      }

      public String WriteInInstructions
      {
        get { return this["WriteInInstructions"] as String; }
        set { if (value == null) this["WriteInInstructions"] = DBNull.Value; else this["WriteInInstructions"] = value; }
      }

      public String WriteInWording
      {
        get { return this["WriteInWording"] as String; }
        set { if (value == null) this["WriteInWording"] = DBNull.Value; else this["WriteInWording"] = value; }
      }

      public Int32 WriteInLines
      {
        get { return (Int32) this["WriteInLines"]; }
        set { this["WriteInLines"] = value; }
      }

      public Boolean IsVacant
      {
        get { return (Boolean) this["IsVacant"]; }
        set { this["IsVacant"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public Boolean IsOfficeTagForDeletion
      {
        get { return (Boolean) this["IsOfficeTagForDeletion"]; }
        set { this["IsOfficeTagForDeletion"] = value; }
      }

      public Boolean IsSpecialOffice
      {
        get { return (Boolean) this["IsSpecialOffice"]; }
        set { this["IsSpecialOffice"] = value; }
      }

      public Boolean IsInactive
      {
        get { return (Boolean) this["IsInactive"]; }
        set { this["IsInactive"] = value; }
      }

      public Int32 ElectionPositions
      {
        get { return (Int32) this["ElectionPositions"]; }
        set { this["ElectionPositions"] = value; }
      }

      public Int32 PrimaryPositions
      {
        get { return (Int32) this["PrimaryPositions"]; }
        set { this["PrimaryPositions"] = value; }
      }

      public Int32 PrimaryRunoffPositions
      {
        get { return (Int32) this["PrimaryRunoffPositions"]; }
        set { this["PrimaryRunoffPositions"] = value; }
      }

      public Int32 GeneralRunoffPositions
      {
        get { return (Int32) this["GeneralRunoffPositions"]; }
        set { this["GeneralRunoffPositions"] = value; }
      }

      public Decimal PrimaryAdRate
      {
        get { return (Decimal) this["PrimaryAdRate"]; }
        set { this["PrimaryAdRate"] = value; }
      }

      public Decimal GeneralAdRate
      {
        get { return (Decimal) this["GeneralAdRate"]; }
        set { this["GeneralAdRate"] = value; }
      }

      public Boolean IsVirtual
      {
        get { return (Boolean) this["IsVirtual"]; }
        set { this["IsVirtual"] = value; }
      }

      public Boolean Undeletable
      {
        get { return (Boolean) this["Undeletable"]; }
        set { this["Undeletable"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesTable : TypedTableBase<OfficesRow>
    {
      public OfficesRow this[int index] { get { return (OfficesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesTable(); }

      new public OfficesRow NewRow() { return (OfficesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesRow); }

      public void RemoveRow(OfficesRow row) { this.Rows.Remove(row); }

      public OfficesRow NewRow(Int32 id, String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable)
      {
        OfficesRow row = NewRow();
        row.Id = id;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.OfficeLevel = officeLevel;
        row.AlternateOfficeLevel = alternateOfficeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.IsRunningMateOffice = isRunningMateOffice;
        row.IsPrimaryRunningMateOffice = isPrimaryRunningMateOffice;
        row.IsOnlyForPrimaries = isOnlyForPrimaries;
        row.Incumbents = incumbents;
        row.VoteInstructions = voteInstructions;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        row.IsVacant = isVacant;
        row.DataLastUpdated = dataLastUpdated;
        row.IsOfficeTagForDeletion = isOfficeTagForDeletion;
        row.IsSpecialOffice = isSpecialOffice;
        row.IsInactive = isInactive;
        row.ElectionPositions = electionPositions;
        row.PrimaryPositions = primaryPositions;
        row.PrimaryRunoffPositions = primaryRunoffPositions;
        row.GeneralRunoffPositions = generalRunoffPositions;
        row.PrimaryAdRate = primaryAdRate;
        row.GeneralAdRate = generalAdRate;
        row.IsVirtual = isVirtual;
        row.Undeletable = undeletable;
        return row;
      }

      public void AddRow(Int32 id, String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable)
      {
        OfficesRow row = NewRow(id, officeKey, stateCode, countyCode, localKey, districtCode, officeLine1, officeLine2, officeLevel, alternateOfficeLevel, officeOrderWithinLevel, isRunningMateOffice, isPrimaryRunningMateOffice, isOnlyForPrimaries, incumbents, voteInstructions, writeInInstructions, writeInWording, writeInLines, isVacant, dataLastUpdated, isOfficeTagForDeletion, isSpecialOffice, isInactive, electionPositions, primaryPositions, primaryRunoffPositions, generalRunoffPositions, primaryAdRate, generalAdRate, isVirtual, undeletable);
        AddRow(row);
      }

      public OfficesRow NewRow(String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable)
      {
        OfficesRow row = NewRow();
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.OfficeLevel = officeLevel;
        row.AlternateOfficeLevel = alternateOfficeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.IsRunningMateOffice = isRunningMateOffice;
        row.IsPrimaryRunningMateOffice = isPrimaryRunningMateOffice;
        row.IsOnlyForPrimaries = isOnlyForPrimaries;
        row.Incumbents = incumbents;
        row.VoteInstructions = voteInstructions;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        row.IsVacant = isVacant;
        row.DataLastUpdated = dataLastUpdated;
        row.IsOfficeTagForDeletion = isOfficeTagForDeletion;
        row.IsSpecialOffice = isSpecialOffice;
        row.IsInactive = isInactive;
        row.ElectionPositions = electionPositions;
        row.PrimaryPositions = primaryPositions;
        row.PrimaryRunoffPositions = primaryRunoffPositions;
        row.GeneralRunoffPositions = generalRunoffPositions;
        row.PrimaryAdRate = primaryAdRate;
        row.GeneralAdRate = generalAdRate;
        row.IsVirtual = isVirtual;
        row.Undeletable = undeletable;
        return row;
      }

      public void AddRow(String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable)
      {
        OfficesRow row = NewRow(officeKey, stateCode, countyCode, localKey, districtCode, officeLine1, officeLine2, officeLevel, alternateOfficeLevel, officeOrderWithinLevel, isRunningMateOffice, isPrimaryRunningMateOffice, isOnlyForPrimaries, incumbents, voteInstructions, writeInInstructions, writeInWording, writeInLines, isVacant, dataLastUpdated, isOfficeTagForDeletion, isSpecialOffice, isInactive, electionPositions, primaryPositions, primaryRunoffPositions, generalRunoffPositions, primaryAdRate, generalAdRate, isVirtual, undeletable);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn AlternateOfficeLevelColumn { get { return this.Columns["AlternateOfficeLevel"]; } }

      public DataColumn OfficeOrderWithinLevelColumn { get { return this.Columns["OfficeOrderWithinLevel"]; } }

      public DataColumn IsRunningMateOfficeColumn { get { return this.Columns["IsRunningMateOffice"]; } }

      public DataColumn IsPrimaryRunningMateOfficeColumn { get { return this.Columns["IsPrimaryRunningMateOffice"]; } }

      public DataColumn IsOnlyForPrimariesColumn { get { return this.Columns["IsOnlyForPrimaries"]; } }

      public DataColumn IncumbentsColumn { get { return this.Columns["Incumbents"]; } }

      public DataColumn VoteInstructionsColumn { get { return this.Columns["VoteInstructions"]; } }

      public DataColumn WriteInInstructionsColumn { get { return this.Columns["WriteInInstructions"]; } }

      public DataColumn WriteInWordingColumn { get { return this.Columns["WriteInWording"]; } }

      public DataColumn WriteInLinesColumn { get { return this.Columns["WriteInLines"]; } }

      public DataColumn IsVacantColumn { get { return this.Columns["IsVacant"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn IsOfficeTagForDeletionColumn { get { return this.Columns["IsOfficeTagForDeletion"]; } }

      public DataColumn IsSpecialOfficeColumn { get { return this.Columns["IsSpecialOffice"]; } }

      public DataColumn IsInactiveColumn { get { return this.Columns["IsInactive"]; } }

      public DataColumn ElectionPositionsColumn { get { return this.Columns["ElectionPositions"]; } }

      public DataColumn PrimaryPositionsColumn { get { return this.Columns["PrimaryPositions"]; } }

      public DataColumn PrimaryRunoffPositionsColumn { get { return this.Columns["PrimaryRunoffPositions"]; } }

      public DataColumn GeneralRunoffPositionsColumn { get { return this.Columns["GeneralRunoffPositions"]; } }

      public DataColumn PrimaryAdRateColumn { get { return this.Columns["PrimaryAdRate"]; } }

      public DataColumn GeneralAdRateColumn { get { return this.Columns["GeneralAdRate"]; } }

      public DataColumn IsVirtualColumn { get { return this.Columns["IsVirtual"]; } }

      public DataColumn UndeletableColumn { get { return this.Columns["Undeletable"]; } }

      public enum ColumnSet { All, Cache, AlternateOfficeLevelUpdate, GeneralElection, Positions }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlternateOfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeOrderWithinLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPrimaryRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOnlyForPrimaries", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInLines", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVacant", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOfficeTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSpecialOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInactive", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GeneralRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GeneralAdRate", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVirtual", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Undeletable", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPrimaryRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVacant", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAlternateOfficeLevelUpdateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlternateOfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitGeneralElectionColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPositionsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GeneralRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficesTable() : this(ColumnSet.All) { }

      public OfficesTable(ColumnSet columnSet)
      {
        this.TableName = "Offices";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.AlternateOfficeLevelUpdate:
            InitAlternateOfficeLevelUpdateColumns();
            break;

          case ColumnSet.GeneralElection:
            InitGeneralElectionColumns();
            break;

          case ColumnSet.Positions:
            InitPositionsColumns();
            break;
        }
      }

      protected OfficesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Offices
    {
      public const string TableName = "Offices";

      public enum Column { Id, OfficeKey, StateCode, CountyCode, LocalKey, DistrictCode, OfficeLine1, OfficeLine2, OfficeLevel, AlternateOfficeLevel, OfficeOrderWithinLevel, IsRunningMateOffice, IsPrimaryRunningMateOffice, IsOnlyForPrimaries, Incumbents, VoteInstructions, WriteInInstructions, WriteInWording, WriteInLines, IsVacant, DataLastUpdated, IsOfficeTagForDeletion, IsSpecialOffice, IsInactive, ElectionPositions, PrimaryPositions, PrimaryRunoffPositions, GeneralRunoffPositions, PrimaryAdRate, GeneralAdRate, IsVirtual, Undeletable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.AlternateOfficeLevel, "AlternateOfficeLevel" },
        { Column.OfficeOrderWithinLevel, "OfficeOrderWithinLevel" },
        { Column.IsRunningMateOffice, "IsRunningMateOffice" },
        { Column.IsPrimaryRunningMateOffice, "IsPrimaryRunningMateOffice" },
        { Column.IsOnlyForPrimaries, "IsOnlyForPrimaries" },
        { Column.Incumbents, "Incumbents" },
        { Column.VoteInstructions, "VoteInstructions" },
        { Column.WriteInInstructions, "WriteInInstructions" },
        { Column.WriteInWording, "WriteInWording" },
        { Column.WriteInLines, "WriteInLines" },
        { Column.IsVacant, "IsVacant" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.IsOfficeTagForDeletion, "IsOfficeTagForDeletion" },
        { Column.IsSpecialOffice, "IsSpecialOffice" },
        { Column.IsInactive, "IsInactive" },
        { Column.ElectionPositions, "ElectionPositions" },
        { Column.PrimaryPositions, "PrimaryPositions" },
        { Column.PrimaryRunoffPositions, "PrimaryRunoffPositions" },
        { Column.GeneralRunoffPositions, "GeneralRunoffPositions" },
        { Column.PrimaryAdRate, "PrimaryAdRate" },
        { Column.GeneralAdRate, "GeneralAdRate" },
        { Column.IsVirtual, "IsVirtual" },
        { Column.Undeletable, "Undeletable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Offices (Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable) VALUES (@Id,@OfficeKey,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@OfficeLine1,@OfficeLine2,@OfficeLevel,@AlternateOfficeLevel,@OfficeOrderWithinLevel,@IsRunningMateOffice,@IsPrimaryRunningMateOffice,@IsOnlyForPrimaries,@Incumbents,@VoteInstructions,@WriteInInstructions,@WriteInWording,@WriteInLines,@IsVacant,@DataLastUpdated,@IsOfficeTagForDeletion,@IsSpecialOffice,@IsInactive,@ElectionPositions,@PrimaryPositions,@PrimaryRunoffPositions,@GeneralRunoffPositions,@PrimaryAdRate,@GeneralAdRate,@IsVirtual,@Undeletable)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLine1", officeLine1);
        VoteDb.AddCommandParameter(cmd, "OfficeLine2", officeLine2);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "OfficeOrderWithinLevel", officeOrderWithinLevel);
        VoteDb.AddCommandParameter(cmd, "IsRunningMateOffice", isRunningMateOffice);
        VoteDb.AddCommandParameter(cmd, "IsPrimaryRunningMateOffice", isPrimaryRunningMateOffice);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "Incumbents", incumbents);
        VoteDb.AddCommandParameter(cmd, "VoteInstructions", voteInstructions);
        VoteDb.AddCommandParameter(cmd, "WriteInInstructions", writeInInstructions);
        VoteDb.AddCommandParameter(cmd, "WriteInWording", writeInWording);
        VoteDb.AddCommandParameter(cmd, "WriteInLines", writeInLines);
        VoteDb.AddCommandParameter(cmd, "IsVacant", isVacant);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "IsOfficeTagForDeletion", isOfficeTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsSpecialOffice", isSpecialOffice);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "ElectionPositions", electionPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryPositions", primaryPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryRunoffPositions", primaryRunoffPositions);
        VoteDb.AddCommandParameter(cmd, "GeneralRunoffPositions", generalRunoffPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryAdRate", primaryAdRate);
        VoteDb.AddCommandParameter(cmd, "GeneralAdRate", generalAdRate);
        VoteDb.AddCommandParameter(cmd, "IsVirtual", isVirtual);
        VoteDb.AddCommandParameter(cmd, "Undeletable", undeletable);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String officeKey, String stateCode, String countyCode, String localKey, String districtCode, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isPrimaryRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, Decimal primaryAdRate, Decimal generalAdRate, Boolean isVirtual, Boolean undeletable, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Offices (OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable) VALUES (@OfficeKey,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@OfficeLine1,@OfficeLine2,@OfficeLevel,@AlternateOfficeLevel,@OfficeOrderWithinLevel,@IsRunningMateOffice,@IsPrimaryRunningMateOffice,@IsOnlyForPrimaries,@Incumbents,@VoteInstructions,@WriteInInstructions,@WriteInWording,@WriteInLines,@IsVacant,@DataLastUpdated,@IsOfficeTagForDeletion,@IsSpecialOffice,@IsInactive,@ElectionPositions,@PrimaryPositions,@PrimaryRunoffPositions,@GeneralRunoffPositions,@PrimaryAdRate,@GeneralAdRate,@IsVirtual,@Undeletable)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLine1", officeLine1);
        VoteDb.AddCommandParameter(cmd, "OfficeLine2", officeLine2);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "OfficeOrderWithinLevel", officeOrderWithinLevel);
        VoteDb.AddCommandParameter(cmd, "IsRunningMateOffice", isRunningMateOffice);
        VoteDb.AddCommandParameter(cmd, "IsPrimaryRunningMateOffice", isPrimaryRunningMateOffice);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "Incumbents", incumbents);
        VoteDb.AddCommandParameter(cmd, "VoteInstructions", voteInstructions);
        VoteDb.AddCommandParameter(cmd, "WriteInInstructions", writeInInstructions);
        VoteDb.AddCommandParameter(cmd, "WriteInWording", writeInWording);
        VoteDb.AddCommandParameter(cmd, "WriteInLines", writeInLines);
        VoteDb.AddCommandParameter(cmd, "IsVacant", isVacant);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "IsOfficeTagForDeletion", isOfficeTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsSpecialOffice", isSpecialOffice);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "ElectionPositions", electionPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryPositions", primaryPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryRunoffPositions", primaryRunoffPositions);
        VoteDb.AddCommandParameter(cmd, "GeneralRunoffPositions", generalRunoffPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryAdRate", primaryAdRate);
        VoteDb.AddCommandParameter(cmd, "GeneralAdRate", generalAdRate);
        VoteDb.AddCommandParameter(cmd, "IsVirtual", isVirtual);
        VoteDb.AddCommandParameter(cmd, "Undeletable", undeletable);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices";
        }
      }

      public static OfficesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static OfficesTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesTable FillTable(DbCommand command, OfficesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesTable table = new OfficesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string AlternateOfficeLevelColumnName { get { return "AlternateOfficeLevel"; } }

      public static string OfficeOrderWithinLevelColumnName { get { return "OfficeOrderWithinLevel"; } }

      public static string IsRunningMateOfficeColumnName { get { return "IsRunningMateOffice"; } }

      public static string IsPrimaryRunningMateOfficeColumnName { get { return "IsPrimaryRunningMateOffice"; } }

      public static string IsOnlyForPrimariesColumnName { get { return "IsOnlyForPrimaries"; } }

      public static string IncumbentsColumnName { get { return "Incumbents"; } }

      public static string VoteInstructionsColumnName { get { return "VoteInstructions"; } }

      public static string WriteInInstructionsColumnName { get { return "WriteInInstructions"; } }

      public static string WriteInWordingColumnName { get { return "WriteInWording"; } }

      public static string WriteInLinesColumnName { get { return "WriteInLines"; } }

      public static string IsVacantColumnName { get { return "IsVacant"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string IsOfficeTagForDeletionColumnName { get { return "IsOfficeTagForDeletion"; } }

      public static string IsSpecialOfficeColumnName { get { return "IsSpecialOffice"; } }

      public static string IsInactiveColumnName { get { return "IsInactive"; } }

      public static string ElectionPositionsColumnName { get { return "ElectionPositions"; } }

      public static string PrimaryPositionsColumnName { get { return "PrimaryPositions"; } }

      public static string PrimaryRunoffPositionsColumnName { get { return "PrimaryRunoffPositions"; } }

      public static string GeneralRunoffPositionsColumnName { get { return "GeneralRunoffPositions"; } }

      public static string PrimaryAdRateColumnName { get { return "PrimaryAdRate"; } }

      public static string GeneralAdRateColumnName { get { return "GeneralAdRate"; } }

      public static string IsVirtualColumnName { get { return "IsVirtual"; } }

      public static string UndeletableColumnName { get { return "Undeletable"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int VoteInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInWordingMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetOfficeKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine1ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine1 FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine2ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine2 FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOfficeLevelById(Int32 id)
      {
        return _GetOfficeLevelById(id, null);
      }

      public static Int32 GetOfficeLevelById(Int32 id, Int32 defaultValue)
      {
        return _GetOfficeLevelById(id, defaultValue).Value;
      }

      private static Int32? _GetOfficeLevelById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeLevel FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetAlternateOfficeLevelById(Int32 id)
      {
        return _GetAlternateOfficeLevelById(id, null);
      }

      public static Int32 GetAlternateOfficeLevelById(Int32 id, Int32 defaultValue)
      {
        return _GetAlternateOfficeLevelById(id, defaultValue).Value;
      }

      private static Int32? _GetAlternateOfficeLevelById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT AlternateOfficeLevel FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetOfficeOrderWithinLevelById(Int32 id)
      {
        return _GetOfficeOrderWithinLevelById(id, null);
      }

      public static Int32 GetOfficeOrderWithinLevelById(Int32 id, Int32 defaultValue)
      {
        return _GetOfficeOrderWithinLevelById(id, defaultValue).Value;
      }

      private static Int32? _GetOfficeOrderWithinLevelById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeOrderWithinLevel FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsRunningMateOfficeById(Int32 id)
      {
        return _GetIsRunningMateOfficeById(id, null);
      }

      public static Boolean GetIsRunningMateOfficeById(Int32 id, Boolean defaultValue)
      {
        return _GetIsRunningMateOfficeById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsRunningMateOfficeById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsRunningMateOffice FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPrimaryRunningMateOfficeById(Int32 id)
      {
        return _GetIsPrimaryRunningMateOfficeById(id, null);
      }

      public static Boolean GetIsPrimaryRunningMateOfficeById(Int32 id, Boolean defaultValue)
      {
        return _GetIsPrimaryRunningMateOfficeById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsPrimaryRunningMateOfficeById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPrimaryRunningMateOffice FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOnlyForPrimariesById(Int32 id)
      {
        return _GetIsOnlyForPrimariesById(id, null);
      }

      public static Boolean GetIsOnlyForPrimariesById(Int32 id, Boolean defaultValue)
      {
        return _GetIsOnlyForPrimariesById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsOnlyForPrimariesById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOnlyForPrimaries FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIncumbentsById(Int32 id)
      {
        return _GetIncumbentsById(id, null);
      }

      public static Int32 GetIncumbentsById(Int32 id, Int32 defaultValue)
      {
        return _GetIncumbentsById(id, defaultValue).Value;
      }

      private static Int32? _GetIncumbentsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Incumbents FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetVoteInstructionsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteInstructions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInInstructionsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInInstructions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInWordingById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInWording FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetWriteInLinesById(Int32 id)
      {
        return _GetWriteInLinesById(id, null);
      }

      public static Int32 GetWriteInLinesById(Int32 id, Int32 defaultValue)
      {
        return _GetWriteInLinesById(id, defaultValue).Value;
      }

      private static Int32? _GetWriteInLinesById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WriteInLines FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsVacantById(Int32 id)
      {
        return _GetIsVacantById(id, null);
      }

      public static Boolean GetIsVacantById(Int32 id, Boolean defaultValue)
      {
        return _GetIsVacantById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsVacantById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVacant FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDataLastUpdatedById(Int32 id)
      {
        return _GetDataLastUpdatedById(id, null);
      }

      public static DateTime GetDataLastUpdatedById(Int32 id, DateTime defaultValue)
      {
        return _GetDataLastUpdatedById(id, defaultValue).Value;
      }

      private static DateTime? _GetDataLastUpdatedById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsOfficeTagForDeletionById(Int32 id)
      {
        return _GetIsOfficeTagForDeletionById(id, null);
      }

      public static Boolean GetIsOfficeTagForDeletionById(Int32 id, Boolean defaultValue)
      {
        return _GetIsOfficeTagForDeletionById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsOfficeTagForDeletionById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOfficeTagForDeletion FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsSpecialOfficeById(Int32 id)
      {
        return _GetIsSpecialOfficeById(id, null);
      }

      public static Boolean GetIsSpecialOfficeById(Int32 id, Boolean defaultValue)
      {
        return _GetIsSpecialOfficeById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsSpecialOfficeById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSpecialOffice FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsInactiveById(Int32 id)
      {
        return _GetIsInactiveById(id, null);
      }

      public static Boolean GetIsInactiveById(Int32 id, Boolean defaultValue)
      {
        return _GetIsInactiveById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsInactiveById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInactive FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetElectionPositionsById(Int32 id)
      {
        return _GetElectionPositionsById(id, null);
      }

      public static Int32 GetElectionPositionsById(Int32 id, Int32 defaultValue)
      {
        return _GetElectionPositionsById(id, defaultValue).Value;
      }

      private static Int32? _GetElectionPositionsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionPositions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryPositionsById(Int32 id)
      {
        return _GetPrimaryPositionsById(id, null);
      }

      public static Int32 GetPrimaryPositionsById(Int32 id, Int32 defaultValue)
      {
        return _GetPrimaryPositionsById(id, defaultValue).Value;
      }

      private static Int32? _GetPrimaryPositionsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryPositions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryRunoffPositionsById(Int32 id)
      {
        return _GetPrimaryRunoffPositionsById(id, null);
      }

      public static Int32 GetPrimaryRunoffPositionsById(Int32 id, Int32 defaultValue)
      {
        return _GetPrimaryRunoffPositionsById(id, defaultValue).Value;
      }

      private static Int32? _GetPrimaryRunoffPositionsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryRunoffPositions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetGeneralRunoffPositionsById(Int32 id)
      {
        return _GetGeneralRunoffPositionsById(id, null);
      }

      public static Int32 GetGeneralRunoffPositionsById(Int32 id, Int32 defaultValue)
      {
        return _GetGeneralRunoffPositionsById(id, defaultValue).Value;
      }

      private static Int32? _GetGeneralRunoffPositionsById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralRunoffPositions FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Decimal? GetPrimaryAdRateById(Int32 id)
      {
        return _GetPrimaryAdRateById(id, null);
      }

      public static Decimal GetPrimaryAdRateById(Int32 id, Decimal defaultValue)
      {
        return _GetPrimaryAdRateById(id, defaultValue).Value;
      }

      private static Decimal? _GetPrimaryAdRateById(Int32 id, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryAdRate FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetGeneralAdRateById(Int32 id)
      {
        return _GetGeneralAdRateById(id, null);
      }

      public static Decimal GetGeneralAdRateById(Int32 id, Decimal defaultValue)
      {
        return _GetGeneralAdRateById(id, defaultValue).Value;
      }

      private static Decimal? _GetGeneralAdRateById(Int32 id, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralAdRate FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Boolean? GetIsVirtualById(Int32 id)
      {
        return _GetIsVirtualById(id, null);
      }

      public static Boolean GetIsVirtualById(Int32 id, Boolean defaultValue)
      {
        return _GetIsVirtualById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsVirtualById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVirtual FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetUndeletableById(Int32 id)
      {
        return _GetUndeletableById(id, null);
      }

      public static Boolean GetUndeletableById(Int32 id, Boolean defaultValue)
      {
        return _GetUndeletableById(id, defaultValue).Value;
      }

      private static Boolean? _GetUndeletableById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Undeletable FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateById(Decimal newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateById(Decimal newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool OfficeKeyExists(String officeKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByOfficeKey(String officeKey)
      {
        return _GetIdByOfficeKey(officeKey, null);
      }

      public static Int32? GetId(String officeKey)
      {
        return GetIdByOfficeKey(officeKey);
      }

      public static Int32 GetIdByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetIdByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetId(String officeKey, Int32 defaultValue)
      {
        return GetIdByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetIdByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetOfficeKeyByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKey(String officeKey, String defaultValue = null)
      {
        return GetOfficeKeyByOfficeKey(officeKey, defaultValue);
      }

      public static String GetStateCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String officeKey, String defaultValue = null)
      {
        return GetStateCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetCountyCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String officeKey, String defaultValue = null)
      {
        return GetCountyCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetLocalKeyByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String officeKey, String defaultValue = null)
      {
        return GetLocalKeyByOfficeKey(officeKey, defaultValue);
      }

      public static String GetDistrictCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCode(String officeKey, String defaultValue = null)
      {
        return GetDistrictCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetOfficeLine1ByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine1 FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine1(String officeKey, String defaultValue = null)
      {
        return GetOfficeLine1ByOfficeKey(officeKey, defaultValue);
      }

      public static String GetOfficeLine2ByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine2 FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine2(String officeKey, String defaultValue = null)
      {
        return GetOfficeLine2ByOfficeKey(officeKey, defaultValue);
      }

      public static Int32? GetOfficeLevelByOfficeKey(String officeKey)
      {
        return _GetOfficeLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetOfficeLevel(String officeKey)
      {
        return GetOfficeLevelByOfficeKey(officeKey);
      }

      public static Int32 GetOfficeLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetOfficeLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetOfficeLevel(String officeKey, Int32 defaultValue)
      {
        return GetOfficeLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetOfficeLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetAlternateOfficeLevelByOfficeKey(String officeKey)
      {
        return _GetAlternateOfficeLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetAlternateOfficeLevel(String officeKey)
      {
        return GetAlternateOfficeLevelByOfficeKey(officeKey);
      }

      public static Int32 GetAlternateOfficeLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetAlternateOfficeLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetAlternateOfficeLevel(String officeKey, Int32 defaultValue)
      {
        return GetAlternateOfficeLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetAlternateOfficeLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT AlternateOfficeLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetOfficeOrderWithinLevelByOfficeKey(String officeKey)
      {
        return _GetOfficeOrderWithinLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetOfficeOrderWithinLevel(String officeKey)
      {
        return GetOfficeOrderWithinLevelByOfficeKey(officeKey);
      }

      public static Int32 GetOfficeOrderWithinLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetOfficeOrderWithinLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetOfficeOrderWithinLevel(String officeKey, Int32 defaultValue)
      {
        return GetOfficeOrderWithinLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetOfficeOrderWithinLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeOrderWithinLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsRunningMateOfficeByOfficeKey(String officeKey)
      {
        return _GetIsRunningMateOfficeByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsRunningMateOffice(String officeKey)
      {
        return GetIsRunningMateOfficeByOfficeKey(officeKey);
      }

      public static Boolean GetIsRunningMateOfficeByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsRunningMateOfficeByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsRunningMateOffice(String officeKey, Boolean defaultValue)
      {
        return GetIsRunningMateOfficeByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsRunningMateOfficeByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsRunningMateOffice FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPrimaryRunningMateOfficeByOfficeKey(String officeKey)
      {
        return _GetIsPrimaryRunningMateOfficeByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsPrimaryRunningMateOffice(String officeKey)
      {
        return GetIsPrimaryRunningMateOfficeByOfficeKey(officeKey);
      }

      public static Boolean GetIsPrimaryRunningMateOfficeByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsPrimaryRunningMateOfficeByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsPrimaryRunningMateOffice(String officeKey, Boolean defaultValue)
      {
        return GetIsPrimaryRunningMateOfficeByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsPrimaryRunningMateOfficeByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPrimaryRunningMateOffice FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOnlyForPrimariesByOfficeKey(String officeKey)
      {
        return _GetIsOnlyForPrimariesByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsOnlyForPrimaries(String officeKey)
      {
        return GetIsOnlyForPrimariesByOfficeKey(officeKey);
      }

      public static Boolean GetIsOnlyForPrimariesByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsOnlyForPrimariesByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsOnlyForPrimaries(String officeKey, Boolean defaultValue)
      {
        return GetIsOnlyForPrimariesByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsOnlyForPrimariesByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOnlyForPrimaries FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIncumbentsByOfficeKey(String officeKey)
      {
        return _GetIncumbentsByOfficeKey(officeKey, null);
      }

      public static Int32? GetIncumbents(String officeKey)
      {
        return GetIncumbentsByOfficeKey(officeKey);
      }

      public static Int32 GetIncumbentsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetIncumbentsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetIncumbents(String officeKey, Int32 defaultValue)
      {
        return GetIncumbentsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetIncumbentsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Incumbents FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetVoteInstructionsByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteInstructions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteInstructions(String officeKey, String defaultValue = null)
      {
        return GetVoteInstructionsByOfficeKey(officeKey, defaultValue);
      }

      public static String GetWriteInInstructionsByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInInstructions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInInstructions(String officeKey, String defaultValue = null)
      {
        return GetWriteInInstructionsByOfficeKey(officeKey, defaultValue);
      }

      public static String GetWriteInWordingByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInWording FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInWording(String officeKey, String defaultValue = null)
      {
        return GetWriteInWordingByOfficeKey(officeKey, defaultValue);
      }

      public static Int32? GetWriteInLinesByOfficeKey(String officeKey)
      {
        return _GetWriteInLinesByOfficeKey(officeKey, null);
      }

      public static Int32? GetWriteInLines(String officeKey)
      {
        return GetWriteInLinesByOfficeKey(officeKey);
      }

      public static Int32 GetWriteInLinesByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetWriteInLinesByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetWriteInLines(String officeKey, Int32 defaultValue)
      {
        return GetWriteInLinesByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetWriteInLinesByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WriteInLines FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsVacantByOfficeKey(String officeKey)
      {
        return _GetIsVacantByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsVacant(String officeKey)
      {
        return GetIsVacantByOfficeKey(officeKey);
      }

      public static Boolean GetIsVacantByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsVacantByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsVacant(String officeKey, Boolean defaultValue)
      {
        return GetIsVacantByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsVacantByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVacant FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDataLastUpdatedByOfficeKey(String officeKey)
      {
        return _GetDataLastUpdatedByOfficeKey(officeKey, null);
      }

      public static DateTime? GetDataLastUpdated(String officeKey)
      {
        return GetDataLastUpdatedByOfficeKey(officeKey);
      }

      public static DateTime GetDataLastUpdatedByOfficeKey(String officeKey, DateTime defaultValue)
      {
        return _GetDataLastUpdatedByOfficeKey(officeKey, defaultValue).Value;
      }

      public static DateTime GetDataLastUpdated(String officeKey, DateTime defaultValue)
      {
        return GetDataLastUpdatedByOfficeKey(officeKey, defaultValue);
      }

      private static DateTime? _GetDataLastUpdatedByOfficeKey(String officeKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsOfficeTagForDeletionByOfficeKey(String officeKey)
      {
        return _GetIsOfficeTagForDeletionByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsOfficeTagForDeletion(String officeKey)
      {
        return GetIsOfficeTagForDeletionByOfficeKey(officeKey);
      }

      public static Boolean GetIsOfficeTagForDeletionByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsOfficeTagForDeletionByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsOfficeTagForDeletion(String officeKey, Boolean defaultValue)
      {
        return GetIsOfficeTagForDeletionByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsOfficeTagForDeletionByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOfficeTagForDeletion FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsSpecialOfficeByOfficeKey(String officeKey)
      {
        return _GetIsSpecialOfficeByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsSpecialOffice(String officeKey)
      {
        return GetIsSpecialOfficeByOfficeKey(officeKey);
      }

      public static Boolean GetIsSpecialOfficeByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsSpecialOfficeByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsSpecialOffice(String officeKey, Boolean defaultValue)
      {
        return GetIsSpecialOfficeByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsSpecialOfficeByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSpecialOffice FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsInactiveByOfficeKey(String officeKey)
      {
        return _GetIsInactiveByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsInactive(String officeKey)
      {
        return GetIsInactiveByOfficeKey(officeKey);
      }

      public static Boolean GetIsInactiveByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsInactiveByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsInactive(String officeKey, Boolean defaultValue)
      {
        return GetIsInactiveByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsInactiveByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInactive FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetElectionPositionsByOfficeKey(String officeKey)
      {
        return _GetElectionPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetElectionPositions(String officeKey)
      {
        return GetElectionPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetElectionPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetElectionPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetElectionPositions(String officeKey, Int32 defaultValue)
      {
        return GetElectionPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetElectionPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryPositionsByOfficeKey(String officeKey)
      {
        return _GetPrimaryPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetPrimaryPositions(String officeKey)
      {
        return GetPrimaryPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetPrimaryPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetPrimaryPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetPrimaryPositions(String officeKey, Int32 defaultValue)
      {
        return GetPrimaryPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetPrimaryPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryRunoffPositionsByOfficeKey(String officeKey)
      {
        return _GetPrimaryRunoffPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetPrimaryRunoffPositions(String officeKey)
      {
        return GetPrimaryRunoffPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetPrimaryRunoffPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetPrimaryRunoffPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetPrimaryRunoffPositions(String officeKey, Int32 defaultValue)
      {
        return GetPrimaryRunoffPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetPrimaryRunoffPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetGeneralRunoffPositionsByOfficeKey(String officeKey)
      {
        return _GetGeneralRunoffPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetGeneralRunoffPositions(String officeKey)
      {
        return GetGeneralRunoffPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetGeneralRunoffPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetGeneralRunoffPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetGeneralRunoffPositions(String officeKey, Int32 defaultValue)
      {
        return GetGeneralRunoffPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetGeneralRunoffPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Decimal? GetPrimaryAdRateByOfficeKey(String officeKey)
      {
        return _GetPrimaryAdRateByOfficeKey(officeKey, null);
      }

      public static Decimal? GetPrimaryAdRate(String officeKey)
      {
        return GetPrimaryAdRateByOfficeKey(officeKey);
      }

      public static Decimal GetPrimaryAdRateByOfficeKey(String officeKey, Decimal defaultValue)
      {
        return _GetPrimaryAdRateByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Decimal GetPrimaryAdRate(String officeKey, Decimal defaultValue)
      {
        return GetPrimaryAdRateByOfficeKey(officeKey, defaultValue);
      }

      private static Decimal? _GetPrimaryAdRateByOfficeKey(String officeKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryAdRate FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetGeneralAdRateByOfficeKey(String officeKey)
      {
        return _GetGeneralAdRateByOfficeKey(officeKey, null);
      }

      public static Decimal? GetGeneralAdRate(String officeKey)
      {
        return GetGeneralAdRateByOfficeKey(officeKey);
      }

      public static Decimal GetGeneralAdRateByOfficeKey(String officeKey, Decimal defaultValue)
      {
        return _GetGeneralAdRateByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Decimal GetGeneralAdRate(String officeKey, Decimal defaultValue)
      {
        return GetGeneralAdRateByOfficeKey(officeKey, defaultValue);
      }

      private static Decimal? _GetGeneralAdRateByOfficeKey(String officeKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralAdRate FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Boolean? GetIsVirtualByOfficeKey(String officeKey)
      {
        return _GetIsVirtualByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsVirtual(String officeKey)
      {
        return GetIsVirtualByOfficeKey(officeKey);
      }

      public static Boolean GetIsVirtualByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsVirtualByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsVirtual(String officeKey, Boolean defaultValue)
      {
        return GetIsVirtualByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsVirtualByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVirtual FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetUndeletableByOfficeKey(String officeKey)
      {
        return _GetUndeletableByOfficeKey(officeKey, null);
      }

      public static Boolean? GetUndeletable(String officeKey)
      {
        return GetUndeletableByOfficeKey(officeKey);
      }

      public static Boolean GetUndeletableByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetUndeletableByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetUndeletable(String officeKey, Boolean defaultValue)
      {
        return GetUndeletableByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetUndeletableByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Undeletable FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String officeKey)
      {
        return GetColumnByOfficeKey(_column, officeKey);
      }

      public static OfficesTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static OfficesTable GetData(String officeKey, int commandTimeout = -1)
      {
        return GetDataByOfficeKey(officeKey, commandTimeout);
      }

      public static int UpdateIdByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String officeKey)
      {
        return UpdateIdByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String officeKey)
      {
        return UpdateOfficeKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String officeKey)
      {
        return UpdateStateCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String officeKey)
      {
        return UpdateCountyCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateLocalKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String officeKey)
      {
        return UpdateLocalKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCode(String newValue, String officeKey)
      {
        return UpdateDistrictCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLine1ByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1(String newValue, String officeKey)
      {
        return UpdateOfficeLine1ByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLine2ByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2(String newValue, String officeKey)
      {
        return UpdateOfficeLine2ByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevel(Int32 newValue, String officeKey)
      {
        return UpdateOfficeLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateAlternateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevel(Int32 newValue, String officeKey)
      {
        return UpdateAlternateOfficeLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeOrderWithinLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevel(Int32 newValue, String officeKey)
      {
        return UpdateOfficeOrderWithinLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsRunningMateOfficeByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOffice(Boolean newValue, String officeKey)
      {
        return UpdateIsRunningMateOfficeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOffice(Boolean newValue, String officeKey)
      {
        return UpdateIsPrimaryRunningMateOfficeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsOnlyForPrimariesByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimaries(Boolean newValue, String officeKey)
      {
        return UpdateIsOnlyForPrimariesByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIncumbentsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbents(Int32 newValue, String officeKey)
      {
        return UpdateIncumbentsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateVoteInstructionsByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructions(String newValue, String officeKey)
      {
        return UpdateVoteInstructionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInInstructionsByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructions(String newValue, String officeKey)
      {
        return UpdateWriteInInstructionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInWordingByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWording(String newValue, String officeKey)
      {
        return UpdateWriteInWordingByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInLinesByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLines(Int32 newValue, String officeKey)
      {
        return UpdateWriteInLinesByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsVacantByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacant(Boolean newValue, String officeKey)
      {
        return UpdateIsVacantByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String officeKey)
      {
        return UpdateDataLastUpdatedByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsOfficeTagForDeletionByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletion(Boolean newValue, String officeKey)
      {
        return UpdateIsOfficeTagForDeletionByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsSpecialOfficeByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOffice(Boolean newValue, String officeKey)
      {
        return UpdateIsSpecialOfficeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsInactiveByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactive(Boolean newValue, String officeKey)
      {
        return UpdateIsInactiveByOfficeKey(newValue, officeKey);
      }

      public static int UpdateElectionPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositions(Int32 newValue, String officeKey)
      {
        return UpdateElectionPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePrimaryPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositions(Int32 newValue, String officeKey)
      {
        return UpdatePrimaryPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePrimaryRunoffPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositions(Int32 newValue, String officeKey)
      {
        return UpdatePrimaryRunoffPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateGeneralRunoffPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositions(Int32 newValue, String officeKey)
      {
        return UpdateGeneralRunoffPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePrimaryAdRateByOfficeKey(Decimal newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRate(Decimal newValue, String officeKey)
      {
        return UpdatePrimaryAdRateByOfficeKey(newValue, officeKey);
      }

      public static int UpdateGeneralAdRateByOfficeKey(Decimal newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRate(Decimal newValue, String officeKey)
      {
        return UpdateGeneralAdRateByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsVirtualByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtual(Boolean newValue, String officeKey)
      {
        return UpdateIsVirtualByOfficeKey(newValue, officeKey);
      }

      public static int UpdateUndeletableByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletable(Boolean newValue, String officeKey)
      {
        return UpdateUndeletableByOfficeKey(newValue, officeKey);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String officeKey)
      {
         return UpdateColumnByOfficeKey(_column, newValue, officeKey);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeOfficeLevelDistrictCode(Column _column, String stateCode, Int32 officeLevel, String districtCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeOfficeLevelDistrictCode(DateTime newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByStateCodeOfficeLevelDistrictCode(Decimal newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByStateCodeOfficeLevelDistrictCode(Decimal newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeOfficeLevelDistrictCode(Column _column, object newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByStateCodeLocalKey(Decimal newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByStateCodeLocalKey(Decimal newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeLevelStateCodeCountyCode(Int32 officeLevel, String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeLevelStateCodeCountyCode(Column _column, Int32 officeLevel, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByOfficeLevelStateCodeCountyCode(Int32 officeLevel, String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByOfficeLevelStateCodeCountyCode(String newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeLevelStateCodeCountyCode(DateTime newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByOfficeLevelStateCodeCountyCode(Int32 newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByOfficeLevelStateCodeCountyCode(Decimal newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByOfficeLevelStateCodeCountyCode(Decimal newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableByOfficeLevelStateCodeCountyCode(Boolean newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeLevelStateCodeCountyCode(Column _column, object newValue, Int32 officeLevel, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeLevelStateCodeCountyCode(Int32 officeLevel, String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByStateCodeCountyCode(Decimal newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByStateCodeCountyCode(Decimal newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeLevelStateCodeLocalKey(Int32 officeLevel, String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeLevelStateCodeLocalKey(Column _column, Int32 officeLevel, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByOfficeLevelStateCodeLocalKey(Int32 officeLevel, String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions,PrimaryAdRate,GeneralAdRate,IsVirtual,Undeletable FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateIdByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Id=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET LocalKey=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPrimaryRunningMateOfficeByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsPrimaryRunningMateOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByOfficeLevelStateCodeLocalKey(String newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeLevelStateCodeLocalKey(DateTime newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByOfficeLevelStateCodeLocalKey(Int32 newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryAdRateByOfficeLevelStateCodeLocalKey(Decimal newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralAdRateByOfficeLevelStateCodeLocalKey(Decimal newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET GeneralAdRate=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVirtualByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET IsVirtual=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUndeletableByOfficeLevelStateCodeLocalKey(Boolean newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET Undeletable=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeLevelStateCodeLocalKey(Column _column, object newValue, Int32 officeLevel, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeLevelStateCodeLocalKey(Int32 officeLevel, String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE OfficeLevel=@OfficeLevel AND StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,Incumbents,IsVacant FROM Offices";
        }
      }

      public static OfficesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,Incumbents,IsVacant FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheData(String officeKey, int commandTimeout = -1)
      {
        return GetCacheDataByOfficeKey(officeKey, commandTimeout);
      }

      public static OfficesTable GetCacheDataByIsInactiveIsOnlyForPrimariesOfficeLevel(Boolean isInactive, Boolean isOnlyForPrimaries, Int32 officeLevel, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE IsInactive=@IsInactive AND IsOnlyForPrimaries=@IsOnlyForPrimaries AND OfficeLevel=@OfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheDataByIsInactiveIsOnlyForPrimariesOfficeLevelStateCode(Boolean isInactive, Boolean isOnlyForPrimaries, Int32 officeLevel, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,IsPrimaryRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE IsInactive=@IsInactive AND IsOnlyForPrimaries=@IsOnlyForPrimaries AND OfficeLevel=@OfficeLevel AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static string SelectAlternateOfficeLevelUpdateCommandText
      {
        get
        {
          return "SELECT OfficeKey,OfficeLevel,AlternateOfficeLevel FROM Offices";
        }
      }

      public static OfficesTable GetAllAlternateOfficeLevelUpdateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,OfficeLevel,AlternateOfficeLevel FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.AlternateOfficeLevelUpdate);
      }

      public static string SelectGeneralElectionCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,DistrictCode,OfficeLevel FROM Offices";
        }
      }

      public static OfficesTable GetAllGeneralElectionData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,DistrictCode,OfficeLevel FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.GeneralElection);
      }

      public static string SelectPositionsCommandText
      {
        get
        {
          return "SELECT Incumbents,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices";
        }
      }

      public static OfficesTable GetAllPositionsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Incumbents,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.Positions);
      }

      public static OfficesTable GetPositionsDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Incumbents,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.Positions);
      }

      public static string GetSelectCommandText(OfficesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesTable.ColumnSet.All:
            return SelectAllCommandText;

          case OfficesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case OfficesTable.ColumnSet.AlternateOfficeLevelUpdate:
            return SelectAlternateOfficeLevelUpdateCommandText;

          case OfficesTable.ColumnSet.GeneralElection:
            return SelectGeneralElectionCommandText;

          case OfficesTable.ColumnSet.Positions:
            return SelectPositionsCommandText;

          default:
            return null;
        }
      }

      static Offices()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Offices

    #region vote.OfficesAdminReportView

    public partial class OfficesAdminReportViewRow : DataRow
    {
      internal OfficesAdminReportViewRow(DataRowBuilder rb) : base(rb) {}

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Boolean IsInactive
      {
        get { return (Boolean) this["IsInactive"]; }
        set { this["IsInactive"] = value; }
      }

      public Int32 Incumbents
      {
        get { return (Int32) this["Incumbents"]; }
        set { this["Incumbents"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 OfficeOrderWithinLevel
      {
        get { return (Int32) this["OfficeOrderWithinLevel"]; }
        set { this["OfficeOrderWithinLevel"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public String VoteInstructions
      {
        get { return this["VoteInstructions"] as String; }
        set { if (value == null) this["VoteInstructions"] = DBNull.Value; else this["VoteInstructions"] = value; }
      }

      public String WriteInInstructions
      {
        get { return this["WriteInInstructions"] as String; }
        set { if (value == null) this["WriteInInstructions"] = DBNull.Value; else this["WriteInInstructions"] = value; }
      }

      public String WriteInWording
      {
        get { return this["WriteInWording"] as String; }
        set { if (value == null) this["WriteInWording"] = DBNull.Value; else this["WriteInWording"] = value; }
      }

      public Int32 WriteInLines
      {
        get { return (Int32) this["WriteInLines"]; }
        set { this["WriteInLines"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesAdminReportViewTable : TypedTableBase<OfficesAdminReportViewRow>
    {
      public OfficesAdminReportViewRow this[int index] { get { return (OfficesAdminReportViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesAdminReportViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesAdminReportViewTable(); }

      new public OfficesAdminReportViewRow NewRow() { return (OfficesAdminReportViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesAdminReportViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesAdminReportViewRow); }

      public void RemoveRow(OfficesAdminReportViewRow row) { this.Rows.Remove(row); }

      public OfficesAdminReportViewRow NewRow(String officeKey, String stateCode, String countyCode, String localKey, String districtCode, Boolean isInactive, Int32 incumbents, Int32 officeLevel, Int32 officeOrderWithinLevel, String officeLine1, String officeLine2, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, String localDistrict)
      {
        OfficesAdminReportViewRow row = NewRow();
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.IsInactive = isInactive;
        row.Incumbents = incumbents;
        row.OfficeLevel = officeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.VoteInstructions = voteInstructions;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        row.LocalDistrict = localDistrict;
        return row;
      }

      public void AddRow(String officeKey, String stateCode, String countyCode, String localKey, String districtCode, Boolean isInactive, Int32 incumbents, Int32 officeLevel, Int32 officeOrderWithinLevel, String officeLine1, String officeLine2, String voteInstructions, String writeInInstructions, String writeInWording, Int32 writeInLines, String localDistrict)
      {
        OfficesAdminReportViewRow row = NewRow(officeKey, stateCode, countyCode, localKey, districtCode, isInactive, incumbents, officeLevel, officeOrderWithinLevel, officeLine1, officeLine2, voteInstructions, writeInInstructions, writeInWording, writeInLines, localDistrict);
        AddRow(row);
      }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn IsInactiveColumn { get { return this.Columns["IsInactive"]; } }

      public DataColumn IncumbentsColumn { get { return this.Columns["Incumbents"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn OfficeOrderWithinLevelColumn { get { return this.Columns["OfficeOrderWithinLevel"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn VoteInstructionsColumn { get { return this.Columns["VoteInstructions"]; } }

      public DataColumn WriteInInstructionsColumn { get { return this.Columns["WriteInInstructions"]; } }

      public DataColumn WriteInWordingColumn { get { return this.Columns["WriteInWording"]; } }

      public DataColumn WriteInLinesColumn { get { return this.Columns["WriteInLines"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInactive", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeOrderWithinLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInLines", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
      }

      public OfficesAdminReportViewTable() : this(ColumnSet.All) { }

      public OfficesAdminReportViewTable(ColumnSet columnSet)
      {
        this.TableName = "OfficesAdminReportView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OfficesAdminReportViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficesAdminReportView
    {
      public const string TableName = "OfficesAdminReportView";

      public enum Column { OfficeKey, StateCode, CountyCode, LocalKey, DistrictCode, IsInactive, Incumbents, OfficeLevel, OfficeOrderWithinLevel, OfficeLine1, OfficeLine2, VoteInstructions, WriteInInstructions, WriteInWording, WriteInLines, LocalDistrict }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.IsInactive, "IsInactive" },
        { Column.Incumbents, "Incumbents" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.OfficeOrderWithinLevel, "OfficeOrderWithinLevel" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.VoteInstructions, "VoteInstructions" },
        { Column.WriteInInstructions, "WriteInInstructions" },
        { Column.WriteInWording, "WriteInWording" },
        { Column.WriteInLines, "WriteInLines" },
        { Column.LocalDistrict, "LocalDistrict" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesAdminReportView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,CountyCode,LocalKey,DistrictCode,IsInactive,Incumbents,OfficeLevel,OfficeOrderWithinLevel,OfficeLine1,OfficeLine2,VoteInstructions,WriteInInstructions,WriteInWording,WriteInLines,LocalDistrict FROM OfficesAdminReportView";
        }
      }

      public static OfficesAdminReportViewTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesAdminReportViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesAdminReportViewTable FillTable(DbCommand command, OfficesAdminReportViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesAdminReportViewTable table = new OfficesAdminReportViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string IsInactiveColumnName { get { return "IsInactive"; } }

      public static string IncumbentsColumnName { get { return "Incumbents"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string OfficeOrderWithinLevelColumnName { get { return "OfficeOrderWithinLevel"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string VoteInstructionsColumnName { get { return "VoteInstructions"; } }

      public static string WriteInInstructionsColumnName { get { return "WriteInInstructions"; } }

      public static string WriteInWordingColumnName { get { return "WriteInWording"; } }

      public static string WriteInLinesColumnName { get { return "WriteInLines"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int VoteInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInWordingMaxLength { get { return int.MaxValue; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static string GetSelectCommandText(OfficesAdminReportViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesAdminReportViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OfficesAdminReportView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficesAdminReportView

    #region vote.OfficesOfficials

    public partial class OfficesOfficialsRow : DataRow
    {
      internal OfficesOfficialsRow(DataRowBuilder rb) : base(rb) {}

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesOfficialsTable : TypedTableBase<OfficesOfficialsRow>
    {
      public OfficesOfficialsRow this[int index] { get { return (OfficesOfficialsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesOfficialsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesOfficialsTable(); }

      new public OfficesOfficialsRow NewRow() { return (OfficesOfficialsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesOfficialsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesOfficialsRow); }

      public void RemoveRow(OfficesOfficialsRow row) { this.Rows.Remove(row); }

      public OfficesOfficialsRow NewRow(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        OfficesOfficialsRow row = NewRow();
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.DistrictCode = districtCode;
        row.DataLastUpdated = dataLastUpdated;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        OfficesOfficialsRow row = NewRow(officeKey, politicianKey, runningMateKey, stateCode, countyCode, localKey, districtCode, dataLastUpdated, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All, OfficeKey, PoliticianKeys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPoliticianKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficesOfficialsTable() : this(ColumnSet.All) { }

      public OfficesOfficialsTable(ColumnSet columnSet)
      {
        this.TableName = "OfficesOfficials";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKey:
            InitOfficeKeyColumns();
            break;

          case ColumnSet.PoliticianKeys:
            InitPoliticianKeysColumns();
            break;
        }
      }

      protected OfficesOfficialsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficesOfficials
    {
      public const string TableName = "OfficesOfficials";

      public enum Column { OfficeKey, PoliticianKey, RunningMateKey, StateCode, CountyCode, LocalKey, DistrictCode, DataLastUpdated, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localKey, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OfficesOfficials (OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName) VALUES (@OfficeKey,@PoliticianKey,@RunningMateKey,@StateCode,@CountyCode,@LocalKey,@DistrictCode,@DataLastUpdated,@UserSecurity,@UserName)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static OfficesOfficialsTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesOfficialsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesOfficialsTable FillTable(DbCommand command, OfficesOfficialsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesOfficialsTable table = new OfficesOfficialsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OfficesOfficialsTable table, OfficesOfficialsTable.ColumnSet columnSet = OfficesOfficialsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int UserSecurityMaxLength { get { return 12; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String officeKey)
      {
        return GetColumnByOfficeKey(_column, officeKey);
      }

      public static OfficesOfficialsTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static OfficesOfficialsTable GetData(String officeKey, int commandTimeout = -1)
      {
        return GetDataByOfficeKey(officeKey, commandTimeout);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String officeKey)
      {
        return UpdateOfficeKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String officeKey)
      {
        return UpdatePoliticianKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKey(String newValue, String officeKey)
      {
        return UpdateRunningMateKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String officeKey)
      {
        return UpdateStateCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String officeKey)
      {
        return UpdateCountyCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateLocalKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String officeKey)
      {
        return UpdateLocalKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCode(String newValue, String officeKey)
      {
        return UpdateDistrictCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String officeKey)
      {
        return UpdateDataLastUpdatedByOfficeKey(newValue, officeKey);
      }

      public static int UpdateUserSecurityByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurity(String newValue, String officeKey)
      {
        return UpdateUserSecurityByOfficeKey(newValue, officeKey);
      }

      public static int UpdateUserNameByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserName(String newValue, String officeKey)
      {
        return UpdateUserNameByOfficeKey(newValue, officeKey);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String officeKey)
      {
         return UpdateColumnByOfficeKey(_column, newValue, officeKey);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool OfficeKeyPoliticianKeyExists(String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByOfficeKeyPoliticianKey(Column _column, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByOfficeKeyPoliticianKey(String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeKeyPoliticianKey(DateTime newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKeyPoliticianKey(Column _column, object newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKeyPoliticianKey(String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByRunningMateKey(Column _column, String runningMateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByRunningMateKey(DateTime newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByRunningMateKey(String newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByRunningMateKey(Column _column, object newValue, String runningMateKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE RunningMateKey=@RunningMateKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeLocalKey(DateTime newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalKey,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeCountyCode(DateTime newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeyCommandText
      {
        get
        {
          return "SELECT OfficeKey FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllOfficeKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.OfficeKey);
      }

      public static void UpdateOfficeKey(OfficesOfficialsTable table)
      {
        UpdateOfficeKey(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKey(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.OfficeKey, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectPoliticianKeysCommandText
      {
        get
        {
          return "SELECT PoliticianKey FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllPoliticianKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.PoliticianKeys);
      }

      public static void UpdatePoliticianKeys(OfficesOfficialsTable table)
      {
        UpdatePoliticianKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdatePoliticianKeys(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.PoliticianKeys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static OfficesOfficialsTable GetPoliticianKeysDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.PoliticianKeys);
      }

      public static OfficesOfficialsTable GetPoliticianKeysData(String officeKey, int commandTimeout = -1)
      {
        return GetPoliticianKeysDataByOfficeKey(officeKey, commandTimeout);
      }

      public static string GetSelectCommandText(OfficesOfficialsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesOfficialsTable.ColumnSet.All:
            return SelectAllCommandText;

          case OfficesOfficialsTable.ColumnSet.OfficeKey:
            return SelectOfficeKeyCommandText;

          case OfficesOfficialsTable.ColumnSet.PoliticianKeys:
            return SelectPoliticianKeysCommandText;

          default:
            return null;
        }
      }

      static OfficesOfficials()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficesOfficials

    #region vote.OrganizationAssignedEmailTags

    public partial class OrganizationAssignedEmailTagsRow : DataRow
    {
      internal OrganizationAssignedEmailTagsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OrgId
      {
        get { return (Int32) this["OrgId"]; }
        set { this["OrgId"] = value; }
      }

      public Int32 EmailTagId
      {
        get { return (Int32) this["EmailTagId"]; }
        set { this["EmailTagId"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationAssignedEmailTagsTable : TypedTableBase<OrganizationAssignedEmailTagsRow>
    {
      public OrganizationAssignedEmailTagsRow this[int index] { get { return (OrganizationAssignedEmailTagsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationAssignedEmailTagsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationAssignedEmailTagsTable(); }

      new public OrganizationAssignedEmailTagsRow NewRow() { return (OrganizationAssignedEmailTagsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationAssignedEmailTagsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationAssignedEmailTagsRow); }

      public void RemoveRow(OrganizationAssignedEmailTagsRow row) { this.Rows.Remove(row); }

      public OrganizationAssignedEmailTagsRow NewRow(Int32 orgId, Int32 emailTagId)
      {
        OrganizationAssignedEmailTagsRow row = NewRow();
        row.OrgId = orgId;
        row.EmailTagId = emailTagId;
        return row;
      }

      public void AddRow(Int32 orgId, Int32 emailTagId)
      {
        OrganizationAssignedEmailTagsRow row = NewRow(orgId, emailTagId);
        AddRow(row);
      }

      public DataColumn OrgIdColumn { get { return this.Columns["OrgId"]; } }

      public DataColumn EmailTagIdColumn { get { return this.Columns["EmailTagId"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrgId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailTagId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationAssignedEmailTagsTable() : this(ColumnSet.All) { }

      public OrganizationAssignedEmailTagsTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationAssignedEmailTags";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationAssignedEmailTagsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationAssignedEmailTags
    {
      public const string TableName = "OrganizationAssignedEmailTags";

      public enum Column { OrgId, EmailTagId }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrgId, "OrgId" },
        { Column.EmailTagId, "EmailTagId" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationAssignedEmailTags";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 orgId, Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationAssignedEmailTags (OrgId,EmailTagId) VALUES (@OrgId,@EmailTagId)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrgId,EmailTagId FROM OrganizationAssignedEmailTags";
        }
      }

      public static OrganizationAssignedEmailTagsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,EmailTagId FROM OrganizationAssignedEmailTags";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationAssignedEmailTagsTable.ColumnSet.All);
      }

      public static OrganizationAssignedEmailTagsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationAssignedEmailTagsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationAssignedEmailTagsTable FillTable(DbCommand command, OrganizationAssignedEmailTagsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationAssignedEmailTagsTable table = new OrganizationAssignedEmailTagsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationAssignedEmailTagsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationAssignedEmailTagsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationAssignedEmailTagsTable table, OrganizationAssignedEmailTagsTable.ColumnSet columnSet = OrganizationAssignedEmailTagsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OrgIdColumnName { get { return "OrgId"; } }

      public static string EmailTagIdColumnName { get { return "EmailTagId"; } }

      public static bool OrgIdEmailTagIdExists(Int32 orgId, Int32 emailTagId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationAssignedEmailTags WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByOrgIdEmailTagId(Column _column, Int32 orgId, Int32 emailTagId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationAssignedEmailTags WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationAssignedEmailTagsTable GetDataByOrgIdEmailTagId(Int32 orgId, Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,EmailTagId FROM OrganizationAssignedEmailTags WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return FillTable(cmd, OrganizationAssignedEmailTagsTable.ColumnSet.All);
      }

      public static int UpdateOrgIdByOrgIdEmailTagId(Int32 newValue, Int32 orgId, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET OrgId=@newValue WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagIdByOrgIdEmailTagId(Int32 newValue, Int32 orgId, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET EmailTagId=@newValue WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgIdEmailTagId(Column _column, object newValue, Int32 orgId, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET {0}=@newValue WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgIdEmailTagId(Int32 orgId, Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationAssignedEmailTags WHERE OrgId=@OrgId AND EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmailTagId(Int32 emailTagId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationAssignedEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmailTagId(Column _column, Int32 emailTagId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationAssignedEmailTags WHERE EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationAssignedEmailTagsTable GetDataByEmailTagId(Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,EmailTagId FROM OrganizationAssignedEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return FillTable(cmd, OrganizationAssignedEmailTagsTable.ColumnSet.All);
      }

      public static int UpdateOrgIdByEmailTagId(Int32 newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET OrgId=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagIdByEmailTagId(Int32 newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET EmailTagId=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailTagId(Column _column, object newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationAssignedEmailTags SET {0}=@newValue WHERE EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmailTagId(Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationAssignedEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationAssignedEmailTagsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationAssignedEmailTagsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationAssignedEmailTags()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationAssignedEmailTags

    #region vote.OrganizationContacts

    public partial class OrganizationContactsRow : DataRow
    {
      internal OrganizationContactsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 ContactId
      {
        get { return (Int32) this["ContactId"]; }
        set { this["ContactId"] = value; }
      }

      public Int32 OrgId
      {
        get { return (Int32) this["OrgId"]; }
        set { this["OrgId"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public Int32 ContactOrder
      {
        get { return (Int32) this["ContactOrder"]; }
        set { this["ContactOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationContactsTable : TypedTableBase<OrganizationContactsRow>
    {
      public OrganizationContactsRow this[int index] { get { return (OrganizationContactsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationContactsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationContactsTable(); }

      new public OrganizationContactsRow NewRow() { return (OrganizationContactsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationContactsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationContactsRow); }

      public void RemoveRow(OrganizationContactsRow row) { this.Rows.Remove(row); }

      public OrganizationContactsRow NewRow(Int32 contactId, Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder)
      {
        OrganizationContactsRow row = NewRow();
        row.ContactId = contactId;
        row.OrgId = orgId;
        row.Contact = contact;
        row.Email = email;
        row.Phone = phone;
        row.Title = title;
        row.ContactOrder = contactOrder;
        return row;
      }

      public void AddRow(Int32 contactId, Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder)
      {
        OrganizationContactsRow row = NewRow(contactId, orgId, contact, email, phone, title, contactOrder);
        AddRow(row);
      }

      public OrganizationContactsRow NewRow(Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder)
      {
        OrganizationContactsRow row = NewRow();
        row.OrgId = orgId;
        row.Contact = contact;
        row.Email = email;
        row.Phone = phone;
        row.Title = title;
        row.ContactOrder = contactOrder;
        return row;
      }

      public void AddRow(Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder)
      {
        OrganizationContactsRow row = NewRow(orgId, contact, email, phone, title, contactOrder);
        AddRow(row);
      }

      public DataColumn ContactIdColumn { get { return this.Columns["ContactId"]; } }

      public DataColumn OrgIdColumn { get { return this.Columns["OrgId"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn ContactOrderColumn { get { return this.Columns["ContactOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ContactId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationContactsTable() : this(ColumnSet.All) { }

      public OrganizationContactsTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationContacts";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationContactsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationContacts
    {
      public const string TableName = "OrganizationContacts";

      public enum Column { ContactId, OrgId, Contact, Email, Phone, Title, ContactOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ContactId, "ContactId" },
        { Column.OrgId, "OrgId" },
        { Column.Contact, "Contact" },
        { Column.Email, "Email" },
        { Column.Phone, "Phone" },
        { Column.Title, "Title" },
        { Column.ContactOrder, "ContactOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationContacts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 contactId, Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationContacts (ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder) VALUES (@ContactId,@OrgId,@Contact,@Email,@Phone,@Title,@ContactOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "Contact", contact);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Title", title);
        VoteDb.AddCommandParameter(cmd, "ContactOrder", contactOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgId, String contact, String email, String phone, String title, Int32 contactOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationContacts (OrgId,Contact,Email,Phone,Title,ContactOrder) VALUES (@OrgId,@Contact,@Email,@Phone,@Title,@ContactOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "Contact", contact);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Title", title);
        VoteDb.AddCommandParameter(cmd, "ContactOrder", contactOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder FROM OrganizationContacts";
        }
      }

      public static OrganizationContactsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder FROM OrganizationContacts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationContactsTable.ColumnSet.All);
      }

      public static OrganizationContactsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationContactsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationContactsTable FillTable(DbCommand command, OrganizationContactsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationContactsTable table = new OrganizationContactsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationContactsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationContactsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationContactsTable table, OrganizationContactsTable.ColumnSet columnSet = OrganizationContactsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ContactIdColumnName { get { return "ContactId"; } }

      public static string OrgIdColumnName { get { return "OrgId"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string ContactOrderColumnName { get { return "ContactOrder"; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PhoneMaxLength { get { return 255; } }

      public static int TitleMaxLength { get { return int.MaxValue; } }

      public static bool ContactIdExists(Int32 contactId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgIdByContactId(Int32 contactId)
      {
        return _GetOrgIdByContactId(contactId, null);
      }

      public static Int32 GetOrgIdByContactId(Int32 contactId, Int32 defaultValue)
      {
        return _GetOrgIdByContactId(contactId, defaultValue).Value;
      }

      private static Int32? _GetOrgIdByContactId(Int32 contactId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgId FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetContactByContactId(Int32 contactId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailByContactId(Int32 contactId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneByContactId(Int32 contactId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitleByContactId(Int32 contactId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetContactOrderByContactId(Int32 contactId)
      {
        return _GetContactOrderByContactId(contactId, null);
      }

      public static Int32 GetContactOrderByContactId(Int32 contactId, Int32 defaultValue)
      {
        return _GetContactOrderByContactId(contactId, defaultValue).Value;
      }

      private static Int32? _GetContactOrderByContactId(Int32 contactId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ContactOrder FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByContactId(Column _column, Int32 contactId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationContacts WHERE ContactId=@ContactId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationContactsTable GetDataByContactId(Int32 contactId, int commandTimeout = -1)
      {
        string cmdText = "SELECT ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        return FillTable(cmd, OrganizationContactsTable.ColumnSet.All);
      }

      public static int UpdateContactIdByContactId(Int32 newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactId=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByContactId(Int32 newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET OrgId=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByContactId(String newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Contact=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByContactId(String newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Email=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByContactId(String newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Phone=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByContactId(String newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Title=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactOrderByContactId(Int32 newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactOrder=@newValue WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByContactId(Column _column, object newValue, Int32 contactId)
      {
        string cmdText = "UPDATE OrganizationContacts SET {0}=@newValue WHERE ContactId=@ContactId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByContactId(Int32 contactId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationContacts WHERE ContactId=@ContactId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ContactId", contactId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationContacts WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgId(Column _column, Int32 orgId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationContacts WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationContactsTable GetDataByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "SELECT ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder FROM OrganizationContacts WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return FillTable(cmd, OrganizationContactsTable.ColumnSet.All);
      }

      public static int UpdateContactIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET OrgId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Contact=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Email=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Phone=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET Title=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactOrderByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactOrder=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgId(Column _column, object newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationContacts SET {0}=@newValue WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationContacts WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationContacts WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationContacts WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationContactsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT ContactId,OrgId,Contact,Email,Phone,Title,ContactOrder FROM OrganizationContacts WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, OrganizationContactsTable.ColumnSet.All);
      }

      public static int UpdateContactIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactId=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET OrgId=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET Contact=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET Phone=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET Title=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactOrderByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET ContactOrder=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE OrganizationContacts SET {0}=@newValue WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationContacts WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationContactsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationContactsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationContacts()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationContacts

    #region vote.OrganizationEmailTags

    public partial class OrganizationEmailTagsRow : DataRow
    {
      internal OrganizationEmailTagsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 EmailTagId
      {
        get { return (Int32) this["EmailTagId"]; }
        set { this["EmailTagId"] = value; }
      }

      public Int32 OrgTypeId
      {
        get { return (Int32) this["OrgTypeId"]; }
        set { this["OrgTypeId"] = value; }
      }

      public String EmailTag
      {
        get { return this["EmailTag"] as String; }
        set { if (value == null) this["EmailTag"] = DBNull.Value; else this["EmailTag"] = value; }
      }

      public Int32 EmailTagOrder
      {
        get { return (Int32) this["EmailTagOrder"]; }
        set { this["EmailTagOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationEmailTagsTable : TypedTableBase<OrganizationEmailTagsRow>
    {
      public OrganizationEmailTagsRow this[int index] { get { return (OrganizationEmailTagsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationEmailTagsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationEmailTagsTable(); }

      new public OrganizationEmailTagsRow NewRow() { return (OrganizationEmailTagsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationEmailTagsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationEmailTagsRow); }

      public void RemoveRow(OrganizationEmailTagsRow row) { this.Rows.Remove(row); }

      public OrganizationEmailTagsRow NewRow(Int32 emailTagId, Int32 orgTypeId, String emailTag, Int32 emailTagOrder)
      {
        OrganizationEmailTagsRow row = NewRow();
        row.EmailTagId = emailTagId;
        row.OrgTypeId = orgTypeId;
        row.EmailTag = emailTag;
        row.EmailTagOrder = emailTagOrder;
        return row;
      }

      public void AddRow(Int32 emailTagId, Int32 orgTypeId, String emailTag, Int32 emailTagOrder)
      {
        OrganizationEmailTagsRow row = NewRow(emailTagId, orgTypeId, emailTag, emailTagOrder);
        AddRow(row);
      }

      public OrganizationEmailTagsRow NewRow(Int32 orgTypeId, String emailTag, Int32 emailTagOrder)
      {
        OrganizationEmailTagsRow row = NewRow();
        row.OrgTypeId = orgTypeId;
        row.EmailTag = emailTag;
        row.EmailTagOrder = emailTagOrder;
        return row;
      }

      public void AddRow(Int32 orgTypeId, String emailTag, Int32 emailTagOrder)
      {
        OrganizationEmailTagsRow row = NewRow(orgTypeId, emailTag, emailTagOrder);
        AddRow(row);
      }

      public DataColumn EmailTagIdColumn { get { return this.Columns["EmailTagId"]; } }

      public DataColumn OrgTypeIdColumn { get { return this.Columns["OrgTypeId"]; } }

      public DataColumn EmailTagColumn { get { return this.Columns["EmailTag"]; } }

      public DataColumn EmailTagOrderColumn { get { return this.Columns["EmailTagOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("EmailTagId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgTypeId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailTag", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailTagOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationEmailTagsTable() : this(ColumnSet.All) { }

      public OrganizationEmailTagsTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationEmailTags";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationEmailTagsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationEmailTags
    {
      public const string TableName = "OrganizationEmailTags";

      public enum Column { EmailTagId, OrgTypeId, EmailTag, EmailTagOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.EmailTagId, "EmailTagId" },
        { Column.OrgTypeId, "OrgTypeId" },
        { Column.EmailTag, "EmailTag" },
        { Column.EmailTagOrder, "EmailTagOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationEmailTags";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 emailTagId, Int32 orgTypeId, String emailTag, Int32 emailTagOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationEmailTags (EmailTagId,OrgTypeId,EmailTag,EmailTagOrder) VALUES (@EmailTagId,@OrgTypeId,@EmailTag,@EmailTagOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "EmailTag", emailTag);
        VoteDb.AddCommandParameter(cmd, "EmailTagOrder", emailTagOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgTypeId, String emailTag, Int32 emailTagOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationEmailTags (OrgTypeId,EmailTag,EmailTagOrder) VALUES (@OrgTypeId,@EmailTag,@EmailTagOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "EmailTag", emailTag);
        VoteDb.AddCommandParameter(cmd, "EmailTagOrder", emailTagOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT EmailTagId,OrgTypeId,EmailTag,EmailTagOrder FROM OrganizationEmailTags";
        }
      }

      public static OrganizationEmailTagsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailTagId,OrgTypeId,EmailTag,EmailTagOrder FROM OrganizationEmailTags";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationEmailTagsTable.ColumnSet.All);
      }

      public static OrganizationEmailTagsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationEmailTagsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationEmailTagsTable FillTable(DbCommand command, OrganizationEmailTagsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationEmailTagsTable table = new OrganizationEmailTagsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationEmailTagsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationEmailTagsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationEmailTagsTable table, OrganizationEmailTagsTable.ColumnSet columnSet = OrganizationEmailTagsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EmailTagIdColumnName { get { return "EmailTagId"; } }

      public static string OrgTypeIdColumnName { get { return "OrgTypeId"; } }

      public static string EmailTagColumnName { get { return "EmailTag"; } }

      public static string EmailTagOrderColumnName { get { return "EmailTagOrder"; } }

      public static int EmailTagMaxLength { get { return 255; } }

      public static bool EmailTagIdExists(Int32 emailTagId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgTypeIdByEmailTagId(Int32 emailTagId)
      {
        return _GetOrgTypeIdByEmailTagId(emailTagId, null);
      }

      public static Int32 GetOrgTypeIdByEmailTagId(Int32 emailTagId, Int32 defaultValue)
      {
        return _GetOrgTypeIdByEmailTagId(emailTagId, defaultValue).Value;
      }

      private static Int32? _GetOrgTypeIdByEmailTagId(Int32 emailTagId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgTypeId FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetEmailTagByEmailTagId(Int32 emailTagId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailTag FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetEmailTagOrderByEmailTagId(Int32 emailTagId)
      {
        return _GetEmailTagOrderByEmailTagId(emailTagId, null);
      }

      public static Int32 GetEmailTagOrderByEmailTagId(Int32 emailTagId, Int32 defaultValue)
      {
        return _GetEmailTagOrderByEmailTagId(emailTagId, defaultValue).Value;
      }

      private static Int32? _GetEmailTagOrderByEmailTagId(Int32 emailTagId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailTagOrder FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByEmailTagId(Column _column, Int32 emailTagId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationEmailTagsTable GetDataByEmailTagId(Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailTagId,OrgTypeId,EmailTag,EmailTagOrder FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return FillTable(cmd, OrganizationEmailTagsTable.ColumnSet.All);
      }

      public static int UpdateEmailTagIdByEmailTagId(Int32 newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTagId=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeIdByEmailTagId(Int32 newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET OrgTypeId=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagByEmailTagId(String newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTag=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagOrderByEmailTagId(Int32 newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTagOrder=@newValue WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailTagId(Column _column, object newValue, Int32 emailTagId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET {0}=@newValue WHERE EmailTagId=@EmailTagId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmailTagId(Int32 emailTagId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationEmailTags WHERE EmailTagId=@EmailTagId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailTagId", emailTagId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationEmailTags WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgTypeId(Column _column, Int32 orgTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationEmailTags WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationEmailTagsTable GetDataByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailTagId,OrgTypeId,EmailTag,EmailTagOrder FROM OrganizationEmailTags WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return FillTable(cmd, OrganizationEmailTagsTable.ColumnSet.All);
      }

      public static int UpdateEmailTagIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTagId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET OrgTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTag=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailTagOrderByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET EmailTagOrder=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgTypeId(Column _column, object newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationEmailTags SET {0}=@newValue WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationEmailTags WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationEmailTagsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationEmailTagsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationEmailTags()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationEmailTags

    #region vote.OrganizationIdeologies

    public partial class OrganizationIdeologiesRow : DataRow
    {
      internal OrganizationIdeologiesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 IdeologyId
      {
        get { return (Int32) this["IdeologyId"]; }
        set { this["IdeologyId"] = value; }
      }

      public String Ideology
      {
        get { return this["Ideology"] as String; }
        set { if (value == null) this["Ideology"] = DBNull.Value; else this["Ideology"] = value; }
      }

      public Int32 IdeologyOrder
      {
        get { return (Int32) this["IdeologyOrder"]; }
        set { this["IdeologyOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationIdeologiesTable : TypedTableBase<OrganizationIdeologiesRow>
    {
      public OrganizationIdeologiesRow this[int index] { get { return (OrganizationIdeologiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationIdeologiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationIdeologiesTable(); }

      new public OrganizationIdeologiesRow NewRow() { return (OrganizationIdeologiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationIdeologiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationIdeologiesRow); }

      public void RemoveRow(OrganizationIdeologiesRow row) { this.Rows.Remove(row); }

      public OrganizationIdeologiesRow NewRow(Int32 ideologyId, String ideology, Int32 ideologyOrder)
      {
        OrganizationIdeologiesRow row = NewRow();
        row.IdeologyId = ideologyId;
        row.Ideology = ideology;
        row.IdeologyOrder = ideologyOrder;
        return row;
      }

      public void AddRow(Int32 ideologyId, String ideology, Int32 ideologyOrder)
      {
        OrganizationIdeologiesRow row = NewRow(ideologyId, ideology, ideologyOrder);
        AddRow(row);
      }

      public OrganizationIdeologiesRow NewRow(String ideology, Int32 ideologyOrder)
      {
        OrganizationIdeologiesRow row = NewRow();
        row.Ideology = ideology;
        row.IdeologyOrder = ideologyOrder;
        return row;
      }

      public void AddRow(String ideology, Int32 ideologyOrder)
      {
        OrganizationIdeologiesRow row = NewRow(ideology, ideologyOrder);
        AddRow(row);
      }

      public DataColumn IdeologyIdColumn { get { return this.Columns["IdeologyId"]; } }

      public DataColumn IdeologyColumn { get { return this.Columns["Ideology"]; } }

      public DataColumn IdeologyOrderColumn { get { return this.Columns["IdeologyOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IdeologyId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Ideology", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IdeologyOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationIdeologiesTable() : this(ColumnSet.All) { }

      public OrganizationIdeologiesTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationIdeologies";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationIdeologiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationIdeologies
    {
      public const string TableName = "OrganizationIdeologies";

      public enum Column { IdeologyId, Ideology, IdeologyOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IdeologyId, "IdeologyId" },
        { Column.Ideology, "Ideology" },
        { Column.IdeologyOrder, "IdeologyOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationIdeologies";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 ideologyId, String ideology, Int32 ideologyOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationIdeologies (IdeologyId,Ideology,IdeologyOrder) VALUES (@IdeologyId,@Ideology,@IdeologyOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "Ideology", ideology);
        VoteDb.AddCommandParameter(cmd, "IdeologyOrder", ideologyOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String ideology, Int32 ideologyOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationIdeologies (Ideology,IdeologyOrder) VALUES (@Ideology,@IdeologyOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Ideology", ideology);
        VoteDb.AddCommandParameter(cmd, "IdeologyOrder", ideologyOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IdeologyId,Ideology,IdeologyOrder FROM OrganizationIdeologies";
        }
      }

      public static OrganizationIdeologiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IdeologyId,Ideology,IdeologyOrder FROM OrganizationIdeologies";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationIdeologiesTable.ColumnSet.All);
      }

      public static OrganizationIdeologiesTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationIdeologiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationIdeologiesTable FillTable(DbCommand command, OrganizationIdeologiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationIdeologiesTable table = new OrganizationIdeologiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationIdeologiesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationIdeologiesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationIdeologiesTable table, OrganizationIdeologiesTable.ColumnSet columnSet = OrganizationIdeologiesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdeologyIdColumnName { get { return "IdeologyId"; } }

      public static string IdeologyColumnName { get { return "Ideology"; } }

      public static string IdeologyOrderColumnName { get { return "IdeologyOrder"; } }

      public static int IdeologyMaxLength { get { return 255; } }

      public static bool IdeologyIdExists(Int32 ideologyId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIdeologyByIdeologyId(Int32 ideologyId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Ideology FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetIdeologyOrderByIdeologyId(Int32 ideologyId)
      {
        return _GetIdeologyOrderByIdeologyId(ideologyId, null);
      }

      public static Int32 GetIdeologyOrderByIdeologyId(Int32 ideologyId, Int32 defaultValue)
      {
        return _GetIdeologyOrderByIdeologyId(ideologyId, defaultValue).Value;
      }

      private static Int32? _GetIdeologyOrderByIdeologyId(Int32 ideologyId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IdeologyOrder FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByIdeologyId(Column _column, Int32 ideologyId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationIdeologiesTable GetDataByIdeologyId(Int32 ideologyId, int commandTimeout = -1)
      {
        string cmdText = "SELECT IdeologyId,Ideology,IdeologyOrder FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        return FillTable(cmd, OrganizationIdeologiesTable.ColumnSet.All);
      }

      public static int UpdateIdeologyIdByIdeologyId(Int32 newValue, Int32 ideologyId)
      {
        string cmdText = "UPDATE OrganizationIdeologies SET IdeologyId=@newValue WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdeologyByIdeologyId(String newValue, Int32 ideologyId)
      {
        string cmdText = "UPDATE OrganizationIdeologies SET Ideology=@newValue WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdeologyOrderByIdeologyId(Int32 newValue, Int32 ideologyId)
      {
        string cmdText = "UPDATE OrganizationIdeologies SET IdeologyOrder=@newValue WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIdeologyId(Column _column, object newValue, Int32 ideologyId)
      {
        string cmdText = "UPDATE OrganizationIdeologies SET {0}=@newValue WHERE IdeologyId=@IdeologyId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIdeologyId(Int32 ideologyId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationIdeologies WHERE IdeologyId=@IdeologyId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationIdeologiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationIdeologiesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationIdeologies()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationIdeologies

    #region vote.OrganizationMissionUrls

    public partial class OrganizationMissionUrlsRow : DataRow
    {
      internal OrganizationMissionUrlsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OrgMissionUrlId
      {
        get { return (Int32) this["OrgMissionUrlId"]; }
        set { this["OrgMissionUrlId"] = value; }
      }

      public Int32 OrgId
      {
        get { return (Int32) this["OrgId"]; }
        set { this["OrgId"] = value; }
      }

      public String Url
      {
        get { return this["Url"] as String; }
        set { if (value == null) this["Url"] = DBNull.Value; else this["Url"] = value; }
      }

      public Int32 UrlOrder
      {
        get { return (Int32) this["UrlOrder"]; }
        set { this["UrlOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationMissionUrlsTable : TypedTableBase<OrganizationMissionUrlsRow>
    {
      public OrganizationMissionUrlsRow this[int index] { get { return (OrganizationMissionUrlsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationMissionUrlsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationMissionUrlsTable(); }

      new public OrganizationMissionUrlsRow NewRow() { return (OrganizationMissionUrlsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationMissionUrlsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationMissionUrlsRow); }

      public void RemoveRow(OrganizationMissionUrlsRow row) { this.Rows.Remove(row); }

      public OrganizationMissionUrlsRow NewRow(Int32 orgMissionUrlId, Int32 orgId, String url, Int32 urlOrder)
      {
        OrganizationMissionUrlsRow row = NewRow();
        row.OrgMissionUrlId = orgMissionUrlId;
        row.OrgId = orgId;
        row.Url = url;
        row.UrlOrder = urlOrder;
        return row;
      }

      public void AddRow(Int32 orgMissionUrlId, Int32 orgId, String url, Int32 urlOrder)
      {
        OrganizationMissionUrlsRow row = NewRow(orgMissionUrlId, orgId, url, urlOrder);
        AddRow(row);
      }

      public OrganizationMissionUrlsRow NewRow(Int32 orgId, String url, Int32 urlOrder)
      {
        OrganizationMissionUrlsRow row = NewRow();
        row.OrgId = orgId;
        row.Url = url;
        row.UrlOrder = urlOrder;
        return row;
      }

      public void AddRow(Int32 orgId, String url, Int32 urlOrder)
      {
        OrganizationMissionUrlsRow row = NewRow(orgId, url, urlOrder);
        AddRow(row);
      }

      public DataColumn OrgMissionUrlIdColumn { get { return this.Columns["OrgMissionUrlId"]; } }

      public DataColumn OrgIdColumn { get { return this.Columns["OrgId"]; } }

      public DataColumn UrlColumn { get { return this.Columns["Url"]; } }

      public DataColumn UrlOrderColumn { get { return this.Columns["UrlOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrgMissionUrlId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Url", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationMissionUrlsTable() : this(ColumnSet.All) { }

      public OrganizationMissionUrlsTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationMissionUrls";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationMissionUrlsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationMissionUrls
    {
      public const string TableName = "OrganizationMissionUrls";

      public enum Column { OrgMissionUrlId, OrgId, Url, UrlOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrgMissionUrlId, "OrgMissionUrlId" },
        { Column.OrgId, "OrgId" },
        { Column.Url, "Url" },
        { Column.UrlOrder, "UrlOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationMissionUrls";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 orgMissionUrlId, Int32 orgId, String url, Int32 urlOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationMissionUrls (OrgMissionUrlId,OrgId,Url,UrlOrder) VALUES (@OrgMissionUrlId,@OrgId,@Url,@UrlOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "UrlOrder", urlOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgId, String url, Int32 urlOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationMissionUrls (OrgId,Url,UrlOrder) VALUES (@OrgId,@Url,@UrlOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "UrlOrder", urlOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrgMissionUrlId,OrgId,Url,UrlOrder FROM OrganizationMissionUrls";
        }
      }

      public static OrganizationMissionUrlsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgMissionUrlId,OrgId,Url,UrlOrder FROM OrganizationMissionUrls";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationMissionUrlsTable.ColumnSet.All);
      }

      public static OrganizationMissionUrlsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationMissionUrlsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationMissionUrlsTable FillTable(DbCommand command, OrganizationMissionUrlsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationMissionUrlsTable table = new OrganizationMissionUrlsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationMissionUrlsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationMissionUrlsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationMissionUrlsTable table, OrganizationMissionUrlsTable.ColumnSet columnSet = OrganizationMissionUrlsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OrgMissionUrlIdColumnName { get { return "OrgMissionUrlId"; } }

      public static string OrgIdColumnName { get { return "OrgId"; } }

      public static string UrlColumnName { get { return "Url"; } }

      public static string UrlOrderColumnName { get { return "UrlOrder"; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static bool OrgMissionUrlIdExists(Int32 orgMissionUrlId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgIdByOrgMissionUrlId(Int32 orgMissionUrlId)
      {
        return _GetOrgIdByOrgMissionUrlId(orgMissionUrlId, null);
      }

      public static Int32 GetOrgIdByOrgMissionUrlId(Int32 orgMissionUrlId, Int32 defaultValue)
      {
        return _GetOrgIdByOrgMissionUrlId(orgMissionUrlId, defaultValue).Value;
      }

      private static Int32? _GetOrgIdByOrgMissionUrlId(Int32 orgMissionUrlId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgId FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetUrlByOrgMissionUrlId(Int32 orgMissionUrlId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Url FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetUrlOrderByOrgMissionUrlId(Int32 orgMissionUrlId)
      {
        return _GetUrlOrderByOrgMissionUrlId(orgMissionUrlId, null);
      }

      public static Int32 GetUrlOrderByOrgMissionUrlId(Int32 orgMissionUrlId, Int32 defaultValue)
      {
        return _GetUrlOrderByOrgMissionUrlId(orgMissionUrlId, defaultValue).Value;
      }

      private static Int32? _GetUrlOrderByOrgMissionUrlId(Int32 orgMissionUrlId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlOrder FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByOrgMissionUrlId(Column _column, Int32 orgMissionUrlId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationMissionUrlsTable GetDataByOrgMissionUrlId(Int32 orgMissionUrlId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgMissionUrlId,OrgId,Url,UrlOrder FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        return FillTable(cmd, OrganizationMissionUrlsTable.ColumnSet.All);
      }

      public static int UpdateOrgMissionUrlIdByOrgMissionUrlId(Int32 newValue, Int32 orgMissionUrlId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET OrgMissionUrlId=@newValue WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByOrgMissionUrlId(Int32 newValue, Int32 orgMissionUrlId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET OrgId=@newValue WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByOrgMissionUrlId(String newValue, Int32 orgMissionUrlId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET Url=@newValue WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlOrderByOrgMissionUrlId(Int32 newValue, Int32 orgMissionUrlId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET UrlOrder=@newValue WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgMissionUrlId(Column _column, object newValue, Int32 orgMissionUrlId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET {0}=@newValue WHERE OrgMissionUrlId=@OrgMissionUrlId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgMissionUrlId(Int32 orgMissionUrlId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationMissionUrls WHERE OrgMissionUrlId=@OrgMissionUrlId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgMissionUrlId", orgMissionUrlId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationMissionUrls WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgId(Column _column, Int32 orgId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationMissionUrls WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationMissionUrlsTable GetDataByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgMissionUrlId,OrgId,Url,UrlOrder FROM OrganizationMissionUrls WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return FillTable(cmd, OrganizationMissionUrlsTable.ColumnSet.All);
      }

      public static int UpdateOrgMissionUrlIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET OrgMissionUrlId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET OrgId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET Url=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlOrderByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET UrlOrder=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgId(Column _column, object newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationMissionUrls SET {0}=@newValue WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationMissionUrls WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationMissionUrlsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationMissionUrlsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationMissionUrls()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationMissionUrls

    #region vote.OrganizationNotes

    public partial class OrganizationNotesRow : DataRow
    {
      internal OrganizationNotesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 OrgId
      {
        get { return (Int32) this["OrgId"]; }
        set { this["OrgId"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationNotesTable : TypedTableBase<OrganizationNotesRow>
    {
      public OrganizationNotesRow this[int index] { get { return (OrganizationNotesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationNotesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationNotesTable(); }

      new public OrganizationNotesRow NewRow() { return (OrganizationNotesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationNotesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationNotesRow); }

      public void RemoveRow(OrganizationNotesRow row) { this.Rows.Remove(row); }

      public OrganizationNotesRow NewRow(Int32 id, Int32 orgId, DateTime dateStamp, String notes)
      {
        OrganizationNotesRow row = NewRow();
        row.Id = id;
        row.OrgId = orgId;
        row.DateStamp = dateStamp;
        row.Notes = notes;
        return row;
      }

      public void AddRow(Int32 id, Int32 orgId, DateTime dateStamp, String notes)
      {
        OrganizationNotesRow row = NewRow(id, orgId, dateStamp, notes);
        AddRow(row);
      }

      public OrganizationNotesRow NewRow(Int32 orgId, DateTime dateStamp, String notes)
      {
        OrganizationNotesRow row = NewRow();
        row.OrgId = orgId;
        row.DateStamp = dateStamp;
        row.Notes = notes;
        return row;
      }

      public void AddRow(Int32 orgId, DateTime dateStamp, String notes)
      {
        OrganizationNotesRow row = NewRow(orgId, dateStamp, notes);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn OrgIdColumn { get { return this.Columns["OrgId"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationNotesTable() : this(ColumnSet.All) { }

      public OrganizationNotesTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationNotes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationNotesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationNotes
    {
      public const string TableName = "OrganizationNotes";

      public enum Column { Id, OrgId, DateStamp, Notes }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.OrgId, "OrgId" },
        { Column.DateStamp, "DateStamp" },
        { Column.Notes, "Notes" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationNotes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 orgId, DateTime dateStamp, String notes, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationNotes (Id,OrgId,DateStamp,Notes) VALUES (@Id,@OrgId,@DateStamp,@Notes)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgId, DateTime dateStamp, String notes, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationNotes (OrgId,DateStamp,Notes) VALUES (@OrgId,@DateStamp,@Notes)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,OrgId,DateStamp,Notes FROM OrganizationNotes";
        }
      }

      public static OrganizationNotesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OrgId,DateStamp,Notes FROM OrganizationNotes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationNotesTable.ColumnSet.All);
      }

      public static OrganizationNotesTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationNotesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationNotesTable FillTable(DbCommand command, OrganizationNotesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationNotesTable table = new OrganizationNotesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationNotesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationNotesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationNotesTable table, OrganizationNotesTable.ColumnSet columnSet = OrganizationNotesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string OrgIdColumnName { get { return "OrgId"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgIdById(Int32 id)
      {
        return _GetOrgIdById(id, null);
      }

      public static Int32 GetOrgIdById(Int32 id, Int32 defaultValue)
      {
        return _GetOrgIdById(id, defaultValue).Value;
      }

      private static Int32? _GetOrgIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgId FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetNotesById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationNotes WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationNotesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OrgId,DateStamp,Notes FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, OrganizationNotesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE OrganizationNotes SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE OrganizationNotes SET OrgId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE OrganizationNotes SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE OrganizationNotes SET Notes=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE OrganizationNotes SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationNotes WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgId(Column _column, Int32 orgId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationNotes WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationNotesTable GetDataByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,OrgId,DateStamp,Notes FROM OrganizationNotes WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return FillTable(cmd, OrganizationNotesTable.ColumnSet.All);
      }

      public static int UpdateIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationNotes SET Id=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationNotes SET OrgId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByOrgId(DateTime newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationNotes SET DateStamp=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationNotes SET Notes=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgId(Column _column, object newValue, Int32 orgId)
      {
        string cmdText = "UPDATE OrganizationNotes SET {0}=@newValue WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationNotes WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationNotesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationNotesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationNotes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationNotes

    #region vote.OrganizationSubTypes

    public partial class OrganizationSubTypesRow : DataRow
    {
      internal OrganizationSubTypesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OrgSubTypeId
      {
        get { return (Int32) this["OrgSubTypeId"]; }
        set { this["OrgSubTypeId"] = value; }
      }

      public Int32 OrgTypeId
      {
        get { return (Int32) this["OrgTypeId"]; }
        set { this["OrgTypeId"] = value; }
      }

      public String OrgSubType
      {
        get { return this["OrgSubType"] as String; }
        set { if (value == null) this["OrgSubType"] = DBNull.Value; else this["OrgSubType"] = value; }
      }

      public Int32 OrgSubTypeOrder
      {
        get { return (Int32) this["OrgSubTypeOrder"]; }
        set { this["OrgSubTypeOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationSubTypesTable : TypedTableBase<OrganizationSubTypesRow>
    {
      public OrganizationSubTypesRow this[int index] { get { return (OrganizationSubTypesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationSubTypesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationSubTypesTable(); }

      new public OrganizationSubTypesRow NewRow() { return (OrganizationSubTypesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationSubTypesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationSubTypesRow); }

      public void RemoveRow(OrganizationSubTypesRow row) { this.Rows.Remove(row); }

      public OrganizationSubTypesRow NewRow(Int32 orgSubTypeId, Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder)
      {
        OrganizationSubTypesRow row = NewRow();
        row.OrgSubTypeId = orgSubTypeId;
        row.OrgTypeId = orgTypeId;
        row.OrgSubType = orgSubType;
        row.OrgSubTypeOrder = orgSubTypeOrder;
        return row;
      }

      public void AddRow(Int32 orgSubTypeId, Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder)
      {
        OrganizationSubTypesRow row = NewRow(orgSubTypeId, orgTypeId, orgSubType, orgSubTypeOrder);
        AddRow(row);
      }

      public OrganizationSubTypesRow NewRow(Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder)
      {
        OrganizationSubTypesRow row = NewRow();
        row.OrgTypeId = orgTypeId;
        row.OrgSubType = orgSubType;
        row.OrgSubTypeOrder = orgSubTypeOrder;
        return row;
      }

      public void AddRow(Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder)
      {
        OrganizationSubTypesRow row = NewRow(orgTypeId, orgSubType, orgSubTypeOrder);
        AddRow(row);
      }

      public DataColumn OrgSubTypeIdColumn { get { return this.Columns["OrgSubTypeId"]; } }

      public DataColumn OrgTypeIdColumn { get { return this.Columns["OrgTypeId"]; } }

      public DataColumn OrgSubTypeColumn { get { return this.Columns["OrgSubType"]; } }

      public DataColumn OrgSubTypeOrderColumn { get { return this.Columns["OrgSubTypeOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrgSubTypeId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgTypeId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgSubType", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgSubTypeOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationSubTypesTable() : this(ColumnSet.All) { }

      public OrganizationSubTypesTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationSubTypes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationSubTypesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationSubTypes
    {
      public const string TableName = "OrganizationSubTypes";

      public enum Column { OrgSubTypeId, OrgTypeId, OrgSubType, OrgSubTypeOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrgSubTypeId, "OrgSubTypeId" },
        { Column.OrgTypeId, "OrgTypeId" },
        { Column.OrgSubType, "OrgSubType" },
        { Column.OrgSubTypeOrder, "OrgSubTypeOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationSubTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 orgSubTypeId, Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationSubTypes (OrgSubTypeId,OrgTypeId,OrgSubType,OrgSubTypeOrder) VALUES (@OrgSubTypeId,@OrgTypeId,@OrgSubType,@OrgSubTypeOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgSubType", orgSubType);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeOrder", orgSubTypeOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgTypeId, String orgSubType, Int32 orgSubTypeOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationSubTypes (OrgTypeId,OrgSubType,OrgSubTypeOrder) VALUES (@OrgTypeId,@OrgSubType,@OrgSubTypeOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgSubType", orgSubType);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeOrder", orgSubTypeOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrgSubTypeId,OrgTypeId,OrgSubType,OrgSubTypeOrder FROM OrganizationSubTypes";
        }
      }

      public static OrganizationSubTypesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgSubTypeId,OrgTypeId,OrgSubType,OrgSubTypeOrder FROM OrganizationSubTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationSubTypesTable.ColumnSet.All);
      }

      public static OrganizationSubTypesTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationSubTypesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationSubTypesTable FillTable(DbCommand command, OrganizationSubTypesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationSubTypesTable table = new OrganizationSubTypesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationSubTypesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationSubTypesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationSubTypesTable table, OrganizationSubTypesTable.ColumnSet columnSet = OrganizationSubTypesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OrgSubTypeIdColumnName { get { return "OrgSubTypeId"; } }

      public static string OrgTypeIdColumnName { get { return "OrgTypeId"; } }

      public static string OrgSubTypeColumnName { get { return "OrgSubType"; } }

      public static string OrgSubTypeOrderColumnName { get { return "OrgSubTypeOrder"; } }

      public static int OrgSubTypeMaxLength { get { return 255; } }

      public static bool OrgSubTypeIdExists(Int32 orgSubTypeId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgTypeIdByOrgSubTypeId(Int32 orgSubTypeId)
      {
        return _GetOrgTypeIdByOrgSubTypeId(orgSubTypeId, null);
      }

      public static Int32 GetOrgTypeIdByOrgSubTypeId(Int32 orgSubTypeId, Int32 defaultValue)
      {
        return _GetOrgTypeIdByOrgSubTypeId(orgSubTypeId, defaultValue).Value;
      }

      private static Int32? _GetOrgTypeIdByOrgSubTypeId(Int32 orgSubTypeId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgTypeId FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetOrgSubTypeByOrgSubTypeId(Int32 orgSubTypeId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OrgSubType FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrgSubTypeOrderByOrgSubTypeId(Int32 orgSubTypeId)
      {
        return _GetOrgSubTypeOrderByOrgSubTypeId(orgSubTypeId, null);
      }

      public static Int32 GetOrgSubTypeOrderByOrgSubTypeId(Int32 orgSubTypeId, Int32 defaultValue)
      {
        return _GetOrgSubTypeOrderByOrgSubTypeId(orgSubTypeId, defaultValue).Value;
      }

      private static Int32? _GetOrgSubTypeOrderByOrgSubTypeId(Int32 orgSubTypeId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgSubTypeOrder FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByOrgSubTypeId(Column _column, Int32 orgSubTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationSubTypesTable GetDataByOrgSubTypeId(Int32 orgSubTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgSubTypeId,OrgTypeId,OrgSubType,OrgSubTypeOrder FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        return FillTable(cmd, OrganizationSubTypesTable.ColumnSet.All);
      }

      public static int UpdateOrgSubTypeIdByOrgSubTypeId(Int32 newValue, Int32 orgSubTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubTypeId=@newValue WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeIdByOrgSubTypeId(Int32 newValue, Int32 orgSubTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgTypeId=@newValue WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeByOrgSubTypeId(String newValue, Int32 orgSubTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubType=@newValue WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeOrderByOrgSubTypeId(Int32 newValue, Int32 orgSubTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubTypeOrder=@newValue WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgSubTypeId(Column _column, object newValue, Int32 orgSubTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET {0}=@newValue WHERE OrgSubTypeId=@OrgSubTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgSubTypeId(Int32 orgSubTypeId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationSubTypes WHERE OrgSubTypeId=@OrgSubTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationSubTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgTypeId(Column _column, Int32 orgTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationSubTypes WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationSubTypesTable GetDataByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgSubTypeId,OrgTypeId,OrgSubType,OrgSubTypeOrder FROM OrganizationSubTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return FillTable(cmd, OrganizationSubTypesTable.ColumnSet.All);
      }

      public static int UpdateOrgSubTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubType=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeOrderByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET OrgSubTypeOrder=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgTypeId(Column _column, object newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationSubTypes SET {0}=@newValue WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationSubTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationSubTypesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationSubTypesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationSubTypes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationSubTypes

    #region vote.OrganizationTypes

    public partial class OrganizationTypesRow : DataRow
    {
      internal OrganizationTypesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OrgTypeId
      {
        get { return (Int32) this["OrgTypeId"]; }
        set { this["OrgTypeId"] = value; }
      }

      public String OrgType
      {
        get { return this["OrgType"] as String; }
        set { if (value == null) this["OrgType"] = DBNull.Value; else this["OrgType"] = value; }
      }

      public Int32 OrgTypeOrder
      {
        get { return (Int32) this["OrgTypeOrder"]; }
        set { this["OrgTypeOrder"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationTypesTable : TypedTableBase<OrganizationTypesRow>
    {
      public OrganizationTypesRow this[int index] { get { return (OrganizationTypesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationTypesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationTypesTable(); }

      new public OrganizationTypesRow NewRow() { return (OrganizationTypesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationTypesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationTypesRow); }

      public void RemoveRow(OrganizationTypesRow row) { this.Rows.Remove(row); }

      public OrganizationTypesRow NewRow(Int32 orgTypeId, String orgType, Int32 orgTypeOrder)
      {
        OrganizationTypesRow row = NewRow();
        row.OrgTypeId = orgTypeId;
        row.OrgType = orgType;
        row.OrgTypeOrder = orgTypeOrder;
        return row;
      }

      public void AddRow(Int32 orgTypeId, String orgType, Int32 orgTypeOrder)
      {
        OrganizationTypesRow row = NewRow(orgTypeId, orgType, orgTypeOrder);
        AddRow(row);
      }

      public OrganizationTypesRow NewRow(String orgType, Int32 orgTypeOrder)
      {
        OrganizationTypesRow row = NewRow();
        row.OrgType = orgType;
        row.OrgTypeOrder = orgTypeOrder;
        return row;
      }

      public void AddRow(String orgType, Int32 orgTypeOrder)
      {
        OrganizationTypesRow row = NewRow(orgType, orgTypeOrder);
        AddRow(row);
      }

      public DataColumn OrgTypeIdColumn { get { return this.Columns["OrgTypeId"]; } }

      public DataColumn OrgTypeColumn { get { return this.Columns["OrgType"]; } }

      public DataColumn OrgTypeOrderColumn { get { return this.Columns["OrgTypeOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrgTypeId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgType", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgTypeOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationTypesTable() : this(ColumnSet.All) { }

      public OrganizationTypesTable(ColumnSet columnSet)
      {
        this.TableName = "OrganizationTypes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OrganizationTypesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OrganizationTypes
    {
      public const string TableName = "OrganizationTypes";

      public enum Column { OrgTypeId, OrgType, OrgTypeOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrgTypeId, "OrgTypeId" },
        { Column.OrgType, "OrgType" },
        { Column.OrgTypeOrder, "OrgTypeOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 orgTypeId, String orgType, Int32 orgTypeOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationTypes (OrgTypeId,OrgType,OrgTypeOrder) VALUES (@OrgTypeId,@OrgType,@OrgTypeOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgType", orgType);
        VoteDb.AddCommandParameter(cmd, "OrgTypeOrder", orgTypeOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String orgType, Int32 orgTypeOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OrganizationTypes (OrgType,OrgTypeOrder) VALUES (@OrgType,@OrgTypeOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgType", orgType);
        VoteDb.AddCommandParameter(cmd, "OrgTypeOrder", orgTypeOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrgTypeId,OrgType,OrgTypeOrder FROM OrganizationTypes";
        }
      }

      public static OrganizationTypesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgTypeId,OrgType,OrgTypeOrder FROM OrganizationTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationTypesTable.ColumnSet.All);
      }

      public static OrganizationTypesTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationTypesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationTypesTable FillTable(DbCommand command, OrganizationTypesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationTypesTable table = new OrganizationTypesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationTypesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationTypesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationTypesTable table, OrganizationTypesTable.ColumnSet columnSet = OrganizationTypesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OrgTypeIdColumnName { get { return "OrgTypeId"; } }

      public static string OrgTypeColumnName { get { return "OrgType"; } }

      public static string OrgTypeOrderColumnName { get { return "OrgTypeOrder"; } }

      public static int OrgTypeMaxLength { get { return 255; } }

      public static bool OrgTypeIdExists(Int32 orgTypeId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetOrgTypeByOrgTypeId(Int32 orgTypeId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OrgType FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrgTypeOrderByOrgTypeId(Int32 orgTypeId)
      {
        return _GetOrgTypeOrderByOrgTypeId(orgTypeId, null);
      }

      public static Int32 GetOrgTypeOrderByOrgTypeId(Int32 orgTypeId, Int32 defaultValue)
      {
        return _GetOrgTypeOrderByOrgTypeId(orgTypeId, defaultValue).Value;
      }

      private static Int32? _GetOrgTypeOrderByOrgTypeId(Int32 orgTypeId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgTypeOrder FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByOrgTypeId(Column _column, Int32 orgTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationTypesTable GetDataByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgTypeId,OrgType,OrgTypeOrder FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return FillTable(cmd, OrganizationTypesTable.ColumnSet.All);
      }

      public static int UpdateOrgTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationTypes SET OrgTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationTypes SET OrgType=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeOrderByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationTypes SET OrgTypeOrder=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgTypeId(Column _column, object newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE OrganizationTypes SET {0}=@newValue WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OrganizationTypes WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(OrganizationTypesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationTypesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OrganizationTypes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OrganizationTypes

    #region vote.Organizations

    public partial class OrganizationsRow : DataRow
    {
      internal OrganizationsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 OrgId
      {
        get { return (Int32) this["OrgId"]; }
        set { this["OrgId"] = value; }
      }

      public Int32 OrgTypeId
      {
        get { return (Int32) this["OrgTypeId"]; }
        set { this["OrgTypeId"] = value; }
      }

      public Int32 OrgSubTypeId
      {
        get { return (Int32) this["OrgSubTypeId"]; }
        set { this["OrgSubTypeId"] = value; }
      }

      public Int32 IdeologyId
      {
        get { return (Int32) this["IdeologyId"]; }
        set { this["IdeologyId"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String OrgAbbreviation
      {
        get { return this["OrgAbbreviation"] as String; }
        set { if (value == null) this["OrgAbbreviation"] = DBNull.Value; else this["OrgAbbreviation"] = value; }
      }

      public String Address1
      {
        get { return this["Address1"] as String; }
        set { if (value == null) this["Address1"] = DBNull.Value; else this["Address1"] = value; }
      }

      public String Address2
      {
        get { return this["Address2"] as String; }
        set { if (value == null) this["Address2"] = DBNull.Value; else this["Address2"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip
      {
        get { return this["Zip"] as String; }
        set { if (value == null) this["Zip"] = DBNull.Value; else this["Zip"] = value; }
      }

      public String Url
      {
        get { return this["Url"] as String; }
        set { if (value == null) this["Url"] = DBNull.Value; else this["Url"] = value; }
      }

      public String LongMission
      {
        get { return this["LongMission"] as String; }
        set { if (value == null) this["LongMission"] = DBNull.Value; else this["LongMission"] = value; }
      }

      public String ShortMission
      {
        get { return this["ShortMission"] as String; }
        set { if (value == null) this["ShortMission"] = DBNull.Value; else this["ShortMission"] = value; }
      }

      public String EmailMission
      {
        get { return this["EmailMission"] as String; }
        set { if (value == null) this["EmailMission"] = DBNull.Value; else this["EmailMission"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] AdImage
      {
        get { return this["AdImage"] as Byte[]; }
        set { if (value == null) this["AdImage"] = DBNull.Value; else this["AdImage"] = value; }
      }

      public String AdImageName
      {
        get { return this["AdImageName"] as String; }
        set { if (value == null) this["AdImageName"] = DBNull.Value; else this["AdImageName"] = value; }
      }

      public String AdUrl
      {
        get { return this["AdUrl"] as String; }
        set { if (value == null) this["AdUrl"] = DBNull.Value; else this["AdUrl"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] LogoImage
      {
        get { return this["LogoImage"] as Byte[]; }
        set { if (value == null) this["LogoImage"] = DBNull.Value; else this["LogoImage"] = value; }
      }

      public String LogiImageName
      {
        get { return this["LogiImageName"] as String; }
        set { if (value == null) this["LogiImageName"] = DBNull.Value; else this["LogiImageName"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationsTable : TypedTableBase<OrganizationsRow>
    {
      public OrganizationsRow this[int index] { get { return (OrganizationsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationsTable(); }

      new public OrganizationsRow NewRow() { return (OrganizationsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationsRow); }

      public void RemoveRow(OrganizationsRow row) { this.Rows.Remove(row); }

      public OrganizationsRow NewRow(Int32 orgId, Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName)
      {
        OrganizationsRow row = NewRow();
        row.OrgId = orgId;
        row.OrgTypeId = orgTypeId;
        row.OrgSubTypeId = orgSubTypeId;
        row.IdeologyId = ideologyId;
        row.DateStamp = dateStamp;
        row.Name = name;
        row.OrgAbbreviation = orgAbbreviation;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip = zip;
        row.Url = url;
        row.LongMission = longMission;
        row.ShortMission = shortMission;
        row.EmailMission = emailMission;
        row.AdImage = adImage;
        row.AdImageName = adImageName;
        row.AdUrl = adUrl;
        row.LogoImage = logoImage;
        row.LogiImageName = logiImageName;
        return row;
      }

      public void AddRow(Int32 orgId, Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName)
      {
        OrganizationsRow row = NewRow(orgId, orgTypeId, orgSubTypeId, ideologyId, dateStamp, name, orgAbbreviation, address1, address2, city, stateCode, zip, url, longMission, shortMission, emailMission, adImage, adImageName, adUrl, logoImage, logiImageName);
        AddRow(row);
      }

      public OrganizationsRow NewRow(Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName)
      {
        OrganizationsRow row = NewRow();
        row.OrgTypeId = orgTypeId;
        row.OrgSubTypeId = orgSubTypeId;
        row.IdeologyId = ideologyId;
        row.DateStamp = dateStamp;
        row.Name = name;
        row.OrgAbbreviation = orgAbbreviation;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip = zip;
        row.Url = url;
        row.LongMission = longMission;
        row.ShortMission = shortMission;
        row.EmailMission = emailMission;
        row.AdImage = adImage;
        row.AdImageName = adImageName;
        row.AdUrl = adUrl;
        row.LogoImage = logoImage;
        row.LogiImageName = logiImageName;
        return row;
      }

      public void AddRow(Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName)
      {
        OrganizationsRow row = NewRow(orgTypeId, orgSubTypeId, ideologyId, dateStamp, name, orgAbbreviation, address1, address2, city, stateCode, zip, url, longMission, shortMission, emailMission, adImage, adImageName, adUrl, logoImage, logiImageName);
        AddRow(row);
      }

      public DataColumn OrgIdColumn { get { return this.Columns["OrgId"]; } }

      public DataColumn OrgTypeIdColumn { get { return this.Columns["OrgTypeId"]; } }

      public DataColumn OrgSubTypeIdColumn { get { return this.Columns["OrgSubTypeId"]; } }

      public DataColumn IdeologyIdColumn { get { return this.Columns["IdeologyId"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn OrgAbbreviationColumn { get { return this.Columns["OrgAbbreviation"]; } }

      public DataColumn Address1Column { get { return this.Columns["Address1"]; } }

      public DataColumn Address2Column { get { return this.Columns["Address2"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn ZipColumn { get { return this.Columns["Zip"]; } }

      public DataColumn UrlColumn { get { return this.Columns["Url"]; } }

      public DataColumn LongMissionColumn { get { return this.Columns["LongMission"]; } }

      public DataColumn ShortMissionColumn { get { return this.Columns["ShortMission"]; } }

      public DataColumn EmailMissionColumn { get { return this.Columns["EmailMission"]; } }

      public DataColumn AdImageColumn { get { return this.Columns["AdImage"]; } }

      public DataColumn AdImageNameColumn { get { return this.Columns["AdImageName"]; } }

      public DataColumn AdUrlColumn { get { return this.Columns["AdUrl"]; } }

      public DataColumn LogoImageColumn { get { return this.Columns["LogoImage"]; } }

      public DataColumn LogiImageNameColumn { get { return this.Columns["LogiImageName"]; } }

      public enum ColumnSet { All, Ad }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrgId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgTypeId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgSubTypeId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IdeologyId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgAbbreviation", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address1", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address2", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Url", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LongMission", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShortMission", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailMission", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdImage", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("AdImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LogoImage", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("LogiImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAdColumns()
      {
        DataColumn _column;
        _column = new DataColumn("AdImageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationsTable() : this(ColumnSet.All) { }

      public OrganizationsTable(ColumnSet columnSet)
      {
        this.TableName = "Organizations";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Ad:
            InitAdColumns();
            break;
        }
      }

      protected OrganizationsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Organizations
    {
      public const string TableName = "Organizations";

      public enum Column { OrgId, OrgTypeId, OrgSubTypeId, IdeologyId, DateStamp, Name, OrgAbbreviation, Address1, Address2, City, StateCode, Zip, Url, LongMission, ShortMission, EmailMission, AdImage, AdImageName, AdUrl, LogoImage, LogiImageName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrgId, "OrgId" },
        { Column.OrgTypeId, "OrgTypeId" },
        { Column.OrgSubTypeId, "OrgSubTypeId" },
        { Column.IdeologyId, "IdeologyId" },
        { Column.DateStamp, "DateStamp" },
        { Column.Name, "Name" },
        { Column.OrgAbbreviation, "OrgAbbreviation" },
        { Column.Address1, "Address1" },
        { Column.Address2, "Address2" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip, "Zip" },
        { Column.Url, "Url" },
        { Column.LongMission, "LongMission" },
        { Column.ShortMission, "ShortMission" },
        { Column.EmailMission, "EmailMission" },
        { Column.AdImage, "AdImage" },
        { Column.AdImageName, "AdImageName" },
        { Column.AdUrl, "AdUrl" },
        { Column.LogoImage, "LogoImage" },
        { Column.LogiImageName, "LogiImageName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 orgId, Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Organizations (OrgId,OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName) VALUES (@OrgId,@OrgTypeId,@OrgSubTypeId,@IdeologyId,@DateStamp,@Name,@OrgAbbreviation,@Address1,@Address2,@City,@StateCode,@Zip,@Url,@LongMission,@ShortMission,@EmailMission,@AdImage,@AdImageName,@AdUrl,@LogoImage,@LogiImageName)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OrgAbbreviation", orgAbbreviation);
        VoteDb.AddCommandParameter(cmd, "Address1", address1);
        VoteDb.AddCommandParameter(cmd, "Address2", address2);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip", zip);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "LongMission", longMission);
        VoteDb.AddCommandParameter(cmd, "ShortMission", shortMission);
        VoteDb.AddCommandParameter(cmd, "EmailMission", emailMission);
        VoteDb.AddCommandParameter(cmd, "AdImage", adImage);
        VoteDb.AddCommandParameter(cmd, "AdImageName", adImageName);
        VoteDb.AddCommandParameter(cmd, "AdUrl", adUrl);
        VoteDb.AddCommandParameter(cmd, "LogoImage", logoImage);
        VoteDb.AddCommandParameter(cmd, "LogiImageName", logiImageName);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 orgTypeId, Int32 orgSubTypeId, Int32 ideologyId, DateTime dateStamp, String name, String orgAbbreviation, String address1, String address2, String city, String stateCode, String zip, String url, String longMission, String shortMission, String emailMission, Byte[] adImage, String adImageName, String adUrl, Byte[] logoImage, String logiImageName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Organizations (OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName) VALUES (@OrgTypeId,@OrgSubTypeId,@IdeologyId,@DateStamp,@Name,@OrgAbbreviation,@Address1,@Address2,@City,@StateCode,@Zip,@Url,@LongMission,@ShortMission,@EmailMission,@AdImage,@AdImageName,@AdUrl,@LogoImage,@LogiImageName)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "OrgSubTypeId", orgSubTypeId);
        VoteDb.AddCommandParameter(cmd, "IdeologyId", ideologyId);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OrgAbbreviation", orgAbbreviation);
        VoteDb.AddCommandParameter(cmd, "Address1", address1);
        VoteDb.AddCommandParameter(cmd, "Address2", address2);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip", zip);
        VoteDb.AddCommandParameter(cmd, "Url", url);
        VoteDb.AddCommandParameter(cmd, "LongMission", longMission);
        VoteDb.AddCommandParameter(cmd, "ShortMission", shortMission);
        VoteDb.AddCommandParameter(cmd, "EmailMission", emailMission);
        VoteDb.AddCommandParameter(cmd, "AdImage", adImage);
        VoteDb.AddCommandParameter(cmd, "AdImageName", adImageName);
        VoteDb.AddCommandParameter(cmd, "AdUrl", adUrl);
        VoteDb.AddCommandParameter(cmd, "LogoImage", logoImage);
        VoteDb.AddCommandParameter(cmd, "LogiImageName", logiImageName);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrgId,OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName FROM Organizations";
        }
      }

      public static OrganizationsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationsTable.ColumnSet.All);
      }

      public static OrganizationsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationsTable FillTable(DbCommand command, OrganizationsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationsTable table = new OrganizationsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OrganizationsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OrganizationsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OrganizationsTable table, OrganizationsTable.ColumnSet columnSet = OrganizationsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OrgIdColumnName { get { return "OrgId"; } }

      public static string OrgTypeIdColumnName { get { return "OrgTypeId"; } }

      public static string OrgSubTypeIdColumnName { get { return "OrgSubTypeId"; } }

      public static string IdeologyIdColumnName { get { return "IdeologyId"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string OrgAbbreviationColumnName { get { return "OrgAbbreviation"; } }

      public static string Address1ColumnName { get { return "Address1"; } }

      public static string Address2ColumnName { get { return "Address2"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string ZipColumnName { get { return "Zip"; } }

      public static string UrlColumnName { get { return "Url"; } }

      public static string LongMissionColumnName { get { return "LongMission"; } }

      public static string ShortMissionColumnName { get { return "ShortMission"; } }

      public static string EmailMissionColumnName { get { return "EmailMission"; } }

      public static string AdImageColumnName { get { return "AdImage"; } }

      public static string AdImageNameColumnName { get { return "AdImageName"; } }

      public static string AdUrlColumnName { get { return "AdUrl"; } }

      public static string LogoImageColumnName { get { return "LogoImage"; } }

      public static string LogiImageNameColumnName { get { return "LogiImageName"; } }

      public static int NameMaxLength { get { return 255; } }

      public static int OrgAbbreviationMaxLength { get { return 255; } }

      public static int Address1MaxLength { get { return 255; } }

      public static int Address2MaxLength { get { return 255; } }

      public static int CityMaxLength { get { return 255; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int ZipMaxLength { get { return 10; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int LongMissionMaxLength { get { return int.MaxValue; } }

      public static int ShortMissionMaxLength { get { return int.MaxValue; } }

      public static int EmailMissionMaxLength { get { return int.MaxValue; } }

      public static int AdImageNameMaxLength { get { return 255; } }

      public static int AdUrlMaxLength { get { return int.MaxValue; } }

      public static int LogiImageNameMaxLength { get { return 255; } }

      public static bool OrgIdExists(Int32 orgId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetOrgTypeIdByOrgId(Int32 orgId)
      {
        return _GetOrgTypeIdByOrgId(orgId, null);
      }

      public static Int32? GetOrgTypeId(Int32 orgId)
      {
        return GetOrgTypeIdByOrgId(orgId);
      }

      public static Int32 GetOrgTypeIdByOrgId(Int32 orgId, Int32 defaultValue)
      {
        return _GetOrgTypeIdByOrgId(orgId, defaultValue).Value;
      }

      public static Int32 GetOrgTypeId(Int32 orgId, Int32 defaultValue)
      {
        return GetOrgTypeIdByOrgId(orgId, defaultValue);
      }

      private static Int32? _GetOrgTypeIdByOrgId(Int32 orgId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgTypeId FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetOrgSubTypeIdByOrgId(Int32 orgId)
      {
        return _GetOrgSubTypeIdByOrgId(orgId, null);
      }

      public static Int32? GetOrgSubTypeId(Int32 orgId)
      {
        return GetOrgSubTypeIdByOrgId(orgId);
      }

      public static Int32 GetOrgSubTypeIdByOrgId(Int32 orgId, Int32 defaultValue)
      {
        return _GetOrgSubTypeIdByOrgId(orgId, defaultValue).Value;
      }

      public static Int32 GetOrgSubTypeId(Int32 orgId, Int32 defaultValue)
      {
        return GetOrgSubTypeIdByOrgId(orgId, defaultValue);
      }

      private static Int32? _GetOrgSubTypeIdByOrgId(Int32 orgId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrgSubTypeId FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetIdeologyIdByOrgId(Int32 orgId)
      {
        return _GetIdeologyIdByOrgId(orgId, null);
      }

      public static Int32? GetIdeologyId(Int32 orgId)
      {
        return GetIdeologyIdByOrgId(orgId);
      }

      public static Int32 GetIdeologyIdByOrgId(Int32 orgId, Int32 defaultValue)
      {
        return _GetIdeologyIdByOrgId(orgId, defaultValue).Value;
      }

      public static Int32 GetIdeologyId(Int32 orgId, Int32 defaultValue)
      {
        return GetIdeologyIdByOrgId(orgId, defaultValue);
      }

      private static Int32? _GetIdeologyIdByOrgId(Int32 orgId, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IdeologyId FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDateStampByOrgId(Int32 orgId)
      {
        return _GetDateStampByOrgId(orgId, null);
      }

      public static DateTime? GetDateStamp(Int32 orgId)
      {
        return GetDateStampByOrgId(orgId);
      }

      public static DateTime GetDateStampByOrgId(Int32 orgId, DateTime defaultValue)
      {
        return _GetDateStampByOrgId(orgId, defaultValue).Value;
      }

      public static DateTime GetDateStamp(Int32 orgId, DateTime defaultValue)
      {
        return GetDateStampByOrgId(orgId, defaultValue);
      }

      private static DateTime? _GetDateStampByOrgId(Int32 orgId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetNameByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetName(Int32 orgId, String defaultValue = null)
      {
        return GetNameByOrgId(orgId, defaultValue);
      }

      public static String GetOrgAbbreviationByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OrgAbbreviation FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOrgAbbreviation(Int32 orgId, String defaultValue = null)
      {
        return GetOrgAbbreviationByOrgId(orgId, defaultValue);
      }

      public static String GetAddress1ByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address1 FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress1(Int32 orgId, String defaultValue = null)
      {
        return GetAddress1ByOrgId(orgId, defaultValue);
      }

      public static String GetAddress2ByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address2 FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress2(Int32 orgId, String defaultValue = null)
      {
        return GetAddress2ByOrgId(orgId, defaultValue);
      }

      public static String GetCityByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCity(Int32 orgId, String defaultValue = null)
      {
        return GetCityByOrgId(orgId, defaultValue);
      }

      public static String GetStateCodeByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(Int32 orgId, String defaultValue = null)
      {
        return GetStateCodeByOrgId(orgId, defaultValue);
      }

      public static String GetZipByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip(Int32 orgId, String defaultValue = null)
      {
        return GetZipByOrgId(orgId, defaultValue);
      }

      public static String GetUrlByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Url FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(Int32 orgId, String defaultValue = null)
      {
        return GetUrlByOrgId(orgId, defaultValue);
      }

      public static String GetLongMissionByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LongMission FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLongMission(Int32 orgId, String defaultValue = null)
      {
        return GetLongMissionByOrgId(orgId, defaultValue);
      }

      public static String GetShortMissionByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ShortMission FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetShortMission(Int32 orgId, String defaultValue = null)
      {
        return GetShortMissionByOrgId(orgId, defaultValue);
      }

      public static String GetEmailMissionByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailMission FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailMission(Int32 orgId, String defaultValue = null)
      {
        return GetEmailMissionByOrgId(orgId, defaultValue);
      }

      public static Byte[] GetAdImageByOrgId(Int32 orgId, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImage FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetAdImage(Int32 orgId, Byte[] defaultValue = null)
      {
        return GetAdImageByOrgId(orgId, defaultValue);
      }

      public static String GetAdImageNameByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdImageName FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdImageName(Int32 orgId, String defaultValue = null)
      {
        return GetAdImageNameByOrgId(orgId, defaultValue);
      }

      public static String GetAdUrlByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdUrl FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAdUrl(Int32 orgId, String defaultValue = null)
      {
        return GetAdUrlByOrgId(orgId, defaultValue);
      }

      public static Byte[] GetLogoImageByOrgId(Int32 orgId, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LogoImage FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetLogoImage(Int32 orgId, Byte[] defaultValue = null)
      {
        return GetLogoImageByOrgId(orgId, defaultValue);
      }

      public static String GetLogiImageNameByOrgId(Int32 orgId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LogiImageName FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLogiImageName(Int32 orgId, String defaultValue = null)
      {
        return GetLogiImageNameByOrgId(orgId, defaultValue);
      }

      public static object GetColumnByOrgId(Column _column, Int32 orgId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Organizations WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 orgId)
      {
        return GetColumnByOrgId(_column, orgId);
      }

      public static OrganizationsTable GetDataByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return FillTable(cmd, OrganizationsTable.ColumnSet.All);
      }

      public static OrganizationsTable GetData(Int32 orgId, int commandTimeout = -1)
      {
        return GetDataByOrgId(orgId, commandTimeout);
      }

      public static int UpdateOrgIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET OrgId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgId(Int32 newValue, Int32 orgId)
      {
        return UpdateOrgIdByOrgId(newValue, orgId);
      }

      public static int UpdateOrgTypeIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET OrgTypeId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeId(Int32 newValue, Int32 orgId)
      {
        return UpdateOrgTypeIdByOrgId(newValue, orgId);
      }

      public static int UpdateOrgSubTypeIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET OrgSubTypeId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeId(Int32 newValue, Int32 orgId)
      {
        return UpdateOrgSubTypeIdByOrgId(newValue, orgId);
      }

      public static int UpdateIdeologyIdByOrgId(Int32 newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET IdeologyId=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdeologyId(Int32 newValue, Int32 orgId)
      {
        return UpdateIdeologyIdByOrgId(newValue, orgId);
      }

      public static int UpdateDateStampByOrgId(DateTime newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET DateStamp=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStamp(DateTime newValue, Int32 orgId)
      {
        return UpdateDateStampByOrgId(newValue, orgId);
      }

      public static int UpdateNameByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET Name=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateName(String newValue, Int32 orgId)
      {
        return UpdateNameByOrgId(newValue, orgId);
      }

      public static int UpdateOrgAbbreviationByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET OrgAbbreviation=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgAbbreviation(String newValue, Int32 orgId)
      {
        return UpdateOrgAbbreviationByOrgId(newValue, orgId);
      }

      public static int UpdateAddress1ByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET Address1=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress1(String newValue, Int32 orgId)
      {
        return UpdateAddress1ByOrgId(newValue, orgId);
      }

      public static int UpdateAddress2ByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET Address2=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress2(String newValue, Int32 orgId)
      {
        return UpdateAddress2ByOrgId(newValue, orgId);
      }

      public static int UpdateCityByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET City=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCity(String newValue, Int32 orgId)
      {
        return UpdateCityByOrgId(newValue, orgId);
      }

      public static int UpdateStateCodeByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET StateCode=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, Int32 orgId)
      {
        return UpdateStateCodeByOrgId(newValue, orgId);
      }

      public static int UpdateZipByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET Zip=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip(String newValue, Int32 orgId)
      {
        return UpdateZipByOrgId(newValue, orgId);
      }

      public static int UpdateUrlByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET Url=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, Int32 orgId)
      {
        return UpdateUrlByOrgId(newValue, orgId);
      }

      public static int UpdateLongMissionByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET LongMission=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongMission(String newValue, Int32 orgId)
      {
        return UpdateLongMissionByOrgId(newValue, orgId);
      }

      public static int UpdateShortMissionByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET ShortMission=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortMission(String newValue, Int32 orgId)
      {
        return UpdateShortMissionByOrgId(newValue, orgId);
      }

      public static int UpdateEmailMissionByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET EmailMission=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailMission(String newValue, Int32 orgId)
      {
        return UpdateEmailMissionByOrgId(newValue, orgId);
      }

      public static int UpdateAdImageByOrgId(Byte[] newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET AdImage=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImage(Byte[] newValue, Int32 orgId)
      {
        return UpdateAdImageByOrgId(newValue, orgId);
      }

      public static int UpdateAdImageNameByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET AdImageName=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageName(String newValue, Int32 orgId)
      {
        return UpdateAdImageNameByOrgId(newValue, orgId);
      }

      public static int UpdateAdUrlByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET AdUrl=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrl(String newValue, Int32 orgId)
      {
        return UpdateAdUrlByOrgId(newValue, orgId);
      }

      public static int UpdateLogoImageByOrgId(Byte[] newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET LogoImage=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogoImage(Byte[] newValue, Int32 orgId)
      {
        return UpdateLogoImageByOrgId(newValue, orgId);
      }

      public static int UpdateLogiImageNameByOrgId(String newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET LogiImageName=@newValue WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogiImageName(String newValue, Int32 orgId)
      {
        return UpdateLogiImageNameByOrgId(newValue, orgId);
      }

      public static int UpdateColumnByOrgId(Column _column, object newValue, Int32 orgId)
      {
        string cmdText = "UPDATE Organizations SET {0}=@newValue WHERE OrgId=@OrgId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, Int32 orgId)
      {
         return UpdateColumnByOrgId(_column, newValue, orgId);
      }

      public static int DeleteByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Organizations WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOrgTypeId(Column _column, Int32 orgTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Organizations WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OrganizationsTable GetDataByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrgId,OrgTypeId,OrgSubTypeId,IdeologyId,DateStamp,Name,OrgAbbreviation,Address1,Address2,City,StateCode,Zip,Url,LongMission,ShortMission,EmailMission,AdImage,AdImageName,AdUrl,LogoImage,LogiImageName FROM Organizations WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return FillTable(cmd, OrganizationsTable.ColumnSet.All);
      }

      public static int UpdateOrgIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET OrgId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET OrgTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgSubTypeIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET OrgSubTypeId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdeologyIdByOrgTypeId(Int32 newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET IdeologyId=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByOrgTypeId(DateTime newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET DateStamp=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET Name=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrgAbbreviationByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET OrgAbbreviation=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress1ByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET Address1=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress2ByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET Address2=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET City=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET StateCode=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZipByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET Zip=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET Url=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongMissionByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET LongMission=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortMissionByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET ShortMission=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailMissionByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET EmailMission=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageByOrgTypeId(Byte[] newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET AdImage=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdImageNameByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET AdImageName=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdUrlByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET AdUrl=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogoImageByOrgTypeId(Byte[] newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET LogoImage=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogiImageNameByOrgTypeId(String newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET LogiImageName=@newValue WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOrgTypeId(Column _column, object newValue, Int32 orgTypeId)
      {
        string cmdText = "UPDATE Organizations SET {0}=@newValue WHERE OrgTypeId=@OrgTypeId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Organizations WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAdCommandText
      {
        get
        {
          return "SELECT AdImageName,AdUrl FROM Organizations";
        }
      }

      public static OrganizationsTable GetAllAdData(int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationsTable.ColumnSet.Ad);
      }

      public static void UpdateAd(OrganizationsTable table)
      {
        UpdateAd(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateAd(OrganizationsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, OrganizationsTable.ColumnSet.Ad, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static OrganizationsTable GetAdDataByOrgId(Int32 orgId, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl FROM Organizations WHERE OrgId=@OrgId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgId", orgId);
        return FillTable(cmd, OrganizationsTable.ColumnSet.Ad);
      }

      public static OrganizationsTable GetAdData(Int32 orgId, int commandTimeout = -1)
      {
        return GetAdDataByOrgId(orgId, commandTimeout);
      }

      public static OrganizationsTable GetAdDataByOrgTypeId(Int32 orgTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT AdImageName,AdUrl FROM Organizations WHERE OrgTypeId=@OrgTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrgTypeId", orgTypeId);
        return FillTable(cmd, OrganizationsTable.ColumnSet.Ad);
      }

      public static string GetSelectCommandText(OrganizationsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationsTable.ColumnSet.All:
            return SelectAllCommandText;

          case OrganizationsTable.ColumnSet.Ad:
            return SelectAdCommandText;

          default:
            return null;
        }
      }

      static Organizations()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Organizations

    #region vote.Parties

    public partial class PartiesRow : DataRow
    {
      internal PartiesRow(DataRowBuilder rb) : base(rb) {}

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Int32 PartyOrder
      {
        get { return (Int32) this["PartyOrder"]; }
        set { this["PartyOrder"] = value; }
      }

      public String PartyName
      {
        get { return this["PartyName"] as String; }
        set { if (value == null) this["PartyName"] = DBNull.Value; else this["PartyName"] = value; }
      }

      public String PartyUrl
      {
        get { return this["PartyURL"] as String; }
        set { if (value == null) this["PartyURL"] = DBNull.Value; else this["PartyURL"] = value; }
      }

      public String PartyAddressLine1
      {
        get { return this["PartyAddressLine1"] as String; }
        set { if (value == null) this["PartyAddressLine1"] = DBNull.Value; else this["PartyAddressLine1"] = value; }
      }

      public String PartyAddressLine2
      {
        get { return this["PartyAddressLine2"] as String; }
        set { if (value == null) this["PartyAddressLine2"] = DBNull.Value; else this["PartyAddressLine2"] = value; }
      }

      public String PartyCityStateZip
      {
        get { return this["PartyCityStateZip"] as String; }
        set { if (value == null) this["PartyCityStateZip"] = DBNull.Value; else this["PartyCityStateZip"] = value; }
      }

      public Boolean IsPartyMajor
      {
        get { return (Boolean) this["IsPartyMajor"]; }
        set { this["IsPartyMajor"] = value; }
      }
    }

    [Serializable]
    public partial class PartiesTable : TypedTableBase<PartiesRow>
    {
      public PartiesRow this[int index] { get { return (PartiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PartiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PartiesTable(); }

      new public PartiesRow NewRow() { return (PartiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PartiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(PartiesRow); }

      public void RemoveRow(PartiesRow row) { this.Rows.Remove(row); }

      public PartiesRow NewRow(String partyKey, String partyCode, String stateCode, Int32 partyOrder, String partyName, String partyUrl, String partyAddressLine1, String partyAddressLine2, String partyCityStateZip, Boolean isPartyMajor)
      {
        PartiesRow row = NewRow();
        row.PartyKey = partyKey;
        row.PartyCode = partyCode;
        row.StateCode = stateCode;
        row.PartyOrder = partyOrder;
        row.PartyName = partyName;
        row.PartyUrl = partyUrl;
        row.PartyAddressLine1 = partyAddressLine1;
        row.PartyAddressLine2 = partyAddressLine2;
        row.PartyCityStateZip = partyCityStateZip;
        row.IsPartyMajor = isPartyMajor;
        return row;
      }

      public void AddRow(String partyKey, String partyCode, String stateCode, Int32 partyOrder, String partyName, String partyUrl, String partyAddressLine1, String partyAddressLine2, String partyCityStateZip, Boolean isPartyMajor)
      {
        PartiesRow row = NewRow(partyKey, partyCode, stateCode, partyOrder, partyName, partyUrl, partyAddressLine1, partyAddressLine2, partyCityStateZip, isPartyMajor);
        AddRow(row);
      }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn PartyOrderColumn { get { return this.Columns["PartyOrder"]; } }

      public DataColumn PartyNameColumn { get { return this.Columns["PartyName"]; } }

      public DataColumn PartyUrlColumn { get { return this.Columns["PartyURL"]; } }

      public DataColumn PartyAddressLine1Column { get { return this.Columns["PartyAddressLine1"]; } }

      public DataColumn PartyAddressLine2Column { get { return this.Columns["PartyAddressLine2"]; } }

      public DataColumn PartyCityStateZipColumn { get { return this.Columns["PartyCityStateZip"]; } }

      public DataColumn IsPartyMajorColumn { get { return this.Columns["IsPartyMajor"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyURL", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyAddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyAddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPartyMajor", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyURL", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPartyMajor", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PartiesTable() : this(ColumnSet.All) { }

      public PartiesTable(ColumnSet columnSet)
      {
        this.TableName = "Parties";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected PartiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Parties
    {
      public const string TableName = "Parties";

      public enum Column { PartyKey, PartyCode, StateCode, PartyOrder, PartyName, PartyUrl, PartyAddressLine1, PartyAddressLine2, PartyCityStateZip, IsPartyMajor }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PartyKey, "PartyKey" },
        { Column.PartyCode, "PartyCode" },
        { Column.StateCode, "StateCode" },
        { Column.PartyOrder, "PartyOrder" },
        { Column.PartyName, "PartyName" },
        { Column.PartyUrl, "PartyURL" },
        { Column.PartyAddressLine1, "PartyAddressLine1" },
        { Column.PartyAddressLine2, "PartyAddressLine2" },
        { Column.PartyCityStateZip, "PartyCityStateZip" },
        { Column.IsPartyMajor, "IsPartyMajor" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String partyKey, String partyCode, String stateCode, Int32 partyOrder, String partyName, String partyUrl, String partyAddressLine1, String partyAddressLine2, String partyCityStateZip, Boolean isPartyMajor, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Parties (PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor) VALUES (@PartyKey,@PartyCode,@StateCode,@PartyOrder,@PartyName,@PartyUrl,@PartyAddressLine1,@PartyAddressLine2,@PartyCityStateZip,@IsPartyMajor)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "PartyCode", partyCode);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "PartyOrder", partyOrder);
        VoteDb.AddCommandParameter(cmd, "PartyName", partyName);
        VoteDb.AddCommandParameter(cmd, "PartyUrl", partyUrl);
        VoteDb.AddCommandParameter(cmd, "PartyAddressLine1", partyAddressLine1);
        VoteDb.AddCommandParameter(cmd, "PartyAddressLine2", partyAddressLine2);
        VoteDb.AddCommandParameter(cmd, "PartyCityStateZip", partyCityStateZip);
        VoteDb.AddCommandParameter(cmd, "IsPartyMajor", isPartyMajor);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties";
        }
      }

      public static PartiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static PartiesTable FillTable(DbCommand command)
      {
        return FillTable(command, PartiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PartiesTable FillTable(DbCommand command, PartiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PartiesTable table = new PartiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string PartyOrderColumnName { get { return "PartyOrder"; } }

      public static string PartyNameColumnName { get { return "PartyName"; } }

      public static string PartyUrlColumnName { get { return "PartyURL"; } }

      public static string PartyAddressLine1ColumnName { get { return "PartyAddressLine1"; } }

      public static string PartyAddressLine2ColumnName { get { return "PartyAddressLine2"; } }

      public static string PartyCityStateZipColumnName { get { return "PartyCityStateZip"; } }

      public static string IsPartyMajorColumnName { get { return "IsPartyMajor"; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int PartyNameMaxLength { get { return 200; } }

      public static int PartyUrlMaxLength { get { return 50; } }

      public static int PartyAddressLine1MaxLength { get { return int.MaxValue; } }

      public static int PartyAddressLine2MaxLength { get { return int.MaxValue; } }

      public static int PartyCityStateZipMaxLength { get { return int.MaxValue; } }

      public static bool PartyKeyExists(String partyKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyKeyByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String partyKey, String defaultValue = null)
      {
        return GetPartyKeyByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyCodeByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCode FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCode(String partyKey, String defaultValue = null)
      {
        return GetPartyCodeByPartyKey(partyKey, defaultValue);
      }

      public static String GetStateCodeByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String partyKey, String defaultValue = null)
      {
        return GetStateCodeByPartyKey(partyKey, defaultValue);
      }

      public static Int32? GetPartyOrderByPartyKey(String partyKey)
      {
        return _GetPartyOrderByPartyKey(partyKey, null);
      }

      public static Int32? GetPartyOrder(String partyKey)
      {
        return GetPartyOrderByPartyKey(partyKey);
      }

      public static Int32 GetPartyOrderByPartyKey(String partyKey, Int32 defaultValue)
      {
        return _GetPartyOrderByPartyKey(partyKey, defaultValue).Value;
      }

      public static Int32 GetPartyOrder(String partyKey, Int32 defaultValue)
      {
        return GetPartyOrderByPartyKey(partyKey, defaultValue);
      }

      private static Int32? _GetPartyOrderByPartyKey(String partyKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PartyOrder FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPartyNameByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyName FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyName(String partyKey, String defaultValue = null)
      {
        return GetPartyNameByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyUrlByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyURL FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyUrl(String partyKey, String defaultValue = null)
      {
        return GetPartyUrlByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyAddressLine1ByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyAddressLine1 FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyAddressLine1(String partyKey, String defaultValue = null)
      {
        return GetPartyAddressLine1ByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyAddressLine2ByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyAddressLine2 FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyAddressLine2(String partyKey, String defaultValue = null)
      {
        return GetPartyAddressLine2ByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyCityStateZipByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCityStateZip FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCityStateZip(String partyKey, String defaultValue = null)
      {
        return GetPartyCityStateZipByPartyKey(partyKey, defaultValue);
      }

      public static Boolean? GetIsPartyMajorByPartyKey(String partyKey)
      {
        return _GetIsPartyMajorByPartyKey(partyKey, null);
      }

      public static Boolean? GetIsPartyMajor(String partyKey)
      {
        return GetIsPartyMajorByPartyKey(partyKey);
      }

      public static Boolean GetIsPartyMajorByPartyKey(String partyKey, Boolean defaultValue)
      {
        return _GetIsPartyMajorByPartyKey(partyKey, defaultValue).Value;
      }

      public static Boolean GetIsPartyMajor(String partyKey, Boolean defaultValue)
      {
        return GetIsPartyMajorByPartyKey(partyKey, defaultValue);
      }

      private static Boolean? _GetIsPartyMajorByPartyKey(String partyKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByPartyKey(Column _column, String partyKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Parties WHERE PartyKey=@PartyKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String partyKey)
      {
        return GetColumnByPartyKey(_column, partyKey);
      }

      public static PartiesTable GetDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static PartiesTable GetData(String partyKey, int commandTimeout = -1)
      {
        return GetDataByPartyKey(partyKey, commandTimeout);
      }

      public static int UpdatePartyKeyByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyKey=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKey(String newValue, String partyKey)
      {
        return UpdatePartyKeyByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyCodeByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyCode=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCode(String newValue, String partyKey)
      {
        return UpdatePartyCodeByPartyKey(newValue, partyKey);
      }

      public static int UpdateStateCodeByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET StateCode=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String partyKey)
      {
        return UpdateStateCodeByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyOrderByPartyKey(Int32 newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyOrder=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyOrder(Int32 newValue, String partyKey)
      {
        return UpdatePartyOrderByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyNameByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyName=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyName(String newValue, String partyKey)
      {
        return UpdatePartyNameByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyUrlByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyURL=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyUrl(String newValue, String partyKey)
      {
        return UpdatePartyUrlByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyAddressLine1ByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyAddressLine1=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyAddressLine1(String newValue, String partyKey)
      {
        return UpdatePartyAddressLine1ByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyAddressLine2ByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyAddressLine2=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyAddressLine2(String newValue, String partyKey)
      {
        return UpdatePartyAddressLine2ByPartyKey(newValue, partyKey);
      }

      public static int UpdatePartyCityStateZipByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET PartyCityStateZip=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCityStateZip(String newValue, String partyKey)
      {
        return UpdatePartyCityStateZipByPartyKey(newValue, partyKey);
      }

      public static int UpdateIsPartyMajorByPartyKey(Boolean newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET IsPartyMajor=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPartyMajor(Boolean newValue, String partyKey)
      {
        return UpdateIsPartyMajorByPartyKey(newValue, partyKey);
      }

      public static int UpdateColumnByPartyKey(Column _column, object newValue, String partyKey)
      {
        string cmdText = "UPDATE Parties SET {0}=@newValue WHERE PartyKey=@PartyKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String partyKey)
      {
         return UpdateColumnByPartyKey(_column, newValue, partyKey);
      }

      public static int DeleteByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCode(String stateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Parties WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static int UpdatePartyKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET StateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyOrderByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyOrder=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyURL=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyAddressLine1ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyAddressLine1=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyAddressLine2ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyAddressLine2=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCityStateZipByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET PartyCityStateZip=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPartyMajorByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET IsPartyMajor=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCode(Column _column, object newValue, String stateCode)
      {
        string cmdText = "UPDATE Parties SET {0}=@newValue WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Parties WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties";
        }
      }

      public static PartiesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheData(String partyKey, int commandTimeout = -1)
      {
        return GetCacheDataByPartyKey(partyKey, commandTimeout);
      }

      public static PartiesTable GetCacheDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByStateCodePartyCode(String stateCode, String partyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode AND PartyCode=@PartyCode ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "PartyCode", partyCode);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByStateCodeIsPartyMajor(String stateCode, Boolean isPartyMajor, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode AND IsPartyMajor=@IsPartyMajor ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "IsPartyMajor", isPartyMajor);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(PartiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PartiesTable.ColumnSet.All:
            return SelectAllCommandText;

          case PartiesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Parties()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Parties

    #region vote.PartiesEmails

    public partial class PartiesEmailsRow : DataRow
    {
      internal PartiesEmailsRow(DataRowBuilder rb) : base(rb) {}

      public String PartyEmail
      {
        get { return this["PartyEmail"] as String; }
        set { if (value == null) this["PartyEmail"] = DBNull.Value; else this["PartyEmail"] = value; }
      }

      public String PartyPassword
      {
        get { return this["PartyPassword"] as String; }
        set { if (value == null) this["PartyPassword"] = DBNull.Value; else this["PartyPassword"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyContactFirstName
      {
        get { return this["PartyContactFName"] as String; }
        set { if (value == null) this["PartyContactFName"] = DBNull.Value; else this["PartyContactFName"] = value; }
      }

      public String PartyContactLastName
      {
        get { return this["PartyContactLName"] as String; }
        set { if (value == null) this["PartyContactLName"] = DBNull.Value; else this["PartyContactLName"] = value; }
      }

      public String PartyContactPhone
      {
        get { return this["PartyContactPhone"] as String; }
        set { if (value == null) this["PartyContactPhone"] = DBNull.Value; else this["PartyContactPhone"] = value; }
      }

      public String PartyContactTitle
      {
        get { return this["PartyContactTitle"] as String; }
        set { if (value == null) this["PartyContactTitle"] = DBNull.Value; else this["PartyContactTitle"] = value; }
      }

      public Boolean IsVolunteer
      {
        get { return (Boolean) this["IsVolunteer"]; }
        set { this["IsVolunteer"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }
    }

    [Serializable]
    public partial class PartiesEmailsTable : TypedTableBase<PartiesEmailsRow>
    {
      public PartiesEmailsRow this[int index] { get { return (PartiesEmailsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PartiesEmailsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PartiesEmailsTable(); }

      new public PartiesEmailsRow NewRow() { return (PartiesEmailsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PartiesEmailsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PartiesEmailsRow); }

      public void RemoveRow(PartiesEmailsRow row) { this.Rows.Remove(row); }

      public PartiesEmailsRow NewRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut, Int32 id)
      {
        PartiesEmailsRow row = NewRow();
        row.PartyEmail = partyEmail;
        row.PartyPassword = partyPassword;
        row.PartyKey = partyKey;
        row.PartyContactFirstName = partyContactFirstName;
        row.PartyContactLastName = partyContactLastName;
        row.PartyContactPhone = partyContactPhone;
        row.PartyContactTitle = partyContactTitle;
        row.IsVolunteer = isVolunteer;
        row.DateStamp = dateStamp;
        row.OptOut = optOut;
        row.Id = id;
        return row;
      }

      public void AddRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut, Int32 id)
      {
        PartiesEmailsRow row = NewRow(partyEmail, partyPassword, partyKey, partyContactFirstName, partyContactLastName, partyContactPhone, partyContactTitle, isVolunteer, dateStamp, optOut, id);
        AddRow(row);
      }

      public PartiesEmailsRow NewRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut)
      {
        PartiesEmailsRow row = NewRow();
        row.PartyEmail = partyEmail;
        row.PartyPassword = partyPassword;
        row.PartyKey = partyKey;
        row.PartyContactFirstName = partyContactFirstName;
        row.PartyContactLastName = partyContactLastName;
        row.PartyContactPhone = partyContactPhone;
        row.PartyContactTitle = partyContactTitle;
        row.IsVolunteer = isVolunteer;
        row.DateStamp = dateStamp;
        row.OptOut = optOut;
        return row;
      }

      public void AddRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut)
      {
        PartiesEmailsRow row = NewRow(partyEmail, partyPassword, partyKey, partyContactFirstName, partyContactLastName, partyContactPhone, partyContactTitle, isVolunteer, dateStamp, optOut);
        AddRow(row);
      }

      public DataColumn PartyEmailColumn { get { return this.Columns["PartyEmail"]; } }

      public DataColumn PartyPasswordColumn { get { return this.Columns["PartyPassword"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyContactFirstNameColumn { get { return this.Columns["PartyContactFName"]; } }

      public DataColumn PartyContactLastNameColumn { get { return this.Columns["PartyContactLName"]; } }

      public DataColumn PartyContactPhoneColumn { get { return this.Columns["PartyContactPhone"]; } }

      public DataColumn PartyContactTitleColumn { get { return this.Columns["PartyContactTitle"]; } }

      public DataColumn IsVolunteerColumn { get { return this.Columns["IsVolunteer"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyPassword", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactFName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactLName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVolunteer", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
      }

      public PartiesEmailsTable() : this(ColumnSet.All) { }

      public PartiesEmailsTable(ColumnSet columnSet)
      {
        this.TableName = "PartiesEmails";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PartiesEmailsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PartiesEmails
    {
      public const string TableName = "PartiesEmails";

      public enum Column { PartyEmail, PartyPassword, PartyKey, PartyContactFirstName, PartyContactLastName, PartyContactPhone, PartyContactTitle, IsVolunteer, DateStamp, OptOut, Id }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PartyEmail, "PartyEmail" },
        { Column.PartyPassword, "PartyPassword" },
        { Column.PartyKey, "PartyKey" },
        { Column.PartyContactFirstName, "PartyContactFName" },
        { Column.PartyContactLastName, "PartyContactLName" },
        { Column.PartyContactPhone, "PartyContactPhone" },
        { Column.PartyContactTitle, "PartyContactTitle" },
        { Column.IsVolunteer, "IsVolunteer" },
        { Column.DateStamp, "DateStamp" },
        { Column.OptOut, "OptOut" },
        { Column.Id, "Id" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut, Int32 id, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PartiesEmails (PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id) VALUES (@PartyEmail,@PartyPassword,@PartyKey,@PartyContactFirstName,@PartyContactLastName,@PartyContactPhone,@PartyContactTitle,@IsVolunteer,@DateStamp,@OptOut,@Id)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "PartyPassword", partyPassword);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "PartyContactFirstName", partyContactFirstName);
        VoteDb.AddCommandParameter(cmd, "PartyContactLastName", partyContactLastName);
        VoteDb.AddCommandParameter(cmd, "PartyContactPhone", partyContactPhone);
        VoteDb.AddCommandParameter(cmd, "PartyContactTitle", partyContactTitle);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer, DateTime dateStamp, Boolean optOut, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PartiesEmails (PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut) VALUES (@PartyEmail,@PartyPassword,@PartyKey,@PartyContactFirstName,@PartyContactLastName,@PartyContactPhone,@PartyContactTitle,@IsVolunteer,@DateStamp,@OptOut)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "PartyPassword", partyPassword);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "PartyContactFirstName", partyContactFirstName);
        VoteDb.AddCommandParameter(cmd, "PartyContactLastName", partyContactLastName);
        VoteDb.AddCommandParameter(cmd, "PartyContactPhone", partyContactPhone);
        VoteDb.AddCommandParameter(cmd, "PartyContactTitle", partyContactTitle);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails";
        }
      }

      public static PartiesEmailsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static PartiesEmailsTable FillTable(DbCommand command)
      {
        return FillTable(command, PartiesEmailsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PartiesEmailsTable FillTable(DbCommand command, PartiesEmailsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PartiesEmailsTable table = new PartiesEmailsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PartiesEmailsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PartiesEmailsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PartiesEmailsTable table, PartiesEmailsTable.ColumnSet columnSet = PartiesEmailsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PartyEmailColumnName { get { return "PartyEmail"; } }

      public static string PartyPasswordColumnName { get { return "PartyPassword"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyContactFirstNameColumnName { get { return "PartyContactFName"; } }

      public static string PartyContactLastNameColumnName { get { return "PartyContactLName"; } }

      public static string PartyContactPhoneColumnName { get { return "PartyContactPhone"; } }

      public static string PartyContactTitleColumnName { get { return "PartyContactTitle"; } }

      public static string IsVolunteerColumnName { get { return "IsVolunteer"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static string IdColumnName { get { return "Id"; } }

      public static int PartyEmailMaxLength { get { return 200; } }

      public static int PartyPasswordMaxLength { get { return 50; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyContactFirstNameMaxLength { get { return int.MaxValue; } }

      public static int PartyContactLastNameMaxLength { get { return int.MaxValue; } }

      public static int PartyContactPhoneMaxLength { get { return int.MaxValue; } }

      public static int PartyContactTitleMaxLength { get { return int.MaxValue; } }

      public static bool PartyEmailIsVolunteerExists(String partyEmail, Boolean isVolunteer)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyEmailByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyEmail FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyPasswordByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyPassword FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactFirstNameByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactFName FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactLastNameByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactLName FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactPhoneByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactPhone FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactTitleByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactTitle FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer)
      {
        return _GetDateStampByPartyEmailIsVolunteer(partyEmail, isVolunteer, null);
      }

      public static DateTime GetDateStampByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, DateTime defaultValue)
      {
        return _GetDateStampByPartyEmailIsVolunteer(partyEmail, isVolunteer, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetOptOutByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer)
      {
        return _GetOptOutByPartyEmailIsVolunteer(partyEmail, isVolunteer, null);
      }

      public static Boolean GetOptOutByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, Boolean defaultValue)
      {
        return _GetOptOutByPartyEmailIsVolunteer(partyEmail, isVolunteer, defaultValue).Value;
      }

      private static Boolean? _GetOptOutByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIdByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer)
      {
        return _GetIdByPartyEmailIsVolunteer(partyEmail, isVolunteer, null);
      }

      public static Int32 GetIdByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, Int32 defaultValue)
      {
        return _GetIdByPartyEmailIsVolunteer(partyEmail, isVolunteer, defaultValue).Value;
      }

      private static Int32? _GetIdByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByPartyEmailIsVolunteer(Column _column, String partyEmail, Boolean isVolunteer)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesEmailsTable GetDataByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static int UpdatePartyEmailByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPasswordByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstNameByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastNameByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhoneByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitleByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteerByPartyEmailIsVolunteer(Boolean newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPartyEmailIsVolunteer(DateTime newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET DateStamp=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByPartyEmailIsVolunteer(Boolean newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET OptOut=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdByPartyEmailIsVolunteer(Int32 newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET Id=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPartyEmailIsVolunteer(Column _column, object newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PartyEmailExists(String partyEmail)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyEmailByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyEmail FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyEmail(String partyEmail, String defaultValue = null)
      {
        return GetPartyEmailByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyPasswordByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyPassword FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyPassword(String partyEmail, String defaultValue = null)
      {
        return GetPartyPasswordByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyKeyByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String partyEmail, String defaultValue = null)
      {
        return GetPartyKeyByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactFirstNameByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactFName FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactFirstName(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactFirstNameByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactLastNameByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactLName FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactLastName(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactLastNameByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactPhoneByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactPhone FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactPhone(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactPhoneByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactTitleByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactTitle FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactTitle(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactTitleByPartyEmail(partyEmail, defaultValue);
      }

      public static Boolean? GetIsVolunteerByPartyEmail(String partyEmail)
      {
        return _GetIsVolunteerByPartyEmail(partyEmail, null);
      }

      public static Boolean? GetIsVolunteer(String partyEmail)
      {
        return GetIsVolunteerByPartyEmail(partyEmail);
      }

      public static Boolean GetIsVolunteerByPartyEmail(String partyEmail, Boolean defaultValue)
      {
        return _GetIsVolunteerByPartyEmail(partyEmail, defaultValue).Value;
      }

      public static Boolean GetIsVolunteer(String partyEmail, Boolean defaultValue)
      {
        return GetIsVolunteerByPartyEmail(partyEmail, defaultValue);
      }

      private static Boolean? _GetIsVolunteerByPartyEmail(String partyEmail, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVolunteer FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDateStampByPartyEmail(String partyEmail)
      {
        return _GetDateStampByPartyEmail(partyEmail, null);
      }

      public static DateTime? GetDateStamp(String partyEmail)
      {
        return GetDateStampByPartyEmail(partyEmail);
      }

      public static DateTime GetDateStampByPartyEmail(String partyEmail, DateTime defaultValue)
      {
        return _GetDateStampByPartyEmail(partyEmail, defaultValue).Value;
      }

      public static DateTime GetDateStamp(String partyEmail, DateTime defaultValue)
      {
        return GetDateStampByPartyEmail(partyEmail, defaultValue);
      }

      private static DateTime? _GetDateStampByPartyEmail(String partyEmail, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetOptOutByPartyEmail(String partyEmail)
      {
        return _GetOptOutByPartyEmail(partyEmail, null);
      }

      public static Boolean? GetOptOut(String partyEmail)
      {
        return GetOptOutByPartyEmail(partyEmail);
      }

      public static Boolean GetOptOutByPartyEmail(String partyEmail, Boolean defaultValue)
      {
        return _GetOptOutByPartyEmail(partyEmail, defaultValue).Value;
      }

      public static Boolean GetOptOut(String partyEmail, Boolean defaultValue)
      {
        return GetOptOutByPartyEmail(partyEmail, defaultValue);
      }

      private static Boolean? _GetOptOutByPartyEmail(String partyEmail, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIdByPartyEmail(String partyEmail)
      {
        return _GetIdByPartyEmail(partyEmail, null);
      }

      public static Int32? GetId(String partyEmail)
      {
        return GetIdByPartyEmail(partyEmail);
      }

      public static Int32 GetIdByPartyEmail(String partyEmail, Int32 defaultValue)
      {
        return _GetIdByPartyEmail(partyEmail, defaultValue).Value;
      }

      public static Int32 GetId(String partyEmail, Int32 defaultValue)
      {
        return GetIdByPartyEmail(partyEmail, defaultValue);
      }

      private static Int32? _GetIdByPartyEmail(String partyEmail, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByPartyEmail(Column _column, String partyEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String partyEmail)
      {
        return GetColumnByPartyEmail(_column, partyEmail);
      }

      public static PartiesEmailsTable GetDataByPartyEmail(String partyEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static PartiesEmailsTable GetData(String partyEmail, int commandTimeout = -1)
      {
        return GetDataByPartyEmail(partyEmail, commandTimeout);
      }

      public static int UpdatePartyEmailByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyEmail(String newValue, String partyEmail)
      {
        return UpdatePartyEmailByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyPasswordByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPassword(String newValue, String partyEmail)
      {
        return UpdatePartyPasswordByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyKeyByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKey(String newValue, String partyEmail)
      {
        return UpdatePartyKeyByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactFirstNameByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstName(String newValue, String partyEmail)
      {
        return UpdatePartyContactFirstNameByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactLastNameByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastName(String newValue, String partyEmail)
      {
        return UpdatePartyContactLastNameByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactPhoneByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhone(String newValue, String partyEmail)
      {
        return UpdatePartyContactPhoneByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactTitleByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitle(String newValue, String partyEmail)
      {
        return UpdatePartyContactTitleByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateIsVolunteerByPartyEmail(Boolean newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteer(Boolean newValue, String partyEmail)
      {
        return UpdateIsVolunteerByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateDateStampByPartyEmail(DateTime newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET DateStamp=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStamp(DateTime newValue, String partyEmail)
      {
        return UpdateDateStampByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateOptOutByPartyEmail(Boolean newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET OptOut=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOut(Boolean newValue, String partyEmail)
      {
        return UpdateOptOutByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateIdByPartyEmail(Int32 newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET Id=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String partyEmail)
      {
        return UpdateIdByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateColumnByPartyEmail(Column _column, object newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyEmail=@PartyEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String partyEmail)
      {
         return UpdateColumnByPartyEmail(_column, newValue, partyEmail);
      }

      public static int DeleteByPartyEmail(String partyEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyEmail FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyPasswordById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyPassword FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactFirstNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactFName FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactLastNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactLName FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactPhone FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactTitleById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactTitle FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsVolunteerById(Int32 id)
      {
        return _GetIsVolunteerById(id, null);
      }

      public static Boolean GetIsVolunteerById(Int32 id, Boolean defaultValue)
      {
        return _GetIsVolunteerById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsVolunteerById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVolunteer FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetOptOutById(Int32 id)
      {
        return _GetOptOutById(id, null);
      }

      public static Boolean GetOptOutById(Int32 id, Boolean defaultValue)
      {
        return _GetOptOutById(id, defaultValue).Value;
      }

      private static Boolean? _GetOptOutById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesEmailsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static int UpdatePartyEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPasswordById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitleById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteerById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET OptOut=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPartyKey(String partyKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPartyKey(Column _column, String partyKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyKey=@PartyKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesEmailsTable GetDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp,OptOut,Id FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static int UpdatePartyEmailByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPasswordByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstNameByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastNameByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhoneByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitleByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteerByPartyKey(Boolean newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPartyKey(DateTime newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET DateStamp=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByPartyKey(Boolean newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET OptOut=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIdByPartyKey(Int32 newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET Id=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPartyKey(Column _column, object newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyKey=@PartyKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PartiesEmailsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PartiesEmailsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PartiesEmails()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PartiesEmails

    #region vote.Politicians

    public partial class PoliticiansRow : DataRow
    {
      internal PoliticiansRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public String PasswordHint
      {
        get { return this["PasswordHint"] as String; }
        set { if (value == null) this["PasswordHint"] = DBNull.Value; else this["PasswordHint"] = value; }
      }

      public String LiveOfficeKey
      {
        get { return this["LiveOfficeKey"] as String; }
        set { if (value == null) this["LiveOfficeKey"] = DBNull.Value; else this["LiveOfficeKey"] = value; }
      }

      public String LiveOfficeStatus
      {
        get { return this["LiveOfficeStatus"] as String; }
        set { if (value == null) this["LiveOfficeStatus"] = DBNull.Value; else this["LiveOfficeStatus"] = value; }
      }

      public String LiveElectionKey
      {
        get { return this["LiveElectionKey"] as String; }
        set { if (value == null) this["LiveElectionKey"] = DBNull.Value; else this["LiveElectionKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String FirstName
      {
        get { return this["FName"] as String; }
        set { if (value == null) this["FName"] = DBNull.Value; else this["FName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MName"] as String; }
        set { if (value == null) this["MName"] = DBNull.Value; else this["MName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LName"] as String; }
        set { if (value == null) this["LName"] = DBNull.Value; else this["LName"] = value; }
      }

      public String AlphaName
      {
        get { return this["AlphaName"] as String; }
        set { if (value == null) this["AlphaName"] = DBNull.Value; else this["AlphaName"] = value; }
      }

      public String VowelStrippedName
      {
        get { return this["VowelStrippedName"] as String; }
        set { if (value == null) this["VowelStrippedName"] = DBNull.Value; else this["VowelStrippedName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public String AddOn
      {
        get { return this["AddOn"] as String; }
        set { if (value == null) this["AddOn"] = DBNull.Value; else this["AddOn"] = value; }
      }

      public String EmailVoteUSA
      {
        get { return this["EmailAddrVoteUSA"] as String; }
        set { if (value == null) this["EmailAddrVoteUSA"] = DBNull.Value; else this["EmailAddrVoteUSA"] = value; }
      }

      public String Email
      {
        get { return this["EmailAddr"] as String; }
        set { if (value == null) this["EmailAddr"] = DBNull.Value; else this["EmailAddr"] = value; }
      }

      public String StateEmail
      {
        get { return this["StateEmailAddr"] as String; }
        set { if (value == null) this["StateEmailAddr"] = DBNull.Value; else this["StateEmailAddr"] = value; }
      }

      public String LastEmailCode
      {
        get { return this["LastEmailCode"] as String; }
        set { if (value == null) this["LastEmailCode"] = DBNull.Value; else this["LastEmailCode"] = value; }
      }

      public String WebAddress
      {
        get { return this["WebAddr"] as String; }
        set { if (value == null) this["WebAddr"] = DBNull.Value; else this["WebAddr"] = value; }
      }

      public String StateWebAddress
      {
        get { return this["StateWebAddr"] as String; }
        set { if (value == null) this["StateWebAddr"] = DBNull.Value; else this["StateWebAddr"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String StatePhone
      {
        get { return this["StatePhone"] as String; }
        set { if (value == null) this["StatePhone"] = DBNull.Value; else this["StatePhone"] = value; }
      }

      public String Gender
      {
        get { return this["Gender"] as String; }
        set { if (value == null) this["Gender"] = DBNull.Value; else this["Gender"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String StateAddress
      {
        get { return this["StateAddress"] as String; }
        set { if (value == null) this["StateAddress"] = DBNull.Value; else this["StateAddress"] = value; }
      }

      public String StateCityStateZip
      {
        get { return this["StateCityStateZip"] as String; }
        set { if (value == null) this["StateCityStateZip"] = DBNull.Value; else this["StateCityStateZip"] = value; }
      }

      public String CampaignName
      {
        get { return this["CampaignName"] as String; }
        set { if (value == null) this["CampaignName"] = DBNull.Value; else this["CampaignName"] = value; }
      }

      public String CampaignAddress
      {
        get { return this["CampaignAddr"] as String; }
        set { if (value == null) this["CampaignAddr"] = DBNull.Value; else this["CampaignAddr"] = value; }
      }

      public String CampaignCityStateZip
      {
        get { return this["CampaignCityStateZip"] as String; }
        set { if (value == null) this["CampaignCityStateZip"] = DBNull.Value; else this["CampaignCityStateZip"] = value; }
      }

      public String CampaignPhone
      {
        get { return this["CampaignPhone"] as String; }
        set { if (value == null) this["CampaignPhone"] = DBNull.Value; else this["CampaignPhone"] = value; }
      }

      public String CampaignEmail
      {
        get { return this["CampaignEmail"] as String; }
        set { if (value == null) this["CampaignEmail"] = DBNull.Value; else this["CampaignEmail"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public Int32 DataUpdatedCount
      {
        get { return (Int32) this["DataUpdatedCount"]; }
        set { this["DataUpdatedCount"] = value; }
      }

      public DateTime DatePictureUploaded
      {
        get { return (DateTime) this["DatePictureUploaded"]; }
        set { this["DatePictureUploaded"] = value; }
      }

      public DateTime DateOfBirth
      {
        get { return (DateTime) this["DateOfBirth"]; }
        set { this["DateOfBirth"] = value; }
      }

      public String FacebookWebAddress
      {
        get { return this["FacebookWebAddress"] as String; }
        set { if (value == null) this["FacebookWebAddress"] = DBNull.Value; else this["FacebookWebAddress"] = value; }
      }

      public String WikipediaWebAddress
      {
        get { return this["WikipediaWebAddress"] as String; }
        set { if (value == null) this["WikipediaWebAddress"] = DBNull.Value; else this["WikipediaWebAddress"] = value; }
      }

      public String YouTubeWebAddress
      {
        get { return this["YouTubeWebAddress"] as String; }
        set { if (value == null) this["YouTubeWebAddress"] = DBNull.Value; else this["YouTubeWebAddress"] = value; }
      }

      public String FlickrWebAddress
      {
        get { return this["FlickrWebAddress"] as String; }
        set { if (value == null) this["FlickrWebAddress"] = DBNull.Value; else this["FlickrWebAddress"] = value; }
      }

      public String TwitterWebAddress
      {
        get { return this["TwitterWebAddress"] as String; }
        set { if (value == null) this["TwitterWebAddress"] = DBNull.Value; else this["TwitterWebAddress"] = value; }
      }

      public String RSSFeedWebAddress
      {
        get { return this["RSSFeedWebAddress"] as String; }
        set { if (value == null) this["RSSFeedWebAddress"] = DBNull.Value; else this["RSSFeedWebAddress"] = value; }
      }

      public String VimeoWebAddress
      {
        get { return this["VimeoWebAddress"] as String; }
        set { if (value == null) this["VimeoWebAddress"] = DBNull.Value; else this["VimeoWebAddress"] = value; }
      }

      public String GooglePlusWebAddress
      {
        get { return this["GooglePlusWebAddress"] as String; }
        set { if (value == null) this["GooglePlusWebAddress"] = DBNull.Value; else this["GooglePlusWebAddress"] = value; }
      }

      public String LinkedInWebAddress
      {
        get { return this["LinkedInWebAddress"] as String; }
        set { if (value == null) this["LinkedInWebAddress"] = DBNull.Value; else this["LinkedInWebAddress"] = value; }
      }

      public String PinterestWebAddress
      {
        get { return this["PinterestWebAddress"] as String; }
        set { if (value == null) this["PinterestWebAddress"] = DBNull.Value; else this["PinterestWebAddress"] = value; }
      }

      public String BloggerWebAddress
      {
        get { return this["BloggerWebAddress"] as String; }
        set { if (value == null) this["BloggerWebAddress"] = DBNull.Value; else this["BloggerWebAddress"] = value; }
      }

      public String WebstagramWebAddress
      {
        get { return this["WebstagramWebAddress"] as String; }
        set { if (value == null) this["WebstagramWebAddress"] = DBNull.Value; else this["WebstagramWebAddress"] = value; }
      }

      public String BallotPediaWebAddress
      {
        get { return this["BallotPediaWebAddress"] as String; }
        set { if (value == null) this["BallotPediaWebAddress"] = DBNull.Value; else this["BallotPediaWebAddress"] = value; }
      }

      public String GoFundMeWebAddress
      {
        get { return this["GoFundMeWebAddress"] as String; }
        set { if (value == null) this["GoFundMeWebAddress"] = DBNull.Value; else this["GoFundMeWebAddress"] = value; }
      }

      public String CrowdpacWebAddress
      {
        get { return this["CrowdpacWebAddress"] as String; }
        set { if (value == null) this["CrowdpacWebAddress"] = DBNull.Value; else this["CrowdpacWebAddress"] = value; }
      }

      public String PodcastWebAddress
      {
        get { return this["PodcastWebAddress"] as String; }
        set { if (value == null) this["PodcastWebAddress"] = DBNull.Value; else this["PodcastWebAddress"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan YouTubeRunningTime
      {
        get { return (TimeSpan) this["YouTubeRunningTime"]; }
        set { this["YouTubeRunningTime"] = value; }
      }

      public DateTime YouTubeDate
      {
        get { return (DateTime) this["YouTubeDate"]; }
        set { this["YouTubeDate"] = value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }

      public Boolean YouTubeVideoVerified
      {
        get { return (Boolean) this["YouTubeVideoVerified"]; }
        set { this["YouTubeVideoVerified"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }

      public DateTime YouTubeRefreshDate
      {
        get { return (DateTime) this["YouTubeRefreshDate"]; }
        set { this["YouTubeRefreshDate"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansTable : TypedTableBase<PoliticiansRow>
    {
      public PoliticiansRow this[int index] { get { return (PoliticiansRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansTable(); }

      new public PoliticiansRow NewRow() { return (PoliticiansRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansRow); }

      public void RemoveRow(PoliticiansRow row) { this.Rows.Remove(row); }

      public PoliticiansRow NewRow(Int32 id, String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate)
      {
        PoliticiansRow row = NewRow();
        row.Id = id;
        row.PoliticianKey = politicianKey;
        row.Password = password;
        row.PasswordHint = passwordHint;
        row.LiveOfficeKey = liveOfficeKey;
        row.LiveOfficeStatus = liveOfficeStatus;
        row.LiveElectionKey = liveElectionKey;
        row.StateCode = stateCode;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.AlphaName = alphaName;
        row.VowelStrippedName = vowelStrippedName;
        row.Suffix = suffix;
        row.AddOn = addOn;
        row.EmailVoteUSA = emailVoteUSA;
        row.Email = email;
        row.StateEmail = stateEmail;
        row.LastEmailCode = lastEmailCode;
        row.WebAddress = webAddress;
        row.StateWebAddress = stateWebAddress;
        row.Phone = phone;
        row.StatePhone = statePhone;
        row.Gender = gender;
        row.PartyKey = partyKey;
        row.Address = address;
        row.CityStateZip = cityStateZip;
        row.StateAddress = stateAddress;
        row.StateCityStateZip = stateCityStateZip;
        row.CampaignName = campaignName;
        row.CampaignAddress = campaignAddress;
        row.CampaignCityStateZip = campaignCityStateZip;
        row.CampaignPhone = campaignPhone;
        row.CampaignEmail = campaignEmail;
        row.DataLastUpdated = dataLastUpdated;
        row.DataUpdatedCount = dataUpdatedCount;
        row.DatePictureUploaded = datePictureUploaded;
        row.DateOfBirth = dateOfBirth;
        row.FacebookWebAddress = facebookWebAddress;
        row.WikipediaWebAddress = wikipediaWebAddress;
        row.YouTubeWebAddress = youTubeWebAddress;
        row.FlickrWebAddress = flickrWebAddress;
        row.TwitterWebAddress = twitterWebAddress;
        row.RSSFeedWebAddress = RSSFeedWebAddress;
        row.VimeoWebAddress = vimeoWebAddress;
        row.GooglePlusWebAddress = googlePlusWebAddress;
        row.LinkedInWebAddress = linkedInWebAddress;
        row.PinterestWebAddress = pinterestWebAddress;
        row.BloggerWebAddress = bloggerWebAddress;
        row.WebstagramWebAddress = webstagramWebAddress;
        row.BallotPediaWebAddress = ballotPediaWebAddress;
        row.GoFundMeWebAddress = goFundMeWebAddress;
        row.CrowdpacWebAddress = crowdpacWebAddress;
        row.PodcastWebAddress = podcastWebAddress;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeDate = youTubeDate;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.YouTubeVideoVerified = youTubeVideoVerified;
        row.OptOut = optOut;
        row.YouTubeRefreshDate = youTubeRefreshDate;
        return row;
      }

      public void AddRow(Int32 id, String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate)
      {
        PoliticiansRow row = NewRow(id, politicianKey, password, passwordHint, liveOfficeKey, liveOfficeStatus, liveElectionKey, stateCode, firstName, middleName, nickname, lastName, alphaName, vowelStrippedName, suffix, addOn, emailVoteUSA, email, stateEmail, lastEmailCode, webAddress, stateWebAddress, phone, statePhone, gender, partyKey, address, cityStateZip, stateAddress, stateCityStateZip, campaignName, campaignAddress, campaignCityStateZip, campaignPhone, campaignEmail, dataLastUpdated, dataUpdatedCount, datePictureUploaded, dateOfBirth, facebookWebAddress, wikipediaWebAddress, youTubeWebAddress, flickrWebAddress, twitterWebAddress, RSSFeedWebAddress, vimeoWebAddress, googlePlusWebAddress, linkedInWebAddress, pinterestWebAddress, bloggerWebAddress, webstagramWebAddress, ballotPediaWebAddress, goFundMeWebAddress, crowdpacWebAddress, podcastWebAddress, youTubeDescription, youTubeRunningTime, youTubeDate, youTubeAutoDisable, youTubeVideoVerified, optOut, youTubeRefreshDate);
        AddRow(row);
      }

      public PoliticiansRow NewRow(String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate)
      {
        PoliticiansRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.Password = password;
        row.PasswordHint = passwordHint;
        row.LiveOfficeKey = liveOfficeKey;
        row.LiveOfficeStatus = liveOfficeStatus;
        row.LiveElectionKey = liveElectionKey;
        row.StateCode = stateCode;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.AlphaName = alphaName;
        row.VowelStrippedName = vowelStrippedName;
        row.Suffix = suffix;
        row.AddOn = addOn;
        row.EmailVoteUSA = emailVoteUSA;
        row.Email = email;
        row.StateEmail = stateEmail;
        row.LastEmailCode = lastEmailCode;
        row.WebAddress = webAddress;
        row.StateWebAddress = stateWebAddress;
        row.Phone = phone;
        row.StatePhone = statePhone;
        row.Gender = gender;
        row.PartyKey = partyKey;
        row.Address = address;
        row.CityStateZip = cityStateZip;
        row.StateAddress = stateAddress;
        row.StateCityStateZip = stateCityStateZip;
        row.CampaignName = campaignName;
        row.CampaignAddress = campaignAddress;
        row.CampaignCityStateZip = campaignCityStateZip;
        row.CampaignPhone = campaignPhone;
        row.CampaignEmail = campaignEmail;
        row.DataLastUpdated = dataLastUpdated;
        row.DataUpdatedCount = dataUpdatedCount;
        row.DatePictureUploaded = datePictureUploaded;
        row.DateOfBirth = dateOfBirth;
        row.FacebookWebAddress = facebookWebAddress;
        row.WikipediaWebAddress = wikipediaWebAddress;
        row.YouTubeWebAddress = youTubeWebAddress;
        row.FlickrWebAddress = flickrWebAddress;
        row.TwitterWebAddress = twitterWebAddress;
        row.RSSFeedWebAddress = RSSFeedWebAddress;
        row.VimeoWebAddress = vimeoWebAddress;
        row.GooglePlusWebAddress = googlePlusWebAddress;
        row.LinkedInWebAddress = linkedInWebAddress;
        row.PinterestWebAddress = pinterestWebAddress;
        row.BloggerWebAddress = bloggerWebAddress;
        row.WebstagramWebAddress = webstagramWebAddress;
        row.BallotPediaWebAddress = ballotPediaWebAddress;
        row.GoFundMeWebAddress = goFundMeWebAddress;
        row.CrowdpacWebAddress = crowdpacWebAddress;
        row.PodcastWebAddress = podcastWebAddress;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeDate = youTubeDate;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        row.YouTubeVideoVerified = youTubeVideoVerified;
        row.OptOut = optOut;
        row.YouTubeRefreshDate = youTubeRefreshDate;
        return row;
      }

      public void AddRow(String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate)
      {
        PoliticiansRow row = NewRow(politicianKey, password, passwordHint, liveOfficeKey, liveOfficeStatus, liveElectionKey, stateCode, firstName, middleName, nickname, lastName, alphaName, vowelStrippedName, suffix, addOn, emailVoteUSA, email, stateEmail, lastEmailCode, webAddress, stateWebAddress, phone, statePhone, gender, partyKey, address, cityStateZip, stateAddress, stateCityStateZip, campaignName, campaignAddress, campaignCityStateZip, campaignPhone, campaignEmail, dataLastUpdated, dataUpdatedCount, datePictureUploaded, dateOfBirth, facebookWebAddress, wikipediaWebAddress, youTubeWebAddress, flickrWebAddress, twitterWebAddress, RSSFeedWebAddress, vimeoWebAddress, googlePlusWebAddress, linkedInWebAddress, pinterestWebAddress, bloggerWebAddress, webstagramWebAddress, ballotPediaWebAddress, goFundMeWebAddress, crowdpacWebAddress, podcastWebAddress, youTubeDescription, youTubeRunningTime, youTubeDate, youTubeAutoDisable, youTubeVideoVerified, optOut, youTubeRefreshDate);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn PasswordHintColumn { get { return this.Columns["PasswordHint"]; } }

      public DataColumn LiveOfficeKeyColumn { get { return this.Columns["LiveOfficeKey"]; } }

      public DataColumn LiveOfficeStatusColumn { get { return this.Columns["LiveOfficeStatus"]; } }

      public DataColumn LiveElectionKeyColumn { get { return this.Columns["LiveElectionKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LName"]; } }

      public DataColumn AlphaNameColumn { get { return this.Columns["AlphaName"]; } }

      public DataColumn VowelStrippedNameColumn { get { return this.Columns["VowelStrippedName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn AddOnColumn { get { return this.Columns["AddOn"]; } }

      public DataColumn EmailVoteUSAColumn { get { return this.Columns["EmailAddrVoteUSA"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EmailAddr"]; } }

      public DataColumn StateEmailColumn { get { return this.Columns["StateEmailAddr"]; } }

      public DataColumn LastEmailCodeColumn { get { return this.Columns["LastEmailCode"]; } }

      public DataColumn WebAddressColumn { get { return this.Columns["WebAddr"]; } }

      public DataColumn StateWebAddressColumn { get { return this.Columns["StateWebAddr"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn StatePhoneColumn { get { return this.Columns["StatePhone"]; } }

      public DataColumn GenderColumn { get { return this.Columns["Gender"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn StateAddressColumn { get { return this.Columns["StateAddress"]; } }

      public DataColumn StateCityStateZipColumn { get { return this.Columns["StateCityStateZip"]; } }

      public DataColumn CampaignNameColumn { get { return this.Columns["CampaignName"]; } }

      public DataColumn CampaignAddressColumn { get { return this.Columns["CampaignAddr"]; } }

      public DataColumn CampaignCityStateZipColumn { get { return this.Columns["CampaignCityStateZip"]; } }

      public DataColumn CampaignPhoneColumn { get { return this.Columns["CampaignPhone"]; } }

      public DataColumn CampaignEmailColumn { get { return this.Columns["CampaignEmail"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn DataUpdatedCountColumn { get { return this.Columns["DataUpdatedCount"]; } }

      public DataColumn DatePictureUploadedColumn { get { return this.Columns["DatePictureUploaded"]; } }

      public DataColumn DateOfBirthColumn { get { return this.Columns["DateOfBirth"]; } }

      public DataColumn FacebookWebAddressColumn { get { return this.Columns["FacebookWebAddress"]; } }

      public DataColumn WikipediaWebAddressColumn { get { return this.Columns["WikipediaWebAddress"]; } }

      public DataColumn YouTubeWebAddressColumn { get { return this.Columns["YouTubeWebAddress"]; } }

      public DataColumn FlickrWebAddressColumn { get { return this.Columns["FlickrWebAddress"]; } }

      public DataColumn TwitterWebAddressColumn { get { return this.Columns["TwitterWebAddress"]; } }

      public DataColumn RSSFeedWebAddressColumn { get { return this.Columns["RSSFeedWebAddress"]; } }

      public DataColumn VimeoWebAddressColumn { get { return this.Columns["VimeoWebAddress"]; } }

      public DataColumn GooglePlusWebAddressColumn { get { return this.Columns["GooglePlusWebAddress"]; } }

      public DataColumn LinkedInWebAddressColumn { get { return this.Columns["LinkedInWebAddress"]; } }

      public DataColumn PinterestWebAddressColumn { get { return this.Columns["PinterestWebAddress"]; } }

      public DataColumn BloggerWebAddressColumn { get { return this.Columns["BloggerWebAddress"]; } }

      public DataColumn WebstagramWebAddressColumn { get { return this.Columns["WebstagramWebAddress"]; } }

      public DataColumn BallotPediaWebAddressColumn { get { return this.Columns["BallotPediaWebAddress"]; } }

      public DataColumn GoFundMeWebAddressColumn { get { return this.Columns["GoFundMeWebAddress"]; } }

      public DataColumn CrowdpacWebAddressColumn { get { return this.Columns["CrowdpacWebAddress"]; } }

      public DataColumn PodcastWebAddressColumn { get { return this.Columns["PodcastWebAddress"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public DataColumn YouTubeVideoVerifiedColumn { get { return this.Columns["YouTubeVideoVerified"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public DataColumn YouTubeRefreshDateColumn { get { return this.Columns["YouTubeRefreshDate"]; } }

      public enum ColumnSet { All, Names, Cache, Addresses, Phones, Emails, WebAddresses, DuplicateNames, LiveOffice, SearchKeyUpdate, YouTubeRefresh }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Password", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PasswordHint", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlphaName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VowelStrippedName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddrVoteUSA", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastEmailCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Gender", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataUpdatedCount", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DatePictureUploaded", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateOfBirth", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WikipediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FlickrWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TwitterWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RSSFeedWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VimeoWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GooglePlusWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LinkedInWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PinterestWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BloggerWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebstagramWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotPediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GoFundMeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CrowdpacWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PodcastWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeVideoVerified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitNamesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateOfBirth", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WikipediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FlickrWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TwitterWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RSSFeedWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VimeoWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GooglePlusWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LinkedInWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PinterestWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BloggerWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebstagramWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotPediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GoFundMeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CrowdpacWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PodcastWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAddressesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPhonesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitWebAddressesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDuplicateNamesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitLiveOfficeColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitSearchKeyUpdateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlphaName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VowelStrippedName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitYouTubeRefreshColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PoliticiansTable() : this(ColumnSet.All) { }

      public PoliticiansTable(ColumnSet columnSet)
      {
        this.TableName = "Politicians";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Names:
            InitNamesColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Addresses:
            InitAddressesColumns();
            break;

          case ColumnSet.Phones:
            InitPhonesColumns();
            break;

          case ColumnSet.Emails:
            InitEmailsColumns();
            break;

          case ColumnSet.WebAddresses:
            InitWebAddressesColumns();
            break;

          case ColumnSet.DuplicateNames:
            InitDuplicateNamesColumns();
            break;

          case ColumnSet.LiveOffice:
            InitLiveOfficeColumns();
            break;

          case ColumnSet.SearchKeyUpdate:
            InitSearchKeyUpdateColumns();
            break;

          case ColumnSet.YouTubeRefresh:
            InitYouTubeRefreshColumns();
            break;
        }
      }

      protected PoliticiansTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Politicians
    {
      public const string TableName = "Politicians";

      public enum Column { Id, PoliticianKey, Password, PasswordHint, LiveOfficeKey, LiveOfficeStatus, LiveElectionKey, StateCode, FirstName, MiddleName, Nickname, LastName, AlphaName, VowelStrippedName, Suffix, AddOn, EmailVoteUSA, Email, StateEmail, LastEmailCode, WebAddress, StateWebAddress, Phone, StatePhone, Gender, PartyKey, Address, CityStateZip, StateAddress, StateCityStateZip, CampaignName, CampaignAddress, CampaignCityStateZip, CampaignPhone, CampaignEmail, DataLastUpdated, DataUpdatedCount, DatePictureUploaded, DateOfBirth, FacebookWebAddress, WikipediaWebAddress, YouTubeWebAddress, FlickrWebAddress, TwitterWebAddress, RSSFeedWebAddress, VimeoWebAddress, GooglePlusWebAddress, LinkedInWebAddress, PinterestWebAddress, BloggerWebAddress, WebstagramWebAddress, BallotPediaWebAddress, GoFundMeWebAddress, CrowdpacWebAddress, PodcastWebAddress, YouTubeDescription, YouTubeRunningTime, YouTubeDate, YouTubeAutoDisable, YouTubeVideoVerified, OptOut, YouTubeRefreshDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Password, "Password" },
        { Column.PasswordHint, "PasswordHint" },
        { Column.LiveOfficeKey, "LiveOfficeKey" },
        { Column.LiveOfficeStatus, "LiveOfficeStatus" },
        { Column.LiveElectionKey, "LiveElectionKey" },
        { Column.StateCode, "StateCode" },
        { Column.FirstName, "FName" },
        { Column.MiddleName, "MName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LName" },
        { Column.AlphaName, "AlphaName" },
        { Column.VowelStrippedName, "VowelStrippedName" },
        { Column.Suffix, "Suffix" },
        { Column.AddOn, "AddOn" },
        { Column.EmailVoteUSA, "EmailAddrVoteUSA" },
        { Column.Email, "EmailAddr" },
        { Column.StateEmail, "StateEmailAddr" },
        { Column.LastEmailCode, "LastEmailCode" },
        { Column.WebAddress, "WebAddr" },
        { Column.StateWebAddress, "StateWebAddr" },
        { Column.Phone, "Phone" },
        { Column.StatePhone, "StatePhone" },
        { Column.Gender, "Gender" },
        { Column.PartyKey, "PartyKey" },
        { Column.Address, "Address" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.StateAddress, "StateAddress" },
        { Column.StateCityStateZip, "StateCityStateZip" },
        { Column.CampaignName, "CampaignName" },
        { Column.CampaignAddress, "CampaignAddr" },
        { Column.CampaignCityStateZip, "CampaignCityStateZip" },
        { Column.CampaignPhone, "CampaignPhone" },
        { Column.CampaignEmail, "CampaignEmail" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.DataUpdatedCount, "DataUpdatedCount" },
        { Column.DatePictureUploaded, "DatePictureUploaded" },
        { Column.DateOfBirth, "DateOfBirth" },
        { Column.FacebookWebAddress, "FacebookWebAddress" },
        { Column.WikipediaWebAddress, "WikipediaWebAddress" },
        { Column.YouTubeWebAddress, "YouTubeWebAddress" },
        { Column.FlickrWebAddress, "FlickrWebAddress" },
        { Column.TwitterWebAddress, "TwitterWebAddress" },
        { Column.RSSFeedWebAddress, "RSSFeedWebAddress" },
        { Column.VimeoWebAddress, "VimeoWebAddress" },
        { Column.GooglePlusWebAddress, "GooglePlusWebAddress" },
        { Column.LinkedInWebAddress, "LinkedInWebAddress" },
        { Column.PinterestWebAddress, "PinterestWebAddress" },
        { Column.BloggerWebAddress, "BloggerWebAddress" },
        { Column.WebstagramWebAddress, "WebstagramWebAddress" },
        { Column.BallotPediaWebAddress, "BallotPediaWebAddress" },
        { Column.GoFundMeWebAddress, "GoFundMeWebAddress" },
        { Column.CrowdpacWebAddress, "CrowdpacWebAddress" },
        { Column.PodcastWebAddress, "PodcastWebAddress" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" },
        { Column.YouTubeVideoVerified, "YouTubeVideoVerified" },
        { Column.OptOut, "OptOut" },
        { Column.YouTubeRefreshDate, "YouTubeRefreshDate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Politicians (Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate) VALUES (@Id,@PoliticianKey,@Password,@PasswordHint,@LiveOfficeKey,@LiveOfficeStatus,@LiveElectionKey,@StateCode,@FirstName,@MiddleName,@Nickname,@LastName,@AlphaName,@VowelStrippedName,@Suffix,@AddOn,@EmailVoteUSA,@Email,@StateEmail,@LastEmailCode,@WebAddress,@StateWebAddress,@Phone,@StatePhone,@Gender,@PartyKey,@Address,@CityStateZip,@StateAddress,@StateCityStateZip,@CampaignName,@CampaignAddress,@CampaignCityStateZip,@CampaignPhone,@CampaignEmail,@DataLastUpdated,@DataUpdatedCount,@DatePictureUploaded,@DateOfBirth,@FacebookWebAddress,@WikipediaWebAddress,@YouTubeWebAddress,@FlickrWebAddress,@TwitterWebAddress,@RSSFeedWebAddress,@VimeoWebAddress,@GooglePlusWebAddress,@LinkedInWebAddress,@PinterestWebAddress,@BloggerWebAddress,@WebstagramWebAddress,@BallotPediaWebAddress,@GoFundMeWebAddress,@CrowdpacWebAddress,@PodcastWebAddress,@YouTubeDescription,@YouTubeRunningTime,@YouTubeDate,@YouTubeAutoDisable,@YouTubeVideoVerified,@OptOut,@YouTubeRefreshDate)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "Password", password);
        VoteDb.AddCommandParameter(cmd, "PasswordHint", passwordHint);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeStatus", liveOfficeStatus);
        VoteDb.AddCommandParameter(cmd, "LiveElectionKey", liveElectionKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "AlphaName", alphaName);
        VoteDb.AddCommandParameter(cmd, "VowelStrippedName", vowelStrippedName);
        VoteDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteDb.AddCommandParameter(cmd, "AddOn", addOn);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "LastEmailCode", lastEmailCode);
        VoteDb.AddCommandParameter(cmd, "WebAddress", webAddress);
        VoteDb.AddCommandParameter(cmd, "StateWebAddress", stateWebAddress);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "StatePhone", statePhone);
        VoteDb.AddCommandParameter(cmd, "Gender", gender);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteDb.AddCommandParameter(cmd, "StateAddress", stateAddress);
        VoteDb.AddCommandParameter(cmd, "StateCityStateZip", stateCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignName", campaignName);
        VoteDb.AddCommandParameter(cmd, "CampaignAddress", campaignAddress);
        VoteDb.AddCommandParameter(cmd, "CampaignCityStateZip", campaignCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignPhone", campaignPhone);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "DataUpdatedCount", dataUpdatedCount);
        VoteDb.AddCommandParameter(cmd, "DatePictureUploaded", datePictureUploaded);
        VoteDb.AddCommandParameter(cmd, "DateOfBirth", dateOfBirth);
        VoteDb.AddCommandParameter(cmd, "FacebookWebAddress", facebookWebAddress);
        VoteDb.AddCommandParameter(cmd, "WikipediaWebAddress", wikipediaWebAddress);
        VoteDb.AddCommandParameter(cmd, "YouTubeWebAddress", youTubeWebAddress);
        VoteDb.AddCommandParameter(cmd, "FlickrWebAddress", flickrWebAddress);
        VoteDb.AddCommandParameter(cmd, "TwitterWebAddress", twitterWebAddress);
        VoteDb.AddCommandParameter(cmd, "RSSFeedWebAddress", RSSFeedWebAddress);
        VoteDb.AddCommandParameter(cmd, "VimeoWebAddress", vimeoWebAddress);
        VoteDb.AddCommandParameter(cmd, "GooglePlusWebAddress", googlePlusWebAddress);
        VoteDb.AddCommandParameter(cmd, "LinkedInWebAddress", linkedInWebAddress);
        VoteDb.AddCommandParameter(cmd, "PinterestWebAddress", pinterestWebAddress);
        VoteDb.AddCommandParameter(cmd, "BloggerWebAddress", bloggerWebAddress);
        VoteDb.AddCommandParameter(cmd, "WebstagramWebAddress", webstagramWebAddress);
        VoteDb.AddCommandParameter(cmd, "BallotPediaWebAddress", ballotPediaWebAddress);
        VoteDb.AddCommandParameter(cmd, "GoFundMeWebAddress", goFundMeWebAddress);
        VoteDb.AddCommandParameter(cmd, "CrowdpacWebAddress", crowdpacWebAddress);
        VoteDb.AddCommandParameter(cmd, "PodcastWebAddress", podcastWebAddress);
        VoteDb.AddCommandParameter(cmd, "YouTubeDescription", youTubeDescription);
        VoteDb.AddCommandParameter(cmd, "YouTubeRunningTime", youTubeRunningTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeDate", youTubeDate);
        VoteDb.AddCommandParameter(cmd, "YouTubeAutoDisable", youTubeAutoDisable);
        VoteDb.AddCommandParameter(cmd, "YouTubeVideoVerified", youTubeVideoVerified);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "YouTubeRefreshDate", youTubeRefreshDate);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String politicianKey, String password, String passwordHint, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, String goFundMeWebAddress, String crowdpacWebAddress, String podcastWebAddress, String youTubeDescription, TimeSpan youTubeRunningTime, DateTime youTubeDate, String youTubeAutoDisable, Boolean youTubeVideoVerified, Boolean optOut, DateTime youTubeRefreshDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Politicians (PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate) VALUES (@PoliticianKey,@Password,@PasswordHint,@LiveOfficeKey,@LiveOfficeStatus,@LiveElectionKey,@StateCode,@FirstName,@MiddleName,@Nickname,@LastName,@AlphaName,@VowelStrippedName,@Suffix,@AddOn,@EmailVoteUSA,@Email,@StateEmail,@LastEmailCode,@WebAddress,@StateWebAddress,@Phone,@StatePhone,@Gender,@PartyKey,@Address,@CityStateZip,@StateAddress,@StateCityStateZip,@CampaignName,@CampaignAddress,@CampaignCityStateZip,@CampaignPhone,@CampaignEmail,@DataLastUpdated,@DataUpdatedCount,@DatePictureUploaded,@DateOfBirth,@FacebookWebAddress,@WikipediaWebAddress,@YouTubeWebAddress,@FlickrWebAddress,@TwitterWebAddress,@RSSFeedWebAddress,@VimeoWebAddress,@GooglePlusWebAddress,@LinkedInWebAddress,@PinterestWebAddress,@BloggerWebAddress,@WebstagramWebAddress,@BallotPediaWebAddress,@GoFundMeWebAddress,@CrowdpacWebAddress,@PodcastWebAddress,@YouTubeDescription,@YouTubeRunningTime,@YouTubeDate,@YouTubeAutoDisable,@YouTubeVideoVerified,@OptOut,@YouTubeRefreshDate)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "Password", password);
        VoteDb.AddCommandParameter(cmd, "PasswordHint", passwordHint);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeStatus", liveOfficeStatus);
        VoteDb.AddCommandParameter(cmd, "LiveElectionKey", liveElectionKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "AlphaName", alphaName);
        VoteDb.AddCommandParameter(cmd, "VowelStrippedName", vowelStrippedName);
        VoteDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteDb.AddCommandParameter(cmd, "AddOn", addOn);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "LastEmailCode", lastEmailCode);
        VoteDb.AddCommandParameter(cmd, "WebAddress", webAddress);
        VoteDb.AddCommandParameter(cmd, "StateWebAddress", stateWebAddress);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "StatePhone", statePhone);
        VoteDb.AddCommandParameter(cmd, "Gender", gender);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteDb.AddCommandParameter(cmd, "StateAddress", stateAddress);
        VoteDb.AddCommandParameter(cmd, "StateCityStateZip", stateCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignName", campaignName);
        VoteDb.AddCommandParameter(cmd, "CampaignAddress", campaignAddress);
        VoteDb.AddCommandParameter(cmd, "CampaignCityStateZip", campaignCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignPhone", campaignPhone);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "DataUpdatedCount", dataUpdatedCount);
        VoteDb.AddCommandParameter(cmd, "DatePictureUploaded", datePictureUploaded);
        VoteDb.AddCommandParameter(cmd, "DateOfBirth", dateOfBirth);
        VoteDb.AddCommandParameter(cmd, "FacebookWebAddress", facebookWebAddress);
        VoteDb.AddCommandParameter(cmd, "WikipediaWebAddress", wikipediaWebAddress);
        VoteDb.AddCommandParameter(cmd, "YouTubeWebAddress", youTubeWebAddress);
        VoteDb.AddCommandParameter(cmd, "FlickrWebAddress", flickrWebAddress);
        VoteDb.AddCommandParameter(cmd, "TwitterWebAddress", twitterWebAddress);
        VoteDb.AddCommandParameter(cmd, "RSSFeedWebAddress", RSSFeedWebAddress);
        VoteDb.AddCommandParameter(cmd, "VimeoWebAddress", vimeoWebAddress);
        VoteDb.AddCommandParameter(cmd, "GooglePlusWebAddress", googlePlusWebAddress);
        VoteDb.AddCommandParameter(cmd, "LinkedInWebAddress", linkedInWebAddress);
        VoteDb.AddCommandParameter(cmd, "PinterestWebAddress", pinterestWebAddress);
        VoteDb.AddCommandParameter(cmd, "BloggerWebAddress", bloggerWebAddress);
        VoteDb.AddCommandParameter(cmd, "WebstagramWebAddress", webstagramWebAddress);
        VoteDb.AddCommandParameter(cmd, "BallotPediaWebAddress", ballotPediaWebAddress);
        VoteDb.AddCommandParameter(cmd, "GoFundMeWebAddress", goFundMeWebAddress);
        VoteDb.AddCommandParameter(cmd, "CrowdpacWebAddress", crowdpacWebAddress);
        VoteDb.AddCommandParameter(cmd, "PodcastWebAddress", podcastWebAddress);
        VoteDb.AddCommandParameter(cmd, "YouTubeDescription", youTubeDescription);
        VoteDb.AddCommandParameter(cmd, "YouTubeRunningTime", youTubeRunningTime);
        VoteDb.AddCommandParameter(cmd, "YouTubeDate", youTubeDate);
        VoteDb.AddCommandParameter(cmd, "YouTubeAutoDisable", youTubeAutoDisable);
        VoteDb.AddCommandParameter(cmd, "YouTubeVideoVerified", youTubeVideoVerified);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "YouTubeRefreshDate", youTubeRefreshDate);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static PoliticiansTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansTable FillTable(DbCommand command, PoliticiansTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansTable table = new PoliticiansTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansTable table, PoliticiansTable.ColumnSet columnSet = PoliticiansTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string PasswordHintColumnName { get { return "PasswordHint"; } }

      public static string LiveOfficeKeyColumnName { get { return "LiveOfficeKey"; } }

      public static string LiveOfficeStatusColumnName { get { return "LiveOfficeStatus"; } }

      public static string LiveElectionKeyColumnName { get { return "LiveElectionKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string FirstNameColumnName { get { return "FName"; } }

      public static string MiddleNameColumnName { get { return "MName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LName"; } }

      public static string AlphaNameColumnName { get { return "AlphaName"; } }

      public static string VowelStrippedNameColumnName { get { return "VowelStrippedName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string AddOnColumnName { get { return "AddOn"; } }

      public static string EmailVoteUSAColumnName { get { return "EmailAddrVoteUSA"; } }

      public static string EmailColumnName { get { return "EmailAddr"; } }

      public static string StateEmailColumnName { get { return "StateEmailAddr"; } }

      public static string LastEmailCodeColumnName { get { return "LastEmailCode"; } }

      public static string WebAddressColumnName { get { return "WebAddr"; } }

      public static string StateWebAddressColumnName { get { return "StateWebAddr"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string StatePhoneColumnName { get { return "StatePhone"; } }

      public static string GenderColumnName { get { return "Gender"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string StateAddressColumnName { get { return "StateAddress"; } }

      public static string StateCityStateZipColumnName { get { return "StateCityStateZip"; } }

      public static string CampaignNameColumnName { get { return "CampaignName"; } }

      public static string CampaignAddressColumnName { get { return "CampaignAddr"; } }

      public static string CampaignCityStateZipColumnName { get { return "CampaignCityStateZip"; } }

      public static string CampaignPhoneColumnName { get { return "CampaignPhone"; } }

      public static string CampaignEmailColumnName { get { return "CampaignEmail"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string DataUpdatedCountColumnName { get { return "DataUpdatedCount"; } }

      public static string DatePictureUploadedColumnName { get { return "DatePictureUploaded"; } }

      public static string DateOfBirthColumnName { get { return "DateOfBirth"; } }

      public static string FacebookWebAddressColumnName { get { return "FacebookWebAddress"; } }

      public static string WikipediaWebAddressColumnName { get { return "WikipediaWebAddress"; } }

      public static string YouTubeWebAddressColumnName { get { return "YouTubeWebAddress"; } }

      public static string FlickrWebAddressColumnName { get { return "FlickrWebAddress"; } }

      public static string TwitterWebAddressColumnName { get { return "TwitterWebAddress"; } }

      public static string RSSFeedWebAddressColumnName { get { return "RSSFeedWebAddress"; } }

      public static string VimeoWebAddressColumnName { get { return "VimeoWebAddress"; } }

      public static string GooglePlusWebAddressColumnName { get { return "GooglePlusWebAddress"; } }

      public static string LinkedInWebAddressColumnName { get { return "LinkedInWebAddress"; } }

      public static string PinterestWebAddressColumnName { get { return "PinterestWebAddress"; } }

      public static string BloggerWebAddressColumnName { get { return "BloggerWebAddress"; } }

      public static string WebstagramWebAddressColumnName { get { return "WebstagramWebAddress"; } }

      public static string BallotPediaWebAddressColumnName { get { return "BallotPediaWebAddress"; } }

      public static string GoFundMeWebAddressColumnName { get { return "GoFundMeWebAddress"; } }

      public static string CrowdpacWebAddressColumnName { get { return "CrowdpacWebAddress"; } }

      public static string PodcastWebAddressColumnName { get { return "PodcastWebAddress"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static string YouTubeVideoVerifiedColumnName { get { return "YouTubeVideoVerified"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static string YouTubeRefreshDateColumnName { get { return "YouTubeRefreshDate"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int PasswordMaxLength { get { return 50; } }

      public static int PasswordHintMaxLength { get { return 50; } }

      public static int LiveOfficeKeyMaxLength { get { return 150; } }

      public static int LiveOfficeStatusMaxLength { get { return 50; } }

      public static int LiveElectionKeyMaxLength { get { return 18; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int FirstNameMaxLength { get { return 100; } }

      public static int MiddleNameMaxLength { get { return 100; } }

      public static int NicknameMaxLength { get { return 100; } }

      public static int LastNameMaxLength { get { return 100; } }

      public static int AlphaNameMaxLength { get { return 100; } }

      public static int VowelStrippedNameMaxLength { get { return 100; } }

      public static int SuffixMaxLength { get { return 20; } }

      public static int AddOnMaxLength { get { return 20; } }

      public static int EmailVoteUSAMaxLength { get { return 200; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int StateEmailMaxLength { get { return 200; } }

      public static int LastEmailCodeMaxLength { get { return 10; } }

      public static int WebAddressMaxLength { get { return int.MaxValue; } }

      public static int StateWebAddressMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int StatePhoneMaxLength { get { return int.MaxValue; } }

      public static int GenderMaxLength { get { return 1; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int AddressMaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int StateAddressMaxLength { get { return int.MaxValue; } }

      public static int StateCityStateZipMaxLength { get { return int.MaxValue; } }

      public static int CampaignNameMaxLength { get { return int.MaxValue; } }

      public static int CampaignAddressMaxLength { get { return int.MaxValue; } }

      public static int CampaignCityStateZipMaxLength { get { return int.MaxValue; } }

      public static int CampaignPhoneMaxLength { get { return int.MaxValue; } }

      public static int CampaignEmailMaxLength { get { return 200; } }

      public static int FacebookWebAddressMaxLength { get { return int.MaxValue; } }

      public static int WikipediaWebAddressMaxLength { get { return int.MaxValue; } }

      public static int YouTubeWebAddressMaxLength { get { return int.MaxValue; } }

      public static int FlickrWebAddressMaxLength { get { return int.MaxValue; } }

      public static int TwitterWebAddressMaxLength { get { return int.MaxValue; } }

      public static int RSSFeedWebAddressMaxLength { get { return int.MaxValue; } }

      public static int VimeoWebAddressMaxLength { get { return int.MaxValue; } }

      public static int GooglePlusWebAddressMaxLength { get { return int.MaxValue; } }

      public static int LinkedInWebAddressMaxLength { get { return int.MaxValue; } }

      public static int PinterestWebAddressMaxLength { get { return int.MaxValue; } }

      public static int BloggerWebAddressMaxLength { get { return int.MaxValue; } }

      public static int WebstagramWebAddressMaxLength { get { return int.MaxValue; } }

      public static int BallotPediaWebAddressMaxLength { get { return int.MaxValue; } }

      public static int GoFundMeWebAddressMaxLength { get { return int.MaxValue; } }

      public static int CrowdpacWebAddressMaxLength { get { return int.MaxValue; } }

      public static int PodcastWebAddressMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Password FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordHintById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PasswordHint FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeKey FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeStatusById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeStatus FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveElectionKey FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMiddleNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNicknameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Nickname FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAlphaNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AlphaName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVowelStrippedNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VowelStrippedName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSuffixById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Suffix FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddOnById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOn FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailVoteUSAById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddrVoteUSA FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddr FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateEmailAddr FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastEmailCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastEmailCode FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebAddr FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateWebAddr FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStatePhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StatePhone FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGenderById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Gender FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZipById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCityStateZipById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCityStateZip FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignName FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignAddr FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignCityStateZipById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignCityStateZip FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignPhone FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignEmail FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDataLastUpdatedById(Int32 id)
      {
        return _GetDataLastUpdatedById(id, null);
      }

      public static DateTime GetDataLastUpdatedById(Int32 id, DateTime defaultValue)
      {
        return _GetDataLastUpdatedById(id, defaultValue).Value;
      }

      private static DateTime? _GetDataLastUpdatedById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetDataUpdatedCountById(Int32 id)
      {
        return _GetDataUpdatedCountById(id, null);
      }

      public static Int32 GetDataUpdatedCountById(Int32 id, Int32 defaultValue)
      {
        return _GetDataUpdatedCountById(id, defaultValue).Value;
      }

      private static Int32? _GetDataUpdatedCountById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataUpdatedCount FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDatePictureUploadedById(Int32 id)
      {
        return _GetDatePictureUploadedById(id, null);
      }

      public static DateTime GetDatePictureUploadedById(Int32 id, DateTime defaultValue)
      {
        return _GetDatePictureUploadedById(id, defaultValue).Value;
      }

      private static DateTime? _GetDatePictureUploadedById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DatePictureUploaded FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetDateOfBirthById(Int32 id)
      {
        return _GetDateOfBirthById(id, null);
      }

      public static DateTime GetDateOfBirthById(Int32 id, DateTime defaultValue)
      {
        return _GetDateOfBirthById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateOfBirthById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateOfBirth FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetFacebookWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWikipediaWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WikipediaWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFlickrWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FlickrWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTwitterWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TwitterWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRSSFeedWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RSSFeedWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVimeoWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VimeoWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGooglePlusWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GooglePlusWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLinkedInWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LinkedInWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPinterestWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PinterestWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBloggerWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BloggerWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebstagramWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebstagramWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotPediaWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotPediaWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoFundMeWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoFundMeWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCrowdpacWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CrowdpacWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPodcastWebAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PodcastWebAddress FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeDescriptionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeDescription FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetYouTubeRunningTimeById(Int32 id)
      {
        return _GetYouTubeRunningTimeById(id, null);
      }

      public static TimeSpan GetYouTubeRunningTimeById(Int32 id, TimeSpan defaultValue)
      {
        return _GetYouTubeRunningTimeById(id, defaultValue).Value;
      }

      private static TimeSpan? _GetYouTubeRunningTimeById(Int32 id, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRunningTime FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static DateTime? GetYouTubeDateById(Int32 id)
      {
        return _GetYouTubeDateById(id, null);
      }

      public static DateTime GetYouTubeDateById(Int32 id, DateTime defaultValue)
      {
        return _GetYouTubeDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeDate FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetYouTubeAutoDisableById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeAutoDisable FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetYouTubeVideoVerifiedById(Int32 id)
      {
        return _GetYouTubeVideoVerifiedById(id, null);
      }

      public static Boolean GetYouTubeVideoVerifiedById(Int32 id, Boolean defaultValue)
      {
        return _GetYouTubeVideoVerifiedById(id, defaultValue).Value;
      }

      private static Boolean? _GetYouTubeVideoVerifiedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeVideoVerified FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetOptOutById(Int32 id)
      {
        return _GetOptOutById(id, null);
      }

      public static Boolean GetOptOutById(Int32 id, Boolean defaultValue)
      {
        return _GetOptOutById(id, defaultValue).Value;
      }

      private static Boolean? _GetOptOutById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetYouTubeRefreshDateById(Int32 id)
      {
        return _GetYouTubeRefreshDateById(id, null);
      }

      public static DateTime GetYouTubeRefreshDateById(Int32 id, DateTime defaultValue)
      {
        return _GetYouTubeRefreshDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeRefreshDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRefreshDate FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeById(TimeSpan newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByPoliticianKey(String politicianKey)
      {
        return _GetIdByPoliticianKey(politicianKey, null);
      }

      public static Int32? GetId(String politicianKey)
      {
        return GetIdByPoliticianKey(politicianKey);
      }

      public static Int32 GetIdByPoliticianKey(String politicianKey, Int32 defaultValue)
      {
        return _GetIdByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Int32 GetId(String politicianKey, Int32 defaultValue)
      {
        return GetIdByPoliticianKey(politicianKey, defaultValue);
      }

      private static Int32? _GetIdByPoliticianKey(String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPasswordByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Password FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPassword(String politicianKey, String defaultValue = null)
      {
        return GetPasswordByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPasswordHintByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PasswordHint FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordHint(String politicianKey, String defaultValue = null)
      {
        return GetPasswordHintByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveOfficeKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeKey(String politicianKey, String defaultValue = null)
      {
        return GetLiveOfficeKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveOfficeStatusByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeStatus FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeStatus(String politicianKey, String defaultValue = null)
      {
        return GetLiveOfficeStatusByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveElectionKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveElectionKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveElectionKey(String politicianKey, String defaultValue = null)
      {
        return GetLiveElectionKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateCodeByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String politicianKey, String defaultValue = null)
      {
        return GetStateCodeByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetFirstNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstName(String politicianKey, String defaultValue = null)
      {
        return GetFirstNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetMiddleNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMiddleName(String politicianKey, String defaultValue = null)
      {
        return GetMiddleNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetNicknameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Nickname FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNickname(String politicianKey, String defaultValue = null)
      {
        return GetNicknameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLastNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastName(String politicianKey, String defaultValue = null)
      {
        return GetLastNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAlphaNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AlphaName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAlphaName(String politicianKey, String defaultValue = null)
      {
        return GetAlphaNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetVowelStrippedNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VowelStrippedName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVowelStrippedName(String politicianKey, String defaultValue = null)
      {
        return GetVowelStrippedNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetSuffixByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Suffix FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSuffix(String politicianKey, String defaultValue = null)
      {
        return GetSuffixByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAddOnByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOn FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddOn(String politicianKey, String defaultValue = null)
      {
        return GetAddOnByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetEmailVoteUSAByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddrVoteUSA FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailVoteUSA(String politicianKey, String defaultValue = null)
      {
        return GetEmailVoteUSAByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String politicianKey, String defaultValue = null)
      {
        return GetEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateEmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateEmail(String politicianKey, String defaultValue = null)
      {
        return GetStateEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLastEmailCodeByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastEmailCode FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastEmailCode(String politicianKey, String defaultValue = null)
      {
        return GetLastEmailCodeByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateWebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetStateWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String politicianKey, String defaultValue = null)
      {
        return GetPhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStatePhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StatePhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStatePhone(String politicianKey, String defaultValue = null)
      {
        return GetStatePhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetGenderByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Gender FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGender(String politicianKey, String defaultValue = null)
      {
        return GetGenderByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPartyKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String politicianKey, String defaultValue = null)
      {
        return GetPartyKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress(String politicianKey, String defaultValue = null)
      {
        return GetAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAddress(String politicianKey, String defaultValue = null)
      {
        return GetStateAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetStateCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignName(String politicianKey, String defaultValue = null)
      {
        return GetCampaignNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignAddress(String politicianKey, String defaultValue = null)
      {
        return GetCampaignAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetCampaignCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignPhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignPhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignPhone(String politicianKey, String defaultValue = null)
      {
        return GetCampaignPhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignEmail FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignEmail(String politicianKey, String defaultValue = null)
      {
        return GetCampaignEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static DateTime? GetDataLastUpdatedByPoliticianKey(String politicianKey)
      {
        return _GetDataLastUpdatedByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDataLastUpdated(String politicianKey)
      {
        return GetDataLastUpdatedByPoliticianKey(politicianKey);
      }

      public static DateTime GetDataLastUpdatedByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDataLastUpdatedByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDataLastUpdated(String politicianKey, DateTime defaultValue)
      {
        return GetDataLastUpdatedByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDataLastUpdatedByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetDataUpdatedCountByPoliticianKey(String politicianKey)
      {
        return _GetDataUpdatedCountByPoliticianKey(politicianKey, null);
      }

      public static Int32? GetDataUpdatedCount(String politicianKey)
      {
        return GetDataUpdatedCountByPoliticianKey(politicianKey);
      }

      public static Int32 GetDataUpdatedCountByPoliticianKey(String politicianKey, Int32 defaultValue)
      {
        return _GetDataUpdatedCountByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Int32 GetDataUpdatedCount(String politicianKey, Int32 defaultValue)
      {
        return GetDataUpdatedCountByPoliticianKey(politicianKey, defaultValue);
      }

      private static Int32? _GetDataUpdatedCountByPoliticianKey(String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataUpdatedCount FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDatePictureUploadedByPoliticianKey(String politicianKey)
      {
        return _GetDatePictureUploadedByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDatePictureUploaded(String politicianKey)
      {
        return GetDatePictureUploadedByPoliticianKey(politicianKey);
      }

      public static DateTime GetDatePictureUploadedByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDatePictureUploadedByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDatePictureUploaded(String politicianKey, DateTime defaultValue)
      {
        return GetDatePictureUploadedByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDatePictureUploadedByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DatePictureUploaded FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetDateOfBirthByPoliticianKey(String politicianKey)
      {
        return _GetDateOfBirthByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDateOfBirth(String politicianKey)
      {
        return GetDateOfBirthByPoliticianKey(politicianKey);
      }

      public static DateTime GetDateOfBirthByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDateOfBirthByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDateOfBirth(String politicianKey, DateTime defaultValue)
      {
        return GetDateOfBirthByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDateOfBirthByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateOfBirth FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetFacebookWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetFacebookWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWikipediaWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WikipediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWikipediaWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWikipediaWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetYouTubeWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetYouTubeWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetFlickrWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FlickrWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFlickrWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetFlickrWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetTwitterWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TwitterWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTwitterWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetTwitterWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetRSSFeedWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RSSFeedWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRSSFeedWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetRSSFeedWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetVimeoWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VimeoWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVimeoWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetVimeoWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetGooglePlusWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GooglePlusWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGooglePlusWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetGooglePlusWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLinkedInWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LinkedInWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLinkedInWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetLinkedInWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPinterestWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PinterestWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPinterestWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetPinterestWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetBloggerWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BloggerWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBloggerWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetBloggerWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWebstagramWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebstagramWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebstagramWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWebstagramWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetBallotPediaWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotPediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotPediaWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetBallotPediaWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetGoFundMeWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoFundMeWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoFundMeWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetGoFundMeWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCrowdpacWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CrowdpacWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCrowdpacWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetCrowdpacWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPodcastWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PodcastWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPodcastWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetPodcastWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetYouTubeDescriptionByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeDescription FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeDescription(String politicianKey, String defaultValue = null)
      {
        return GetYouTubeDescriptionByPoliticianKey(politicianKey, defaultValue);
      }

      public static TimeSpan? GetYouTubeRunningTimeByPoliticianKey(String politicianKey)
      {
        return _GetYouTubeRunningTimeByPoliticianKey(politicianKey, null);
      }

      public static TimeSpan? GetYouTubeRunningTime(String politicianKey)
      {
        return GetYouTubeRunningTimeByPoliticianKey(politicianKey);
      }

      public static TimeSpan GetYouTubeRunningTimeByPoliticianKey(String politicianKey, TimeSpan defaultValue)
      {
        return _GetYouTubeRunningTimeByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static TimeSpan GetYouTubeRunningTime(String politicianKey, TimeSpan defaultValue)
      {
        return GetYouTubeRunningTimeByPoliticianKey(politicianKey, defaultValue);
      }

      private static TimeSpan? _GetYouTubeRunningTimeByPoliticianKey(String politicianKey, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRunningTime FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static DateTime? GetYouTubeDateByPoliticianKey(String politicianKey)
      {
        return _GetYouTubeDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetYouTubeDate(String politicianKey)
      {
        return GetYouTubeDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetYouTubeDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetYouTubeDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetYouTubeDate(String politicianKey, DateTime defaultValue)
      {
        return GetYouTubeDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetYouTubeDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeDate FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetYouTubeAutoDisableByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeAutoDisable FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeAutoDisable(String politicianKey, String defaultValue = null)
      {
        return GetYouTubeAutoDisableByPoliticianKey(politicianKey, defaultValue);
      }

      public static Boolean? GetYouTubeVideoVerifiedByPoliticianKey(String politicianKey)
      {
        return _GetYouTubeVideoVerifiedByPoliticianKey(politicianKey, null);
      }

      public static Boolean? GetYouTubeVideoVerified(String politicianKey)
      {
        return GetYouTubeVideoVerifiedByPoliticianKey(politicianKey);
      }

      public static Boolean GetYouTubeVideoVerifiedByPoliticianKey(String politicianKey, Boolean defaultValue)
      {
        return _GetYouTubeVideoVerifiedByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Boolean GetYouTubeVideoVerified(String politicianKey, Boolean defaultValue)
      {
        return GetYouTubeVideoVerifiedByPoliticianKey(politicianKey, defaultValue);
      }

      private static Boolean? _GetYouTubeVideoVerifiedByPoliticianKey(String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeVideoVerified FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetOptOutByPoliticianKey(String politicianKey)
      {
        return _GetOptOutByPoliticianKey(politicianKey, null);
      }

      public static Boolean? GetOptOut(String politicianKey)
      {
        return GetOptOutByPoliticianKey(politicianKey);
      }

      public static Boolean GetOptOutByPoliticianKey(String politicianKey, Boolean defaultValue)
      {
        return _GetOptOutByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Boolean GetOptOut(String politicianKey, Boolean defaultValue)
      {
        return GetOptOutByPoliticianKey(politicianKey, defaultValue);
      }

      private static Boolean? _GetOptOutByPoliticianKey(String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetYouTubeRefreshDateByPoliticianKey(String politicianKey)
      {
        return _GetYouTubeRefreshDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetYouTubeRefreshDate(String politicianKey)
      {
        return GetYouTubeRefreshDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetYouTubeRefreshDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetYouTubeRefreshDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetYouTubeRefreshDate(String politicianKey, DateTime defaultValue)
      {
        return GetYouTubeRefreshDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetYouTubeRefreshDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRefreshDate FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static PoliticiansTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdateIdByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String politicianKey)
      {
        return UpdateIdByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePasswordByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePassword(String newValue, String politicianKey)
      {
        return UpdatePasswordByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePasswordHintByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHint(String newValue, String politicianKey)
      {
        return UpdatePasswordHintByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKey(String newValue, String politicianKey)
      {
        return UpdateLiveOfficeKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveOfficeStatusByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatus(String newValue, String politicianKey)
      {
        return UpdateLiveOfficeStatusByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKey(String newValue, String politicianKey)
      {
        return UpdateLiveElectionKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String politicianKey)
      {
        return UpdateStateCodeByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFirstNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstName(String newValue, String politicianKey)
      {
        return UpdateFirstNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateMiddleNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleName(String newValue, String politicianKey)
      {
        return UpdateMiddleNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateNicknameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNickname(String newValue, String politicianKey)
      {
        return UpdateNicknameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLastNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastName(String newValue, String politicianKey)
      {
        return UpdateLastNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAlphaNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaName(String newValue, String politicianKey)
      {
        return UpdateAlphaNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateVowelStrippedNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedName(String newValue, String politicianKey)
      {
        return UpdateVowelStrippedNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateSuffixByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffix(String newValue, String politicianKey)
      {
        return UpdateSuffixByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAddOnByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOn(String newValue, String politicianKey)
      {
        return UpdateAddOnByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateEmailVoteUSAByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSA(String newValue, String politicianKey)
      {
        return UpdateEmailVoteUSAByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String politicianKey)
      {
        return UpdateEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmail(String newValue, String politicianKey)
      {
        return UpdateStateEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLastEmailCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCode(String newValue, String politicianKey)
      {
        return UpdateLastEmailCodeByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddress(String newValue, String politicianKey)
      {
        return UpdateWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddress(String newValue, String politicianKey)
      {
        return UpdateStateWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String politicianKey)
      {
        return UpdatePhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStatePhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhone(String newValue, String politicianKey)
      {
        return UpdateStatePhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateGenderByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGender(String newValue, String politicianKey)
      {
        return UpdateGenderByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePartyKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKey(String newValue, String politicianKey)
      {
        return UpdatePartyKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress(String newValue, String politicianKey)
      {
        return UpdateAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String politicianKey)
      {
        return UpdateCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddress(String newValue, String politicianKey)
      {
        return UpdateStateAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZip(String newValue, String politicianKey)
      {
        return UpdateStateCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignName(String newValue, String politicianKey)
      {
        return UpdateCampaignNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddress(String newValue, String politicianKey)
      {
        return UpdateCampaignAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZip(String newValue, String politicianKey)
      {
        return UpdateCampaignCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignPhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhone(String newValue, String politicianKey)
      {
        return UpdateCampaignPhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmail(String newValue, String politicianKey)
      {
        return UpdateCampaignEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String politicianKey)
      {
        return UpdateDataLastUpdatedByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDataUpdatedCountByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCount(Int32 newValue, String politicianKey)
      {
        return UpdateDataUpdatedCountByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDatePictureUploadedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploaded(DateTime newValue, String politicianKey)
      {
        return UpdateDatePictureUploadedByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDateOfBirthByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirth(DateTime newValue, String politicianKey)
      {
        return UpdateDateOfBirthByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFacebookWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddress(String newValue, String politicianKey)
      {
        return UpdateFacebookWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWikipediaWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddress(String newValue, String politicianKey)
      {
        return UpdateWikipediaWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddress(String newValue, String politicianKey)
      {
        return UpdateYouTubeWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFlickrWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddress(String newValue, String politicianKey)
      {
        return UpdateFlickrWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateTwitterWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddress(String newValue, String politicianKey)
      {
        return UpdateTwitterWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateRSSFeedWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddress(String newValue, String politicianKey)
      {
        return UpdateRSSFeedWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateVimeoWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddress(String newValue, String politicianKey)
      {
        return UpdateVimeoWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateGooglePlusWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddress(String newValue, String politicianKey)
      {
        return UpdateGooglePlusWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLinkedInWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddress(String newValue, String politicianKey)
      {
        return UpdateLinkedInWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePinterestWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddress(String newValue, String politicianKey)
      {
        return UpdatePinterestWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateBloggerWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddress(String newValue, String politicianKey)
      {
        return UpdateBloggerWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWebstagramWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddress(String newValue, String politicianKey)
      {
        return UpdateWebstagramWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateBallotPediaWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddress(String newValue, String politicianKey)
      {
        return UpdateBallotPediaWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateGoFundMeWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddress(String newValue, String politicianKey)
      {
        return UpdateGoFundMeWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCrowdpacWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddress(String newValue, String politicianKey)
      {
        return UpdateCrowdpacWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePodcastWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddress(String newValue, String politicianKey)
      {
        return UpdatePodcastWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeDescriptionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescription(String newValue, String politicianKey)
      {
        return UpdateYouTubeDescriptionByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeRunningTimeByPoliticianKey(TimeSpan newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTime(TimeSpan newValue, String politicianKey)
      {
        return UpdateYouTubeRunningTimeByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDate(DateTime newValue, String politicianKey)
      {
        return UpdateYouTubeDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeAutoDisableByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisable(String newValue, String politicianKey)
      {
        return UpdateYouTubeAutoDisableByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeVideoVerifiedByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerified(Boolean newValue, String politicianKey)
      {
        return UpdateYouTubeVideoVerifiedByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateOptOutByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOut(Boolean newValue, String politicianKey)
      {
        return UpdateOptOutByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeRefreshDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDate(DateTime newValue, String politicianKey)
      {
        return UpdateYouTubeRefreshDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE EmailAddr=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByEmail(TimeSpan newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE EmailAddr=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateEmail(String stateEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateEmail(Column _column, String stateEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE StateEmailAddr=@StateEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByStateEmail(String stateEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdByStateEmail(Int32 newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByStateEmail(Int32 newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByStateEmail(TimeSpan newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedByStateEmail(Boolean newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByStateEmail(Boolean newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateEmail(Column _column, object newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE StateEmailAddr=@StateEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateEmail(String stateEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmailVoteUSA(String emailVoteUSA, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmailVoteUSA(Column _column, String emailVoteUSA)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByEmailVoteUSA(String emailVoteUSA, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdByEmailVoteUSA(Int32 newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByEmailVoteUSA(Int32 newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByEmailVoteUSA(TimeSpan newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedByEmailVoteUSA(Boolean newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmailVoteUSA(Boolean newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailVoteUSA(Column _column, object newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmailVoteUSA(String emailVoteUSA, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCampaignEmail(String campaignEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCampaignEmail(Column _column, String campaignEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByCampaignEmail(String campaignEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdByCampaignEmail(Int32 newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByCampaignEmail(Int32 newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByCampaignEmail(TimeSpan newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedByCampaignEmail(Boolean newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByCampaignEmail(Boolean newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCampaignEmail(Column _column, object newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE CampaignEmail=@CampaignEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCampaignEmail(String campaignEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByLiveOfficeKey(String liveOfficeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByLiveOfficeKey(Column _column, String liveOfficeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE LiveOfficeKey=@LiveOfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByLiveOfficeKey(String liveOfficeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,Password,PasswordHint,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeVideoVerified,OptOut,YouTubeRefreshDate FROM Politicians WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdateIdByLiveOfficeKey(Int32 newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Id=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByLiveOfficeKey(DateTime newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByLiveOfficeKey(Int32 newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByLiveOfficeKey(DateTime newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByLiveOfficeKey(DateTime newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGoFundMeWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET GoFundMeWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCrowdpacWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET CrowdpacWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePodcastWebAddressByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET PodcastWebAddress=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDescriptionByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDescription=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRunningTimeByLiveOfficeKey(TimeSpan newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRunningTime=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeDateByLiveOfficeKey(DateTime newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeDate=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeAutoDisableByLiveOfficeKey(String newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeAutoDisable=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeVideoVerifiedByLiveOfficeKey(Boolean newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeVideoVerified=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByLiveOfficeKey(Boolean newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET OptOut=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeRefreshDateByLiveOfficeKey(DateTime newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeRefreshDate=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLiveOfficeKey(Column _column, object newValue, String liveOfficeKey)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE LiveOfficeKey=@LiveOfficeKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLiveOfficeKey(String liveOfficeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Politicians WHERE LiveOfficeKey=@LiveOfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectNamesCommandText
      {
        get
        {
          return "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllNamesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static void UpdateNames(PoliticiansTable table)
      {
        UpdateNames(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateNames(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Names, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetNamesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static PoliticiansTable GetNamesData(String politicianKey, int commandTimeout = -1)
      {
        return GetNamesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static PoliticiansTable GetNamesDataByStateCodeLastName(String stateCode, String lastName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians WHERE StateCode=@StateCode AND LName=@LastName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Cache);
      }

      public static void UpdateCache(PoliticiansTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetCacheDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress,GoFundMeWebAddress,CrowdpacWebAddress,PodcastWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Cache);
      }

      public static PoliticiansTable GetCacheData(String politicianKey, int commandTimeout = -1)
      {
        return GetCacheDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectAddressesCommandText
      {
        get
        {
          return "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllAddressesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Addresses);
      }

      public static void UpdateAddresses(PoliticiansTable table)
      {
        UpdateAddresses(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateAddresses(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Addresses, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetAddressesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Addresses);
      }

      public static PoliticiansTable GetAddressesData(String politicianKey, int commandTimeout = -1)
      {
        return GetAddressesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectPhonesCommandText
      {
        get
        {
          return "SELECT Phone,StatePhone FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllPhonesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Phone,StatePhone FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Phones);
      }

      public static void UpdatePhones(PoliticiansTable table)
      {
        UpdatePhones(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdatePhones(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Phones, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetPhonesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Phone,StatePhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Phones);
      }

      public static PoliticiansTable GetPhonesData(String politicianKey, int commandTimeout = -1)
      {
        return GetPhonesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectEmailsCommandText
      {
        get
        {
          return "SELECT EmailAddr,StateEmailAddr FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllEmailsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailAddr,StateEmailAddr FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Emails);
      }

      public static void UpdateEmails(PoliticiansTable table)
      {
        UpdateEmails(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateEmails(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Emails, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetEmailsDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailAddr,StateEmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Emails);
      }

      public static PoliticiansTable GetEmailsData(String politicianKey, int commandTimeout = -1)
      {
        return GetEmailsDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectWebAddressesCommandText
      {
        get
        {
          return "SELECT WebAddr,StateWebAddr FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllWebAddressesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddr,StateWebAddr FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.WebAddresses);
      }

      public static void UpdateWebAddresses(PoliticiansTable table)
      {
        UpdateWebAddresses(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateWebAddresses(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.WebAddresses, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetWebAddressesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddr,StateWebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.WebAddresses);
      }

      public static PoliticiansTable GetWebAddressesData(String politicianKey, int commandTimeout = -1)
      {
        return GetWebAddressesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectDuplicateNamesCommandText
      {
        get
        {
          return "SELECT PoliticianKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllDuplicateNamesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.DuplicateNames);
      }

      public static void UpdateDuplicateNames(PoliticiansTable table)
      {
        UpdateDuplicateNames(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDuplicateNames(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.DuplicateNames, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetDuplicateNamesDataByLastNameStateCode(String lastName, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians WHERE LName=@LastName AND StateCode=@StateCode ORDER BY LName,FName,MName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PoliticiansTable.ColumnSet.DuplicateNames);
      }

      public static string SelectLiveOfficeCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllLiveOfficeData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.LiveOffice);
      }

      public static void UpdateLiveOffice(PoliticiansTable table)
      {
        UpdateLiveOffice(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateLiveOffice(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.LiveOffice, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetLiveOfficeDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.LiveOffice);
      }

      public static PoliticiansTable GetLiveOfficeData(String politicianKey, int commandTimeout = -1)
      {
        return GetLiveOfficeDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectSearchKeyUpdateCommandText
      {
        get
        {
          return "SELECT Id,PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllSearchKeyUpdateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.SearchKeyUpdate);
      }

      public static void UpdateSearchKeyUpdate(PoliticiansTable table)
      {
        UpdateSearchKeyUpdate(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateSearchKeyUpdate(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.SearchKeyUpdate, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetSearchKeyUpdateDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.SearchKeyUpdate);
      }

      public static PoliticiansTable GetSearchKeyUpdateData(String politicianKey, int commandTimeout = -1)
      {
        return GetSearchKeyUpdateDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectYouTubeRefreshCommandText
      {
        get
        {
          return "SELECT Id,PoliticianKey,YouTubeWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeRefreshDate FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllYouTubeRefreshData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,PoliticianKey,YouTubeWebAddress,YouTubeDescription,YouTubeRunningTime,YouTubeDate,YouTubeAutoDisable,YouTubeRefreshDate FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.YouTubeRefresh);
      }

      public static void UpdateYouTubeRefresh(PoliticiansTable table)
      {
        UpdateYouTubeRefresh(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateYouTubeRefresh(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.YouTubeRefresh, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(PoliticiansTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansTable.ColumnSet.All:
            return SelectAllCommandText;

          case PoliticiansTable.ColumnSet.Names:
            return SelectNamesCommandText;

          case PoliticiansTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case PoliticiansTable.ColumnSet.Addresses:
            return SelectAddressesCommandText;

          case PoliticiansTable.ColumnSet.Phones:
            return SelectPhonesCommandText;

          case PoliticiansTable.ColumnSet.Emails:
            return SelectEmailsCommandText;

          case PoliticiansTable.ColumnSet.WebAddresses:
            return SelectWebAddressesCommandText;

          case PoliticiansTable.ColumnSet.DuplicateNames:
            return SelectDuplicateNamesCommandText;

          case PoliticiansTable.ColumnSet.LiveOffice:
            return SelectLiveOfficeCommandText;

          case PoliticiansTable.ColumnSet.SearchKeyUpdate:
            return SelectSearchKeyUpdateCommandText;

          case PoliticiansTable.ColumnSet.YouTubeRefresh:
            return SelectYouTubeRefreshCommandText;

          default:
            return null;
        }
      }

      static Politicians()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Politicians

    #region vote.PoliticiansAdminReportView

    public partial class PoliticiansAdminReportViewRow : DataRow
    {
      internal PoliticiansAdminReportViewRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MiddleName"] as String; }
        set { if (value == null) this["MiddleName"] = DBNull.Value; else this["MiddleName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public String AddOn
      {
        get { return this["AddOn"] as String; }
        set { if (value == null) this["AddOn"] = DBNull.Value; else this["AddOn"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String OfficeStatus
      {
        get { return this["OfficeStatus"] as String; }
        set { if (value == null) this["OfficeStatus"] = DBNull.Value; else this["OfficeStatus"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansAdminReportViewTable : TypedTableBase<PoliticiansAdminReportViewRow>
    {
      public PoliticiansAdminReportViewRow this[int index] { get { return (PoliticiansAdminReportViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansAdminReportViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansAdminReportViewTable(); }

      new public PoliticiansAdminReportViewRow NewRow() { return (PoliticiansAdminReportViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansAdminReportViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansAdminReportViewRow); }

      public void RemoveRow(PoliticiansAdminReportViewRow row) { this.Rows.Remove(row); }

      public PoliticiansAdminReportViewRow NewRow(String politicianKey, String firstName, String middleName, String nickname, String lastName, String suffix, String addOn, String partyKey, String officeKey, String officeStatus, Int32 officeLevel, String officeLine1, String officeLine2, String districtCode, String stateCode, String countyCode, String localKey, String county, String localDistrict, String partyCode)
      {
        PoliticiansAdminReportViewRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.Suffix = suffix;
        row.AddOn = addOn;
        row.PartyKey = partyKey;
        row.OfficeKey = officeKey;
        row.OfficeStatus = officeStatus;
        row.OfficeLevel = officeLevel;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.DistrictCode = districtCode;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.County = county;
        row.LocalDistrict = localDistrict;
        row.PartyCode = partyCode;
        return row;
      }

      public void AddRow(String politicianKey, String firstName, String middleName, String nickname, String lastName, String suffix, String addOn, String partyKey, String officeKey, String officeStatus, Int32 officeLevel, String officeLine1, String officeLine2, String districtCode, String stateCode, String countyCode, String localKey, String county, String localDistrict, String partyCode)
      {
        PoliticiansAdminReportViewRow row = NewRow(politicianKey, firstName, middleName, nickname, lastName, suffix, addOn, partyKey, officeKey, officeStatus, officeLevel, officeLine1, officeLine2, districtCode, stateCode, countyCode, localKey, county, localDistrict, partyCode);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MiddleName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn AddOnColumn { get { return this.Columns["AddOn"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn OfficeStatusColumn { get { return this.Columns["OfficeStatus"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MiddleName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
      }

      public PoliticiansAdminReportViewTable() : this(ColumnSet.All) { }

      public PoliticiansAdminReportViewTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansAdminReportView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansAdminReportViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansAdminReportView
    {
      public const string TableName = "PoliticiansAdminReportView";

      public enum Column { PoliticianKey, FirstName, MiddleName, Nickname, LastName, Suffix, AddOn, PartyKey, OfficeKey, OfficeStatus, OfficeLevel, OfficeLine1, OfficeLine2, DistrictCode, StateCode, CountyCode, LocalKey, County, LocalDistrict, PartyCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.FirstName, "FirstName" },
        { Column.MiddleName, "MiddleName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LastName" },
        { Column.Suffix, "Suffix" },
        { Column.AddOn, "AddOn" },
        { Column.PartyKey, "PartyKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.OfficeStatus, "OfficeStatus" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.County, "County" },
        { Column.LocalDistrict, "LocalDistrict" },
        { Column.PartyCode, "PartyCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansAdminReportView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,FirstName,MiddleName,Nickname,LastName,Suffix,AddOn,PartyKey,OfficeKey,OfficeStatus,OfficeLevel,OfficeLine1,OfficeLine2,DistrictCode,StateCode,CountyCode,LocalKey,County,LocalDistrict,PartyCode FROM PoliticiansAdminReportView";
        }
      }

      public static PoliticiansAdminReportViewTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansAdminReportViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansAdminReportViewTable FillTable(DbCommand command, PoliticiansAdminReportViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansAdminReportViewTable table = new PoliticiansAdminReportViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string MiddleNameColumnName { get { return "MiddleName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string AddOnColumnName { get { return "AddOn"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string OfficeStatusColumnName { get { return "OfficeStatus"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int FirstNameMaxLength { get { return 100; } }

      public static int MiddleNameMaxLength { get { return 100; } }

      public static int NicknameMaxLength { get { return 100; } }

      public static int LastNameMaxLength { get { return 100; } }

      public static int SuffixMaxLength { get { return 20; } }

      public static int AddOnMaxLength { get { return 20; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int OfficeStatusMaxLength { get { return 50; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int CountyMaxLength { get { return 100; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static string GetSelectCommandText(PoliticiansAdminReportViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansAdminReportViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansAdminReportView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansAdminReportView

    #region vote.PoliticiansImagesBlobs

    public partial class PoliticiansImagesBlobsRow : DataRow
    {
      internal PoliticiansImagesBlobsRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] ProfileOriginal
      {
        get { return this["ProfileOriginal"] as Byte[]; }
        set { if (value == null) this["ProfileOriginal"] = DBNull.Value; else this["ProfileOriginal"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile300
      {
        get { return this["Profile300"] as Byte[]; }
        set { if (value == null) this["Profile300"] = DBNull.Value; else this["Profile300"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile200
      {
        get { return this["Profile200"] as Byte[]; }
        set { if (value == null) this["Profile200"] = DBNull.Value; else this["Profile200"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot100
      {
        get { return this["Headshot100"] as Byte[]; }
        set { if (value == null) this["Headshot100"] = DBNull.Value; else this["Headshot100"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot75
      {
        get { return this["Headshot75"] as Byte[]; }
        set { if (value == null) this["Headshot75"] = DBNull.Value; else this["Headshot75"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot50
      {
        get { return this["Headshot50"] as Byte[]; }
        set { if (value == null) this["Headshot50"] = DBNull.Value; else this["Headshot50"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot35
      {
        get { return this["Headshot35"] as Byte[]; }
        set { if (value == null) this["Headshot35"] = DBNull.Value; else this["Headshot35"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot25
      {
        get { return this["Headshot25"] as Byte[]; }
        set { if (value == null) this["Headshot25"] = DBNull.Value; else this["Headshot25"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot20
      {
        get { return this["Headshot20"] as Byte[]; }
        set { if (value == null) this["Headshot20"] = DBNull.Value; else this["Headshot20"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot15
      {
        get { return this["Headshot15"] as Byte[]; }
        set { if (value == null) this["Headshot15"] = DBNull.Value; else this["Headshot15"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesBlobsTable : TypedTableBase<PoliticiansImagesBlobsRow>
    {
      public PoliticiansImagesBlobsRow this[int index] { get { return (PoliticiansImagesBlobsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesBlobsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesBlobsTable(); }

      new public PoliticiansImagesBlobsRow NewRow() { return (PoliticiansImagesBlobsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesBlobsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesBlobsRow); }

      public void RemoveRow(PoliticiansImagesBlobsRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesBlobsRow NewRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginal = profileOriginal;
        row.Profile300 = profile300;
        row.Profile200 = profile200;
        row.Headshot100 = headshot100;
        row.Headshot75 = headshot75;
        row.Headshot50 = headshot50;
        row.Headshot35 = headshot35;
        row.Headshot25 = headshot25;
        row.Headshot20 = headshot20;
        row.Headshot15 = headshot15;
        return row;
      }

      public void AddRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow(politicianKey, profileOriginal, profile300, profile200, headshot100, headshot75, headshot50, headshot35, headshot25, headshot20, headshot15);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalColumn { get { return this.Columns["ProfileOriginal"]; } }

      public DataColumn Profile300Column { get { return this.Columns["Profile300"]; } }

      public DataColumn Profile200Column { get { return this.Columns["Profile200"]; } }

      public DataColumn Headshot100Column { get { return this.Columns["Headshot100"]; } }

      public DataColumn Headshot75Column { get { return this.Columns["Headshot75"]; } }

      public DataColumn Headshot50Column { get { return this.Columns["Headshot50"]; } }

      public DataColumn Headshot35Column { get { return this.Columns["Headshot35"]; } }

      public DataColumn Headshot25Column { get { return this.Columns["Headshot25"]; } }

      public DataColumn Headshot20Column { get { return this.Columns["Headshot20"]; } }

      public DataColumn Headshot15Column { get { return this.Columns["Headshot15"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginal", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile300", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile200", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot100", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot75", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot50", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot35", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot25", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot20", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot15", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Profile300", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile200", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot100", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot75", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot50", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot35", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot25", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot20", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot15", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      public PoliticiansImagesBlobsTable() : this(ColumnSet.All) { }

      public PoliticiansImagesBlobsTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesBlobs";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected PoliticiansImagesBlobsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesBlobs
    {
      public const string TableName = "PoliticiansImagesBlobs";

      public enum Column { PoliticianKey, ProfileOriginal, Profile300, Profile200, Headshot100, Headshot75, Headshot50, Headshot35, Headshot25, Headshot20, Headshot15 }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginal, "ProfileOriginal" },
        { Column.Profile300, "Profile300" },
        { Column.Profile200, "Profile200" },
        { Column.Headshot100, "Headshot100" },
        { Column.Headshot75, "Headshot75" },
        { Column.Headshot50, "Headshot50" },
        { Column.Headshot35, "Headshot35" },
        { Column.Headshot25, "Headshot25" },
        { Column.Headshot20, "Headshot20" },
        { Column.Headshot15, "Headshot15" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PoliticiansImagesBlobs (PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15) VALUES (@PoliticianKey,@ProfileOriginal,@Profile300,@Profile200,@Headshot100,@Headshot75,@Headshot50,@Headshot35,@Headshot25,@Headshot20,@Headshot15)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "ProfileOriginal", profileOriginal);
        VoteDb.AddCommandParameter(cmd, "Profile300", profile300);
        VoteDb.AddCommandParameter(cmd, "Profile200", profile200);
        VoteDb.AddCommandParameter(cmd, "Headshot100", headshot100);
        VoteDb.AddCommandParameter(cmd, "Headshot75", headshot75);
        VoteDb.AddCommandParameter(cmd, "Headshot50", headshot50);
        VoteDb.AddCommandParameter(cmd, "Headshot35", headshot35);
        VoteDb.AddCommandParameter(cmd, "Headshot25", headshot25);
        VoteDb.AddCommandParameter(cmd, "Headshot20", headshot20);
        VoteDb.AddCommandParameter(cmd, "Headshot15", headshot15);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        }
      }

      public static PoliticiansImagesBlobsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesBlobsTable FillTable(DbCommand command, PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesBlobsTable table = new PoliticiansImagesBlobsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, PoliticiansImagesBlobsTable.ColumnSet columnSet = PoliticiansImagesBlobsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalColumnName { get { return "ProfileOriginal"; } }

      public static string Profile300ColumnName { get { return "Profile300"; } }

      public static string Profile200ColumnName { get { return "Profile200"; } }

      public static string Headshot100ColumnName { get { return "Headshot100"; } }

      public static string Headshot75ColumnName { get { return "Headshot75"; } }

      public static string Headshot50ColumnName { get { return "Headshot50"; } }

      public static string Headshot35ColumnName { get { return "Headshot35"; } }

      public static string Headshot25ColumnName { get { return "Headshot25"; } }

      public static string Headshot20ColumnName { get { return "Headshot20"; } }

      public static string Headshot15ColumnName { get { return "Headshot15"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfileOriginalByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ProfileOriginal FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfileOriginal(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfileOriginalByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile300ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Profile300 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile300(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfile300ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile200ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Profile200 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile200(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfile200ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot100ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot100 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot100(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot100ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot75ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot75 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot75(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot75ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot50ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot50 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot50(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot50ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot35ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot35 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot35(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot35ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot25ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot25 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot25(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot25ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot20ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot20 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot20(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot20ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot15ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot15(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot15ByPoliticianKey(politicianKey, defaultValue);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesBlobsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET ProfileOriginal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginal(Byte[] newValue, String politicianKey)
      {
        return UpdateProfileOriginalByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile300ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile300=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile300(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile300ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile200ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile200=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile200(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile200ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot100ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot100=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot100(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot100ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot75ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot75=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot75(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot75ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot50ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot50=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot50(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot50ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot35ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot35=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot35(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot35ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot25ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot25=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot25(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot25ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot20ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot20=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot20(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot20ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot15ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot15=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot15(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot15ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        }
      }

      public static PoliticiansImagesBlobsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(PoliticiansImagesBlobsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(PoliticiansImagesBlobsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansImagesBlobsTable GetCacheDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesBlobsTable.ColumnSet.All:
            return SelectAllCommandText;

          case PoliticiansImagesBlobsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesBlobs()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansImagesBlobs

    #region vote.PoliticiansImagesData

    public partial class PoliticiansImagesDataRow : DataRow
    {
      internal PoliticiansImagesDataRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public DateTime ProfileOriginalDate
      {
        get { return (DateTime) this["ProfileOriginalDate"]; }
        set { this["ProfileOriginalDate"] = value; }
      }

      public DateTime HeadshotDate
      {
        get { return (DateTime) this["HeadshotDate"]; }
        set { this["HeadshotDate"] = value; }
      }

      public DateTime HeadshotResizeDate
      {
        get { return (DateTime) this["HeadshotResizeDate"]; }
        set { this["HeadshotResizeDate"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesDataTable : TypedTableBase<PoliticiansImagesDataRow>
    {
      public PoliticiansImagesDataRow this[int index] { get { return (PoliticiansImagesDataRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesDataRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesDataTable(); }

      new public PoliticiansImagesDataRow NewRow() { return (PoliticiansImagesDataRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesDataRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesDataRow); }

      public void RemoveRow(PoliticiansImagesDataRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesDataRow NewRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginalDate = profileOriginalDate;
        row.HeadshotDate = headshotDate;
        row.HeadshotResizeDate = headshotResizeDate;
        return row;
      }

      public void AddRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow(politicianKey, profileOriginalDate, headshotDate, headshotResizeDate);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalDateColumn { get { return this.Columns["ProfileOriginalDate"]; } }

      public DataColumn HeadshotDateColumn { get { return this.Columns["HeadshotDate"]; } }

      public DataColumn HeadshotResizeDateColumn { get { return this.Columns["HeadshotResizeDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotResizeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PoliticiansImagesDataTable() : this(ColumnSet.All) { }

      public PoliticiansImagesDataTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesData";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansImagesDataTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesData
    {
      public const string TableName = "PoliticiansImagesData";

      public enum Column { PoliticianKey, ProfileOriginalDate, HeadshotDate, HeadshotResizeDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginalDate, "ProfileOriginalDate" },
        { Column.HeadshotDate, "HeadshotDate" },
        { Column.HeadshotResizeDate, "HeadshotResizeDate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PoliticiansImagesData (PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate) VALUES (@PoliticianKey,@ProfileOriginalDate,@HeadshotDate,@HeadshotResizeDate)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteDb.AddCommandParameter(cmd, "HeadshotDate", headshotDate);
        VoteDb.AddCommandParameter(cmd, "HeadshotResizeDate", headshotResizeDate);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        }
      }

      public static PoliticiansImagesDataTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesDataTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesDataTable FillTable(DbCommand command, PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesDataTable table = new PoliticiansImagesDataTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansImagesDataTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, PoliticiansImagesDataTable.ColumnSet columnSet = PoliticiansImagesDataTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalDateColumnName { get { return "ProfileOriginalDate"; } }

      public static string HeadshotDateColumnName { get { return "HeadshotDate"; } }

      public static string HeadshotResizeDateColumnName { get { return "HeadshotResizeDate"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static DateTime? GetProfileOriginalDateByPoliticianKey(String politicianKey)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetProfileOriginalDate(String politicianKey)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetProfileOriginalDate(String politicianKey, DateTime defaultValue)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ProfileOriginalDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotDate(String politicianKey)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotResizeDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotResizeDate(String politicianKey)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotResizeDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesDataTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET ProfileOriginalDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDate(DateTime newValue, String politicianKey)
      {
        return UpdateProfileOriginalDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotResizeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotResizeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotResizeDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotResizeDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesDataTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesData()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansImagesData

    #region vote.PoliticiansLiveOfficeKeyView

    public partial class PoliticiansLiveOfficeKeyViewRow : DataRow
    {
      internal PoliticiansLiveOfficeKeyViewRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String LiveOfficeKeyAndStatus
      {
        get { return this["LiveOfficeKeyAndStatus"] as String; }
        set { if (value == null) this["LiveOfficeKeyAndStatus"] = DBNull.Value; else this["LiveOfficeKeyAndStatus"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansLiveOfficeKeyViewTable : TypedTableBase<PoliticiansLiveOfficeKeyViewRow>
    {
      public PoliticiansLiveOfficeKeyViewRow this[int index] { get { return (PoliticiansLiveOfficeKeyViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansLiveOfficeKeyViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansLiveOfficeKeyViewTable(); }

      new public PoliticiansLiveOfficeKeyViewRow NewRow() { return (PoliticiansLiveOfficeKeyViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansLiveOfficeKeyViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansLiveOfficeKeyViewRow); }

      public void RemoveRow(PoliticiansLiveOfficeKeyViewRow row) { this.Rows.Remove(row); }

      public PoliticiansLiveOfficeKeyViewRow NewRow(String politicianKey, String liveOfficeKeyAndStatus)
      {
        PoliticiansLiveOfficeKeyViewRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.LiveOfficeKeyAndStatus = liveOfficeKeyAndStatus;
        return row;
      }

      public void AddRow(String politicianKey, String liveOfficeKeyAndStatus)
      {
        PoliticiansLiveOfficeKeyViewRow row = NewRow(politicianKey, liveOfficeKeyAndStatus);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn LiveOfficeKeyAndStatusColumn { get { return this.Columns["LiveOfficeKeyAndStatus"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKeyAndStatus", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
      }

      public PoliticiansLiveOfficeKeyViewTable() : this(ColumnSet.All) { }

      public PoliticiansLiveOfficeKeyViewTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansLiveOfficeKeyView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansLiveOfficeKeyViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansLiveOfficeKeyView
    {
      public const string TableName = "PoliticiansLiveOfficeKeyView";

      public enum Column { PoliticianKey, LiveOfficeKeyAndStatus }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.LiveOfficeKeyAndStatus, "LiveOfficeKeyAndStatus" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansLiveOfficeKeyView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView";
        }
      }

      public static PoliticiansLiveOfficeKeyViewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      public static PoliticiansLiveOfficeKeyViewTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansLiveOfficeKeyViewTable FillTable(DbCommand command, PoliticiansLiveOfficeKeyViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansLiveOfficeKeyViewTable table = new PoliticiansLiveOfficeKeyViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string LiveOfficeKeyAndStatusColumnName { get { return "LiveOfficeKeyAndStatus"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int LiveOfficeKeyAndStatusMaxLength { get { return 200; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansLiveOfficeKeyViewTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      public static PoliticiansLiveOfficeKeyViewTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string GetSelectCommandText(PoliticiansLiveOfficeKeyViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansLiveOfficeKeyViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansLiveOfficeKeyView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansLiveOfficeKeyView

    #region vote.Questions

    public partial class QuestionsRow : DataRow
    {
      internal QuestionsRow(DataRowBuilder rb) : base(rb) {}

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 QuestionOrder
      {
        get { return (Int32) this["QuestionOrder"]; }
        set { this["QuestionOrder"] = value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public Boolean IsQuestionOmit
      {
        get { return (Boolean) this["IsQuestionOmit"]; }
        set { this["IsQuestionOmit"] = value; }
      }
    }

    [Serializable]
    public partial class QuestionsTable : TypedTableBase<QuestionsRow>
    {
      public QuestionsRow this[int index] { get { return (QuestionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(QuestionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new QuestionsTable(); }

      new public QuestionsRow NewRow() { return (QuestionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new QuestionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(QuestionsRow); }

      public void RemoveRow(QuestionsRow row) { this.Rows.Remove(row); }

      public QuestionsRow NewRow(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit)
      {
        QuestionsRow row = NewRow();
        row.QuestionKey = questionKey;
        row.IssueKey = issueKey;
        row.QuestionOrder = questionOrder;
        row.Question = question;
        row.IsQuestionOmit = isQuestionOmit;
        return row;
      }

      public void AddRow(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit)
      {
        QuestionsRow row = NewRow(questionKey, issueKey, questionOrder, question, isQuestionOmit);
        AddRow(row);
      }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn QuestionOrderColumn { get { return this.Columns["QuestionOrder"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn IsQuestionOmitColumn { get { return this.Columns["IsQuestionOmit"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsQuestionOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public QuestionsTable() : this(ColumnSet.All) { }

      public QuestionsTable(ColumnSet columnSet)
      {
        this.TableName = "Questions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected QuestionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Questions
    {
      public const string TableName = "Questions";

      public enum Column { QuestionKey, IssueKey, QuestionOrder, Question, IsQuestionOmit }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.QuestionKey, "QuestionKey" },
        { Column.IssueKey, "IssueKey" },
        { Column.QuestionOrder, "QuestionOrder" },
        { Column.Question, "Question" },
        { Column.IsQuestionOmit, "IsQuestionOmit" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Questions (QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit) VALUES (@QuestionKey,@IssueKey,@QuestionOrder,@Question,@IsQuestionOmit)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "QuestionOrder", questionOrder);
        VoteDb.AddCommandParameter(cmd, "Question", question);
        VoteDb.AddCommandParameter(cmd, "IsQuestionOmit", isQuestionOmit);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions";
        }
      }

      public static QuestionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static QuestionsTable FillTable(DbCommand command)
      {
        return FillTable(command, QuestionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static QuestionsTable FillTable(DbCommand command, QuestionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          QuestionsTable table = new QuestionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(QuestionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, QuestionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(QuestionsTable table, QuestionsTable.ColumnSet columnSet = QuestionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string QuestionOrderColumnName { get { return "QuestionOrder"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string IsQuestionOmitColumnName { get { return "IsQuestionOmit"; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int QuestionMaxLength { get { return 150; } }

      public static bool QuestionKeyExists(String questionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetQuestionKeyByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT QuestionKey FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestionKey(String questionKey, String defaultValue = null)
      {
        return GetQuestionKeyByQuestionKey(questionKey, defaultValue);
      }

      public static String GetIssueKeyByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKey(String questionKey, String defaultValue = null)
      {
        return GetIssueKeyByQuestionKey(questionKey, defaultValue);
      }

      public static Int32? GetQuestionOrderByQuestionKey(String questionKey)
      {
        return _GetQuestionOrderByQuestionKey(questionKey, null);
      }

      public static Int32? GetQuestionOrder(String questionKey)
      {
        return GetQuestionOrderByQuestionKey(questionKey);
      }

      public static Int32 GetQuestionOrderByQuestionKey(String questionKey, Int32 defaultValue)
      {
        return _GetQuestionOrderByQuestionKey(questionKey, defaultValue).Value;
      }

      public static Int32 GetQuestionOrder(String questionKey, Int32 defaultValue)
      {
        return GetQuestionOrderByQuestionKey(questionKey, defaultValue);
      }

      private static Int32? _GetQuestionOrderByQuestionKey(String questionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT QuestionOrder FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetQuestionByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Question FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestion(String questionKey, String defaultValue = null)
      {
        return GetQuestionByQuestionKey(questionKey, defaultValue);
      }

      public static Boolean? GetIsQuestionOmitByQuestionKey(String questionKey)
      {
        return _GetIsQuestionOmitByQuestionKey(questionKey, null);
      }

      public static Boolean? GetIsQuestionOmit(String questionKey)
      {
        return GetIsQuestionOmitByQuestionKey(questionKey);
      }

      public static Boolean GetIsQuestionOmitByQuestionKey(String questionKey, Boolean defaultValue)
      {
        return _GetIsQuestionOmitByQuestionKey(questionKey, defaultValue).Value;
      }

      public static Boolean GetIsQuestionOmit(String questionKey, Boolean defaultValue)
      {
        return GetIsQuestionOmitByQuestionKey(questionKey, defaultValue);
      }

      private static Boolean? _GetIsQuestionOmitByQuestionKey(String questionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsQuestionOmit FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByQuestionKey(Column _column, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Questions WHERE QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String questionKey)
      {
        return GetColumnByQuestionKey(_column, questionKey);
      }

      public static QuestionsTable GetDataByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static QuestionsTable GetData(String questionKey, int commandTimeout = -1)
      {
        return GetDataByQuestionKey(questionKey, commandTimeout);
      }

      public static int UpdateQuestionKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET QuestionKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKey(String newValue, String questionKey)
      {
        return UpdateQuestionKeyByQuestionKey(newValue, questionKey);
      }

      public static int UpdateIssueKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET IssueKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKey(String newValue, String questionKey)
      {
        return UpdateIssueKeyByQuestionKey(newValue, questionKey);
      }

      public static int UpdateQuestionOrderByQuestionKey(Int32 newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET QuestionOrder=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrder(Int32 newValue, String questionKey)
      {
        return UpdateQuestionOrderByQuestionKey(newValue, questionKey);
      }

      public static int UpdateQuestionByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET Question=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestion(String newValue, String questionKey)
      {
        return UpdateQuestionByQuestionKey(newValue, questionKey);
      }

      public static int UpdateIsQuestionOmitByQuestionKey(Boolean newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET IsQuestionOmit=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsQuestionOmit(Boolean newValue, String questionKey)
      {
        return UpdateIsQuestionOmitByQuestionKey(newValue, questionKey);
      }

      public static int UpdateColumnByQuestionKey(Column _column, object newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET {0}=@newValue WHERE QuestionKey=@QuestionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String questionKey)
      {
         return UpdateColumnByQuestionKey(_column, newValue, questionKey);
      }

      public static int DeleteByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIssueKey(String issueKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIssueKey(Column _column, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Questions WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsTable GetDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static int UpdateQuestionKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET QuestionKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET IssueKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrderByIssueKey(Int32 newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET QuestionOrder=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET Question=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsQuestionOmitByIssueKey(Boolean newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET IsQuestionOmit=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueKey(Column _column, object newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET {0}=@newValue WHERE IssueKey=@IssueKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(QuestionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case QuestionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Questions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Questions

    #region vote.Questions2

    public partial class Questions2Row : DataRow
    {
      internal Questions2Row(DataRowBuilder rb) : base(rb) {}

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public Boolean IsQuestionOmit
      {
        get { return (Boolean) this["IsQuestionOmit"]; }
        set { this["IsQuestionOmit"] = value; }
      }
    }

    [Serializable]
    public partial class Questions2Table : TypedTableBase<Questions2Row>
    {
      public Questions2Row this[int index] { get { return (Questions2Row)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Questions2Row row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Questions2Table(); }

      new public Questions2Row NewRow() { return (Questions2Row) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Questions2Row(rb); }

      protected override Type GetRowType()
      { return typeof(Questions2Row); }

      public void RemoveRow(Questions2Row row) { this.Rows.Remove(row); }

      public Questions2Row NewRow(Int32 questionId, String question, Boolean isQuestionOmit)
      {
        Questions2Row row = NewRow();
        row.QuestionId = questionId;
        row.Question = question;
        row.IsQuestionOmit = isQuestionOmit;
        return row;
      }

      public void AddRow(Int32 questionId, String question, Boolean isQuestionOmit)
      {
        Questions2Row row = NewRow(questionId, question, isQuestionOmit);
        AddRow(row);
      }

      public Questions2Row NewRow(String question, Boolean isQuestionOmit)
      {
        Questions2Row row = NewRow();
        row.Question = question;
        row.IsQuestionOmit = isQuestionOmit;
        return row;
      }

      public void AddRow(String question, Boolean isQuestionOmit)
      {
        Questions2Row row = NewRow(question, isQuestionOmit);
        AddRow(row);
      }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn IsQuestionOmitColumn { get { return this.Columns["IsQuestionOmit"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("QuestionId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsQuestionOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Questions2Table() : this(ColumnSet.All) { }

      public Questions2Table(ColumnSet columnSet)
      {
        this.TableName = "Questions2";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Questions2Table(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Questions2
    {
      public const string TableName = "Questions2";

      public enum Column { QuestionId, Question, IsQuestionOmit }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.QuestionId, "QuestionId" },
        { Column.Question, "Question" },
        { Column.IsQuestionOmit, "IsQuestionOmit" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Questions2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 questionId, String question, Boolean isQuestionOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Questions2 (QuestionId,Question,IsQuestionOmit) VALUES (@QuestionId,@Question,@IsQuestionOmit)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Question", question);
        VoteDb.AddCommandParameter(cmd, "IsQuestionOmit", isQuestionOmit);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String question, Boolean isQuestionOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Questions2 (Question,IsQuestionOmit) VALUES (@Question,@IsQuestionOmit)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Question", question);
        VoteDb.AddCommandParameter(cmd, "IsQuestionOmit", isQuestionOmit);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT QuestionId,Question,IsQuestionOmit FROM Questions2";
        }
      }

      public static Questions2Table GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionId,Question,IsQuestionOmit FROM Questions2";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Questions2Table.ColumnSet.All);
      }

      public static Questions2Table FillTable(DbCommand command)
      {
        return FillTable(command, Questions2Table.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Questions2Table FillTable(DbCommand command, Questions2Table.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          Questions2Table table = new Questions2Table(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Questions2Table table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Questions2Table.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Questions2Table table, Questions2Table.ColumnSet columnSet = Questions2Table.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string IsQuestionOmitColumnName { get { return "IsQuestionOmit"; } }

      public static int QuestionMaxLength { get { return 150; } }

      public static bool QuestionIdExists(Int32 questionId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetQuestionByQuestionId(Int32 questionId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Question FROM Questions2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsQuestionOmitByQuestionId(Int32 questionId)
      {
        return _GetIsQuestionOmitByQuestionId(questionId, null);
      }

      public static Boolean GetIsQuestionOmitByQuestionId(Int32 questionId, Boolean defaultValue)
      {
        return _GetIsQuestionOmitByQuestionId(questionId, defaultValue).Value;
      }

      private static Boolean? _GetIsQuestionOmitByQuestionId(Int32 questionId, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsQuestionOmit FROM Questions2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByQuestionId(Column _column, Int32 questionId)
      {
        object result;
        string cmdText = "SELECT {0} FROM Questions2 WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Questions2Table GetDataByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionId,Question,IsQuestionOmit FROM Questions2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return FillTable(cmd, Questions2Table.ColumnSet.All);
      }

      public static int UpdateQuestionIdByQuestionId(Int32 newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Questions2 SET QuestionId=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByQuestionId(String newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Questions2 SET Question=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsQuestionOmitByQuestionId(Boolean newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Questions2 SET IsQuestionOmit=@newValue WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionId(Column _column, object newValue, Int32 questionId)
      {
        string cmdText = "UPDATE Questions2 SET {0}=@newValue WHERE QuestionId=@QuestionId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionId(Int32 questionId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Questions2 WHERE QuestionId=@QuestionId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Questions2Table.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Questions2Table.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Questions2()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Questions2

    #region vote.QuestionsJurisdictions

    public partial class QuestionsJurisdictionsRow : DataRow
    {
      internal QuestionsJurisdictionsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public String IssueLevel
      {
        get { return this["IssueLevel"] as String; }
        set { if (value == null) this["IssueLevel"] = DBNull.Value; else this["IssueLevel"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyOrLocal
      {
        get { return this["CountyOrLocal"] as String; }
        set { if (value == null) this["CountyOrLocal"] = DBNull.Value; else this["CountyOrLocal"] = value; }
      }
    }

    [Serializable]
    public partial class QuestionsJurisdictionsTable : TypedTableBase<QuestionsJurisdictionsRow>
    {
      public QuestionsJurisdictionsRow this[int index] { get { return (QuestionsJurisdictionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(QuestionsJurisdictionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new QuestionsJurisdictionsTable(); }

      new public QuestionsJurisdictionsRow NewRow() { return (QuestionsJurisdictionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new QuestionsJurisdictionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(QuestionsJurisdictionsRow); }

      public void RemoveRow(QuestionsJurisdictionsRow row) { this.Rows.Remove(row); }

      public QuestionsJurisdictionsRow NewRow(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        QuestionsJurisdictionsRow row = NewRow();
        row.QuestionId = questionId;
        row.IssueLevel = issueLevel;
        row.StateCode = stateCode;
        row.CountyOrLocal = countyOrLocal;
        return row;
      }

      public void AddRow(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        QuestionsJurisdictionsRow row = NewRow(questionId, issueLevel, stateCode, countyOrLocal);
        AddRow(row);
      }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn IssueLevelColumn { get { return this.Columns["IssueLevel"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyOrLocalColumn { get { return this.Columns["CountyOrLocal"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("QuestionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueLevel", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyOrLocal", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public QuestionsJurisdictionsTable() : this(ColumnSet.All) { }

      public QuestionsJurisdictionsTable(ColumnSet columnSet)
      {
        this.TableName = "QuestionsJurisdictions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected QuestionsJurisdictionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class QuestionsJurisdictions
    {
      public const string TableName = "QuestionsJurisdictions";

      public enum Column { QuestionId, IssueLevel, StateCode, CountyOrLocal }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.QuestionId, "QuestionId" },
        { Column.IssueLevel, "IssueLevel" },
        { Column.StateCode, "StateCode" },
        { Column.CountyOrLocal, "CountyOrLocal" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM QuestionsJurisdictions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE QuestionsJurisdictions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO QuestionsJurisdictions (QuestionId,IssueLevel,StateCode,CountyOrLocal) VALUES (@QuestionId,@IssueLevel,@StateCode,@CountyOrLocal)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT QuestionId,IssueLevel,StateCode,CountyOrLocal FROM QuestionsJurisdictions";
        }
      }

      public static QuestionsJurisdictionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionId,IssueLevel,StateCode,CountyOrLocal FROM QuestionsJurisdictions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, QuestionsJurisdictionsTable.ColumnSet.All);
      }

      public static QuestionsJurisdictionsTable FillTable(DbCommand command)
      {
        return FillTable(command, QuestionsJurisdictionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static QuestionsJurisdictionsTable FillTable(DbCommand command, QuestionsJurisdictionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          QuestionsJurisdictionsTable table = new QuestionsJurisdictionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(QuestionsJurisdictionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, QuestionsJurisdictionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(QuestionsJurisdictionsTable table, QuestionsJurisdictionsTable.ColumnSet columnSet = QuestionsJurisdictionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string IssueLevelColumnName { get { return "IssueLevel"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyOrLocalColumnName { get { return "CountyOrLocal"; } }

      public static int IssueLevelMaxLength { get { return 1; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyOrLocalMaxLength { get { return 5; } }

      public static bool QuestionIdIssueLevelStateCodeCountyOrLocalExists(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIssueLevelByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueLevel FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyOrLocalByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyOrLocal FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByQuestionIdIssueLevelStateCodeCountyOrLocal(Column _column, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        object result;
        string cmdText = "SELECT {0} FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsJurisdictionsTable GetDataByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionId,IssueLevel,StateCode,CountyOrLocal FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        return FillTable(cmd, QuestionsJurisdictionsTable.ColumnSet.All);
      }

      public static int UpdateQuestionIdByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 newValue, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET QuestionId=@newValue WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevelByQuestionIdIssueLevelStateCodeCountyOrLocal(String newValue, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET IssueLevel=@newValue WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByQuestionIdIssueLevelStateCodeCountyOrLocal(String newValue, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET StateCode=@newValue WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyOrLocalByQuestionIdIssueLevelStateCodeCountyOrLocal(String newValue, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET CountyOrLocal=@newValue WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionIdIssueLevelStateCodeCountyOrLocal(Column _column, object newValue, Int32 questionId, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET {0}=@newValue WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionIdIssueLevelStateCodeCountyOrLocal(Int32 questionId, String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM QuestionsJurisdictions WHERE QuestionId=@QuestionId AND IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIssueLevelStateCodeCountyOrLocal(String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM QuestionsJurisdictions WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIssueLevelStateCodeCountyOrLocal(Column _column, String issueLevel, String stateCode, String countyOrLocal)
      {
        object result;
        string cmdText = "SELECT {0} FROM QuestionsJurisdictions WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsJurisdictionsTable GetDataByIssueLevelStateCodeCountyOrLocal(String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionId,IssueLevel,StateCode,CountyOrLocal FROM QuestionsJurisdictions WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        return FillTable(cmd, QuestionsJurisdictionsTable.ColumnSet.All);
      }

      public static int UpdateQuestionIdByIssueLevelStateCodeCountyOrLocal(Int32 newValue, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET QuestionId=@newValue WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueLevelByIssueLevelStateCodeCountyOrLocal(String newValue, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET IssueLevel=@newValue WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByIssueLevelStateCodeCountyOrLocal(String newValue, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET StateCode=@newValue WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyOrLocalByIssueLevelStateCodeCountyOrLocal(String newValue, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET CountyOrLocal=@newValue WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueLevelStateCodeCountyOrLocal(Column _column, object newValue, String issueLevel, String stateCode, String countyOrLocal)
      {
        string cmdText = "UPDATE QuestionsJurisdictions SET {0}=@newValue WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueLevelStateCodeCountyOrLocal(String issueLevel, String stateCode, String countyOrLocal, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM QuestionsJurisdictions WHERE IssueLevel=@IssueLevel AND StateCode=@StateCode AND CountyOrLocal=@CountyOrLocal";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueLevel", issueLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyOrLocal", countyOrLocal);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(QuestionsJurisdictionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case QuestionsJurisdictionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static QuestionsJurisdictions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.QuestionsJurisdictions

    #region vote.QuestionsTopics

    public partial class QuestionsTopicsRow : DataRow
    {
      internal QuestionsTopicsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 QuestionId
      {
        get { return (Int32) this["QuestionId"]; }
        set { this["QuestionId"] = value; }
      }

      public String Topic
      {
        get { return this["Topic"] as String; }
        set { if (value == null) this["Topic"] = DBNull.Value; else this["Topic"] = value; }
      }

      public Int32 TopicOrder
      {
        get { return (Int32) this["TopicOrder"]; }
        set { this["TopicOrder"] = value; }
      }
    }

    [Serializable]
    public partial class QuestionsTopicsTable : TypedTableBase<QuestionsTopicsRow>
    {
      public QuestionsTopicsRow this[int index] { get { return (QuestionsTopicsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(QuestionsTopicsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new QuestionsTopicsTable(); }

      new public QuestionsTopicsRow NewRow() { return (QuestionsTopicsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new QuestionsTopicsRow(rb); }

      protected override Type GetRowType()
      { return typeof(QuestionsTopicsRow); }

      public void RemoveRow(QuestionsTopicsRow row) { this.Rows.Remove(row); }

      public QuestionsTopicsRow NewRow(Int32 id, Int32 questionId, String topic, Int32 topicOrder)
      {
        QuestionsTopicsRow row = NewRow();
        row.Id = id;
        row.QuestionId = questionId;
        row.Topic = topic;
        row.TopicOrder = topicOrder;
        return row;
      }

      public void AddRow(Int32 id, Int32 questionId, String topic, Int32 topicOrder)
      {
        QuestionsTopicsRow row = NewRow(id, questionId, topic, topicOrder);
        AddRow(row);
      }

      public QuestionsTopicsRow NewRow(Int32 questionId, String topic, Int32 topicOrder)
      {
        QuestionsTopicsRow row = NewRow();
        row.QuestionId = questionId;
        row.Topic = topic;
        row.TopicOrder = topicOrder;
        return row;
      }

      public void AddRow(Int32 questionId, String topic, Int32 topicOrder)
      {
        QuestionsTopicsRow row = NewRow(questionId, topic, topicOrder);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn QuestionIdColumn { get { return this.Columns["QuestionId"]; } }

      public DataColumn TopicColumn { get { return this.Columns["Topic"]; } }

      public DataColumn TopicOrderColumn { get { return this.Columns["TopicOrder"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Topic", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TopicOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public QuestionsTopicsTable() : this(ColumnSet.All) { }

      public QuestionsTopicsTable(ColumnSet columnSet)
      {
        this.TableName = "QuestionsTopics";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected QuestionsTopicsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class QuestionsTopics
    {
      public const string TableName = "QuestionsTopics";

      public enum Column { Id, QuestionId, Topic, TopicOrder }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.QuestionId, "QuestionId" },
        { Column.Topic, "Topic" },
        { Column.TopicOrder, "TopicOrder" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM QuestionsTopics";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 questionId, String topic, Int32 topicOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO QuestionsTopics (Id,QuestionId,Topic,TopicOrder) VALUES (@Id,@QuestionId,@Topic,@TopicOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Topic", topic);
        VoteDb.AddCommandParameter(cmd, "TopicOrder", topicOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 questionId, String topic, Int32 topicOrder, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO QuestionsTopics (QuestionId,Topic,TopicOrder) VALUES (@QuestionId,@Topic,@TopicOrder)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionId", questionId);
        VoteDb.AddCommandParameter(cmd, "Topic", topic);
        VoteDb.AddCommandParameter(cmd, "TopicOrder", topicOrder);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,QuestionId,Topic,TopicOrder FROM QuestionsTopics";
        }
      }

      public static QuestionsTopicsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,QuestionId,Topic,TopicOrder FROM QuestionsTopics";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, QuestionsTopicsTable.ColumnSet.All);
      }

      public static QuestionsTopicsTable FillTable(DbCommand command)
      {
        return FillTable(command, QuestionsTopicsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static QuestionsTopicsTable FillTable(DbCommand command, QuestionsTopicsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          QuestionsTopicsTable table = new QuestionsTopicsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(QuestionsTopicsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, QuestionsTopicsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(QuestionsTopicsTable table, QuestionsTopicsTable.ColumnSet columnSet = QuestionsTopicsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string QuestionIdColumnName { get { return "QuestionId"; } }

      public static string TopicColumnName { get { return "Topic"; } }

      public static string TopicOrderColumnName { get { return "TopicOrder"; } }

      public static int TopicMaxLength { get { return 255; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetQuestionIdById(Int32 id)
      {
        return _GetQuestionIdById(id, null);
      }

      public static Int32 GetQuestionIdById(Int32 id, Int32 defaultValue)
      {
        return _GetQuestionIdById(id, defaultValue).Value;
      }

      private static Int32? _GetQuestionIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT QuestionId FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetTopicById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Topic FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetTopicOrderById(Int32 id)
      {
        return _GetTopicOrderById(id, null);
      }

      public static Int32 GetTopicOrderById(Int32 id, Int32 defaultValue)
      {
        return _GetTopicOrderById(id, defaultValue).Value;
      }

      private static Int32? _GetTopicOrderById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT TopicOrder FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM QuestionsTopics WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsTopicsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,QuestionId,Topic,TopicOrder FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, QuestionsTopicsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE QuestionsTopics SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE QuestionsTopics SET QuestionId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTopicById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE QuestionsTopics SET Topic=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTopicOrderById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE QuestionsTopics SET TopicOrder=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE QuestionsTopics SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM QuestionsTopics WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(QuestionsTopicsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case QuestionsTopicsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static QuestionsTopics()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.QuestionsTopics

    #region vote.Referendums

    public partial class ReferendumsRow : DataRow
    {
      internal ReferendumsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String ReferendumKey
      {
        get { return this["ReferendumKey"] as String; }
        set { if (value == null) this["ReferendumKey"] = DBNull.Value; else this["ReferendumKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public Int32 OrderOnBallot
      {
        get { return (Int32) this["OrderOnBallot"]; }
        set { this["OrderOnBallot"] = value; }
      }

      public String ReferendumTitle
      {
        get { return this["ReferendumTitle"] as String; }
        set { if (value == null) this["ReferendumTitle"] = DBNull.Value; else this["ReferendumTitle"] = value; }
      }

      public String ReferendumDescription
      {
        get { return this["ReferendumDesc"] as String; }
        set { if (value == null) this["ReferendumDesc"] = DBNull.Value; else this["ReferendumDesc"] = value; }
      }

      public String ReferendumDetail
      {
        get { return this["ReferendumDetail"] as String; }
        set { if (value == null) this["ReferendumDetail"] = DBNull.Value; else this["ReferendumDetail"] = value; }
      }

      public String ReferendumDetailUrl
      {
        get { return this["ReferendumDetailUrl"] as String; }
        set { if (value == null) this["ReferendumDetailUrl"] = DBNull.Value; else this["ReferendumDetailUrl"] = value; }
      }

      public String ReferendumFullText
      {
        get { return this["ReferendumFullText"] as String; }
        set { if (value == null) this["ReferendumFullText"] = DBNull.Value; else this["ReferendumFullText"] = value; }
      }

      public String ReferendumFullTextUrl
      {
        get { return this["ReferendumFullTextUrl"] as String; }
        set { if (value == null) this["ReferendumFullTextUrl"] = DBNull.Value; else this["ReferendumFullTextUrl"] = value; }
      }

      public Boolean IsReferendumTagForDeletion
      {
        get { return (Boolean) this["IsReferendumTagForDeletion"]; }
        set { this["IsReferendumTagForDeletion"] = value; }
      }

      public Boolean IsPassed
      {
        get { return (Boolean) this["IsPassed"]; }
        set { this["IsPassed"] = value; }
      }

      public Boolean IsResultRecorded
      {
        get { return (Boolean) this["IsResultRecorded"]; }
        set { this["IsResultRecorded"] = value; }
      }
    }

    [Serializable]
    public partial class ReferendumsTable : TypedTableBase<ReferendumsRow>
    {
      public ReferendumsRow this[int index] { get { return (ReferendumsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ReferendumsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ReferendumsTable(); }

      new public ReferendumsRow NewRow() { return (ReferendumsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ReferendumsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ReferendumsRow); }

      public void RemoveRow(ReferendumsRow row) { this.Rows.Remove(row); }

      public ReferendumsRow NewRow(Int32 id, String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow();
        row.Id = id;
        row.ElectionKey = electionKey;
        row.ReferendumKey = referendumKey;
        row.ElectionKeyState = electionKeyState;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.OrderOnBallot = orderOnBallot;
        row.ReferendumTitle = referendumTitle;
        row.ReferendumDescription = referendumDescription;
        row.ReferendumDetail = referendumDetail;
        row.ReferendumDetailUrl = referendumDetailUrl;
        row.ReferendumFullText = referendumFullText;
        row.ReferendumFullTextUrl = referendumFullTextUrl;
        row.IsReferendumTagForDeletion = isReferendumTagForDeletion;
        row.IsPassed = isPassed;
        row.IsResultRecorded = isResultRecorded;
        return row;
      }

      public void AddRow(Int32 id, String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow(id, electionKey, referendumKey, electionKeyState, stateCode, countyCode, localKey, orderOnBallot, referendumTitle, referendumDescription, referendumDetail, referendumDetailUrl, referendumFullText, referendumFullTextUrl, isReferendumTagForDeletion, isPassed, isResultRecorded);
        AddRow(row);
      }

      public ReferendumsRow NewRow(String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow();
        row.ElectionKey = electionKey;
        row.ReferendumKey = referendumKey;
        row.ElectionKeyState = electionKeyState;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.OrderOnBallot = orderOnBallot;
        row.ReferendumTitle = referendumTitle;
        row.ReferendumDescription = referendumDescription;
        row.ReferendumDetail = referendumDetail;
        row.ReferendumDetailUrl = referendumDetailUrl;
        row.ReferendumFullText = referendumFullText;
        row.ReferendumFullTextUrl = referendumFullTextUrl;
        row.IsReferendumTagForDeletion = isReferendumTagForDeletion;
        row.IsPassed = isPassed;
        row.IsResultRecorded = isResultRecorded;
        return row;
      }

      public void AddRow(String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow(electionKey, referendumKey, electionKeyState, stateCode, countyCode, localKey, orderOnBallot, referendumTitle, referendumDescription, referendumDetail, referendumDetailUrl, referendumFullText, referendumFullTextUrl, isReferendumTagForDeletion, isPassed, isResultRecorded);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn ReferendumKeyColumn { get { return this.Columns["ReferendumKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn OrderOnBallotColumn { get { return this.Columns["OrderOnBallot"]; } }

      public DataColumn ReferendumTitleColumn { get { return this.Columns["ReferendumTitle"]; } }

      public DataColumn ReferendumDescriptionColumn { get { return this.Columns["ReferendumDesc"]; } }

      public DataColumn ReferendumDetailColumn { get { return this.Columns["ReferendumDetail"]; } }

      public DataColumn ReferendumDetailUrlColumn { get { return this.Columns["ReferendumDetailUrl"]; } }

      public DataColumn ReferendumFullTextColumn { get { return this.Columns["ReferendumFullText"]; } }

      public DataColumn ReferendumFullTextUrlColumn { get { return this.Columns["ReferendumFullTextUrl"]; } }

      public DataColumn IsReferendumTagForDeletionColumn { get { return this.Columns["IsReferendumTagForDeletion"]; } }

      public DataColumn IsPassedColumn { get { return this.Columns["IsPassed"]; } }

      public DataColumn IsResultRecordedColumn { get { return this.Columns["IsResultRecorded"]; } }

      public enum ColumnSet { All, Cache, Summary, List }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetailUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullText", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullTextUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsReferendumTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetailUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullText", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullTextUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitSummaryColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitListColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsReferendumTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ReferendumsTable() : this(ColumnSet.All) { }

      public ReferendumsTable(ColumnSet columnSet)
      {
        this.TableName = "Referendums";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Summary:
            InitSummaryColumns();
            break;

          case ColumnSet.List:
            InitListColumns();
            break;
        }
      }

      protected ReferendumsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Referendums
    {
      public const string TableName = "Referendums";

      public enum Column { Id, ElectionKey, ReferendumKey, ElectionKeyState, StateCode, CountyCode, LocalKey, OrderOnBallot, ReferendumTitle, ReferendumDescription, ReferendumDetail, ReferendumDetailUrl, ReferendumFullText, ReferendumFullTextUrl, IsReferendumTagForDeletion, IsPassed, IsResultRecorded }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.ReferendumKey, "ReferendumKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.OrderOnBallot, "OrderOnBallot" },
        { Column.ReferendumTitle, "ReferendumTitle" },
        { Column.ReferendumDescription, "ReferendumDesc" },
        { Column.ReferendumDetail, "ReferendumDetail" },
        { Column.ReferendumDetailUrl, "ReferendumDetailUrl" },
        { Column.ReferendumFullText, "ReferendumFullText" },
        { Column.ReferendumFullTextUrl, "ReferendumFullTextUrl" },
        { Column.IsReferendumTagForDeletion, "IsReferendumTagForDeletion" },
        { Column.IsPassed, "IsPassed" },
        { Column.IsResultRecorded, "IsResultRecorded" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Referendums (Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded) VALUES (@Id,@ElectionKey,@ReferendumKey,@ElectionKeyState,@StateCode,@CountyCode,@LocalKey,@OrderOnBallot,@ReferendumTitle,@ReferendumDescription,@ReferendumDetail,@ReferendumDetailUrl,@ReferendumFullText,@ReferendumFullTextUrl,@IsReferendumTagForDeletion,@IsPassed,@IsResultRecorded)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        VoteDb.AddCommandParameter(cmd, "ReferendumTitle", referendumTitle);
        VoteDb.AddCommandParameter(cmd, "ReferendumDescription", referendumDescription);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetail", referendumDetail);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetailUrl", referendumDetailUrl);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullText", referendumFullText);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullTextUrl", referendumFullTextUrl);
        VoteDb.AddCommandParameter(cmd, "IsReferendumTagForDeletion", isReferendumTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsPassed", isPassed);
        VoteDb.AddCommandParameter(cmd, "IsResultRecorded", isResultRecorded);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String electionKey, String referendumKey, String electionKeyState, String stateCode, String countyCode, String localKey, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Referendums (ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded) VALUES (@ElectionKey,@ReferendumKey,@ElectionKeyState,@StateCode,@CountyCode,@LocalKey,@OrderOnBallot,@ReferendumTitle,@ReferendumDescription,@ReferendumDetail,@ReferendumDetailUrl,@ReferendumFullText,@ReferendumFullTextUrl,@IsReferendumTagForDeletion,@IsPassed,@IsResultRecorded)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        VoteDb.AddCommandParameter(cmd, "ReferendumTitle", referendumTitle);
        VoteDb.AddCommandParameter(cmd, "ReferendumDescription", referendumDescription);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetail", referendumDetail);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetailUrl", referendumDetailUrl);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullText", referendumFullText);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullTextUrl", referendumFullTextUrl);
        VoteDb.AddCommandParameter(cmd, "IsReferendumTagForDeletion", isReferendumTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsPassed", isPassed);
        VoteDb.AddCommandParameter(cmd, "IsResultRecorded", isResultRecorded);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static ReferendumsTable FillTable(DbCommand command)
      {
        return FillTable(command, ReferendumsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ReferendumsTable FillTable(DbCommand command, ReferendumsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ReferendumsTable table = new ReferendumsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ReferendumsTable table, ReferendumsTable.ColumnSet columnSet = ReferendumsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string ReferendumKeyColumnName { get { return "ReferendumKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string OrderOnBallotColumnName { get { return "OrderOnBallot"; } }

      public static string ReferendumTitleColumnName { get { return "ReferendumTitle"; } }

      public static string ReferendumDescriptionColumnName { get { return "ReferendumDesc"; } }

      public static string ReferendumDetailColumnName { get { return "ReferendumDetail"; } }

      public static string ReferendumDetailUrlColumnName { get { return "ReferendumDetailUrl"; } }

      public static string ReferendumFullTextColumnName { get { return "ReferendumFullText"; } }

      public static string ReferendumFullTextUrlColumnName { get { return "ReferendumFullTextUrl"; } }

      public static string IsReferendumTagForDeletionColumnName { get { return "IsReferendumTagForDeletion"; } }

      public static string IsPassedColumnName { get { return "IsPassed"; } }

      public static string IsResultRecordedColumnName { get { return "IsResultRecorded"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int ReferendumKeyMaxLength { get { return 150; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int ReferendumTitleMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDescriptionMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDetailMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDetailUrlMaxLength { get { return int.MaxValue; } }

      public static int ReferendumFullTextMaxLength { get { return int.MaxValue; } }

      public static int ReferendumFullTextUrlMaxLength { get { return int.MaxValue; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateIdByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumKey FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyStateById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrderOnBallotById(Int32 id)
      {
        return _GetOrderOnBallotById(id, null);
      }

      public static Int32 GetOrderOnBallotById(Int32 id, Int32 defaultValue)
      {
        return _GetOrderOnBallotById(id, defaultValue).Value;
      }

      private static Int32? _GetOrderOnBallotById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetReferendumTitleById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumTitle FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDescriptionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDesc FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetail FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetailUrl FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullText FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextUrlById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullTextUrl FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsReferendumTagForDeletionById(Int32 id)
      {
        return _GetIsReferendumTagForDeletionById(id, null);
      }

      public static Boolean GetIsReferendumTagForDeletionById(Int32 id, Boolean defaultValue)
      {
        return _GetIsReferendumTagForDeletionById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsReferendumTagForDeletionById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsReferendumTagForDeletion FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPassedById(Int32 id)
      {
        return _GetIsPassedById(id, null);
      }

      public static Boolean GetIsPassedById(Int32 id, Boolean defaultValue)
      {
        return _GetIsPassedById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsPassedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPassed FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsResultRecordedById(Int32 id)
      {
        return _GetIsResultRecordedById(id, null);
      }

      public static Boolean GetIsResultRecordedById(Int32 id, Boolean defaultValue)
      {
        return _GetIsResultRecordedById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsResultRecordedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsResultRecorded FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyReferendumKeyExists(String electionKey, String referendumKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIdByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Int32? GetId(String electionKey, String referendumKey)
      {
        return GetIdByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Int32 GetIdByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return _GetIdByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Int32 GetId(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return GetIdByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Int32? _GetIdByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetElectionKeyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumKeyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumKey FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumKeyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetElectionKeyStateByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyState(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyStateByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetStateCodeByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetStateCodeByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetCountyCodeByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetCountyCodeByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetLocalKeyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetLocalKeyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static Int32? GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Int32? GetOrderOnBallot(String electionKey, String referendumKey)
      {
        return GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Int32 GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Int32 GetOrderOnBallot(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Int32? _GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetReferendumTitleByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumTitle FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumTitle(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumTitleByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDescriptionByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDesc FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDescription(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDescriptionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDetailByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetail FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetail(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDetailByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDetailUrlByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetailUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailUrl(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDetailUrlByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumFullTextByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullText FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullText(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumFullTextByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumFullTextUrlByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullTextUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextUrl(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumFullTextUrlByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static Boolean? GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsReferendumTagForDeletion(String electionKey, String referendumKey)
      {
        return GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsReferendumTagForDeletion(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsReferendumTagForDeletion FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsPassed(String electionKey, String referendumKey)
      {
        return GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsPassed(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPassed FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsResultRecorded(String electionKey, String referendumKey)
      {
        return GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsResultRecorded(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByElectionKeyReferendumKey(Column _column, String electionKey, String referendumKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionKey, String referendumKey)
      {
        return GetColumnByElectionKeyReferendumKey(_column, electionKey, referendumKey);
      }

      public static ReferendumsTable GetDataByElectionKeyReferendumKey(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static ReferendumsTable GetData(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        return GetDataByElectionKeyReferendumKey(electionKey, referendumKey, commandTimeout);
      }

      public static int UpdateIdByElectionKeyReferendumKey(Int32 newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String electionKey, String referendumKey)
      {
        return UpdateIdByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateElectionKeyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumKeyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumKeyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateElectionKeyStateByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyState(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyStateByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateStateCodeByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionKey, String referendumKey)
      {
        return UpdateStateCodeByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateCountyCodeByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String electionKey, String referendumKey)
      {
        return UpdateCountyCodeByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateLocalKeyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKey(String newValue, String electionKey, String referendumKey)
      {
        return UpdateLocalKeyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateOrderOnBallotByElectionKeyReferendumKey(Int32 newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallot(Int32 newValue, String electionKey, String referendumKey)
      {
        return UpdateOrderOnBallotByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumTitleByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitle(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumTitleByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDescriptionByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescription(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDescriptionByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDetailByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetail(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDetailByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDetailUrlByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrl(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDetailUrlByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumFullTextByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullText(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumFullTextByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumFullTextUrlByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrl(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumFullTextUrlByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsReferendumTagForDeletionByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletion(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsReferendumTagForDeletionByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsPassedByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassed(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsPassedByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsResultRecordedByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecorded(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsResultRecordedByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateColumnByElectionKeyReferendumKey(Column _column, object newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionKey, String referendumKey)
      {
         return UpdateColumnByElectionKeyReferendumKey(_column, newValue, electionKey, referendumKey);
      }

      public static int DeleteByElectionKeyReferendumKey(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ReferendumKeyExists(String referendumKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByReferendumKey(String referendumKey)
      {
        return _GetIdByReferendumKey(referendumKey, null);
      }

      public static Int32 GetIdByReferendumKey(String referendumKey, Int32 defaultValue)
      {
        return _GetIdByReferendumKey(referendumKey, defaultValue).Value;
      }

      private static Int32? _GetIdByReferendumKey(String referendumKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetElectionKeyByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumKeyByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumKey FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyStateByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalKeyByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalKey FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrderOnBallotByReferendumKey(String referendumKey)
      {
        return _GetOrderOnBallotByReferendumKey(referendumKey, null);
      }

      public static Int32 GetOrderOnBallotByReferendumKey(String referendumKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByReferendumKey(referendumKey, defaultValue).Value;
      }

      private static Int32? _GetOrderOnBallotByReferendumKey(String referendumKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetReferendumTitleByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumTitle FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDescriptionByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDesc FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetail FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailUrlByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetailUrl FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullText FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextUrlByReferendumKey(String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullTextUrl FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsReferendumTagForDeletionByReferendumKey(String referendumKey)
      {
        return _GetIsReferendumTagForDeletionByReferendumKey(referendumKey, null);
      }

      public static Boolean GetIsReferendumTagForDeletionByReferendumKey(String referendumKey, Boolean defaultValue)
      {
        return _GetIsReferendumTagForDeletionByReferendumKey(referendumKey, defaultValue).Value;
      }

      private static Boolean? _GetIsReferendumTagForDeletionByReferendumKey(String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsReferendumTagForDeletion FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPassedByReferendumKey(String referendumKey)
      {
        return _GetIsPassedByReferendumKey(referendumKey, null);
      }

      public static Boolean GetIsPassedByReferendumKey(String referendumKey, Boolean defaultValue)
      {
        return _GetIsPassedByReferendumKey(referendumKey, defaultValue).Value;
      }

      private static Boolean? _GetIsPassedByReferendumKey(String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPassed FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsResultRecordedByReferendumKey(String referendumKey)
      {
        return _GetIsResultRecordedByReferendumKey(referendumKey, null);
      }

      public static Boolean GetIsResultRecordedByReferendumKey(String referendumKey, Boolean defaultValue)
      {
        return _GetIsResultRecordedByReferendumKey(referendumKey, defaultValue).Value;
      }

      private static Boolean? _GetIsResultRecordedByReferendumKey(String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsResultRecorded FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByReferendumKey(Column _column, String referendumKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataByReferendumKey(String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateIdByReferendumKey(Int32 newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByReferendumKey(Int32 newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlByReferendumKey(String newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionByReferendumKey(Boolean newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedByReferendumKey(Boolean newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedByReferendumKey(Boolean newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByReferendumKey(Column _column, object newValue, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE ReferendumKey=@ReferendumKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByReferendumKey(String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeLocalKey(Column _column, String stateCode, String localKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByStateCodeLocalKey(Int32 newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlByStateCodeLocalKey(String newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedByStateCodeLocalKey(Boolean newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeLocalKey(Column _column, object newValue, String stateCode, String localKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeLocalKey(String stateCode, String localKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE StateCode=@StateCode AND LocalKey=@LocalKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LocalKey", localKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ElectionKey,ReferendumKey,ElectionKeyState,StateCode,CountyCode,LocalKey,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET Id=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalKeyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET LocalKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByStateCodeCountyCode(Int32 newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Referendums WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ReferendumsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ReferendumsTable GetCacheDataByElectionKeyReferendumKey(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Cache);
      }

      public static ReferendumsTable GetCacheData(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        return GetCacheDataByElectionKeyReferendumKey(electionKey, referendumKey, commandTimeout);
      }

      public static string SelectSummaryCommandText
      {
        get
        {
          return "SELECT ElectionKey,ReferendumKey,ReferendumTitle,ReferendumDesc,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllSummaryData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ReferendumKey,ReferendumTitle,ReferendumDesc,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Summary);
      }

      public static void UpdateSummary(ReferendumsTable table)
      {
        UpdateSummary(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateSummary(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.Summary, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectListCommandText
      {
        get
        {
          return "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllListData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.List);
      }

      public static void UpdateList(ReferendumsTable table)
      {
        UpdateList(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateList(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.List, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ReferendumsTable GetListDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey ORDER BY OrderOnBallot";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.List);
      }

      public static ReferendumsTable GetListData(String electionKey, int commandTimeout = -1)
      {
        return GetListDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ReferendumsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ReferendumsTable.ColumnSet.All:
            return SelectAllCommandText;

          case ReferendumsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ReferendumsTable.ColumnSet.Summary:
            return SelectSummaryCommandText;

          case ReferendumsTable.ColumnSet.List:
            return SelectListCommandText;

          default:
            return null;
        }
      }

      static Referendums()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Referendums

    #region vote.SchoolDistrictDistricts

    public partial class SchoolDistrictDistrictsRow : DataRow
    {
      internal SchoolDistrictDistrictsRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String SchoolDistrictDistrictCode
      {
        get { return this["SchoolDistrictDistrictCode"] as String; }
        set { if (value == null) this["SchoolDistrictDistrictCode"] = DBNull.Value; else this["SchoolDistrictDistrictCode"] = value; }
      }

      public String TigerType
      {
        get { return this["TigerType"] as String; }
        set { if (value == null) this["TigerType"] = DBNull.Value; else this["TigerType"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public Boolean IsInShapefile
      {
        get { return (Boolean) this["IsInShapefile"]; }
        set { this["IsInShapefile"] = value; }
      }
    }

    [Serializable]
    public partial class SchoolDistrictDistrictsTable : TypedTableBase<SchoolDistrictDistrictsRow>
    {
      public SchoolDistrictDistrictsRow this[int index] { get { return (SchoolDistrictDistrictsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SchoolDistrictDistrictsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SchoolDistrictDistrictsTable(); }

      new public SchoolDistrictDistrictsRow NewRow() { return (SchoolDistrictDistrictsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SchoolDistrictDistrictsRow(rb); }

      protected override Type GetRowType()
      { return typeof(SchoolDistrictDistrictsRow); }

      public void RemoveRow(SchoolDistrictDistrictsRow row) { this.Rows.Remove(row); }

      public SchoolDistrictDistrictsRow NewRow(String stateCode, String schoolDistrictDistrictCode, String tigerType, String tigerCode, String name, Boolean isInShapefile)
      {
        SchoolDistrictDistrictsRow row = NewRow();
        row.StateCode = stateCode;
        row.SchoolDistrictDistrictCode = schoolDistrictDistrictCode;
        row.TigerType = tigerType;
        row.TigerCode = tigerCode;
        row.Name = name;
        row.IsInShapefile = isInShapefile;
        return row;
      }

      public void AddRow(String stateCode, String schoolDistrictDistrictCode, String tigerType, String tigerCode, String name, Boolean isInShapefile)
      {
        SchoolDistrictDistrictsRow row = NewRow(stateCode, schoolDistrictDistrictCode, tigerType, tigerCode, name, isInShapefile);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn SchoolDistrictDistrictCodeColumn { get { return this.Columns["SchoolDistrictDistrictCode"]; } }

      public DataColumn TigerTypeColumn { get { return this.Columns["TigerType"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn IsInShapefileColumn { get { return this.Columns["IsInShapefile"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SchoolDistrictDistrictCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInShapefile", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SchoolDistrictDistrictsTable() : this(ColumnSet.All) { }

      public SchoolDistrictDistrictsTable(ColumnSet columnSet)
      {
        this.TableName = "SchoolDistrictDistricts";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SchoolDistrictDistrictsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SchoolDistrictDistricts
    {
      public const string TableName = "SchoolDistrictDistricts";

      public enum Column { StateCode, SchoolDistrictDistrictCode, TigerType, TigerCode, Name, IsInShapefile }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.SchoolDistrictDistrictCode, "SchoolDistrictDistrictCode" },
        { Column.TigerType, "TigerType" },
        { Column.TigerCode, "TigerCode" },
        { Column.Name, "Name" },
        { Column.IsInShapefile, "IsInShapefile" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SchoolDistrictDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String schoolDistrictDistrictCode, String tigerType, String tigerCode, String name, Boolean isInShapefile, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO SchoolDistrictDistricts (StateCode,SchoolDistrictDistrictCode,TigerType,TigerCode,Name,IsInShapefile) VALUES (@StateCode,@SchoolDistrictDistrictCode,@TigerType,@TigerCode,@Name,@IsInShapefile)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "IsInShapefile", isInShapefile);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,SchoolDistrictDistrictCode,TigerType,TigerCode,Name,IsInShapefile FROM SchoolDistrictDistricts";
        }
      }

      public static SchoolDistrictDistrictsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,SchoolDistrictDistrictCode,TigerType,TigerCode,Name,IsInShapefile FROM SchoolDistrictDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SchoolDistrictDistrictsTable.ColumnSet.All);
      }

      public static SchoolDistrictDistrictsTable FillTable(DbCommand command)
      {
        return FillTable(command, SchoolDistrictDistrictsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SchoolDistrictDistrictsTable FillTable(DbCommand command, SchoolDistrictDistrictsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          SchoolDistrictDistrictsTable table = new SchoolDistrictDistrictsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SchoolDistrictDistrictsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, SchoolDistrictDistrictsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SchoolDistrictDistrictsTable table, SchoolDistrictDistrictsTable.ColumnSet columnSet = SchoolDistrictDistrictsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string SchoolDistrictDistrictCodeColumnName { get { return "SchoolDistrictDistrictCode"; } }

      public static string TigerTypeColumnName { get { return "TigerType"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string IsInShapefileColumnName { get { return "IsInShapefile"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int SchoolDistrictDistrictCodeMaxLength { get { return 5; } }

      public static int TigerTypeMaxLength { get { return 1; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static int NameMaxLength { get { return 100; } }

      public static bool StateCodeSchoolDistrictDistrictCodeExists(String stateCode, String schoolDistrictDistrictCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSchoolDistrictDistrictCodeByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SchoolDistrictDistrictCode FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerTypeByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerType FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNameByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsInShapefileByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode)
      {
        return _GetIsInShapefileByStateCodeSchoolDistrictDistrictCode(stateCode, schoolDistrictDistrictCode, null);
      }

      public static Boolean GetIsInShapefileByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, Boolean defaultValue)
      {
        return _GetIsInShapefileByStateCodeSchoolDistrictDistrictCode(stateCode, schoolDistrictDistrictCode, defaultValue).Value;
      }

      private static Boolean? _GetIsInShapefileByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInShapefile FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeSchoolDistrictDistrictCode(Column _column, String stateCode, String schoolDistrictDistrictCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SchoolDistrictDistrictsTable GetDataByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,SchoolDistrictDistrictCode,TigerType,TigerCode,Name,IsInShapefile FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        return FillTable(cmd, SchoolDistrictDistrictsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeSchoolDistrictDistrictCode(String newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET StateCode=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSchoolDistrictDistrictCodeByStateCodeSchoolDistrictDistrictCode(String newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET SchoolDistrictDistrictCode=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByStateCodeSchoolDistrictDistrictCode(String newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET TigerType=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeSchoolDistrictDistrictCode(String newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET TigerCode=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeSchoolDistrictDistrictCode(String newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET Name=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByStateCodeSchoolDistrictDistrictCode(Boolean newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET IsInShapefile=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeSchoolDistrictDistrictCode(Column _column, object newValue, String stateCode, String schoolDistrictDistrictCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET {0}=@newValue WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeSchoolDistrictDistrictCode(String stateCode, String schoolDistrictDistrictCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND SchoolDistrictDistrictCode=@SchoolDistrictDistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "SchoolDistrictDistrictCode", schoolDistrictDistrictCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeTigerTypeTigerCode(Column _column, String stateCode, String tigerType, String tigerCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SchoolDistrictDistrictsTable GetDataByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,SchoolDistrictDistrictCode,TigerType,TigerCode,Name,IsInShapefile FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return FillTable(cmd, SchoolDistrictDistrictsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET StateCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSchoolDistrictDistrictCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET SchoolDistrictDistrictCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET TigerType=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET TigerCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET Name=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInShapefileByStateCodeTigerTypeTigerCode(Boolean newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET IsInShapefile=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeTigerTypeTigerCode(Column _column, object newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE SchoolDistrictDistricts SET {0}=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM SchoolDistrictDistricts WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SchoolDistrictDistrictsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SchoolDistrictDistrictsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static SchoolDistrictDistricts()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.SchoolDistrictDistricts

    #region vote.Security

    public partial class SecurityRow : DataRow
    {
      internal SecurityRow(DataRowBuilder rb) : base(rb) {}

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserPassword
      {
        get { return this["UserPassword"] as String; }
        set { if (value == null) this["UserPassword"] = DBNull.Value; else this["UserPassword"] = value; }
      }

      public String UserEmail
      {
        get { return this["UserEmail"] as String; }
        set { if (value == null) this["UserEmail"] = DBNull.Value; else this["UserEmail"] = value; }
      }

      public String UserEmails
      {
        get { return this["UserEmails"] as String; }
        set { if (value == null) this["UserEmails"] = DBNull.Value; else this["UserEmails"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String UserCountyCode
      {
        get { return this["UserCountyCode"] as String; }
        set { if (value == null) this["UserCountyCode"] = DBNull.Value; else this["UserCountyCode"] = value; }
      }

      public String UserLocalKey
      {
        get { return this["UserLocalKey"] as String; }
        set { if (value == null) this["UserLocalKey"] = DBNull.Value; else this["UserLocalKey"] = value; }
      }

      public Boolean IsSuperUser
      {
        get { return (Boolean) this["IsSuperUser"]; }
        set { this["IsSuperUser"] = value; }
      }

      public Boolean IsStaging
      {
        get { return (Boolean) this["IsStaging"]; }
        set { this["IsStaging"] = value; }
      }
    }

    [Serializable]
    public partial class SecurityTable : TypedTableBase<SecurityRow>
    {
      public SecurityRow this[int index] { get { return (SecurityRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SecurityRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SecurityTable(); }

      new public SecurityRow NewRow() { return (SecurityRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SecurityRow(rb); }

      protected override Type GetRowType()
      { return typeof(SecurityRow); }

      public void RemoveRow(SecurityRow row) { this.Rows.Remove(row); }

      public SecurityRow NewRow(String userSecurity, String userName, String userPassword, String userEmail, String userEmails, String userStateCode, String userCountyCode, String userLocalKey, Boolean isSuperUser, Boolean isStaging)
      {
        SecurityRow row = NewRow();
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.UserPassword = userPassword;
        row.UserEmail = userEmail;
        row.UserEmails = userEmails;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalKey = userLocalKey;
        row.IsSuperUser = isSuperUser;
        row.IsStaging = isStaging;
        return row;
      }

      public void AddRow(String userSecurity, String userName, String userPassword, String userEmail, String userEmails, String userStateCode, String userCountyCode, String userLocalKey, Boolean isSuperUser, Boolean isStaging)
      {
        SecurityRow row = NewRow(userSecurity, userName, userPassword, userEmail, userEmails, userStateCode, userCountyCode, userLocalKey, isSuperUser, isStaging);
        AddRow(row);
      }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserPasswordColumn { get { return this.Columns["UserPassword"]; } }

      public DataColumn UserEmailColumn { get { return this.Columns["UserEmail"]; } }

      public DataColumn UserEmailsColumn { get { return this.Columns["UserEmails"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn UserCountyCodeColumn { get { return this.Columns["UserCountyCode"]; } }

      public DataColumn UserLocalKeyColumn { get { return this.Columns["UserLocalKey"]; } }

      public DataColumn IsSuperUserColumn { get { return this.Columns["IsSuperUser"]; } }

      public DataColumn IsStagingColumn { get { return this.Columns["IsStaging"]; } }

      public enum ColumnSet { All, Email }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPassword", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmails", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserLocalKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSuperUser", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsStaging", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailColumns()
      {
        DataColumn _column;
        _column = new DataColumn("UserEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmails", typeof(String));
        base.Columns.Add(_column);
      }

      public SecurityTable() : this(ColumnSet.All) { }

      public SecurityTable(ColumnSet columnSet)
      {
        this.TableName = "Security";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Email:
            InitEmailColumns();
            break;
        }
      }

      protected SecurityTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Security
    {
      public const string TableName = "Security";

      public enum Column { UserSecurity, UserName, UserPassword, UserEmail, UserEmails, UserStateCode, UserCountyCode, UserLocalKey, IsSuperUser, IsStaging }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.UserPassword, "UserPassword" },
        { Column.UserEmail, "UserEmail" },
        { Column.UserEmails, "UserEmails" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.UserCountyCode, "UserCountyCode" },
        { Column.UserLocalKey, "UserLocalKey" },
        { Column.IsSuperUser, "IsSuperUser" },
        { Column.IsStaging, "IsStaging" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String userSecurity, String userName, String userPassword, String userEmail, String userEmails, String userStateCode, String userCountyCode, String userLocalKey, Boolean isSuperUser, Boolean isStaging, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Security (UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalKey,IsSuperUser,IsStaging) VALUES (@UserSecurity,@UserName,@UserPassword,@UserEmail,@UserEmails,@UserStateCode,@UserCountyCode,@UserLocalKey,@IsSuperUser,@IsStaging)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "UserPassword", userPassword);
        VoteDb.AddCommandParameter(cmd, "UserEmail", userEmail);
        VoteDb.AddCommandParameter(cmd, "UserEmails", userEmails);
        VoteDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteDb.AddCommandParameter(cmd, "UserLocalKey", userLocalKey);
        VoteDb.AddCommandParameter(cmd, "IsSuperUser", isSuperUser);
        VoteDb.AddCommandParameter(cmd, "IsStaging", isStaging);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalKey,IsSuperUser,IsStaging FROM Security";
        }
      }

      public static SecurityTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalKey,IsSuperUser,IsStaging FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SecurityTable.ColumnSet.All);
      }

      public static SecurityTable FillTable(DbCommand command)
      {
        return FillTable(command, SecurityTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SecurityTable FillTable(DbCommand command, SecurityTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          SecurityTable table = new SecurityTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SecurityTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, SecurityTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SecurityTable table, SecurityTable.ColumnSet columnSet = SecurityTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserPasswordColumnName { get { return "UserPassword"; } }

      public static string UserEmailColumnName { get { return "UserEmail"; } }

      public static string UserEmailsColumnName { get { return "UserEmails"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string UserCountyCodeColumnName { get { return "UserCountyCode"; } }

      public static string UserLocalKeyColumnName { get { return "UserLocalKey"; } }

      public static string IsSuperUserColumnName { get { return "IsSuperUser"; } }

      public static string IsStagingColumnName { get { return "IsStaging"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserPasswordMaxLength { get { return 50; } }

      public static int UserEmailMaxLength { get { return 200; } }

      public static int UserEmailsMaxLength { get { return int.MaxValue; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int UserCountyCodeMaxLength { get { return 3; } }

      public static int UserLocalKeyMaxLength { get { return 5; } }

      public static bool UserNameExists(String userName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetUserSecurityByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurity(String userName, String defaultValue = null)
      {
        return GetUserSecurityByUserName(userName, defaultValue);
      }

      public static String GetUserNameByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserName(String userName, String defaultValue = null)
      {
        return GetUserNameByUserName(userName, defaultValue);
      }

      public static String GetUserPasswordByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPassword FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPassword(String userName, String defaultValue = null)
      {
        return GetUserPasswordByUserName(userName, defaultValue);
      }

      public static String GetUserEmailByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserEmail FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserEmail(String userName, String defaultValue = null)
      {
        return GetUserEmailByUserName(userName, defaultValue);
      }

      public static String GetUserEmailsByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserEmails FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserEmails(String userName, String defaultValue = null)
      {
        return GetUserEmailsByUserName(userName, defaultValue);
      }

      public static String GetUserStateCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCode(String userName, String defaultValue = null)
      {
        return GetUserStateCodeByUserName(userName, defaultValue);
      }

      public static String GetUserCountyCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserCountyCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserCountyCode(String userName, String defaultValue = null)
      {
        return GetUserCountyCodeByUserName(userName, defaultValue);
      }

      public static String GetUserLocalKeyByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserLocalKey FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserLocalKey(String userName, String defaultValue = null)
      {
        return GetUserLocalKeyByUserName(userName, defaultValue);
      }

      public static Boolean? GetIsSuperUserByUserName(String userName)
      {
        return _GetIsSuperUserByUserName(userName, null);
      }

      public static Boolean? GetIsSuperUser(String userName)
      {
        return GetIsSuperUserByUserName(userName);
      }

      public static Boolean GetIsSuperUserByUserName(String userName, Boolean defaultValue)
      {
        return _GetIsSuperUserByUserName(userName, defaultValue).Value;
      }

      public static Boolean GetIsSuperUser(String userName, Boolean defaultValue)
      {
        return GetIsSuperUserByUserName(userName, defaultValue);
      }

      private static Boolean? _GetIsSuperUserByUserName(String userName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSuperUser FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsStagingByUserName(String userName)
      {
        return _GetIsStagingByUserName(userName, null);
      }

      public static Boolean? GetIsStaging(String userName)
      {
        return GetIsStagingByUserName(userName);
      }

      public static Boolean GetIsStagingByUserName(String userName, Boolean defaultValue)
      {
        return _GetIsStagingByUserName(userName, defaultValue).Value;
      }

      public static Boolean GetIsStaging(String userName, Boolean defaultValue)
      {
        return GetIsStagingByUserName(userName, defaultValue);
      }

      private static Boolean? _GetIsStagingByUserName(String userName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsStaging FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Security WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String userName)
      {
        return GetColumnByUserName(_column, userName);
      }

      public static SecurityTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalKey,IsSuperUser,IsStaging FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, SecurityTable.ColumnSet.All);
      }

      public static SecurityTable GetData(String userName, int commandTimeout = -1)
      {
        return GetDataByUserName(userName, commandTimeout);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurity(String newValue, String userName)
      {
        return UpdateUserSecurityByUserName(newValue, userName);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserName(String newValue, String userName)
      {
        return UpdateUserNameByUserName(newValue, userName);
      }

      public static int UpdateUserPasswordByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserPassword=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPassword(String newValue, String userName)
      {
        return UpdateUserPasswordByUserName(newValue, userName);
      }

      public static int UpdateUserEmailByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserEmail=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserEmail(String newValue, String userName)
      {
        return UpdateUserEmailByUserName(newValue, userName);
      }

      public static int UpdateUserEmailsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserEmails=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserEmails(String newValue, String userName)
      {
        return UpdateUserEmailsByUserName(newValue, userName);
      }

      public static int UpdateUserStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserStateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCode(String newValue, String userName)
      {
        return UpdateUserStateCodeByUserName(newValue, userName);
      }

      public static int UpdateUserCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserCountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCode(String newValue, String userName)
      {
        return UpdateUserCountyCodeByUserName(newValue, userName);
      }

      public static int UpdateUserLocalKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE Security SET UserLocalKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalKey(String newValue, String userName)
      {
        return UpdateUserLocalKeyByUserName(newValue, userName);
      }

      public static int UpdateIsSuperUserByUserName(Boolean newValue, String userName)
      {
        string cmdText = "UPDATE Security SET IsSuperUser=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSuperUser(Boolean newValue, String userName)
      {
        return UpdateIsSuperUserByUserName(newValue, userName);
      }

      public static int UpdateIsStagingByUserName(Boolean newValue, String userName)
      {
        string cmdText = "UPDATE Security SET IsStaging=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStaging(Boolean newValue, String userName)
      {
        return UpdateIsStagingByUserName(newValue, userName);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE Security SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String userName)
      {
         return UpdateColumnByUserName(_column, newValue, userName);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectEmailCommandText
      {
        get
        {
          return "SELECT UserEmail,UserEmails FROM Security";
        }
      }

      public static SecurityTable GetAllEmailData(int commandTimeout = -1)
      {
        string cmdText = "SELECT UserEmail,UserEmails FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SecurityTable.ColumnSet.Email);
      }

      public static void UpdateEmail(SecurityTable table)
      {
        UpdateEmail(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateEmail(SecurityTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SecurityTable.ColumnSet.Email, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static SecurityTable GetEmailDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserEmail,UserEmails FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, SecurityTable.ColumnSet.Email);
      }

      public static string GetSelectCommandText(SecurityTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SecurityTable.ColumnSet.All:
            return SelectAllCommandText;

          case SecurityTable.ColumnSet.Email:
            return SelectEmailCommandText;

          default:
            return null;
        }
      }

      static Security()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Security

    #region vote.Sitemap

    public partial class SitemapRow : DataRow
    {
      internal SitemapRow(DataRowBuilder rb) : base(rb) {}

      public String DomainDataCode
      {
        get { return this["DomainDataCode"] as String; }
        set { if (value == null) this["DomainDataCode"] = DBNull.Value; else this["DomainDataCode"] = value; }
      }

      public String DomainName
      {
        get { return this["DomainName"] as String; }
        set { if (value == null) this["DomainName"] = DBNull.Value; else this["DomainName"] = value; }
      }

      public Int64 UrlsDefault
      {
        get { return (Int64) this["UrlsDefault"]; }
        set { this["UrlsDefault"] = value; }
      }

      public Int64 UrlsElection
      {
        get { return (Int64) this["UrlsElection"]; }
        set { this["UrlsElection"] = value; }
      }

      public Int64 UrlsOfficials
      {
        get { return (Int64) this["UrlsOfficials"]; }
        set { this["UrlsOfficials"] = value; }
      }

      public Int64 UrlsIntro
      {
        get { return (Int64) this["UrlsIntro"]; }
        set { this["UrlsIntro"] = value; }
      }

      public Int64 UrlsPoliticianIssue
      {
        get { return (Int64) this["UrlsPoliticianIssue"]; }
        set { this["UrlsPoliticianIssue"] = value; }
      }

      public Int64 UrlsIssue
      {
        get { return (Int64) this["UrlsIssue"]; }
        set { this["UrlsIssue"] = value; }
      }

      public Int64 UrlsBallot
      {
        get { return (Int64) this["UrlsBallot"]; }
        set { this["UrlsBallot"] = value; }
      }

      public Int32 PriorityDefault
      {
        get { return (Int32) this["PriorityDefault"]; }
        set { this["PriorityDefault"] = value; }
      }

      public Int32 PriorityElection
      {
        get { return (Int32) this["PriorityElection"]; }
        set { this["PriorityElection"] = value; }
      }

      public Int32 PriorityOfficials
      {
        get { return (Int32) this["PriorityOfficials"]; }
        set { this["PriorityOfficials"] = value; }
      }

      public Int32 PriorityIntro
      {
        get { return (Int32) this["PriorityIntro"]; }
        set { this["PriorityIntro"] = value; }
      }

      public Int32 PriorityPoliticianIssue
      {
        get { return (Int32) this["PriorityPoliticianIssue"]; }
        set { this["PriorityPoliticianIssue"] = value; }
      }

      public Int32 PriorityIssue
      {
        get { return (Int32) this["PriorityIssue"]; }
        set { this["PriorityIssue"] = value; }
      }

      public Int32 PriorityBallot
      {
        get { return (Int32) this["PriorityBallot"]; }
        set { this["PriorityBallot"] = value; }
      }

      public String FrequencyDefault
      {
        get { return this["FrequencyDefault"] as String; }
        set { if (value == null) this["FrequencyDefault"] = DBNull.Value; else this["FrequencyDefault"] = value; }
      }

      public String FrequencyElection
      {
        get { return this["FrequencyElection"] as String; }
        set { if (value == null) this["FrequencyElection"] = DBNull.Value; else this["FrequencyElection"] = value; }
      }

      public String FrequencyOfficials
      {
        get { return this["FrequencyOfficials"] as String; }
        set { if (value == null) this["FrequencyOfficials"] = DBNull.Value; else this["FrequencyOfficials"] = value; }
      }

      public String FrequencyIntro
      {
        get { return this["FrequencyIntro"] as String; }
        set { if (value == null) this["FrequencyIntro"] = DBNull.Value; else this["FrequencyIntro"] = value; }
      }

      public String FrequencyPoliticianIssue
      {
        get { return this["FrequencyPoliticianIssue"] as String; }
        set { if (value == null) this["FrequencyPoliticianIssue"] = DBNull.Value; else this["FrequencyPoliticianIssue"] = value; }
      }

      public String FrequencyIssue
      {
        get { return this["FrequencyIssue"] as String; }
        set { if (value == null) this["FrequencyIssue"] = DBNull.Value; else this["FrequencyIssue"] = value; }
      }

      public String FrequencyBallot
      {
        get { return this["FrequencyBallot"] as String; }
        set { if (value == null) this["FrequencyBallot"] = DBNull.Value; else this["FrequencyBallot"] = value; }
      }

      public String ElectionDirectories
      {
        get { return this["ElectionDirectories"] as String; }
        set { if (value == null) this["ElectionDirectories"] = DBNull.Value; else this["ElectionDirectories"] = value; }
      }

      public String PoliticianElections
      {
        get { return this["PoliticianElections"] as String; }
        set { if (value == null) this["PoliticianElections"] = DBNull.Value; else this["PoliticianElections"] = value; }
      }

      public Boolean MustHavePicture
      {
        get { return (Boolean) this["MustHavePicture"]; }
        set { this["MustHavePicture"] = value; }
      }

      public Boolean MustHaveStatement
      {
        get { return (Boolean) this["MustHaveStatement"]; }
        set { this["MustHaveStatement"] = value; }
      }

      public Int32 MinimumCandidates
      {
        get { return (Int32) this["MinimumCandidates"]; }
        set { this["MinimumCandidates"] = value; }
      }

      public Int32 MinimumAnswers
      {
        get { return (Int32) this["MinimumAnswers"]; }
        set { this["MinimumAnswers"] = value; }
      }

      public Int32 FactorIssue
      {
        get { return (Int32) this["FactorIssue"]; }
        set { this["FactorIssue"] = value; }
      }

      public DateTime LastCreated
      {
        get { return (DateTime) this["LastCreated"]; }
        set { this["LastCreated"] = value; }
      }

      public Int64 RunTimeSeconds
      {
        get { return (Int64) this["RunTimeSeconds"]; }
        set { this["RunTimeSeconds"] = value; }
      }

      public String Ballots
      {
        get { return this["Ballots"] as String; }
        set { if (value == null) this["Ballots"] = DBNull.Value; else this["Ballots"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] SitemapXml
      {
        get { return this["SitemapXml"] as Byte[]; }
        set { if (value == null) this["SitemapXml"] = DBNull.Value; else this["SitemapXml"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapTable : TypedTableBase<SitemapRow>
    {
      public SitemapRow this[int index] { get { return (SitemapRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapTable(); }

      new public SitemapRow NewRow() { return (SitemapRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapRow); }

      public void RemoveRow(SitemapRow row) { this.Rows.Remove(row); }

      public SitemapRow NewRow(String domainDataCode, String domainName, Int64 urlsDefault, Int64 urlsElection, Int64 urlsOfficials, Int64 urlsIntro, Int64 urlsPoliticianIssue, Int64 urlsIssue, Int64 urlsBallot, Int32 priorityDefault, Int32 priorityElection, Int32 priorityOfficials, Int32 priorityIntro, Int32 priorityPoliticianIssue, Int32 priorityIssue, Int32 priorityBallot, String frequencyDefault, String frequencyElection, String frequencyOfficials, String frequencyIntro, String frequencyPoliticianIssue, String frequencyIssue, String frequencyBallot, String electionDirectories, String politicianElections, Boolean mustHavePicture, Boolean mustHaveStatement, Int32 minimumCandidates, Int32 minimumAnswers, Int32 factorIssue, DateTime lastCreated, Int64 runTimeSeconds, String ballots, Byte[] sitemapXml)
      {
        SitemapRow row = NewRow();
        row.DomainDataCode = domainDataCode;
        row.DomainName = domainName;
        row.UrlsDefault = urlsDefault;
        row.UrlsElection = urlsElection;
        row.UrlsOfficials = urlsOfficials;
        row.UrlsIntro = urlsIntro;
        row.UrlsPoliticianIssue = urlsPoliticianIssue;
        row.UrlsIssue = urlsIssue;
        row.UrlsBallot = urlsBallot;
        row.PriorityDefault = priorityDefault;
        row.PriorityElection = priorityElection;
        row.PriorityOfficials = priorityOfficials;
        row.PriorityIntro = priorityIntro;
        row.PriorityPoliticianIssue = priorityPoliticianIssue;
        row.PriorityIssue = priorityIssue;
        row.PriorityBallot = priorityBallot;
        row.FrequencyDefault = frequencyDefault;
        row.FrequencyElection = frequencyElection;
        row.FrequencyOfficials = frequencyOfficials;
        row.FrequencyIntro = frequencyIntro;
        row.FrequencyPoliticianIssue = frequencyPoliticianIssue;
        row.FrequencyIssue = frequencyIssue;
        row.FrequencyBallot = frequencyBallot;
        row.ElectionDirectories = electionDirectories;
        row.PoliticianElections = politicianElections;
        row.MustHavePicture = mustHavePicture;
        row.MustHaveStatement = mustHaveStatement;
        row.MinimumCandidates = minimumCandidates;
        row.MinimumAnswers = minimumAnswers;
        row.FactorIssue = factorIssue;
        row.LastCreated = lastCreated;
        row.RunTimeSeconds = runTimeSeconds;
        row.Ballots = ballots;
        row.SitemapXml = sitemapXml;
        return row;
      }

      public void AddRow(String domainDataCode, String domainName, Int64 urlsDefault, Int64 urlsElection, Int64 urlsOfficials, Int64 urlsIntro, Int64 urlsPoliticianIssue, Int64 urlsIssue, Int64 urlsBallot, Int32 priorityDefault, Int32 priorityElection, Int32 priorityOfficials, Int32 priorityIntro, Int32 priorityPoliticianIssue, Int32 priorityIssue, Int32 priorityBallot, String frequencyDefault, String frequencyElection, String frequencyOfficials, String frequencyIntro, String frequencyPoliticianIssue, String frequencyIssue, String frequencyBallot, String electionDirectories, String politicianElections, Boolean mustHavePicture, Boolean mustHaveStatement, Int32 minimumCandidates, Int32 minimumAnswers, Int32 factorIssue, DateTime lastCreated, Int64 runTimeSeconds, String ballots, Byte[] sitemapXml)
      {
        SitemapRow row = NewRow(domainDataCode, domainName, urlsDefault, urlsElection, urlsOfficials, urlsIntro, urlsPoliticianIssue, urlsIssue, urlsBallot, priorityDefault, priorityElection, priorityOfficials, priorityIntro, priorityPoliticianIssue, priorityIssue, priorityBallot, frequencyDefault, frequencyElection, frequencyOfficials, frequencyIntro, frequencyPoliticianIssue, frequencyIssue, frequencyBallot, electionDirectories, politicianElections, mustHavePicture, mustHaveStatement, minimumCandidates, minimumAnswers, factorIssue, lastCreated, runTimeSeconds, ballots, sitemapXml);
        AddRow(row);
      }

      public DataColumn DomainDataCodeColumn { get { return this.Columns["DomainDataCode"]; } }

      public DataColumn DomainNameColumn { get { return this.Columns["DomainName"]; } }

      public DataColumn UrlsDefaultColumn { get { return this.Columns["UrlsDefault"]; } }

      public DataColumn UrlsElectionColumn { get { return this.Columns["UrlsElection"]; } }

      public DataColumn UrlsOfficialsColumn { get { return this.Columns["UrlsOfficials"]; } }

      public DataColumn UrlsIntroColumn { get { return this.Columns["UrlsIntro"]; } }

      public DataColumn UrlsPoliticianIssueColumn { get { return this.Columns["UrlsPoliticianIssue"]; } }

      public DataColumn UrlsIssueColumn { get { return this.Columns["UrlsIssue"]; } }

      public DataColumn UrlsBallotColumn { get { return this.Columns["UrlsBallot"]; } }

      public DataColumn PriorityDefaultColumn { get { return this.Columns["PriorityDefault"]; } }

      public DataColumn PriorityElectionColumn { get { return this.Columns["PriorityElection"]; } }

      public DataColumn PriorityOfficialsColumn { get { return this.Columns["PriorityOfficials"]; } }

      public DataColumn PriorityIntroColumn { get { return this.Columns["PriorityIntro"]; } }

      public DataColumn PriorityPoliticianIssueColumn { get { return this.Columns["PriorityPoliticianIssue"]; } }

      public DataColumn PriorityIssueColumn { get { return this.Columns["PriorityIssue"]; } }

      public DataColumn PriorityBallotColumn { get { return this.Columns["PriorityBallot"]; } }

      public DataColumn FrequencyDefaultColumn { get { return this.Columns["FrequencyDefault"]; } }

      public DataColumn FrequencyElectionColumn { get { return this.Columns["FrequencyElection"]; } }

      public DataColumn FrequencyOfficialsColumn { get { return this.Columns["FrequencyOfficials"]; } }

      public DataColumn FrequencyIntroColumn { get { return this.Columns["FrequencyIntro"]; } }

      public DataColumn FrequencyPoliticianIssueColumn { get { return this.Columns["FrequencyPoliticianIssue"]; } }

      public DataColumn FrequencyIssueColumn { get { return this.Columns["FrequencyIssue"]; } }

      public DataColumn FrequencyBallotColumn { get { return this.Columns["FrequencyBallot"]; } }

      public DataColumn ElectionDirectoriesColumn { get { return this.Columns["ElectionDirectories"]; } }

      public DataColumn PoliticianElectionsColumn { get { return this.Columns["PoliticianElections"]; } }

      public DataColumn MustHavePictureColumn { get { return this.Columns["MustHavePicture"]; } }

      public DataColumn MustHaveStatementColumn { get { return this.Columns["MustHaveStatement"]; } }

      public DataColumn MinimumCandidatesColumn { get { return this.Columns["MinimumCandidates"]; } }

      public DataColumn MinimumAnswersColumn { get { return this.Columns["MinimumAnswers"]; } }

      public DataColumn FactorIssueColumn { get { return this.Columns["FactorIssue"]; } }

      public DataColumn LastCreatedColumn { get { return this.Columns["LastCreated"]; } }

      public DataColumn RunTimeSecondsColumn { get { return this.Columns["RunTimeSeconds"]; } }

      public DataColumn BallotsColumn { get { return this.Columns["Ballots"]; } }

      public DataColumn SitemapXmlColumn { get { return this.Columns["SitemapXml"]; } }

      public enum ColumnSet { All, Key, Domain }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsDefault", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsElection", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsOfficials", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsIntro", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsPoliticianIssue", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsIssue", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsBallot", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityDefault", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityElection", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityOfficials", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityIntro", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityPoliticianIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyDefault", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyElection", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyOfficials", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyIntro", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyPoliticianIssue", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyIssue", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyBallot", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDirectories", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianElections", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MustHavePicture", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MustHaveStatement", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MinimumCandidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MinimumAnswers", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FactorIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastCreated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunTimeSeconds", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Ballots", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SitemapXml", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDomainColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapTable() : this(ColumnSet.All) { }

      public SitemapTable(ColumnSet columnSet)
      {
        this.TableName = "Sitemap";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Key:
            InitKeyColumns();
            break;

          case ColumnSet.Domain:
            InitDomainColumns();
            break;
        }
      }

      protected SitemapTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Sitemap
    {
      public const string TableName = "Sitemap";

      public enum Column { DomainDataCode, DomainName, UrlsDefault, UrlsElection, UrlsOfficials, UrlsIntro, UrlsPoliticianIssue, UrlsIssue, UrlsBallot, PriorityDefault, PriorityElection, PriorityOfficials, PriorityIntro, PriorityPoliticianIssue, PriorityIssue, PriorityBallot, FrequencyDefault, FrequencyElection, FrequencyOfficials, FrequencyIntro, FrequencyPoliticianIssue, FrequencyIssue, FrequencyBallot, ElectionDirectories, PoliticianElections, MustHavePicture, MustHaveStatement, MinimumCandidates, MinimumAnswers, FactorIssue, LastCreated, RunTimeSeconds, Ballots, SitemapXml }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DomainDataCode, "DomainDataCode" },
        { Column.DomainName, "DomainName" },
        { Column.UrlsDefault, "UrlsDefault" },
        { Column.UrlsElection, "UrlsElection" },
        { Column.UrlsOfficials, "UrlsOfficials" },
        { Column.UrlsIntro, "UrlsIntro" },
        { Column.UrlsPoliticianIssue, "UrlsPoliticianIssue" },
        { Column.UrlsIssue, "UrlsIssue" },
        { Column.UrlsBallot, "UrlsBallot" },
        { Column.PriorityDefault, "PriorityDefault" },
        { Column.PriorityElection, "PriorityElection" },
        { Column.PriorityOfficials, "PriorityOfficials" },
        { Column.PriorityIntro, "PriorityIntro" },
        { Column.PriorityPoliticianIssue, "PriorityPoliticianIssue" },
        { Column.PriorityIssue, "PriorityIssue" },
        { Column.PriorityBallot, "PriorityBallot" },
        { Column.FrequencyDefault, "FrequencyDefault" },
        { Column.FrequencyElection, "FrequencyElection" },
        { Column.FrequencyOfficials, "FrequencyOfficials" },
        { Column.FrequencyIntro, "FrequencyIntro" },
        { Column.FrequencyPoliticianIssue, "FrequencyPoliticianIssue" },
        { Column.FrequencyIssue, "FrequencyIssue" },
        { Column.FrequencyBallot, "FrequencyBallot" },
        { Column.ElectionDirectories, "ElectionDirectories" },
        { Column.PoliticianElections, "PoliticianElections" },
        { Column.MustHavePicture, "MustHavePicture" },
        { Column.MustHaveStatement, "MustHaveStatement" },
        { Column.MinimumCandidates, "MinimumCandidates" },
        { Column.MinimumAnswers, "MinimumAnswers" },
        { Column.FactorIssue, "FactorIssue" },
        { Column.LastCreated, "LastCreated" },
        { Column.RunTimeSeconds, "RunTimeSeconds" },
        { Column.Ballots, "Ballots" },
        { Column.SitemapXml, "SitemapXml" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap";
        }
      }

      public static SitemapTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.All);
      }

      public static SitemapTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapTable FillTable(DbCommand command, SitemapTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapTable table = new SitemapTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DomainDataCodeColumnName { get { return "DomainDataCode"; } }

      public static string DomainNameColumnName { get { return "DomainName"; } }

      public static string UrlsDefaultColumnName { get { return "UrlsDefault"; } }

      public static string UrlsElectionColumnName { get { return "UrlsElection"; } }

      public static string UrlsOfficialsColumnName { get { return "UrlsOfficials"; } }

      public static string UrlsIntroColumnName { get { return "UrlsIntro"; } }

      public static string UrlsPoliticianIssueColumnName { get { return "UrlsPoliticianIssue"; } }

      public static string UrlsIssueColumnName { get { return "UrlsIssue"; } }

      public static string UrlsBallotColumnName { get { return "UrlsBallot"; } }

      public static string PriorityDefaultColumnName { get { return "PriorityDefault"; } }

      public static string PriorityElectionColumnName { get { return "PriorityElection"; } }

      public static string PriorityOfficialsColumnName { get { return "PriorityOfficials"; } }

      public static string PriorityIntroColumnName { get { return "PriorityIntro"; } }

      public static string PriorityPoliticianIssueColumnName { get { return "PriorityPoliticianIssue"; } }

      public static string PriorityIssueColumnName { get { return "PriorityIssue"; } }

      public static string PriorityBallotColumnName { get { return "PriorityBallot"; } }

      public static string FrequencyDefaultColumnName { get { return "FrequencyDefault"; } }

      public static string FrequencyElectionColumnName { get { return "FrequencyElection"; } }

      public static string FrequencyOfficialsColumnName { get { return "FrequencyOfficials"; } }

      public static string FrequencyIntroColumnName { get { return "FrequencyIntro"; } }

      public static string FrequencyPoliticianIssueColumnName { get { return "FrequencyPoliticianIssue"; } }

      public static string FrequencyIssueColumnName { get { return "FrequencyIssue"; } }

      public static string FrequencyBallotColumnName { get { return "FrequencyBallot"; } }

      public static string ElectionDirectoriesColumnName { get { return "ElectionDirectories"; } }

      public static string PoliticianElectionsColumnName { get { return "PoliticianElections"; } }

      public static string MustHavePictureColumnName { get { return "MustHavePicture"; } }

      public static string MustHaveStatementColumnName { get { return "MustHaveStatement"; } }

      public static string MinimumCandidatesColumnName { get { return "MinimumCandidates"; } }

      public static string MinimumAnswersColumnName { get { return "MinimumAnswers"; } }

      public static string FactorIssueColumnName { get { return "FactorIssue"; } }

      public static string LastCreatedColumnName { get { return "LastCreated"; } }

      public static string RunTimeSecondsColumnName { get { return "RunTimeSeconds"; } }

      public static string BallotsColumnName { get { return "Ballots"; } }

      public static string SitemapXmlColumnName { get { return "SitemapXml"; } }

      public static int DomainDataCodeMaxLength { get { return 2; } }

      public static int DomainNameMaxLength { get { return int.MaxValue; } }

      public static int FrequencyDefaultMaxLength { get { return 10; } }

      public static int FrequencyElectionMaxLength { get { return 10; } }

      public static int FrequencyOfficialsMaxLength { get { return 10; } }

      public static int FrequencyIntroMaxLength { get { return 10; } }

      public static int FrequencyPoliticianIssueMaxLength { get { return 10; } }

      public static int FrequencyIssueMaxLength { get { return 10; } }

      public static int FrequencyBallotMaxLength { get { return 10; } }

      public static int ElectionDirectoriesMaxLength { get { return 20; } }

      public static int PoliticianElectionsMaxLength { get { return 8; } }

      public static int BallotsMaxLength { get { return 8; } }

      public static bool DomainDataCodeExists(String domainDataCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainDataCodeByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        return GetDomainDataCodeByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetDomainNameByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainName FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainName(String domainDataCode, String defaultValue = null)
      {
        return GetDomainNameByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Int64? GetUrlsDefaultByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsDefaultByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsDefault(String domainDataCode)
      {
        return GetUrlsDefaultByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsDefaultByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsDefaultByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsDefault(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsDefaultByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsElectionByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsElectionByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsElection(String domainDataCode)
      {
        return GetUrlsElectionByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsElectionByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsElectionByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsElection(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsElectionByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsOfficialsByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsOfficialsByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsOfficials(String domainDataCode)
      {
        return GetUrlsOfficialsByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsOfficialsByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsOfficialsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsOfficials(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsOfficialsByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsIntroByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsIntroByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsIntro(String domainDataCode)
      {
        return GetUrlsIntroByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsIntroByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsIntroByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsIntro(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsIntroByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsPoliticianIssue(String domainDataCode)
      {
        return GetUrlsPoliticianIssueByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsPoliticianIssue(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsIssueByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsIssue(String domainDataCode)
      {
        return GetUrlsIssueByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsIssueByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsIssue(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsIssueByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsBallotByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsBallotByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsBallot(String domainDataCode)
      {
        return GetUrlsBallotByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsBallotByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsBallotByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsBallot(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsBallotByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int32? GetPriorityDefaultByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityDefaultByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityDefault(String domainDataCode)
      {
        return GetPriorityDefaultByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityDefaultByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityDefaultByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityDefault(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityDefaultByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityElectionByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityElectionByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityElection(String domainDataCode)
      {
        return GetPriorityElectionByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityElectionByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityElectionByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityElection(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityElectionByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityOfficialsByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityOfficialsByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityOfficials(String domainDataCode)
      {
        return GetPriorityOfficialsByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityOfficialsByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityOfficialsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityOfficials(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityOfficialsByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityIntroByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityIntroByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityIntro(String domainDataCode)
      {
        return GetPriorityIntroByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityIntroByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityIntroByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityIntro(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityIntroByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityPoliticianIssue(String domainDataCode)
      {
        return GetPriorityPoliticianIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityPoliticianIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityIssueByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityIssue(String domainDataCode)
      {
        return GetPriorityIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityBallotByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityBallotByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityBallot(String domainDataCode)
      {
        return GetPriorityBallotByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityBallotByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityBallotByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityBallot(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityBallotByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetFrequencyDefaultByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyDefault(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyElectionByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyElection(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyOfficialsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyOfficials(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyIntroByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyIntro(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyPoliticianIssueByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyPoliticianIssue(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyIssueByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyIssue(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyBallotByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyBallot(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetElectionDirectoriesByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionDirectories FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionDirectories(String domainDataCode, String defaultValue = null)
      {
        return GetElectionDirectoriesByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetPoliticianElectionsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianElections FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianElections(String domainDataCode, String defaultValue = null)
      {
        return GetPoliticianElectionsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Boolean? GetMustHavePictureByDomainDataCode(String domainDataCode)
      {
        return _GetMustHavePictureByDomainDataCode(domainDataCode, null);
      }

      public static Boolean? GetMustHavePicture(String domainDataCode)
      {
        return GetMustHavePictureByDomainDataCode(domainDataCode);
      }

      public static Boolean GetMustHavePictureByDomainDataCode(String domainDataCode, Boolean defaultValue)
      {
        return _GetMustHavePictureByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Boolean GetMustHavePicture(String domainDataCode, Boolean defaultValue)
      {
        return GetMustHavePictureByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Boolean? _GetMustHavePictureByDomainDataCode(String domainDataCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT MustHavePicture FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetMustHaveStatementByDomainDataCode(String domainDataCode)
      {
        return _GetMustHaveStatementByDomainDataCode(domainDataCode, null);
      }

      public static Boolean? GetMustHaveStatement(String domainDataCode)
      {
        return GetMustHaveStatementByDomainDataCode(domainDataCode);
      }

      public static Boolean GetMustHaveStatementByDomainDataCode(String domainDataCode, Boolean defaultValue)
      {
        return _GetMustHaveStatementByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Boolean GetMustHaveStatement(String domainDataCode, Boolean defaultValue)
      {
        return GetMustHaveStatementByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Boolean? _GetMustHaveStatementByDomainDataCode(String domainDataCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT MustHaveStatement FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetMinimumCandidatesByDomainDataCode(String domainDataCode)
      {
        return _GetMinimumCandidatesByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetMinimumCandidates(String domainDataCode)
      {
        return GetMinimumCandidatesByDomainDataCode(domainDataCode);
      }

      public static Int32 GetMinimumCandidatesByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetMinimumCandidatesByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetMinimumCandidates(String domainDataCode, Int32 defaultValue)
      {
        return GetMinimumCandidatesByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetMinimumCandidatesByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT MinimumCandidates FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetMinimumAnswersByDomainDataCode(String domainDataCode)
      {
        return _GetMinimumAnswersByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetMinimumAnswers(String domainDataCode)
      {
        return GetMinimumAnswersByDomainDataCode(domainDataCode);
      }

      public static Int32 GetMinimumAnswersByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetMinimumAnswersByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetMinimumAnswers(String domainDataCode, Int32 defaultValue)
      {
        return GetMinimumAnswersByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetMinimumAnswersByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT MinimumAnswers FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetFactorIssueByDomainDataCode(String domainDataCode)
      {
        return _GetFactorIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetFactorIssue(String domainDataCode)
      {
        return GetFactorIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetFactorIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetFactorIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetFactorIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetFactorIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetFactorIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT FactorIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastCreatedByDomainDataCode(String domainDataCode)
      {
        return _GetLastCreatedByDomainDataCode(domainDataCode, null);
      }

      public static DateTime? GetLastCreated(String domainDataCode)
      {
        return GetLastCreatedByDomainDataCode(domainDataCode);
      }

      public static DateTime GetLastCreatedByDomainDataCode(String domainDataCode, DateTime defaultValue)
      {
        return _GetLastCreatedByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static DateTime GetLastCreated(String domainDataCode, DateTime defaultValue)
      {
        return GetLastCreatedByDomainDataCode(domainDataCode, defaultValue);
      }

      private static DateTime? _GetLastCreatedByDomainDataCode(String domainDataCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastCreated FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int64? GetRunTimeSecondsByDomainDataCode(String domainDataCode)
      {
        return _GetRunTimeSecondsByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetRunTimeSeconds(String domainDataCode)
      {
        return GetRunTimeSecondsByDomainDataCode(domainDataCode);
      }

      public static Int64 GetRunTimeSecondsByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetRunTimeSecondsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetRunTimeSeconds(String domainDataCode, Int64 defaultValue)
      {
        return GetRunTimeSecondsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetRunTimeSecondsByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT RunTimeSeconds FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static String GetBallotsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Ballots FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallots(String domainDataCode, String defaultValue = null)
      {
        return GetBallotsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Byte[] GetSitemapXmlByDomainDataCode(String domainDataCode, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SitemapXml FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetSitemapXml(String domainDataCode, Byte[] defaultValue = null)
      {
        return GetSitemapXmlByDomainDataCode(domainDataCode, defaultValue);
      }

      public static object GetColumnByDomainDataCode(Column _column, String domainDataCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String domainDataCode)
      {
        return GetColumnByDomainDataCode(_column, domainDataCode);
      }

      public static SitemapTable GetDataByDomainDataCode(String domainDataCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        return FillTable(cmd, SitemapTable.ColumnSet.All);
      }

      public static SitemapTable GetData(String domainDataCode, int commandTimeout = -1)
      {
        return GetDataByDomainDataCode(domainDataCode, commandTimeout);
      }

      public static int UpdateDomainDataCodeByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET DomainDataCode=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDomainDataCode(String newValue, String domainDataCode)
      {
        return UpdateDomainDataCodeByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateDomainNameByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET DomainName=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDomainName(String newValue, String domainDataCode)
      {
        return UpdateDomainNameByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsDefaultByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsDefault(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsElectionByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsElection(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsOfficialsByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsOfficials(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsIntroByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsIntro(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsPoliticianIssueByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsPoliticianIssue(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsIssueByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsIssue(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsBallotByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsBallot(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityDefaultByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityDefault(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityElectionByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityElection(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityOfficialsByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityOfficials(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityIntroByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityIntro(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityPoliticianIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityPoliticianIssue(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityIssue(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityBallotByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityBallot(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyDefaultByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyDefault(String newValue, String domainDataCode)
      {
        return UpdateFrequencyDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyElectionByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyElection(String newValue, String domainDataCode)
      {
        return UpdateFrequencyElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyOfficialsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyOfficials(String newValue, String domainDataCode)
      {
        return UpdateFrequencyOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyIntroByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyIntro(String newValue, String domainDataCode)
      {
        return UpdateFrequencyIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyPoliticianIssueByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyPoliticianIssue(String newValue, String domainDataCode)
      {
        return UpdateFrequencyPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyIssueByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyIssue(String newValue, String domainDataCode)
      {
        return UpdateFrequencyIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyBallotByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyBallot(String newValue, String domainDataCode)
      {
        return UpdateFrequencyBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateElectionDirectoriesByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET ElectionDirectories=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDirectories(String newValue, String domainDataCode)
      {
        return UpdateElectionDirectoriesByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePoliticianElectionsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PoliticianElections=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianElections(String newValue, String domainDataCode)
      {
        return UpdatePoliticianElectionsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMustHavePictureByDomainDataCode(Boolean newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MustHavePicture=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMustHavePicture(Boolean newValue, String domainDataCode)
      {
        return UpdateMustHavePictureByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMustHaveStatementByDomainDataCode(Boolean newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MustHaveStatement=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMustHaveStatement(Boolean newValue, String domainDataCode)
      {
        return UpdateMustHaveStatementByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMinimumCandidatesByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MinimumCandidates=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMinimumCandidates(Int32 newValue, String domainDataCode)
      {
        return UpdateMinimumCandidatesByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMinimumAnswersByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MinimumAnswers=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMinimumAnswers(Int32 newValue, String domainDataCode)
      {
        return UpdateMinimumAnswersByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFactorIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FactorIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFactorIssue(Int32 newValue, String domainDataCode)
      {
        return UpdateFactorIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateLastCreatedByDomainDataCode(DateTime newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET LastCreated=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastCreated(DateTime newValue, String domainDataCode)
      {
        return UpdateLastCreatedByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateRunTimeSecondsByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET RunTimeSeconds=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunTimeSeconds(Int64 newValue, String domainDataCode)
      {
        return UpdateRunTimeSecondsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateBallotsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET Ballots=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallots(String newValue, String domainDataCode)
      {
        return UpdateBallotsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateSitemapXmlByDomainDataCode(Byte[] newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET SitemapXml=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapXml(Byte[] newValue, String domainDataCode)
      {
        return UpdateSitemapXmlByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateColumnByDomainDataCode(Column _column, object newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET {0}=@newValue WHERE DomainDataCode=@DomainDataCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String domainDataCode)
      {
         return UpdateColumnByDomainDataCode(_column, newValue, domainDataCode);
      }

      public static string SelectKeyCommandText
      {
        get
        {
          return "SELECT DomainDataCode FROM Sitemap";
        }
      }

      public static SitemapTable GetAllKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.Key);
      }

      public static string SelectDomainCommandText
      {
        get
        {
          return "SELECT DomainDataCode,DomainName FROM Sitemap";
        }
      }

      public static SitemapTable GetAllDomainData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.Domain);
      }

      public static string GetSelectCommandText(SitemapTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapTable.ColumnSet.All:
            return SelectAllCommandText;

          case SitemapTable.ColumnSet.Key:
            return SelectKeyCommandText;

          case SitemapTable.ColumnSet.Domain:
            return SelectDomainCommandText;

          default:
            return null;
        }
      }

      static Sitemap()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Sitemap

    #region vote.States

    public partial class StatesRow : DataRow
    {
      internal StatesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Boolean IsState
      {
        get { return (Boolean) this["IsState"]; }
        set { this["IsState"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String ShortName
      {
        get { return this["ShortName"] as String; }
        set { if (value == null) this["ShortName"] = DBNull.Value; else this["ShortName"] = value; }
      }

      public String BallotStateName
      {
        get { return this["BallotStateName"] as String; }
        set { if (value == null) this["BallotStateName"] = DBNull.Value; else this["BallotStateName"] = value; }
      }

      public String Abbreviations
      {
        get { return this["Abbreviations"] as String; }
        set { if (value == null) this["Abbreviations"] = DBNull.Value; else this["Abbreviations"] = value; }
      }

      public Boolean IsIncumbentShownOnBallots
      {
        get { return (Boolean) this["IsIncumbentShownOnBallots"]; }
        set { this["IsIncumbentShownOnBallots"] = value; }
      }

      public String EncloseNickname
      {
        get { return this["EncloseNickname"] as String; }
        set { if (value == null) this["EncloseNickname"] = DBNull.Value; else this["EncloseNickname"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public Boolean IsUseBOEBanner
      {
        get { return (Boolean) this["IsUseBOEBanner"]; }
        set { this["IsUseBOEBanner"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public String StateCountyTitles
      {
        get { return this["StateCountyTitles"] as String; }
        set { if (value == null) this["StateCountyTitles"] = DBNull.Value; else this["StateCountyTitles"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["LDSStateCode"] as String; }
        set { if (value == null) this["LDSStateCode"] = DBNull.Value; else this["LDSStateCode"] = value; }
      }

      public String OfficesStatusStatewide
      {
        get { return this["OfficesStatusStatewide"] as String; }
        set { if (value == null) this["OfficesStatusStatewide"] = DBNull.Value; else this["OfficesStatusStatewide"] = value; }
      }

      public String OfficesStatusJudicial
      {
        get { return this["OfficesStatusJudicial"] as String; }
        set { if (value == null) this["OfficesStatusJudicial"] = DBNull.Value; else this["OfficesStatusJudicial"] = value; }
      }

      public String OfficesStatusCounties
      {
        get { return this["OfficesStatusCounties"] as String; }
        set { if (value == null) this["OfficesStatusCounties"] = DBNull.Value; else this["OfficesStatusCounties"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public String PollHours
      {
        get { return this["PollHours"] as String; }
        set { if (value == null) this["PollHours"] = DBNull.Value; else this["PollHours"] = value; }
      }

      public String PollHoursUrl
      {
        get { return this["PollHoursUrl"] as String; }
        set { if (value == null) this["PollHoursUrl"] = DBNull.Value; else this["PollHoursUrl"] = value; }
      }

      public String PollPlacesUrl
      {
        get { return this["PollPlacesUrl"] as String; }
        set { if (value == null) this["PollPlacesUrl"] = DBNull.Value; else this["PollPlacesUrl"] = value; }
      }

      public Boolean HasEarlyVoting
      {
        get { return (Boolean) this["HasEarlyVoting"]; }
        set { this["HasEarlyVoting"] = value; }
      }

      public Boolean HasVotingByMail
      {
        get { return (Boolean) this["HasVotingByMail"]; }
        set { this["HasVotingByMail"] = value; }
      }

      public Boolean VotingExclusivelyByMail
      {
        get { return (Boolean) this["VotingExclusivelyByMail"]; }
        set { this["VotingExclusivelyByMail"] = value; }
      }

      public Boolean StatePrimariesHaveSeparatePartyBallots
      {
        get { return (Boolean) this["StatePrimariesHaveSeparatePartyBallots"]; }
        set { this["StatePrimariesHaveSeparatePartyBallots"] = value; }
      }

      public Boolean PresidentialPrimariesHaveSeparatePartyBallots
      {
        get { return (Boolean) this["PresidentialPrimariesHaveSeparatePartyBallots"]; }
        set { this["PresidentialPrimariesHaveSeparatePartyBallots"] = value; }
      }

      public String HowVotingIsDone
      {
        get { return this["HowVotingIsDone"] as String; }
        set { if (value == null) this["HowVotingIsDone"] = DBNull.Value; else this["HowVotingIsDone"] = value; }
      }

      public String HowPrimariesAreDone
      {
        get { return this["HowPrimariesAreDone"] as String; }
        set { if (value == null) this["HowPrimariesAreDone"] = DBNull.Value; else this["HowPrimariesAreDone"] = value; }
      }

      public Boolean ShowUnopposed
      {
        get { return (Boolean) this["ShowUnopposed"]; }
        set { this["ShowUnopposed"] = value; }
      }

      public Boolean ShowWriteIn
      {
        get { return (Boolean) this["ShowWriteIn"]; }
        set { this["ShowWriteIn"] = value; }
      }

      public Boolean ShowPrimaryWriteIn
      {
        get { return (Boolean) this["ShowPrimaryWriteIn"]; }
        set { this["ShowPrimaryWriteIn"] = value; }
      }

      public String CountyBoardsWebAddress
      {
        get { return this["CountyBoardsWebAddress"] as String; }
        set { if (value == null) this["CountyBoardsWebAddress"] = DBNull.Value; else this["CountyBoardsWebAddress"] = value; }
      }

      public String ElectionAdditionalInfo
      {
        get { return this["ElectionAdditionalInfo"] as String; }
        set { if (value == null) this["ElectionAdditionalInfo"] = DBNull.Value; else this["ElectionAdditionalInfo"] = value; }
      }

      public String BallotInstructions
      {
        get { return this["BallotInstructions"] as String; }
        set { if (value == null) this["BallotInstructions"] = DBNull.Value; else this["BallotInstructions"] = value; }
      }

      public String VoterRegistrationWebAddress
      {
        get { return this["VoterRegistrationWebAddress"] as String; }
        set { if (value == null) this["VoterRegistrationWebAddress"] = DBNull.Value; else this["VoterRegistrationWebAddress"] = value; }
      }

      public String EarlyVotingWebAddress
      {
        get { return this["EarlyVotingWebAddress"] as String; }
        set { if (value == null) this["EarlyVotingWebAddress"] = DBNull.Value; else this["EarlyVotingWebAddress"] = value; }
      }

      public String VoteByMailWebAddress
      {
        get { return this["VoteByMailWebAddress"] as String; }
        set { if (value == null) this["VoteByMailWebAddress"] = DBNull.Value; else this["VoteByMailWebAddress"] = value; }
      }

      public String VoteByAbsenteeBallotWebAddress
      {
        get { return this["VoteByAbsenteeBallotWebAddress"] as String; }
        set { if (value == null) this["VoteByAbsenteeBallotWebAddress"] = DBNull.Value; else this["VoteByAbsenteeBallotWebAddress"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }
    }

    [Serializable]
    public partial class StatesTable : TypedTableBase<StatesRow>
    {
      public StatesRow this[int index] { get { return (StatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(StatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new StatesTable(); }

      new public StatesRow NewRow() { return (StatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new StatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(StatesRow); }

      public void RemoveRow(StatesRow row) { this.Rows.Remove(row); }

      public StatesRow NewRow(String stateCode, Boolean isState, String state, String shortName, String ballotStateName, String abbreviations, Boolean isIncumbentShownOnBallots, String encloseNickname, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, Boolean isUseBOEBanner, String urlDataPage, String stateCountyTitles, String ldsStateCode, String officesStatusStatewide, String officesStatusJudicial, String officesStatusCounties, String title, String pollHours, String pollHoursUrl, String pollPlacesUrl, Boolean hasEarlyVoting, Boolean hasVotingByMail, Boolean votingExclusivelyByMail, Boolean statePrimariesHaveSeparatePartyBallots, Boolean presidentialPrimariesHaveSeparatePartyBallots, String howVotingIsDone, String howPrimariesAreDone, Boolean showUnopposed, Boolean showWriteIn, Boolean showPrimaryWriteIn, String countyBoardsWebAddress, String electionAdditionalInfo, String ballotInstructions, String voterRegistrationWebAddress, String earlyVotingWebAddress, String voteByMailWebAddress, String voteByAbsenteeBallotWebAddress, Boolean optOut)
      {
        StatesRow row = NewRow();
        row.StateCode = stateCode;
        row.IsState = isState;
        row.State = state;
        row.ShortName = shortName;
        row.BallotStateName = ballotStateName;
        row.Abbreviations = abbreviations;
        row.IsIncumbentShownOnBallots = isIncumbentShownOnBallots;
        row.EncloseNickname = encloseNickname;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.IsUseBOEBanner = isUseBOEBanner;
        row.UrlDataPage = urlDataPage;
        row.StateCountyTitles = stateCountyTitles;
        row.LdsStateCode = ldsStateCode;
        row.OfficesStatusStatewide = officesStatusStatewide;
        row.OfficesStatusJudicial = officesStatusJudicial;
        row.OfficesStatusCounties = officesStatusCounties;
        row.Title = title;
        row.PollHours = pollHours;
        row.PollHoursUrl = pollHoursUrl;
        row.PollPlacesUrl = pollPlacesUrl;
        row.HasEarlyVoting = hasEarlyVoting;
        row.HasVotingByMail = hasVotingByMail;
        row.VotingExclusivelyByMail = votingExclusivelyByMail;
        row.StatePrimariesHaveSeparatePartyBallots = statePrimariesHaveSeparatePartyBallots;
        row.PresidentialPrimariesHaveSeparatePartyBallots = presidentialPrimariesHaveSeparatePartyBallots;
        row.HowVotingIsDone = howVotingIsDone;
        row.HowPrimariesAreDone = howPrimariesAreDone;
        row.ShowUnopposed = showUnopposed;
        row.ShowWriteIn = showWriteIn;
        row.ShowPrimaryWriteIn = showPrimaryWriteIn;
        row.CountyBoardsWebAddress = countyBoardsWebAddress;
        row.ElectionAdditionalInfo = electionAdditionalInfo;
        row.BallotInstructions = ballotInstructions;
        row.VoterRegistrationWebAddress = voterRegistrationWebAddress;
        row.EarlyVotingWebAddress = earlyVotingWebAddress;
        row.VoteByMailWebAddress = voteByMailWebAddress;
        row.VoteByAbsenteeBallotWebAddress = voteByAbsenteeBallotWebAddress;
        row.OptOut = optOut;
        return row;
      }

      public void AddRow(String stateCode, Boolean isState, String state, String shortName, String ballotStateName, String abbreviations, Boolean isIncumbentShownOnBallots, String encloseNickname, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, Boolean isUseBOEBanner, String urlDataPage, String stateCountyTitles, String ldsStateCode, String officesStatusStatewide, String officesStatusJudicial, String officesStatusCounties, String title, String pollHours, String pollHoursUrl, String pollPlacesUrl, Boolean hasEarlyVoting, Boolean hasVotingByMail, Boolean votingExclusivelyByMail, Boolean statePrimariesHaveSeparatePartyBallots, Boolean presidentialPrimariesHaveSeparatePartyBallots, String howVotingIsDone, String howPrimariesAreDone, Boolean showUnopposed, Boolean showWriteIn, Boolean showPrimaryWriteIn, String countyBoardsWebAddress, String electionAdditionalInfo, String ballotInstructions, String voterRegistrationWebAddress, String earlyVotingWebAddress, String voteByMailWebAddress, String voteByAbsenteeBallotWebAddress, Boolean optOut)
      {
        StatesRow row = NewRow(stateCode, isState, state, shortName, ballotStateName, abbreviations, isIncumbentShownOnBallots, encloseNickname, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, isUseBOEBanner, urlDataPage, stateCountyTitles, ldsStateCode, officesStatusStatewide, officesStatusJudicial, officesStatusCounties, title, pollHours, pollHoursUrl, pollPlacesUrl, hasEarlyVoting, hasVotingByMail, votingExclusivelyByMail, statePrimariesHaveSeparatePartyBallots, presidentialPrimariesHaveSeparatePartyBallots, howVotingIsDone, howPrimariesAreDone, showUnopposed, showWriteIn, showPrimaryWriteIn, countyBoardsWebAddress, electionAdditionalInfo, ballotInstructions, voterRegistrationWebAddress, earlyVotingWebAddress, voteByMailWebAddress, voteByAbsenteeBallotWebAddress, optOut);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn IsStateColumn { get { return this.Columns["IsState"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn ShortNameColumn { get { return this.Columns["ShortName"]; } }

      public DataColumn BallotStateNameColumn { get { return this.Columns["BallotStateName"]; } }

      public DataColumn AbbreviationsColumn { get { return this.Columns["Abbreviations"]; } }

      public DataColumn IsIncumbentShownOnBallotsColumn { get { return this.Columns["IsIncumbentShownOnBallots"]; } }

      public DataColumn EncloseNicknameColumn { get { return this.Columns["EncloseNickname"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn IsUseBOEBannerColumn { get { return this.Columns["IsUseBOEBanner"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn StateCountyTitlesColumn { get { return this.Columns["StateCountyTitles"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["LDSStateCode"]; } }

      public DataColumn OfficesStatusStatewideColumn { get { return this.Columns["OfficesStatusStatewide"]; } }

      public DataColumn OfficesStatusJudicialColumn { get { return this.Columns["OfficesStatusJudicial"]; } }

      public DataColumn OfficesStatusCountiesColumn { get { return this.Columns["OfficesStatusCounties"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn PollHoursColumn { get { return this.Columns["PollHours"]; } }

      public DataColumn PollHoursUrlColumn { get { return this.Columns["PollHoursUrl"]; } }

      public DataColumn PollPlacesUrlColumn { get { return this.Columns["PollPlacesUrl"]; } }

      public DataColumn HasEarlyVotingColumn { get { return this.Columns["HasEarlyVoting"]; } }

      public DataColumn HasVotingByMailColumn { get { return this.Columns["HasVotingByMail"]; } }

      public DataColumn VotingExclusivelyByMailColumn { get { return this.Columns["VotingExclusivelyByMail"]; } }

      public DataColumn StatePrimariesHaveSeparatePartyBallotsColumn { get { return this.Columns["StatePrimariesHaveSeparatePartyBallots"]; } }

      public DataColumn PresidentialPrimariesHaveSeparatePartyBallotsColumn { get { return this.Columns["PresidentialPrimariesHaveSeparatePartyBallots"]; } }

      public DataColumn HowVotingIsDoneColumn { get { return this.Columns["HowVotingIsDone"]; } }

      public DataColumn HowPrimariesAreDoneColumn { get { return this.Columns["HowPrimariesAreDone"]; } }

      public DataColumn ShowUnopposedColumn { get { return this.Columns["ShowUnopposed"]; } }

      public DataColumn ShowWriteInColumn { get { return this.Columns["ShowWriteIn"]; } }

      public DataColumn ShowPrimaryWriteInColumn { get { return this.Columns["ShowPrimaryWriteIn"]; } }

      public DataColumn CountyBoardsWebAddressColumn { get { return this.Columns["CountyBoardsWebAddress"]; } }

      public DataColumn ElectionAdditionalInfoColumn { get { return this.Columns["ElectionAdditionalInfo"]; } }

      public DataColumn BallotInstructionsColumn { get { return this.Columns["BallotInstructions"]; } }

      public DataColumn VoterRegistrationWebAddressColumn { get { return this.Columns["VoterRegistrationWebAddress"]; } }

      public DataColumn EarlyVotingWebAddressColumn { get { return this.Columns["EarlyVotingWebAddress"]; } }

      public DataColumn VoteByMailWebAddressColumn { get { return this.Columns["VoteByMailWebAddress"]; } }

      public DataColumn VoteByAbsenteeBallotWebAddressColumn { get { return this.Columns["VoteByAbsenteeBallotWebAddress"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public enum ColumnSet { All, Cached }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShortName", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotStateName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Abbreviations", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbentShownOnBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EncloseNickname", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsUseBOEBanner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCountyTitles", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LDSStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusStatewide", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusJudicial", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusCounties", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollHours", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollHoursUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollPlacesUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HasEarlyVoting", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HasVotingByMail", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VotingExclusivelyByMail", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StatePrimariesHaveSeparatePartyBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PresidentialPrimariesHaveSeparatePartyBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HowVotingIsDone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("HowPrimariesAreDone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ShowUnopposed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowWriteIn", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowPrimaryWriteIn", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyBoardsWebAddress", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("VoterRegistrationWebAddress", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingWebAddress", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteByMailWebAddress", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteByAbsenteeBallotWebAddress", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCachedColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShortName", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotStateName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Abbreviations", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbentShownOnBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EncloseNickname", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LDSStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowUnopposed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowWriteIn", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public StatesTable() : this(ColumnSet.All) { }

      public StatesTable(ColumnSet columnSet)
      {
        this.TableName = "States";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cached:
            InitCachedColumns();
            break;
        }
      }

      protected StatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class States
    {
      public const string TableName = "States";

      public enum Column { StateCode, IsState, State, ShortName, BallotStateName, Abbreviations, IsIncumbentShownOnBallots, EncloseNickname, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, IsUseBOEBanner, UrlDataPage, StateCountyTitles, LdsStateCode, OfficesStatusStatewide, OfficesStatusJudicial, OfficesStatusCounties, Title, PollHours, PollHoursUrl, PollPlacesUrl, HasEarlyVoting, HasVotingByMail, VotingExclusivelyByMail, StatePrimariesHaveSeparatePartyBallots, PresidentialPrimariesHaveSeparatePartyBallots, HowVotingIsDone, HowPrimariesAreDone, ShowUnopposed, ShowWriteIn, ShowPrimaryWriteIn, CountyBoardsWebAddress, ElectionAdditionalInfo, BallotInstructions, VoterRegistrationWebAddress, EarlyVotingWebAddress, VoteByMailWebAddress, VoteByAbsenteeBallotWebAddress, OptOut }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.IsState, "IsState" },
        { Column.State, "State" },
        { Column.ShortName, "ShortName" },
        { Column.BallotStateName, "BallotStateName" },
        { Column.Abbreviations, "Abbreviations" },
        { Column.IsIncumbentShownOnBallots, "IsIncumbentShownOnBallots" },
        { Column.EncloseNickname, "EncloseNickname" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.IsUseBOEBanner, "IsUseBOEBanner" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.StateCountyTitles, "StateCountyTitles" },
        { Column.LdsStateCode, "LDSStateCode" },
        { Column.OfficesStatusStatewide, "OfficesStatusStatewide" },
        { Column.OfficesStatusJudicial, "OfficesStatusJudicial" },
        { Column.OfficesStatusCounties, "OfficesStatusCounties" },
        { Column.Title, "Title" },
        { Column.PollHours, "PollHours" },
        { Column.PollHoursUrl, "PollHoursUrl" },
        { Column.PollPlacesUrl, "PollPlacesUrl" },
        { Column.HasEarlyVoting, "HasEarlyVoting" },
        { Column.HasVotingByMail, "HasVotingByMail" },
        { Column.VotingExclusivelyByMail, "VotingExclusivelyByMail" },
        { Column.StatePrimariesHaveSeparatePartyBallots, "StatePrimariesHaveSeparatePartyBallots" },
        { Column.PresidentialPrimariesHaveSeparatePartyBallots, "PresidentialPrimariesHaveSeparatePartyBallots" },
        { Column.HowVotingIsDone, "HowVotingIsDone" },
        { Column.HowPrimariesAreDone, "HowPrimariesAreDone" },
        { Column.ShowUnopposed, "ShowUnopposed" },
        { Column.ShowWriteIn, "ShowWriteIn" },
        { Column.ShowPrimaryWriteIn, "ShowPrimaryWriteIn" },
        { Column.CountyBoardsWebAddress, "CountyBoardsWebAddress" },
        { Column.ElectionAdditionalInfo, "ElectionAdditionalInfo" },
        { Column.BallotInstructions, "BallotInstructions" },
        { Column.VoterRegistrationWebAddress, "VoterRegistrationWebAddress" },
        { Column.EarlyVotingWebAddress, "EarlyVotingWebAddress" },
        { Column.VoteByMailWebAddress, "VoteByMailWebAddress" },
        { Column.VoteByAbsenteeBallotWebAddress, "VoteByAbsenteeBallotWebAddress" },
        { Column.OptOut, "OptOut" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States";
        }
      }

      public static StatesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static StatesTable FillTable(DbCommand command)
      {
        return FillTable(command, StatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static StatesTable FillTable(DbCommand command, StatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          StatesTable table = new StatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string IsStateColumnName { get { return "IsState"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string ShortNameColumnName { get { return "ShortName"; } }

      public static string BallotStateNameColumnName { get { return "BallotStateName"; } }

      public static string AbbreviationsColumnName { get { return "Abbreviations"; } }

      public static string IsIncumbentShownOnBallotsColumnName { get { return "IsIncumbentShownOnBallots"; } }

      public static string EncloseNicknameColumnName { get { return "EncloseNickname"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string IsUseBOEBannerColumnName { get { return "IsUseBOEBanner"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string StateCountyTitlesColumnName { get { return "StateCountyTitles"; } }

      public static string LdsStateCodeColumnName { get { return "LDSStateCode"; } }

      public static string OfficesStatusStatewideColumnName { get { return "OfficesStatusStatewide"; } }

      public static string OfficesStatusJudicialColumnName { get { return "OfficesStatusJudicial"; } }

      public static string OfficesStatusCountiesColumnName { get { return "OfficesStatusCounties"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string PollHoursColumnName { get { return "PollHours"; } }

      public static string PollHoursUrlColumnName { get { return "PollHoursUrl"; } }

      public static string PollPlacesUrlColumnName { get { return "PollPlacesUrl"; } }

      public static string HasEarlyVotingColumnName { get { return "HasEarlyVoting"; } }

      public static string HasVotingByMailColumnName { get { return "HasVotingByMail"; } }

      public static string VotingExclusivelyByMailColumnName { get { return "VotingExclusivelyByMail"; } }

      public static string StatePrimariesHaveSeparatePartyBallotsColumnName { get { return "StatePrimariesHaveSeparatePartyBallots"; } }

      public static string PresidentialPrimariesHaveSeparatePartyBallotsColumnName { get { return "PresidentialPrimariesHaveSeparatePartyBallots"; } }

      public static string HowVotingIsDoneColumnName { get { return "HowVotingIsDone"; } }

      public static string HowPrimariesAreDoneColumnName { get { return "HowPrimariesAreDone"; } }

      public static string ShowUnopposedColumnName { get { return "ShowUnopposed"; } }

      public static string ShowWriteInColumnName { get { return "ShowWriteIn"; } }

      public static string ShowPrimaryWriteInColumnName { get { return "ShowPrimaryWriteIn"; } }

      public static string CountyBoardsWebAddressColumnName { get { return "CountyBoardsWebAddress"; } }

      public static string ElectionAdditionalInfoColumnName { get { return "ElectionAdditionalInfo"; } }

      public static string BallotInstructionsColumnName { get { return "BallotInstructions"; } }

      public static string VoterRegistrationWebAddressColumnName { get { return "VoterRegistrationWebAddress"; } }

      public static string EarlyVotingWebAddressColumnName { get { return "EarlyVotingWebAddress"; } }

      public static string VoteByMailWebAddressColumnName { get { return "VoteByMailWebAddress"; } }

      public static string VoteByAbsenteeBallotWebAddressColumnName { get { return "VoteByAbsenteeBallotWebAddress"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int StateMaxLength { get { return 100; } }

      public static int ShortNameMaxLength { get { return 20; } }

      public static int BallotStateNameMaxLength { get { return int.MaxValue; } }

      public static int AbbreviationsMaxLength { get { return 50; } }

      public static int EncloseNicknameMaxLength { get { return 1; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static int StateCountyTitlesMaxLength { get { return 200; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int OfficesStatusStatewideMaxLength { get { return int.MaxValue; } }

      public static int OfficesStatusJudicialMaxLength { get { return int.MaxValue; } }

      public static int OfficesStatusCountiesMaxLength { get { return int.MaxValue; } }

      public static int TitleMaxLength { get { return int.MaxValue; } }

      public static int PollHoursMaxLength { get { return int.MaxValue; } }

      public static int PollHoursUrlMaxLength { get { return int.MaxValue; } }

      public static int PollPlacesUrlMaxLength { get { return int.MaxValue; } }

      public static int HowVotingIsDoneMaxLength { get { return int.MaxValue; } }

      public static int HowPrimariesAreDoneMaxLength { get { return int.MaxValue; } }

      public static int CountyBoardsWebAddressMaxLength { get { return 255; } }

      public static int ElectionAdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int BallotInstructionsMaxLength { get { return int.MaxValue; } }

      public static int VoterRegistrationWebAddressMaxLength { get { return 255; } }

      public static int EarlyVotingWebAddressMaxLength { get { return 255; } }

      public static int VoteByMailWebAddressMaxLength { get { return 255; } }

      public static int VoteByAbsenteeBallotWebAddressMaxLength { get { return 255; } }

      public static bool StateCodeExists(String stateCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String defaultValue = null)
      {
        return GetStateCodeByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsStateByStateCode(String stateCode)
      {
        return _GetIsStateByStateCode(stateCode, null);
      }

      public static Boolean? GetIsState(String stateCode)
      {
        return GetIsStateByStateCode(stateCode);
      }

      public static Boolean GetIsStateByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsStateByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsState(String stateCode, Boolean defaultValue)
      {
        return GetIsStateByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsStateByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsState FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetState(String stateCode, String defaultValue = null)
      {
        return GetStateByStateCode(stateCode, defaultValue);
      }

      public static String GetShortNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ShortName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetShortName(String stateCode, String defaultValue = null)
      {
        return GetShortNameByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotStateNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotStateName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotStateName(String stateCode, String defaultValue = null)
      {
        return GetBallotStateNameByStateCode(stateCode, defaultValue);
      }

      public static String GetAbbreviationsByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Abbreviations FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAbbreviations(String stateCode, String defaultValue = null)
      {
        return GetAbbreviationsByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsIncumbentShownOnBallotsByStateCode(String stateCode)
      {
        return _GetIsIncumbentShownOnBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetIsIncumbentShownOnBallots(String stateCode)
      {
        return GetIsIncumbentShownOnBallotsByStateCode(stateCode);
      }

      public static Boolean GetIsIncumbentShownOnBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsIncumbentShownOnBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsIncumbentShownOnBallots(String stateCode, Boolean defaultValue)
      {
        return GetIsIncumbentShownOnBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsIncumbentShownOnBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbentShownOnBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetEncloseNicknameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EncloseNickname FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEncloseNickname(String stateCode, String defaultValue = null)
      {
        return GetEncloseNicknameByStateCode(stateCode, defaultValue);
      }

      public static String GetContactByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String defaultValue = null)
      {
        return GetContactByStateCode(stateCode, defaultValue);
      }

      public static String GetContactTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String defaultValue = null)
      {
        return GetContactTitleByStateCode(stateCode, defaultValue);
      }

      public static String GetContactEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String defaultValue = null)
      {
        return GetContactEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetPhoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String defaultValue = null)
      {
        return GetPhoneByStateCode(stateCode, defaultValue);
      }

      public static String GetAltContactByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String defaultValue = null)
      {
        return GetAltContactByStateCode(stateCode, defaultValue);
      }

      public static String GetAltContactTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String defaultValue = null)
      {
        return GetAltContactTitleByStateCode(stateCode, defaultValue);
      }

      public static String GetAltEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String defaultValue = null)
      {
        return GetAltEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetAltPhoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String defaultValue = null)
      {
        return GetAltPhoneByStateCode(stateCode, defaultValue);
      }

      public static String GetEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String defaultValue = null)
      {
        return GetEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String defaultValue = null)
      {
        return GetUrlByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String defaultValue = null)
      {
        return GetBallotNameByStateCode(stateCode, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCode(stateCode, defaultValue);
      }

      public static String GetAddressLine1ByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String defaultValue = null)
      {
        return GetAddressLine1ByStateCode(stateCode, defaultValue);
      }

      public static String GetAddressLine2ByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String defaultValue = null)
      {
        return GetAddressLine2ByStateCode(stateCode, defaultValue);
      }

      public static String GetCityStateZipByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String defaultValue = null)
      {
        return GetCityStateZipByStateCode(stateCode, defaultValue);
      }

      public static String GetNotesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String defaultValue = null)
      {
        return GetNotesByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsUseBOEBannerByStateCode(String stateCode)
      {
        return _GetIsUseBOEBannerByStateCode(stateCode, null);
      }

      public static Boolean? GetIsUseBOEBanner(String stateCode)
      {
        return GetIsUseBOEBannerByStateCode(stateCode);
      }

      public static Boolean GetIsUseBOEBannerByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsUseBOEBannerByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsUseBOEBanner(String stateCode, Boolean defaultValue)
      {
        return GetIsUseBOEBannerByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsUseBOEBannerByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUseBOEBanner FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUrlDataPageByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String defaultValue = null)
      {
        return GetUrlDataPageByStateCode(stateCode, defaultValue);
      }

      public static String GetStateCountyTitlesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyTitles FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyTitles(String stateCode, String defaultValue = null)
      {
        return GetStateCountyTitlesByStateCode(stateCode, defaultValue);
      }

      public static String GetLdsStateCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LDSStateCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCode(String stateCode, String defaultValue = null)
      {
        return GetLdsStateCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetOfficesStatusStatewideByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusStatewide FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusStatewide(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusStatewideByStateCode(stateCode, defaultValue);
      }

      public static String GetOfficesStatusJudicialByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusJudicial FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusJudicial(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusJudicialByStateCode(stateCode, defaultValue);
      }

      public static String GetOfficesStatusCountiesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusCounties FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusCounties(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusCountiesByStateCode(stateCode, defaultValue);
      }

      public static String GetTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitle(String stateCode, String defaultValue = null)
      {
        return GetTitleByStateCode(stateCode, defaultValue);
      }

      public static String GetPollHoursByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHours FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHours(String stateCode, String defaultValue = null)
      {
        return GetPollHoursByStateCode(stateCode, defaultValue);
      }

      public static String GetPollHoursUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHoursUrl FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHoursUrl(String stateCode, String defaultValue = null)
      {
        return GetPollHoursUrlByStateCode(stateCode, defaultValue);
      }

      public static String GetPollPlacesUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollPlacesUrl FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollPlacesUrl(String stateCode, String defaultValue = null)
      {
        return GetPollPlacesUrlByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetHasEarlyVotingByStateCode(String stateCode)
      {
        return _GetHasEarlyVotingByStateCode(stateCode, null);
      }

      public static Boolean? GetHasEarlyVoting(String stateCode)
      {
        return GetHasEarlyVotingByStateCode(stateCode);
      }

      public static Boolean GetHasEarlyVotingByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetHasEarlyVotingByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetHasEarlyVoting(String stateCode, Boolean defaultValue)
      {
        return GetHasEarlyVotingByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetHasEarlyVotingByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasEarlyVoting FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetHasVotingByMailByStateCode(String stateCode)
      {
        return _GetHasVotingByMailByStateCode(stateCode, null);
      }

      public static Boolean? GetHasVotingByMail(String stateCode)
      {
        return GetHasVotingByMailByStateCode(stateCode);
      }

      public static Boolean GetHasVotingByMailByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetHasVotingByMailByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetHasVotingByMail(String stateCode, Boolean defaultValue)
      {
        return GetHasVotingByMailByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetHasVotingByMailByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasVotingByMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetVotingExclusivelyByMailByStateCode(String stateCode)
      {
        return _GetVotingExclusivelyByMailByStateCode(stateCode, null);
      }

      public static Boolean? GetVotingExclusivelyByMail(String stateCode)
      {
        return GetVotingExclusivelyByMailByStateCode(stateCode);
      }

      public static Boolean GetVotingExclusivelyByMailByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetVotingExclusivelyByMailByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetVotingExclusivelyByMail(String stateCode, Boolean defaultValue)
      {
        return GetVotingExclusivelyByMailByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetVotingExclusivelyByMailByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT VotingExclusivelyByMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallots(String stateCode)
      {
        return GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode);
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallots(String stateCode, Boolean defaultValue)
      {
        return GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT StatePrimariesHaveSeparatePartyBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallots(String stateCode)
      {
        return GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode);
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallots(String stateCode, Boolean defaultValue)
      {
        return GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresidentialPrimariesHaveSeparatePartyBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHowVotingIsDoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowVotingIsDone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowVotingIsDone(String stateCode, String defaultValue = null)
      {
        return GetHowVotingIsDoneByStateCode(stateCode, defaultValue);
      }

      public static String GetHowPrimariesAreDoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowPrimariesAreDone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowPrimariesAreDone(String stateCode, String defaultValue = null)
      {
        return GetHowPrimariesAreDoneByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetShowUnopposedByStateCode(String stateCode)
      {
        return _GetShowUnopposedByStateCode(stateCode, null);
      }

      public static Boolean? GetShowUnopposed(String stateCode)
      {
        return GetShowUnopposedByStateCode(stateCode);
      }

      public static Boolean GetShowUnopposedByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetShowUnopposedByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetShowUnopposed(String stateCode, Boolean defaultValue)
      {
        return GetShowUnopposedByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetShowUnopposedByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowUnopposed FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowWriteInByStateCode(String stateCode)
      {
        return _GetShowWriteInByStateCode(stateCode, null);
      }

      public static Boolean? GetShowWriteIn(String stateCode)
      {
        return GetShowWriteInByStateCode(stateCode);
      }

      public static Boolean GetShowWriteInByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetShowWriteInByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetShowWriteIn(String stateCode, Boolean defaultValue)
      {
        return GetShowWriteInByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetShowWriteInByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowWriteIn FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowPrimaryWriteInByStateCode(String stateCode)
      {
        return _GetShowPrimaryWriteInByStateCode(stateCode, null);
      }

      public static Boolean? GetShowPrimaryWriteIn(String stateCode)
      {
        return GetShowPrimaryWriteInByStateCode(stateCode);
      }

      public static Boolean GetShowPrimaryWriteInByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetShowPrimaryWriteInByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetShowPrimaryWriteIn(String stateCode, Boolean defaultValue)
      {
        return GetShowPrimaryWriteInByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetShowPrimaryWriteInByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowPrimaryWriteIn FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetCountyBoardsWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyBoardsWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyBoardsWebAddress(String stateCode, String defaultValue = null)
      {
        return GetCountyBoardsWebAddressByStateCode(stateCode, defaultValue);
      }

      public static String GetElectionAdditionalInfoByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionAdditionalInfo FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionAdditionalInfo(String stateCode, String defaultValue = null)
      {
        return GetElectionAdditionalInfoByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotInstructionsByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotInstructions FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotInstructions(String stateCode, String defaultValue = null)
      {
        return GetBallotInstructionsByStateCode(stateCode, defaultValue);
      }

      public static String GetVoterRegistrationWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoterRegistrationWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoterRegistrationWebAddress(String stateCode, String defaultValue = null)
      {
        return GetVoterRegistrationWebAddressByStateCode(stateCode, defaultValue);
      }

      public static String GetEarlyVotingWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EarlyVotingWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEarlyVotingWebAddress(String stateCode, String defaultValue = null)
      {
        return GetEarlyVotingWebAddressByStateCode(stateCode, defaultValue);
      }

      public static String GetVoteByMailWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteByMailWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteByMailWebAddress(String stateCode, String defaultValue = null)
      {
        return GetVoteByMailWebAddressByStateCode(stateCode, defaultValue);
      }

      public static String GetVoteByAbsenteeBallotWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteByAbsenteeBallotWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteByAbsenteeBallotWebAddress(String stateCode, String defaultValue = null)
      {
        return GetVoteByAbsenteeBallotWebAddressByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetOptOutByStateCode(String stateCode)
      {
        return _GetOptOutByStateCode(stateCode, null);
      }

      public static Boolean? GetOptOut(String stateCode)
      {
        return GetOptOutByStateCode(stateCode);
      }

      public static Boolean GetOptOutByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetOptOutByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetOptOut(String stateCode, Boolean defaultValue)
      {
        return GetOptOutByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetOptOutByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode)
      {
        return GetColumnByStateCode(_column, stateCode);
      }

      public static StatesTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static StatesTable GetData(String stateCode, int commandTimeout = -1)
      {
        return GetDataByStateCode(stateCode, commandTimeout);
      }

      public static int UpdateStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode)
      {
        return UpdateStateCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateIsStateByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsState(Boolean newValue, String stateCode)
      {
        return UpdateIsStateByStateCode(newValue, stateCode);
      }

      public static int UpdateStateByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateState(String newValue, String stateCode)
      {
        return UpdateStateByStateCode(newValue, stateCode);
      }

      public static int UpdateShortNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortName(String newValue, String stateCode)
      {
        return UpdateShortNameByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotStateNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateName(String newValue, String stateCode)
      {
        return UpdateBallotStateNameByStateCode(newValue, stateCode);
      }

      public static int UpdateAbbreviationsByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviations(String newValue, String stateCode)
      {
        return UpdateAbbreviationsByStateCode(newValue, stateCode);
      }

      public static int UpdateIsIncumbentShownOnBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallots(Boolean newValue, String stateCode)
      {
        return UpdateIsIncumbentShownOnBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdateEncloseNicknameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNickname(String newValue, String stateCode)
      {
        return UpdateEncloseNicknameByStateCode(newValue, stateCode);
      }

      public static int UpdateContactByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode)
      {
        return UpdateContactByStateCode(newValue, stateCode);
      }

      public static int UpdateContactTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode)
      {
        return UpdateContactTitleByStateCode(newValue, stateCode);
      }

      public static int UpdateContactEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode)
      {
        return UpdateContactEmailByStateCode(newValue, stateCode);
      }

      public static int UpdatePhoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode)
      {
        return UpdatePhoneByStateCode(newValue, stateCode);
      }

      public static int UpdateAltContactByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode)
      {
        return UpdateAltContactByStateCode(newValue, stateCode);
      }

      public static int UpdateAltContactTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode)
      {
        return UpdateAltContactTitleByStateCode(newValue, stateCode);
      }

      public static int UpdateAltEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode)
      {
        return UpdateAltEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateAltPhoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode)
      {
        return UpdateAltPhoneByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode)
      {
        return UpdateEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode)
      {
        return UpdateUrlByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode)
      {
        return UpdateBallotNameByStateCode(newValue, stateCode);
      }

      public static int UpdateElectionsAuthorityByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode)
      {
        return UpdateElectionsAuthorityByStateCode(newValue, stateCode);
      }

      public static int UpdateAddressLine1ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode)
      {
        return UpdateAddressLine1ByStateCode(newValue, stateCode);
      }

      public static int UpdateAddressLine2ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode)
      {
        return UpdateAddressLine2ByStateCode(newValue, stateCode);
      }

      public static int UpdateCityStateZipByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode)
      {
        return UpdateCityStateZipByStateCode(newValue, stateCode);
      }

      public static int UpdateNotesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode)
      {
        return UpdateNotesByStateCode(newValue, stateCode);
      }

      public static int UpdateIsUseBOEBannerByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBanner(Boolean newValue, String stateCode)
      {
        return UpdateIsUseBOEBannerByStateCode(newValue, stateCode);
      }

      public static int UpdateUrlDataPageByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode)
      {
        return UpdateUrlDataPageByStateCode(newValue, stateCode);
      }

      public static int UpdateStateCountyTitlesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitles(String newValue, String stateCode)
      {
        return UpdateStateCountyTitlesByStateCode(newValue, stateCode);
      }

      public static int UpdateLdsStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCode(String newValue, String stateCode)
      {
        return UpdateLdsStateCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusStatewideByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewide(String newValue, String stateCode)
      {
        return UpdateOfficesStatusStatewideByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusJudicialByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicial(String newValue, String stateCode)
      {
        return UpdateOfficesStatusJudicialByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusCountiesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCounties(String newValue, String stateCode)
      {
        return UpdateOfficesStatusCountiesByStateCode(newValue, stateCode);
      }

      public static int UpdateTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitle(String newValue, String stateCode)
      {
        return UpdateTitleByStateCode(newValue, stateCode);
      }

      public static int UpdatePollHoursByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHours(String newValue, String stateCode)
      {
        return UpdatePollHoursByStateCode(newValue, stateCode);
      }

      public static int UpdatePollHoursUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrl(String newValue, String stateCode)
      {
        return UpdatePollHoursUrlByStateCode(newValue, stateCode);
      }

      public static int UpdatePollPlacesUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrl(String newValue, String stateCode)
      {
        return UpdatePollPlacesUrlByStateCode(newValue, stateCode);
      }

      public static int UpdateHasEarlyVotingByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVoting(Boolean newValue, String stateCode)
      {
        return UpdateHasEarlyVotingByStateCode(newValue, stateCode);
      }

      public static int UpdateHasVotingByMailByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMail(Boolean newValue, String stateCode)
      {
        return UpdateHasVotingByMailByStateCode(newValue, stateCode);
      }

      public static int UpdateVotingExclusivelyByMailByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMail(Boolean newValue, String stateCode)
      {
        return UpdateVotingExclusivelyByMailByStateCode(newValue, stateCode);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallots(Boolean newValue, String stateCode)
      {
        return UpdateStatePrimariesHaveSeparatePartyBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallots(Boolean newValue, String stateCode)
      {
        return UpdatePresidentialPrimariesHaveSeparatePartyBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdateHowVotingIsDoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDone(String newValue, String stateCode)
      {
        return UpdateHowVotingIsDoneByStateCode(newValue, stateCode);
      }

      public static int UpdateHowPrimariesAreDoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDone(String newValue, String stateCode)
      {
        return UpdateHowPrimariesAreDoneByStateCode(newValue, stateCode);
      }

      public static int UpdateShowUnopposedByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposed(Boolean newValue, String stateCode)
      {
        return UpdateShowUnopposedByStateCode(newValue, stateCode);
      }

      public static int UpdateShowWriteInByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteIn(Boolean newValue, String stateCode)
      {
        return UpdateShowWriteInByStateCode(newValue, stateCode);
      }

      public static int UpdateShowPrimaryWriteInByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShowPrimaryWriteIn=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowPrimaryWriteIn(Boolean newValue, String stateCode)
      {
        return UpdateShowPrimaryWriteInByStateCode(newValue, stateCode);
      }

      public static int UpdateCountyBoardsWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddress(String newValue, String stateCode)
      {
        return UpdateCountyBoardsWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateElectionAdditionalInfoByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ElectionAdditionalInfo=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfo(String newValue, String stateCode)
      {
        return UpdateElectionAdditionalInfoByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotInstructionsByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotInstructions=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructions(String newValue, String stateCode)
      {
        return UpdateBallotInstructionsByStateCode(newValue, stateCode);
      }

      public static int UpdateVoterRegistrationWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET VoterRegistrationWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoterRegistrationWebAddress(String newValue, String stateCode)
      {
        return UpdateVoterRegistrationWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateEarlyVotingWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EarlyVotingWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingWebAddress(String newValue, String stateCode)
      {
        return UpdateEarlyVotingWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateVoteByMailWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET VoteByMailWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByMailWebAddress(String newValue, String stateCode)
      {
        return UpdateVoteByMailWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET VoteByAbsenteeBallotWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddress(String newValue, String stateCode)
      {
        return UpdateVoteByAbsenteeBallotWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateOptOutByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OptOut=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOut(Boolean newValue, String stateCode)
      {
        return UpdateOptOutByStateCode(newValue, stateCode);
      }

      public static int UpdateColumnByStateCode(Column _column, object newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE StateCode=@StateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode)
      {
         return UpdateColumnByStateCode(_column, newValue, stateCode);
      }

      public static bool LdsStateCodeExists(String ldsStateCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsStateByLdsStateCode(String ldsStateCode)
      {
        return _GetIsStateByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsStateByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsStateByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsStateByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsState FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetShortNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ShortName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotStateNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotStateName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAbbreviationsByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Abbreviations FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetIsIncumbentShownOnBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsIncumbentShownOnBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbentShownOnBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetEncloseNicknameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EncloseNickname FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthorityByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1ByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2ByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZipByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsUseBOEBannerByLdsStateCode(String ldsStateCode)
      {
        return _GetIsUseBOEBannerByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsUseBOEBannerByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsUseBOEBannerByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsUseBOEBannerByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUseBOEBanner FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUrlDataPageByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyTitlesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyTitles FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LDSStateCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusStatewideByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusStatewide FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusJudicialByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusJudicial FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusCountiesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusCounties FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHoursByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHours FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHoursUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHoursUrl FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollPlacesUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollPlacesUrl FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetHasEarlyVotingByLdsStateCode(String ldsStateCode)
      {
        return _GetHasEarlyVotingByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetHasEarlyVotingByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetHasEarlyVotingByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetHasEarlyVotingByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasEarlyVoting FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetHasVotingByMailByLdsStateCode(String ldsStateCode)
      {
        return _GetHasVotingByMailByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetHasVotingByMailByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetHasVotingByMailByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetHasVotingByMailByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasVotingByMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode)
      {
        return _GetVotingExclusivelyByMailByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetVotingExclusivelyByMailByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT VotingExclusivelyByMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT StatePrimariesHaveSeparatePartyBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresidentialPrimariesHaveSeparatePartyBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHowVotingIsDoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowVotingIsDone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowPrimariesAreDoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowPrimariesAreDone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetShowUnopposedByLdsStateCode(String ldsStateCode)
      {
        return _GetShowUnopposedByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetShowUnopposedByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetShowUnopposedByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetShowUnopposedByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowUnopposed FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowWriteInByLdsStateCode(String ldsStateCode)
      {
        return _GetShowWriteInByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetShowWriteInByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetShowWriteInByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetShowWriteInByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowWriteIn FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowPrimaryWriteInByLdsStateCode(String ldsStateCode)
      {
        return _GetShowPrimaryWriteInByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetShowPrimaryWriteInByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetShowPrimaryWriteInByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetShowPrimaryWriteInByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowPrimaryWriteIn FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetCountyBoardsWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyBoardsWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionAdditionalInfoByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionAdditionalInfo FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotInstructionsByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotInstructions FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoterRegistrationWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoterRegistrationWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEarlyVotingWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EarlyVotingWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteByMailWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteByMailWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteByAbsenteeBallotWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteByAbsenteeBallotWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetOptOutByLdsStateCode(String ldsStateCode)
      {
        return _GetOptOutByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetOptOutByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetOptOutByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetOptOutByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByLdsStateCode(Column _column, String ldsStateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE LDSStateCode=@LdsStateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByLdsStateCode(String ldsStateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowPrimaryWriteInByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShowPrimaryWriteIn=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ElectionAdditionalInfo=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotInstructions=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoterRegistrationWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET VoterRegistrationWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EarlyVotingWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByMailWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET VoteByMailWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET VoteByAbsenteeBallotWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OptOut=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLdsStateCode(Column _column, object newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE LDSStateCode=@LdsStateCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByState(String state, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "State", state);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByState(Column _column, String state)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE State=@State";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByState(String state, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "State", state);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowPrimaryWriteInByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET ShowPrimaryWriteIn=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ElectionAdditionalInfo=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotInstructions=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoterRegistrationWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET VoterRegistrationWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET EarlyVotingWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByMailWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET VoteByMailWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET VoteByAbsenteeBallotWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET OptOut=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByState(Column _column, object newValue, String state)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE State=@State";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowPrimaryWriteInByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET ShowPrimaryWriteIn=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ElectionAdditionalInfo=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotInstructions=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoterRegistrationWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET VoterRegistrationWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET EarlyVotingWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByMailWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET VoteByMailWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET VoteByAbsenteeBallotWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET OptOut=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE EMail=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,Title,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,ShowPrimaryWriteIn,CountyBoardsWebAddress,ElectionAdditionalInfo,BallotInstructions,VoterRegistrationWebAddress,EarlyVotingWebAddress,VoteByMailWebAddress,VoteByAbsenteeBallotWebAddress,OptOut FROM States WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowPrimaryWriteInByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShowPrimaryWriteIn=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfoByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ElectionAdditionalInfo=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructionsByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotInstructions=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoterRegistrationWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET VoterRegistrationWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EarlyVotingWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByMailWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET VoteByMailWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteByAbsenteeBallotWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET VoteByAbsenteeBallotWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OptOut=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCachedCommandText
      {
        get
        {
          return "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,ContactEmail,EMail,URL,ElectionsAuthority,LDSStateCode,ShowUnopposed,ShowWriteIn FROM States";
        }
      }

      public static StatesTable GetAllCachedData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,ContactEmail,EMail,URL,ElectionsAuthority,LDSStateCode,ShowUnopposed,ShowWriteIn FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, StatesTable.ColumnSet.Cached);
      }

      public static string GetSelectCommandText(StatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case StatesTable.ColumnSet.All:
            return SelectAllCommandText;

          case StatesTable.ColumnSet.Cached:
            return SelectCachedCommandText;

          default:
            return null;
        }
      }

      static States()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.States

    #region vote.TempEmail

    public partial class TempEmailRow : DataRow
    {
      internal TempEmailRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 BatchId
      {
        get { return (Int32) this["BatchId"]; }
        set { this["BatchId"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalKey
      {
        get { return this["LocalKey"] as String; }
        set { if (value == null) this["LocalKey"] = DBNull.Value; else this["LocalKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String ElectionKeyToInclude
      {
        get { return this["ElectionKeyToInclude"] as String; }
        set { if (value == null) this["ElectionKeyToInclude"] = DBNull.Value; else this["ElectionKeyToInclude"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyEmail
      {
        get { return this["PartyEmail"] as String; }
        set { if (value == null) this["PartyEmail"] = DBNull.Value; else this["PartyEmail"] = value; }
      }

      public Int32? VisitorId
      {
        get { if (this.IsNull("VisitorId")) return null; else return (Int32) this["VisitorId"]; }
        set { if (value.HasValue) this["VisitorId"] = value.Value; else this["VisitorId"] = DBNull.Value; }
      }

      public Int32? DonorId
      {
        get { if (this.IsNull("DonorId")) return null; else return (Int32) this["DonorId"]; }
        set { if (value.HasValue) this["DonorId"] = value.Value; else this["DonorId"] = DBNull.Value; }
      }

      public Int32? OrgContactId
      {
        get { if (this.IsNull("OrgContactId")) return null; else return (Int32) this["OrgContactId"]; }
        set { if (value.HasValue) this["OrgContactId"] = value.Value; else this["OrgContactId"] = DBNull.Value; }
      }

      public String SortName
      {
        get { return this["SortName"] as String; }
        set { if (value == null) this["SortName"] = DBNull.Value; else this["SortName"] = value; }
      }

      public String SourceCode
      {
        get { return this["SourceCode"] as String; }
        set { if (value == null) this["SourceCode"] = DBNull.Value; else this["SourceCode"] = value; }
      }
    }

    [Serializable]
    public partial class TempEmailTable : TypedTableBase<TempEmailRow>
    {
      public TempEmailRow this[int index] { get { return (TempEmailRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TempEmailRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TempEmailTable(); }

      new public TempEmailRow NewRow() { return (TempEmailRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TempEmailRow(rb); }

      protected override Type GetRowType()
      { return typeof(TempEmailRow); }

      public void RemoveRow(TempEmailRow row) { this.Rows.Remove(row); }

      public TempEmailRow NewRow(Int32 id, Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localKey, String politicianKey, String electionKey, String electionKeyToInclude, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, Int32? orgContactId, String sortName, String sourceCode)
      {
        TempEmailRow row = NewRow();
        row.Id = id;
        row.BatchId = batchId;
        row.Email = email;
        row.Contact = contact;
        row.Title = title;
        row.Phone = phone;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.PoliticianKey = politicianKey;
        row.ElectionKey = electionKey;
        row.ElectionKeyToInclude = electionKeyToInclude;
        row.OfficeKey = officeKey;
        row.PartyKey = partyKey;
        row.PartyEmail = partyEmail;
        row.VisitorId = visitorId;
        row.DonorId = donorId;
        row.OrgContactId = orgContactId;
        row.SortName = sortName;
        row.SourceCode = sourceCode;
        return row;
      }

      public void AddRow(Int32 id, Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localKey, String politicianKey, String electionKey, String electionKeyToInclude, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, Int32? orgContactId, String sortName, String sourceCode)
      {
        TempEmailRow row = NewRow(id, batchId, email, contact, title, phone, stateCode, countyCode, localKey, politicianKey, electionKey, electionKeyToInclude, officeKey, partyKey, partyEmail, visitorId, donorId, orgContactId, sortName, sourceCode);
        AddRow(row);
      }

      public TempEmailRow NewRow(Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localKey, String politicianKey, String electionKey, String electionKeyToInclude, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, Int32? orgContactId, String sortName, String sourceCode)
      {
        TempEmailRow row = NewRow();
        row.BatchId = batchId;
        row.Email = email;
        row.Contact = contact;
        row.Title = title;
        row.Phone = phone;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalKey = localKey;
        row.PoliticianKey = politicianKey;
        row.ElectionKey = electionKey;
        row.ElectionKeyToInclude = electionKeyToInclude;
        row.OfficeKey = officeKey;
        row.PartyKey = partyKey;
        row.PartyEmail = partyEmail;
        row.VisitorId = visitorId;
        row.DonorId = donorId;
        row.OrgContactId = orgContactId;
        row.SortName = sortName;
        row.SourceCode = sourceCode;
        return row;
      }

      public void AddRow(Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localKey, String politicianKey, String electionKey, String electionKeyToInclude, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, Int32? orgContactId, String sortName, String sourceCode)
      {
        TempEmailRow row = NewRow(batchId, email, contact, title, phone, stateCode, countyCode, localKey, politicianKey, electionKey, electionKeyToInclude, officeKey, partyKey, partyEmail, visitorId, donorId, orgContactId, sortName, sourceCode);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn BatchIdColumn { get { return this.Columns["BatchId"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalKeyColumn { get { return this.Columns["LocalKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn ElectionKeyToIncludeColumn { get { return this.Columns["ElectionKeyToInclude"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyEmailColumn { get { return this.Columns["PartyEmail"]; } }

      public DataColumn VisitorIdColumn { get { return this.Columns["VisitorId"]; } }

      public DataColumn DonorIdColumn { get { return this.Columns["DonorId"]; } }

      public DataColumn OrgContactIdColumn { get { return this.Columns["OrgContactId"]; } }

      public DataColumn SortNameColumn { get { return this.Columns["SortName"]; } }

      public DataColumn SourceCodeColumn { get { return this.Columns["SourceCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("BatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.MaxLength = 128;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 64;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalKey", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyToInclude", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyEmail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("VisitorId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DonorId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("OrgContactId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("SortName", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SourceCode", typeof(String));
        _column.MaxLength = 16;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TempEmailTable() : this(ColumnSet.All) { }

      public TempEmailTable(ColumnSet columnSet)
      {
        this.TableName = "TempEmail";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TempEmailTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TempEmail
    {
      public const string TableName = "TempEmail";

      public enum Column { Id, BatchId, Email, Contact, Title, Phone, StateCode, CountyCode, LocalKey, PoliticianKey, ElectionKey, ElectionKeyToInclude, OfficeKey, PartyKey, PartyEmail, VisitorId, DonorId, OrgContactId, SortName, SourceCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.BatchId, "BatchId" },
        { Column.Email, "Email" },
        { Column.Contact, "Contact" },
        { Column.Title, "Title" },
        { Column.Phone, "Phone" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalKey, "LocalKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.ElectionKeyToInclude, "ElectionKeyToInclude" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PartyKey, "PartyKey" },
        { Column.PartyEmail, "PartyEmail" },
        { Column.VisitorId, "VisitorId" },
        { Column.DonorId, "DonorId" },
        { Column.OrgContactId, "OrgContactId" },
        { Column.SortName, "SortName" },
        { Column.SourceCode, "SourceCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail";
        }
      }

      public static TempEmailTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static TempEmailTable FillTable(DbCommand command)
      {
        return FillTable(command, TempEmailTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TempEmailTable FillTable(DbCommand command, TempEmailTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TempEmailTable table = new TempEmailTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TempEmailTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TempEmailTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TempEmailTable table, TempEmailTable.ColumnSet columnSet = TempEmailTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string BatchIdColumnName { get { return "BatchId"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalKeyColumnName { get { return "LocalKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string ElectionKeyToIncludeColumnName { get { return "ElectionKeyToInclude"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyEmailColumnName { get { return "PartyEmail"; } }

      public static string VisitorIdColumnName { get { return "VisitorId"; } }

      public static string DonorIdColumnName { get { return "DonorId"; } }

      public static string OrgContactIdColumnName { get { return "OrgContactId"; } }

      public static string SortNameColumnName { get { return "SortName"; } }

      public static string SourceCodeColumnName { get { return "SourceCode"; } }

      public static int EmailMaxLength { get { return 128; } }

      public static int ContactMaxLength { get { return 128; } }

      public static int TitleMaxLength { get { return 128; } }

      public static int PhoneMaxLength { get { return 64; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalKeyMaxLength { get { return 5; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int ElectionKeyToIncludeMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyEmailMaxLength { get { return 200; } }

      public static int SortNameMaxLength { get { return 128; } }

      public static int SourceCodeMaxLength { get { return 16; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool BatchIdEmailExists(Int32 batchId, String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByBatchIdEmail(Column _column, Int32 batchId, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataByBatchIdEmail(Int32 batchId, String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteByBatchIdEmail(Int32 batchId, String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByBatchId(Column _column, Int32 batchId)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE BatchId=@BatchId";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE PoliticianKey=@PoliticianKey";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalKey,PoliticianKey,ElectionKey,ElectionKeyToInclude,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,OrgContactId,SortName,SourceCode FROM TempEmail WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TempEmailTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TempEmailTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TempEmail()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TempEmail

    #region vote.TempEmailBatches

    public partial class TempEmailBatchesRow : DataRow
    {
      internal TempEmailBatchesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime CreationTime
      {
        get { return (DateTime) this["CreationTime"]; }
        set { this["CreationTime"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public DateTime TimeLastSent
      {
        get { return (DateTime) this["TimeLastSent"]; }
        set { this["TimeLastSent"] = value; }
      }

      public Int32 Sent
      {
        get { return (Int32) this["Sent"]; }
        set { this["Sent"] = value; }
      }

      public Int32 Failed
      {
        get { return (Int32) this["Failed"]; }
        set { this["Failed"] = value; }
      }
    }

    [Serializable]
    public partial class TempEmailBatchesTable : TypedTableBase<TempEmailBatchesRow>
    {
      public TempEmailBatchesRow this[int index] { get { return (TempEmailBatchesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TempEmailBatchesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TempEmailBatchesTable(); }

      new public TempEmailBatchesRow NewRow() { return (TempEmailBatchesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TempEmailBatchesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TempEmailBatchesRow); }

      public void RemoveRow(TempEmailBatchesRow row) { this.Rows.Remove(row); }

      public TempEmailBatchesRow NewRow(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow();
        row.Id = id;
        row.CreationTime = creationTime;
        row.UserName = userName;
        row.TimeLastSent = timeLastSent;
        row.Sent = sent;
        row.Failed = failed;
        return row;
      }

      public void AddRow(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow(id, creationTime, userName, timeLastSent, sent, failed);
        AddRow(row);
      }

      public TempEmailBatchesRow NewRow(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow();
        row.CreationTime = creationTime;
        row.UserName = userName;
        row.TimeLastSent = timeLastSent;
        row.Sent = sent;
        row.Failed = failed;
        return row;
      }

      public void AddRow(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow(creationTime, userName, timeLastSent, sent, failed);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CreationTimeColumn { get { return this.Columns["CreationTime"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn TimeLastSentColumn { get { return this.Columns["TimeLastSent"]; } }

      public DataColumn SentColumn { get { return this.Columns["Sent"]; } }

      public DataColumn FailedColumn { get { return this.Columns["Failed"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CreationTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TimeLastSent", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sent", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Failed", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TempEmailBatchesTable() : this(ColumnSet.All) { }

      public TempEmailBatchesTable(ColumnSet columnSet)
      {
        this.TableName = "TempEmailBatches";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TempEmailBatchesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TempEmailBatches
    {
      public const string TableName = "TempEmailBatches";

      public enum Column { Id, CreationTime, UserName, TimeLastSent, Sent, Failed }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CreationTime, "CreationTime" },
        { Column.UserName, "UserName" },
        { Column.TimeLastSent, "TimeLastSent" },
        { Column.Sent, "Sent" },
        { Column.Failed, "Failed" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailBatches";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TempEmailBatches (Id,CreationTime,UserName,TimeLastSent,Sent,Failed) VALUES (@Id,@CreationTime,@UserName,@TimeLastSent,@Sent,@Failed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "TimeLastSent", timeLastSent);
        VoteDb.AddCommandParameter(cmd, "Sent", sent);
        VoteDb.AddCommandParameter(cmd, "Failed", failed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TempEmailBatches (CreationTime,UserName,TimeLastSent,Sent,Failed) VALUES (@CreationTime,@UserName,@TimeLastSent,@Sent,@Failed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "TimeLastSent", timeLastSent);
        VoteDb.AddCommandParameter(cmd, "Sent", sent);
        VoteDb.AddCommandParameter(cmd, "Failed", failed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches";
        }
      }

      public static TempEmailBatchesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TempEmailBatchesTable.ColumnSet.All);
      }

      public static TempEmailBatchesTable FillTable(DbCommand command)
      {
        return FillTable(command, TempEmailBatchesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TempEmailBatchesTable FillTable(DbCommand command, TempEmailBatchesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TempEmailBatchesTable table = new TempEmailBatchesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CreationTimeColumnName { get { return "CreationTime"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string TimeLastSentColumnName { get { return "TimeLastSent"; } }

      public static string SentColumnName { get { return "Sent"; } }

      public static string FailedColumnName { get { return "Failed"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmailBatches WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailBatchesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, TempEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET CreationTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeLastSentById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET TimeLastSent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Sent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Failed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TempEmailBatchesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TempEmailBatchesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TempEmailBatches()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TempEmailBatches

    #region vote.TigerPlaces

    public partial class TigerPlacesRow : DataRow
    {
      internal TigerPlacesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String LongName
      {
        get { return this["LongName"] as String; }
        set { if (value == null) this["LongName"] = DBNull.Value; else this["LongName"] = value; }
      }

      public String FuncStat
      {
        get { return this["FuncStat"] as String; }
        set { if (value == null) this["FuncStat"] = DBNull.Value; else this["FuncStat"] = value; }
      }

      public String Lsad
      {
        get { return this["Lsad"] as String; }
        set { if (value == null) this["Lsad"] = DBNull.Value; else this["Lsad"] = value; }
      }
    }

    [Serializable]
    public partial class TigerPlacesTable : TypedTableBase<TigerPlacesRow>
    {
      public TigerPlacesRow this[int index] { get { return (TigerPlacesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TigerPlacesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TigerPlacesTable(); }

      new public TigerPlacesRow NewRow() { return (TigerPlacesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TigerPlacesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TigerPlacesRow); }

      public void RemoveRow(TigerPlacesRow row) { this.Rows.Remove(row); }

      public TigerPlacesRow NewRow(String stateCode, String tigerCode, String name, String longName, String funcStat, String lsad)
      {
        TigerPlacesRow row = NewRow();
        row.StateCode = stateCode;
        row.TigerCode = tigerCode;
        row.Name = name;
        row.LongName = longName;
        row.FuncStat = funcStat;
        row.Lsad = lsad;
        return row;
      }

      public void AddRow(String stateCode, String tigerCode, String name, String longName, String funcStat, String lsad)
      {
        TigerPlacesRow row = NewRow(stateCode, tigerCode, name, longName, funcStat, lsad);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn LongNameColumn { get { return this.Columns["LongName"]; } }

      public DataColumn FuncStatColumn { get { return this.Columns["FuncStat"]; } }

      public DataColumn LsadColumn { get { return this.Columns["Lsad"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LongName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FuncStat", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Lsad", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TigerPlacesTable() : this(ColumnSet.All) { }

      public TigerPlacesTable(ColumnSet columnSet)
      {
        this.TableName = "TigerPlaces";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TigerPlacesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TigerPlaces
    {
      public const string TableName = "TigerPlaces";

      public enum Column { StateCode, TigerCode, Name, LongName, FuncStat, Lsad }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.TigerCode, "TigerCode" },
        { Column.Name, "Name" },
        { Column.LongName, "LongName" },
        { Column.FuncStat, "FuncStat" },
        { Column.Lsad, "Lsad" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlaces";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String tigerCode, String name, String longName, String funcStat, String lsad, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TigerPlaces (StateCode,TigerCode,Name,LongName,FuncStat,Lsad) VALUES (@StateCode,@TigerCode,@Name,@LongName,@FuncStat,@Lsad)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "LongName", longName);
        VoteDb.AddCommandParameter(cmd, "FuncStat", funcStat);
        VoteDb.AddCommandParameter(cmd, "Lsad", lsad);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,TigerCode,Name,LongName,FuncStat,Lsad FROM TigerPlaces";
        }
      }

      public static TigerPlacesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,TigerCode,Name,LongName,FuncStat,Lsad FROM TigerPlaces";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TigerPlacesTable.ColumnSet.All);
      }

      public static TigerPlacesTable FillTable(DbCommand command)
      {
        return FillTable(command, TigerPlacesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TigerPlacesTable FillTable(DbCommand command, TigerPlacesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TigerPlacesTable table = new TigerPlacesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TigerPlacesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TigerPlacesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TigerPlacesTable table, TigerPlacesTable.ColumnSet columnSet = TigerPlacesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string LongNameColumnName { get { return "LongName"; } }

      public static string FuncStatColumnName { get { return "FuncStat"; } }

      public static string LsadColumnName { get { return "Lsad"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static int NameMaxLength { get { return 100; } }

      public static int LongNameMaxLength { get { return 100; } }

      public static int FuncStatMaxLength { get { return 1; } }

      public static int LsadMaxLength { get { return 2; } }

      public static bool StateCodeTigerCodeExists(String stateCode, String tigerCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNameByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLongNameByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LongName FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFuncStatByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FuncStat FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLsadByStateCodeTigerCode(String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Lsad FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByStateCodeTigerCode(Column _column, String stateCode, String tigerCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerPlacesTable GetDataByStateCodeTigerCode(String stateCode, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,TigerCode,Name,LongName,FuncStat,Lsad FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return FillTable(cmd, TigerPlacesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET StateCode=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET TigerCode=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET Name=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongNameByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET LongName=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFuncStatByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET FuncStat=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLsadByStateCodeTigerCode(String newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET Lsad=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeTigerCode(Column _column, object newValue, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlaces SET {0}=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeTigerCode(String stateCode, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerPlaces WHERE StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TigerPlacesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TigerPlacesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TigerPlaces()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TigerPlaces

    #region vote.TigerPlacesCounties

    public partial class TigerPlacesCountiesRow : DataRow
    {
      internal TigerPlacesCountiesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String TigerType
      {
        get { return this["TigerType"] as String; }
        set { if (value == null) this["TigerType"] = DBNull.Value; else this["TigerType"] = value; }
      }
    }

    [Serializable]
    public partial class TigerPlacesCountiesTable : TypedTableBase<TigerPlacesCountiesRow>
    {
      public TigerPlacesCountiesRow this[int index] { get { return (TigerPlacesCountiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TigerPlacesCountiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TigerPlacesCountiesTable(); }

      new public TigerPlacesCountiesRow NewRow() { return (TigerPlacesCountiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TigerPlacesCountiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TigerPlacesCountiesRow); }

      public void RemoveRow(TigerPlacesCountiesRow row) { this.Rows.Remove(row); }

      public TigerPlacesCountiesRow NewRow(String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        TigerPlacesCountiesRow row = NewRow();
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.TigerCode = tigerCode;
        row.TigerType = tigerType;
        return row;
      }

      public void AddRow(String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        TigerPlacesCountiesRow row = NewRow(stateCode, countyCode, tigerCode, tigerType);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn TigerTypeColumn { get { return this.Columns["TigerType"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TigerPlacesCountiesTable() : this(ColumnSet.All) { }

      public TigerPlacesCountiesTable(ColumnSet columnSet)
      {
        this.TableName = "TigerPlacesCounties";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TigerPlacesCountiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TigerPlacesCounties
    {
      public const string TableName = "TigerPlacesCounties";

      public enum Column { StateCode, CountyCode, TigerCode, TigerType }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.TigerCode, "TigerCode" },
        { Column.TigerType, "TigerType" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlacesCounties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String countyCode, String tigerCode, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TigerPlacesCounties (StateCode,CountyCode,TigerCode,TigerType) VALUES (@StateCode,@CountyCode,@TigerCode,@TigerType)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,TigerCode,TigerType FROM TigerPlacesCounties";
        }
      }

      public static TigerPlacesCountiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,TigerCode,TigerType FROM TigerPlacesCounties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TigerPlacesCountiesTable.ColumnSet.All);
      }

      public static TigerPlacesCountiesTable FillTable(DbCommand command)
      {
        return FillTable(command, TigerPlacesCountiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TigerPlacesCountiesTable FillTable(DbCommand command, TigerPlacesCountiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TigerPlacesCountiesTable table = new TigerPlacesCountiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TigerPlacesCountiesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TigerPlacesCountiesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TigerPlacesCountiesTable table, TigerPlacesCountiesTable.ColumnSet columnSet = TigerPlacesCountiesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string TigerTypeColumnName { get { return "TigerType"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static int TigerTypeMaxLength { get { return 1; } }

      public static bool StateCodeCountyCodeTigerCodeTigerTypeExists(String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerTypeByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerType FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByStateCodeCountyCodeTigerCodeTigerType(Column _column, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerPlacesCountiesTable GetDataByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,TigerCode,TigerType FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return FillTable(cmd, TigerPlacesCountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeCountyCodeTigerCodeTigerType(String newValue, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCodeTigerCodeTigerType(String newValue, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeCountyCodeTigerCodeTigerType(String newValue, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByStateCodeCountyCodeTigerCodeTigerType(String newValue, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerType=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCodeTigerCodeTigerType(Column _column, object newValue, String stateCode, String countyCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCodeTigerCodeTigerType(String stateCode, String countyCode, String tigerCode, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerPlacesCounties WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlacesCounties WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeTigerTypeTigerCode(Column _column, String stateCode, String tigerType, String tigerCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerPlacesCounties WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerPlacesCountiesTable GetDataByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,TigerCode,TigerType FROM TigerPlacesCounties WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return FillTable(cmd, TigerPlacesCountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET StateCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET CountyCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerCode=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByStateCodeTigerTypeTigerCode(String newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerType=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeTigerTypeTigerCode(Column _column, object newValue, String stateCode, String tigerType, String tigerCode)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET {0}=@newValue WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeTigerTypeTigerCode(String stateCode, String tigerType, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerPlacesCounties WHERE StateCode=@StateCode AND TigerType=@TigerType AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTigerType(String tigerType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerPlacesCounties WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTigerType(Column _column, String tigerType)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerPlacesCounties WHERE TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerPlacesCountiesTable GetDataByTigerType(String tigerType, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,TigerCode,TigerType FROM TigerPlacesCounties WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return FillTable(cmd, TigerPlacesCountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET StateCode=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET CountyCode=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerCode=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET TigerType=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTigerType(Column _column, object newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerPlacesCounties SET {0}=@newValue WHERE TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTigerType(String tigerType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerPlacesCounties WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TigerPlacesCountiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TigerPlacesCountiesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TigerPlacesCounties()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TigerPlacesCounties

    #region vote.TigerSchools

    public partial class TigerSchoolsRow : DataRow
    {
      internal TigerSchoolsRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String TigerType
      {
        get { return this["TigerType"] as String; }
        set { if (value == null) this["TigerType"] = DBNull.Value; else this["TigerType"] = value; }
      }
    }

    [Serializable]
    public partial class TigerSchoolsTable : TypedTableBase<TigerSchoolsRow>
    {
      public TigerSchoolsRow this[int index] { get { return (TigerSchoolsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TigerSchoolsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TigerSchoolsTable(); }

      new public TigerSchoolsRow NewRow() { return (TigerSchoolsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TigerSchoolsRow(rb); }

      protected override Type GetRowType()
      { return typeof(TigerSchoolsRow); }

      public void RemoveRow(TigerSchoolsRow row) { this.Rows.Remove(row); }

      public TigerSchoolsRow NewRow(String stateCode, String tigerCode, String name, String tigerType)
      {
        TigerSchoolsRow row = NewRow();
        row.StateCode = stateCode;
        row.TigerCode = tigerCode;
        row.Name = name;
        row.TigerType = tigerType;
        return row;
      }

      public void AddRow(String stateCode, String tigerCode, String name, String tigerType)
      {
        TigerSchoolsRow row = NewRow(stateCode, tigerCode, name, tigerType);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn TigerTypeColumn { get { return this.Columns["TigerType"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TigerSchoolsTable() : this(ColumnSet.All) { }

      public TigerSchoolsTable(ColumnSet columnSet)
      {
        this.TableName = "TigerSchools";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TigerSchoolsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TigerSchools
    {
      public const string TableName = "TigerSchools";

      public enum Column { StateCode, TigerCode, Name, TigerType }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.TigerCode, "TigerCode" },
        { Column.Name, "Name" },
        { Column.TigerType, "TigerType" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerSchools";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String tigerCode, String name, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TigerSchools (StateCode,TigerCode,Name,TigerType) VALUES (@StateCode,@TigerCode,@Name,@TigerType)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,TigerCode,Name,TigerType FROM TigerSchools";
        }
      }

      public static TigerSchoolsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,TigerCode,Name,TigerType FROM TigerSchools";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TigerSchoolsTable.ColumnSet.All);
      }

      public static TigerSchoolsTable FillTable(DbCommand command)
      {
        return FillTable(command, TigerSchoolsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TigerSchoolsTable FillTable(DbCommand command, TigerSchoolsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TigerSchoolsTable table = new TigerSchoolsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TigerSchoolsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TigerSchoolsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TigerSchoolsTable table, TigerSchoolsTable.ColumnSet columnSet = TigerSchoolsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string TigerTypeColumnName { get { return "TigerType"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static int NameMaxLength { get { return 100; } }

      public static int TigerTypeMaxLength { get { return 1; } }

      public static bool StateCodeTigerCodeTigerTypeExists(String stateCode, String tigerCode, String tigerType)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNameByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Name FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerTypeByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerType FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByStateCodeTigerCodeTigerType(Column _column, String stateCode, String tigerCode, String tigerType)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerSchoolsTable GetDataByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,TigerCode,Name,TigerType FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return FillTable(cmd, TigerSchoolsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeTigerCodeTigerType(String newValue, String stateCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET StateCode=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByStateCodeTigerCodeTigerType(String newValue, String stateCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET TigerCode=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByStateCodeTigerCodeTigerType(String newValue, String stateCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET Name=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByStateCodeTigerCodeTigerType(String newValue, String stateCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET TigerType=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeTigerCodeTigerType(Column _column, object newValue, String stateCode, String tigerCode, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET {0}=@newValue WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeTigerCodeTigerType(String stateCode, String tigerCode, String tigerType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerSchools WHERE StateCode=@StateCode AND TigerCode=@TigerCode AND TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTigerType(String tigerType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerSchools WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTigerType(Column _column, String tigerType)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerSchools WHERE TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerSchoolsTable GetDataByTigerType(String tigerType, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,TigerCode,Name,TigerType FROM TigerSchools WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return FillTable(cmd, TigerSchoolsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET StateCode=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET TigerCode=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET Name=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerTypeByTigerType(String newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET TigerType=@newValue WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTigerType(Column _column, object newValue, String tigerType)
      {
        string cmdText = "UPDATE TigerSchools SET {0}=@newValue WHERE TigerType=@TigerType";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTigerType(String tigerType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerSchools WHERE TigerType=@TigerType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TigerType", tigerType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TigerSchoolsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TigerSchoolsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TigerSchools()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TigerSchools

    #region vote.TigerToVoteCodes

    public partial class TigerToVoteCodesRow : DataRow
    {
      internal TigerToVoteCodesRow(DataRowBuilder rb) : base(rb) {}

      public String TableType
      {
        get { return this["TableType"] as String; }
        set { if (value == null) this["TableType"] = DBNull.Value; else this["TableType"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String VoteCode
      {
        get { return this["VoteCode"] as String; }
        set { if (value == null) this["VoteCode"] = DBNull.Value; else this["VoteCode"] = value; }
      }
    }

    [Serializable]
    public partial class TigerToVoteCodesTable : TypedTableBase<TigerToVoteCodesRow>
    {
      public TigerToVoteCodesRow this[int index] { get { return (TigerToVoteCodesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TigerToVoteCodesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TigerToVoteCodesTable(); }

      new public TigerToVoteCodesRow NewRow() { return (TigerToVoteCodesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TigerToVoteCodesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TigerToVoteCodesRow); }

      public void RemoveRow(TigerToVoteCodesRow row) { this.Rows.Remove(row); }

      public TigerToVoteCodesRow NewRow(String tableType, String stateCode, String tigerCode, String voteCode)
      {
        TigerToVoteCodesRow row = NewRow();
        row.TableType = tableType;
        row.StateCode = stateCode;
        row.TigerCode = tigerCode;
        row.VoteCode = voteCode;
        return row;
      }

      public void AddRow(String tableType, String stateCode, String tigerCode, String voteCode)
      {
        TigerToVoteCodesRow row = NewRow(tableType, stateCode, tigerCode, voteCode);
        AddRow(row);
      }

      public DataColumn TableTypeColumn { get { return this.Columns["TableType"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn VoteCodeColumn { get { return this.Columns["VoteCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("TableType", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TigerToVoteCodesTable() : this(ColumnSet.All) { }

      public TigerToVoteCodesTable(ColumnSet columnSet)
      {
        this.TableName = "TigerToVoteCodes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TigerToVoteCodesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TigerToVoteCodes
    {
      public const string TableName = "TigerToVoteCodes";

      public enum Column { TableType, StateCode, TigerCode, VoteCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.TableType, "TableType" },
        { Column.StateCode, "StateCode" },
        { Column.TigerCode, "TigerCode" },
        { Column.VoteCode, "VoteCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerToVoteCodes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String tableType, String stateCode, String tigerCode, String voteCode, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TigerToVoteCodes (TableType,StateCode,TigerCode,VoteCode) VALUES (@TableType,@StateCode,@TigerCode,@VoteCode)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT TableType,StateCode,TigerCode,VoteCode FROM TigerToVoteCodes";
        }
      }

      public static TigerToVoteCodesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT TableType,StateCode,TigerCode,VoteCode FROM TigerToVoteCodes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TigerToVoteCodesTable.ColumnSet.All);
      }

      public static TigerToVoteCodesTable FillTable(DbCommand command)
      {
        return FillTable(command, TigerToVoteCodesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TigerToVoteCodesTable FillTable(DbCommand command, TigerToVoteCodesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TigerToVoteCodesTable table = new TigerToVoteCodesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TigerToVoteCodesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TigerToVoteCodesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TigerToVoteCodesTable table, TigerToVoteCodesTable.ColumnSet columnSet = TigerToVoteCodesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string TableTypeColumnName { get { return "TableType"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string VoteCodeColumnName { get { return "VoteCode"; } }

      public static int TableTypeMaxLength { get { return 2; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int TigerCodeMaxLength { get { return 3; } }

      public static int VoteCodeMaxLength { get { return 3; } }

      public static bool TableTypeStateCodeTigerCodeExists(String tableType, String stateCode, String tigerCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetTableTypeByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TableType FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteCodeByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByTableTypeStateCodeTigerCode(Column _column, String tableType, String stateCode, String tigerCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerToVoteCodesTable GetDataByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT TableType,StateCode,TigerCode,VoteCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return FillTable(cmd, TigerToVoteCodesTable.ColumnSet.All);
      }

      public static int UpdateTableTypeByTableTypeStateCodeTigerCode(String newValue, String tableType, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET TableType=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByTableTypeStateCodeTigerCode(String newValue, String tableType, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET StateCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByTableTypeStateCodeTigerCode(String newValue, String tableType, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET TigerCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteCodeByTableTypeStateCodeTigerCode(String newValue, String tableType, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET VoteCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableTypeStateCodeTigerCode(Column _column, object newValue, String tableType, String stateCode, String tigerCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET {0}=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableTypeStateCodeTigerCode(String tableType, String stateCode, String tigerCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND TigerCode=@TigerCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool TableTypeStateCodeVoteCodeExists(String tableType, String stateCode, String voteCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetTableTypeByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TableType FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTigerCodeByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TigerCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteCodeByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByTableTypeStateCodeVoteCode(Column _column, String tableType, String stateCode, String voteCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TigerToVoteCodesTable GetDataByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT TableType,StateCode,TigerCode,VoteCode FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        return FillTable(cmd, TigerToVoteCodesTable.ColumnSet.All);
      }

      public static int UpdateTableTypeByTableTypeStateCodeVoteCode(String newValue, String tableType, String stateCode, String voteCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET TableType=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByTableTypeStateCodeVoteCode(String newValue, String tableType, String stateCode, String voteCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET StateCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTigerCodeByTableTypeStateCodeVoteCode(String newValue, String tableType, String stateCode, String voteCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET TigerCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteCodeByTableTypeStateCodeVoteCode(String newValue, String tableType, String stateCode, String voteCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET VoteCode=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableTypeStateCodeVoteCode(Column _column, object newValue, String tableType, String stateCode, String voteCode)
      {
        string cmdText = "UPDATE TigerToVoteCodes SET {0}=@newValue WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableTypeStateCodeVoteCode(String tableType, String stateCode, String voteCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TigerToVoteCodes WHERE TableType=@TableType AND StateCode=@StateCode AND VoteCode=@VoteCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TableType", tableType);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "VoteCode", voteCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TigerToVoteCodesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TigerToVoteCodesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TigerToVoteCodes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TigerToVoteCodes

    #region vote.UploadedImages

    public partial class UploadedImagesRow : DataRow
    {
      internal UploadedImagesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String ExternalName
      {
        get { return this["ExternalName"] as String; }
        set { if (value == null) this["ExternalName"] = DBNull.Value; else this["ExternalName"] = value; }
      }

      public String ImageType
      {
        get { return this["ImageType"] as String; }
        set { if (value == null) this["ImageType"] = DBNull.Value; else this["ImageType"] = value; }
      }

      public String FileName
      {
        get { return this["FileName"] as String; }
        set { if (value == null) this["FileName"] = DBNull.Value; else this["FileName"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Image
      {
        get { return this["Image"] as Byte[]; }
        set { if (value == null) this["Image"] = DBNull.Value; else this["Image"] = value; }
      }

      public String Comments
      {
        get { return this["Comments"] as String; }
        set { if (value == null) this["Comments"] = DBNull.Value; else this["Comments"] = value; }
      }

      public DateTime? ImageChangeTime
      {
        get { if (this.IsNull("ImageChangeTime")) return null; else return (DateTime) this["ImageChangeTime"]; }
        set { if (value.HasValue) this["ImageChangeTime"] = value.Value; else this["ImageChangeTime"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class UploadedImagesTable : TypedTableBase<UploadedImagesRow>
    {
      public UploadedImagesRow this[int index] { get { return (UploadedImagesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(UploadedImagesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new UploadedImagesTable(); }

      new public UploadedImagesRow NewRow() { return (UploadedImagesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new UploadedImagesRow(rb); }

      protected override Type GetRowType()
      { return typeof(UploadedImagesRow); }

      public void RemoveRow(UploadedImagesRow row) { this.Rows.Remove(row); }

      public UploadedImagesRow NewRow(Int32 id, String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime)
      {
        UploadedImagesRow row = NewRow();
        row.Id = id;
        row.ExternalName = externalName;
        row.ImageType = imageType;
        row.FileName = fileName;
        row.Image = image;
        row.Comments = comments;
        row.ImageChangeTime = imageChangeTime;
        return row;
      }

      public void AddRow(Int32 id, String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime)
      {
        UploadedImagesRow row = NewRow(id, externalName, imageType, fileName, image, comments, imageChangeTime);
        AddRow(row);
      }

      public UploadedImagesRow NewRow(String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime)
      {
        UploadedImagesRow row = NewRow();
        row.ExternalName = externalName;
        row.ImageType = imageType;
        row.FileName = fileName;
        row.Image = image;
        row.Comments = comments;
        row.ImageChangeTime = imageChangeTime;
        return row;
      }

      public void AddRow(String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime)
      {
        UploadedImagesRow row = NewRow(externalName, imageType, fileName, image, comments, imageChangeTime);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn ExternalNameColumn { get { return this.Columns["ExternalName"]; } }

      public DataColumn ImageTypeColumn { get { return this.Columns["ImageType"]; } }

      public DataColumn FileNameColumn { get { return this.Columns["FileName"]; } }

      public DataColumn ImageColumn { get { return this.Columns["Image"]; } }

      public DataColumn CommentsColumn { get { return this.Columns["Comments"]; } }

      public DataColumn ImageChangeTimeColumn { get { return this.Columns["ImageChangeTime"]; } }

      public enum ColumnSet { All, Keys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("ExternalName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ImageType", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FileName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Image", typeof(Byte[]));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Comments", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ImageChangeTime", typeof(DateTime));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("ExternalName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public UploadedImagesTable() : this(ColumnSet.All) { }

      public UploadedImagesTable(ColumnSet columnSet)
      {
        this.TableName = "UploadedImages";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Keys:
            InitKeysColumns();
            break;
        }
      }

      protected UploadedImagesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class UploadedImages
    {
      public const string TableName = "UploadedImages";

      public enum Column { Id, ExternalName, ImageType, FileName, Image, Comments, ImageChangeTime }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.ExternalName, "ExternalName" },
        { Column.ImageType, "ImageType" },
        { Column.FileName, "FileName" },
        { Column.Image, "Image" },
        { Column.Comments, "Comments" },
        { Column.ImageChangeTime, "ImageChangeTime" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM UploadedImages";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO UploadedImages (Id,ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime) VALUES (@Id,@ExternalName,@ImageType,@FileName,@Image,@Comments,@ImageChangeTime)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "ImageType", imageType);
        VoteDb.AddCommandParameter(cmd, "FileName", fileName);
        VoteDb.AddCommandParameter(cmd, "Image", image);
        VoteDb.AddCommandParameter(cmd, "Comments", comments);
        VoteDb.AddCommandParameter(cmd, "ImageChangeTime", imageChangeTime);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String externalName, String imageType, String fileName, Byte[] image, String comments, DateTime? imageChangeTime, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO UploadedImages (ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime) VALUES (@ExternalName,@ImageType,@FileName,@Image,@Comments,@ImageChangeTime)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "ImageType", imageType);
        VoteDb.AddCommandParameter(cmd, "FileName", fileName);
        VoteDb.AddCommandParameter(cmd, "Image", image);
        VoteDb.AddCommandParameter(cmd, "Comments", comments);
        VoteDb.AddCommandParameter(cmd, "ImageChangeTime", imageChangeTime);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime FROM UploadedImages";
        }
      }

      public static UploadedImagesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime FROM UploadedImages";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, UploadedImagesTable.ColumnSet.All);
      }

      public static UploadedImagesTable FillTable(DbCommand command)
      {
        return FillTable(command, UploadedImagesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static UploadedImagesTable FillTable(DbCommand command, UploadedImagesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          UploadedImagesTable table = new UploadedImagesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(UploadedImagesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, UploadedImagesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(UploadedImagesTable table, UploadedImagesTable.ColumnSet columnSet = UploadedImagesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string ExternalNameColumnName { get { return "ExternalName"; } }

      public static string ImageTypeColumnName { get { return "ImageType"; } }

      public static string FileNameColumnName { get { return "FileName"; } }

      public static string ImageColumnName { get { return "Image"; } }

      public static string CommentsColumnName { get { return "Comments"; } }

      public static string ImageChangeTimeColumnName { get { return "ImageChangeTime"; } }

      public static int ExternalNameMaxLength { get { return 255; } }

      public static int ImageTypeMaxLength { get { return 10; } }

      public static int FileNameMaxLength { get { return 255; } }

      public static int CommentsMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetExternalNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ExternalName FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetExternalName(Int32 id, String defaultValue = null)
      {
        return GetExternalNameById(id, defaultValue);
      }

      public static String GetImageTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ImageType FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetImageType(Int32 id, String defaultValue = null)
      {
        return GetImageTypeById(id, defaultValue);
      }

      public static String GetFileNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FileName FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFileName(Int32 id, String defaultValue = null)
      {
        return GetFileNameById(id, defaultValue);
      }

      public static Byte[] GetImageById(Int32 id, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Image FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetImage(Int32 id, Byte[] defaultValue = null)
      {
        return GetImageById(id, defaultValue);
      }

      public static String GetCommentsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Comments FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetComments(Int32 id, String defaultValue = null)
      {
        return GetCommentsById(id, defaultValue);
      }

      public static DateTime? GetImageChangeTimeById(Int32 id)
      {
        return _GetImageChangeTimeById(id, null);
      }

      public static DateTime? GetImageChangeTime(Int32 id)
      {
        return GetImageChangeTimeById(id);
      }

      public static DateTime GetImageChangeTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetImageChangeTimeById(id, defaultValue).Value;
      }

      public static DateTime GetImageChangeTime(Int32 id, DateTime defaultValue)
      {
        return GetImageChangeTimeById(id, defaultValue);
      }

      private static DateTime? _GetImageChangeTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ImageChangeTime FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM UploadedImages WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 id)
      {
        return GetColumnById(_column, id);
      }

      public static UploadedImagesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, UploadedImagesTable.ColumnSet.All);
      }

      public static UploadedImagesTable GetData(Int32 id, int commandTimeout = -1)
      {
        return GetDataById(id, commandTimeout);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, Int32 id)
      {
        return UpdateIdById(newValue, id);
      }

      public static int UpdateExternalNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET ExternalName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExternalName(String newValue, Int32 id)
      {
        return UpdateExternalNameById(newValue, id);
      }

      public static int UpdateImageTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET ImageType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImageType(String newValue, Int32 id)
      {
        return UpdateImageTypeById(newValue, id);
      }

      public static int UpdateFileNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET FileName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFileName(String newValue, Int32 id)
      {
        return UpdateFileNameById(newValue, id);
      }

      public static int UpdateImageById(Byte[] newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET Image=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImage(Byte[] newValue, Int32 id)
      {
        return UpdateImageById(newValue, id);
      }

      public static int UpdateCommentsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET Comments=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateComments(String newValue, Int32 id)
      {
        return UpdateCommentsById(newValue, id);
      }

      public static int UpdateImageChangeTimeById(DateTime? newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET ImageChangeTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImageChangeTime(DateTime? newValue, Int32 id)
      {
        return UpdateImageChangeTimeById(newValue, id);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE UploadedImages SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, Int32 id)
      {
         return UpdateColumnById(_column, newValue, id);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM UploadedImages WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ExternalNameExists(String externalName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByExternalName(String externalName)
      {
        return _GetIdByExternalName(externalName, null);
      }

      public static Int32 GetIdByExternalName(String externalName, Int32 defaultValue)
      {
        return _GetIdByExternalName(externalName, defaultValue).Value;
      }

      private static Int32? _GetIdByExternalName(String externalName, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetExternalNameByExternalName(String externalName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ExternalName FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetImageTypeByExternalName(String externalName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ImageType FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFileNameByExternalName(String externalName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FileName FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Byte[] GetImageByExternalName(String externalName, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Image FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static String GetCommentsByExternalName(String externalName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Comments FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetImageChangeTimeByExternalName(String externalName)
      {
        return _GetImageChangeTimeByExternalName(externalName, null);
      }

      public static DateTime GetImageChangeTimeByExternalName(String externalName, DateTime defaultValue)
      {
        return _GetImageChangeTimeByExternalName(externalName, defaultValue).Value;
      }

      private static DateTime? _GetImageChangeTimeByExternalName(String externalName, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ImageChangeTime FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByExternalName(Column _column, String externalName)
      {
        object result;
        string cmdText = "SELECT {0} FROM UploadedImages WHERE ExternalName=@ExternalName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UploadedImagesTable GetDataByExternalName(String externalName, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ExternalName,ImageType,FileName,Image,Comments,ImageChangeTime FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        return FillTable(cmd, UploadedImagesTable.ColumnSet.All);
      }

      public static int UpdateIdByExternalName(Int32 newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET Id=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExternalNameByExternalName(String newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET ExternalName=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImageTypeByExternalName(String newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET ImageType=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFileNameByExternalName(String newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET FileName=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImageByExternalName(Byte[] newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET Image=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCommentsByExternalName(String newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET Comments=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateImageChangeTimeByExternalName(DateTime? newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET ImageChangeTime=@newValue WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByExternalName(Column _column, object newValue, String externalName)
      {
        string cmdText = "UPDATE UploadedImages SET {0}=@newValue WHERE ExternalName=@ExternalName";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByExternalName(String externalName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM UploadedImages WHERE ExternalName=@ExternalName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ExternalName", externalName);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectKeysCommandText
      {
        get
        {
          return "SELECT Id,ExternalName FROM UploadedImages";
        }
      }

      public static UploadedImagesTable GetAllKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ExternalName FROM UploadedImages";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, UploadedImagesTable.ColumnSet.Keys);
      }

      public static void UpdateKeys(UploadedImagesTable table)
      {
        UpdateKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateKeys(UploadedImagesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, UploadedImagesTable.ColumnSet.Keys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(UploadedImagesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case UploadedImagesTable.ColumnSet.All:
            return SelectAllCommandText;

          case UploadedImagesTable.ColumnSet.Keys:
            return SelectKeysCommandText;

          default:
            return null;
        }
      }

      static UploadedImages()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.UploadedImages

    #region vote.VolunteersNotes

    public partial class VolunteersNotesRow : DataRow
    {
      internal VolunteersNotesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }
    }

    [Serializable]
    public partial class VolunteersNotesTable : TypedTableBase<VolunteersNotesRow>
    {
      public VolunteersNotesRow this[int index] { get { return (VolunteersNotesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VolunteersNotesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VolunteersNotesTable(); }

      new public VolunteersNotesRow NewRow() { return (VolunteersNotesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VolunteersNotesRow(rb); }

      protected override Type GetRowType()
      { return typeof(VolunteersNotesRow); }

      public void RemoveRow(VolunteersNotesRow row) { this.Rows.Remove(row); }

      public VolunteersNotesRow NewRow(Int32 id, String email, DateTime dateStamp, String notes)
      {
        VolunteersNotesRow row = NewRow();
        row.Id = id;
        row.Email = email;
        row.DateStamp = dateStamp;
        row.Notes = notes;
        return row;
      }

      public void AddRow(Int32 id, String email, DateTime dateStamp, String notes)
      {
        VolunteersNotesRow row = NewRow(id, email, dateStamp, notes);
        AddRow(row);
      }

      public VolunteersNotesRow NewRow(String email, DateTime dateStamp, String notes)
      {
        VolunteersNotesRow row = NewRow();
        row.Email = email;
        row.DateStamp = dateStamp;
        row.Notes = notes;
        return row;
      }

      public void AddRow(String email, DateTime dateStamp, String notes)
      {
        VolunteersNotesRow row = NewRow(email, dateStamp, notes);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VolunteersNotesTable() : this(ColumnSet.All) { }

      public VolunteersNotesTable(ColumnSet columnSet)
      {
        this.TableName = "VolunteersNotes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VolunteersNotesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VolunteersNotes
    {
      public const string TableName = "VolunteersNotes";

      public enum Column { Id, Email, DateStamp, Notes }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Email, "Email" },
        { Column.DateStamp, "DateStamp" },
        { Column.Notes, "Notes" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersNotes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String email, DateTime dateStamp, String notes, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VolunteersNotes (Id,Email,DateStamp,Notes) VALUES (@Id,@Email,@DateStamp,@Notes)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String email, DateTime dateStamp, String notes, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VolunteersNotes (Email,DateStamp,Notes) VALUES (@Email,@DateStamp,@Notes)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "Notes", notes);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Email,DateStamp,Notes FROM VolunteersNotes";
        }
      }

      public static VolunteersNotesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,DateStamp,Notes FROM VolunteersNotes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VolunteersNotesTable.ColumnSet.All);
      }

      public static VolunteersNotesTable FillTable(DbCommand command)
      {
        return FillTable(command, VolunteersNotesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VolunteersNotesTable FillTable(DbCommand command, VolunteersNotesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VolunteersNotesTable table = new VolunteersNotesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(VolunteersNotesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, VolunteersNotesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(VolunteersNotesTable table, VolunteersNotesTable.ColumnSet columnSet = VolunteersNotesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetNotesById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM VolunteersNotes WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static VolunteersNotesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,DateStamp,Notes FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, VolunteersNotesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE VolunteersNotes SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE VolunteersNotes SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE VolunteersNotes SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE VolunteersNotes SET Notes=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE VolunteersNotes SET {0}=@newValue WHERE Id=@Id";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VolunteersNotes WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersNotes WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM VolunteersNotes WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String email)
      {
        return GetColumnByEmail(_column, email);
      }

      public static VolunteersNotesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,DateStamp,Notes FROM VolunteersNotes WHERE Email=@Email ORDER BY DateStamp DESC,id DESC";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, VolunteersNotesTable.ColumnSet.All);
      }

      public static VolunteersNotesTable GetData(String email, int commandTimeout = -1)
      {
        return GetDataByEmail(email, commandTimeout);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE VolunteersNotes SET Id=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateId(Int32 newValue, String email)
      {
        return UpdateIdByEmail(newValue, email);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE VolunteersNotes SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String email)
      {
        return UpdateEmailByEmail(newValue, email);
      }

      public static int UpdateDateStampByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE VolunteersNotes SET DateStamp=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStamp(DateTime newValue, String email)
      {
        return UpdateDateStampByEmail(newValue, email);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE VolunteersNotes SET Notes=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String email)
      {
        return UpdateNotesByEmail(newValue, email);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE VolunteersNotes SET {0}=@newValue WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String email)
      {
         return UpdateColumnByEmail(_column, newValue, email);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VolunteersNotes WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VolunteersNotesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VolunteersNotesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VolunteersNotes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VolunteersNotes

    #region vote.VolunteersView

    public partial class VolunteersViewRow : DataRow
    {
      internal VolunteersViewRow(DataRowBuilder rb) : base(rb) {}

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String PartyName
      {
        get { return this["PartyName"] as String; }
        set { if (value == null) this["PartyName"] = DBNull.Value; else this["PartyName"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String StateName
      {
        get { return this["StateName"] as String; }
        set { if (value == null) this["StateName"] = DBNull.Value; else this["StateName"] = value; }
      }
    }

    [Serializable]
    public partial class VolunteersViewTable : TypedTableBase<VolunteersViewRow>
    {
      public VolunteersViewRow this[int index] { get { return (VolunteersViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VolunteersViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VolunteersViewTable(); }

      new public VolunteersViewRow NewRow() { return (VolunteersViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VolunteersViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(VolunteersViewRow); }

      public void RemoveRow(VolunteersViewRow row) { this.Rows.Remove(row); }

      public VolunteersViewRow NewRow(String email, String password, String partyKey, String firstName, String lastName, String phone, String partyName, DateTime dateStamp, String stateCode, String stateName)
      {
        VolunteersViewRow row = NewRow();
        row.Email = email;
        row.Password = password;
        row.PartyKey = partyKey;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Phone = phone;
        row.PartyName = partyName;
        row.DateStamp = dateStamp;
        row.StateCode = stateCode;
        row.StateName = stateName;
        return row;
      }

      public void AddRow(String email, String password, String partyKey, String firstName, String lastName, String phone, String partyName, DateTime dateStamp, String stateCode, String stateName)
      {
        VolunteersViewRow row = NewRow(email, password, partyKey, firstName, lastName, phone, partyName, dateStamp, stateCode, stateName);
        AddRow(row);
      }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn PartyNameColumn { get { return this.Columns["PartyName"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn StateNameColumn { get { return this.Columns["StateName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Password", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("StateName", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
      }

      public VolunteersViewTable() : this(ColumnSet.All) { }

      public VolunteersViewTable(ColumnSet columnSet)
      {
        this.TableName = "VolunteersView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VolunteersViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VolunteersView
    {
      public const string TableName = "VolunteersView";

      public enum Column { Email, Password, PartyKey, FirstName, LastName, Phone, PartyName, DateStamp, StateCode, StateName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Email, "Email" },
        { Column.Password, "Password" },
        { Column.PartyKey, "PartyKey" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Phone, "Phone" },
        { Column.PartyName, "PartyName" },
        { Column.DateStamp, "DateStamp" },
        { Column.StateCode, "StateCode" },
        { Column.StateName, "StateName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,DateStamp,StateCode,StateName FROM VolunteersView";
        }
      }

      public static VolunteersViewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,DateStamp,StateCode,StateName FROM VolunteersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VolunteersViewTable.ColumnSet.All);
      }

      public static VolunteersViewTable FillTable(DbCommand command)
      {
        return FillTable(command, VolunteersViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VolunteersViewTable FillTable(DbCommand command, VolunteersViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VolunteersViewTable table = new VolunteersViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string PartyNameColumnName { get { return "PartyName"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string StateNameColumnName { get { return "StateName"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PasswordMaxLength { get { return 50; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int FirstNameMaxLength { get { return int.MaxValue; } }

      public static int LastNameMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int PartyNameMaxLength { get { return 200; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int StateNameMaxLength { get { return 100; } }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String email, String defaultValue = null)
      {
        return GetEmailByEmail(email, defaultValue);
      }

      public static String GetPasswordByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Password FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPassword(String email, String defaultValue = null)
      {
        return GetPasswordByEmail(email, defaultValue);
      }

      public static String GetPartyKeyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String email, String defaultValue = null)
      {
        return GetPartyKeyByEmail(email, defaultValue);
      }

      public static String GetFirstNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FirstName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstName(String email, String defaultValue = null)
      {
        return GetFirstNameByEmail(email, defaultValue);
      }

      public static String GetLastNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastName(String email, String defaultValue = null)
      {
        return GetLastNameByEmail(email, defaultValue);
      }

      public static String GetPhoneByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String email, String defaultValue = null)
      {
        return GetPhoneByEmail(email, defaultValue);
      }

      public static String GetPartyNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyName(String email, String defaultValue = null)
      {
        return GetPartyNameByEmail(email, defaultValue);
      }

      public static DateTime? GetDateStampByEmail(String email)
      {
        return _GetDateStampByEmail(email, null);
      }

      public static DateTime? GetDateStamp(String email)
      {
        return GetDateStampByEmail(email);
      }

      public static DateTime GetDateStampByEmail(String email, DateTime defaultValue)
      {
        return _GetDateStampByEmail(email, defaultValue).Value;
      }

      public static DateTime GetDateStamp(String email, DateTime defaultValue)
      {
        return GetDateStampByEmail(email, defaultValue);
      }

      private static DateTime? _GetDateStampByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetStateCodeByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String email, String defaultValue = null)
      {
        return GetStateCodeByEmail(email, defaultValue);
      }

      public static String GetStateNameByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateName(String email, String defaultValue = null)
      {
        return GetStateNameByEmail(email, defaultValue);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM VolunteersView WHERE Email=@Email";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String email)
      {
        return GetColumnByEmail(_column, email);
      }

      public static VolunteersViewTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,DateStamp,StateCode,StateName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, VolunteersViewTable.ColumnSet.All);
      }

      public static VolunteersViewTable GetData(String email, int commandTimeout = -1)
      {
        return GetDataByEmail(email, commandTimeout);
      }

      public static string GetSelectCommandText(VolunteersViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VolunteersViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VolunteersView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VolunteersView

    #region vote.WordsCommon

    public partial class WordsCommonRow : DataRow
    {
      internal WordsCommonRow(DataRowBuilder rb) : base(rb) {}

      public String Word
      {
        get { return this["Word"] as String; }
        set { if (value == null) this["Word"] = DBNull.Value; else this["Word"] = value; }
      }
    }

    [Serializable]
    public partial class WordsCommonTable : TypedTableBase<WordsCommonRow>
    {
      public WordsCommonRow this[int index] { get { return (WordsCommonRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsCommonRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsCommonTable(); }

      new public WordsCommonRow NewRow() { return (WordsCommonRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsCommonRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsCommonRow); }

      public void RemoveRow(WordsCommonRow row) { this.Rows.Remove(row); }

      public WordsCommonRow NewRow(String word)
      {
        WordsCommonRow row = NewRow();
        row.Word = word;
        return row;
      }

      public void AddRow(String word)
      {
        WordsCommonRow row = NewRow(word);
        AddRow(row);
      }

      public DataColumn WordColumn { get { return this.Columns["Word"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Word", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsCommonTable() : this(ColumnSet.All) { }

      public WordsCommonTable(ColumnSet columnSet)
      {
        this.TableName = "WordsCommon";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsCommonTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsCommon
    {
      public const string TableName = "WordsCommon";

      public enum Column { Word }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Word, "Word" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsCommon";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Word FROM WordsCommon";
        }
      }

      public static WordsCommonTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsCommon";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsCommonTable.ColumnSet.All);
      }

      public static WordsCommonTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsCommonTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsCommonTable FillTable(DbCommand command, WordsCommonTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsCommonTable table = new WordsCommonTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string WordColumnName { get { return "Word"; } }

      public static int WordMaxLength { get { return 40; } }

      public static bool WordExists(String word)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsCommon WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByWord(Column _column, String word)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsCommon WHERE Word=@Word";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsCommonTable GetDataByWord(String word, int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsCommon WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        return FillTable(cmd, WordsCommonTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsCommonTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsCommonTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsCommon()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsCommon

    #region vote.WordsFollowers

    public partial class WordsFollowersRow : DataRow
    {
      internal WordsFollowersRow(DataRowBuilder rb) : base(rb) {}

      public String Follower
      {
        get { return this["Follower"] as String; }
        set { if (value == null) this["Follower"] = DBNull.Value; else this["Follower"] = value; }
      }
    }

    [Serializable]
    public partial class WordsFollowersTable : TypedTableBase<WordsFollowersRow>
    {
      public WordsFollowersRow this[int index] { get { return (WordsFollowersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsFollowersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsFollowersTable(); }

      new public WordsFollowersRow NewRow() { return (WordsFollowersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsFollowersRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsFollowersRow); }

      public void RemoveRow(WordsFollowersRow row) { this.Rows.Remove(row); }

      public WordsFollowersRow NewRow(String follower)
      {
        WordsFollowersRow row = NewRow();
        row.Follower = follower;
        return row;
      }

      public void AddRow(String follower)
      {
        WordsFollowersRow row = NewRow(follower);
        AddRow(row);
      }

      public DataColumn FollowerColumn { get { return this.Columns["Follower"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Follower", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsFollowersTable() : this(ColumnSet.All) { }

      public WordsFollowersTable(ColumnSet columnSet)
      {
        this.TableName = "WordsFollowers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsFollowersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsFollowers
    {
      public const string TableName = "WordsFollowers";

      public enum Column { Follower }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Follower, "Follower" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsFollowers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Follower FROM WordsFollowers";
        }
      }

      public static WordsFollowersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Follower FROM WordsFollowers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsFollowersTable.ColumnSet.All);
      }

      public static WordsFollowersTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsFollowersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsFollowersTable FillTable(DbCommand command, WordsFollowersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsFollowersTable table = new WordsFollowersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string FollowerColumnName { get { return "Follower"; } }

      public static int FollowerMaxLength { get { return 60; } }

      public static bool FollowerExists(String follower)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsFollowers WHERE Follower=@Follower";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByFollower(Column _column, String follower)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsFollowers WHERE Follower=@Follower";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsFollowersTable GetDataByFollower(String follower, int commandTimeout = -1)
      {
        string cmdText = "SELECT Follower FROM WordsFollowers WHERE Follower=@Follower";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        return FillTable(cmd, WordsFollowersTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsFollowersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsFollowersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsFollowers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsFollowers

    #region vote.WordsLeaders

    public partial class WordsLeadersRow : DataRow
    {
      internal WordsLeadersRow(DataRowBuilder rb) : base(rb) {}

      public String Leader
      {
        get { return this["Leader"] as String; }
        set { if (value == null) this["Leader"] = DBNull.Value; else this["Leader"] = value; }
      }
    }

    [Serializable]
    public partial class WordsLeadersTable : TypedTableBase<WordsLeadersRow>
    {
      public WordsLeadersRow this[int index] { get { return (WordsLeadersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsLeadersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsLeadersTable(); }

      new public WordsLeadersRow NewRow() { return (WordsLeadersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsLeadersRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsLeadersRow); }

      public void RemoveRow(WordsLeadersRow row) { this.Rows.Remove(row); }

      public WordsLeadersRow NewRow(String leader)
      {
        WordsLeadersRow row = NewRow();
        row.Leader = leader;
        return row;
      }

      public void AddRow(String leader)
      {
        WordsLeadersRow row = NewRow(leader);
        AddRow(row);
      }

      public DataColumn LeaderColumn { get { return this.Columns["Leader"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Leader", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsLeadersTable() : this(ColumnSet.All) { }

      public WordsLeadersTable(ColumnSet columnSet)
      {
        this.TableName = "WordsLeaders";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsLeadersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsLeaders
    {
      public const string TableName = "WordsLeaders";

      public enum Column { Leader }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Leader, "Leader" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsLeaders";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Leader FROM WordsLeaders";
        }
      }

      public static WordsLeadersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Leader FROM WordsLeaders";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsLeadersTable.ColumnSet.All);
      }

      public static WordsLeadersTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsLeadersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsLeadersTable FillTable(DbCommand command, WordsLeadersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsLeadersTable table = new WordsLeadersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string LeaderColumnName { get { return "Leader"; } }

      public static int LeaderMaxLength { get { return 60; } }

      public static bool LeaderExists(String leader)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsLeaders WHERE Leader=@Leader";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByLeader(Column _column, String leader)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsLeaders WHERE Leader=@Leader";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsLeadersTable GetDataByLeader(String leader, int commandTimeout = -1)
      {
        string cmdText = "SELECT Leader FROM WordsLeaders WHERE Leader=@Leader";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        return FillTable(cmd, WordsLeadersTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsLeadersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsLeadersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsLeaders()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsLeaders

    #region vote.WordsPhrases

    public partial class WordsPhrasesRow : DataRow
    {
      internal WordsPhrasesRow(DataRowBuilder rb) : base(rb) {}

      public String FirstWord
      {
        get { return this["FirstWord"] as String; }
        set { if (value == null) this["FirstWord"] = DBNull.Value; else this["FirstWord"] = value; }
      }

      public String RestOfPhrase
      {
        get { return this["RestOfPhrase"] as String; }
        set { if (value == null) this["RestOfPhrase"] = DBNull.Value; else this["RestOfPhrase"] = value; }
      }
    }

    [Serializable]
    public partial class WordsPhrasesTable : TypedTableBase<WordsPhrasesRow>
    {
      public WordsPhrasesRow this[int index] { get { return (WordsPhrasesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsPhrasesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsPhrasesTable(); }

      new public WordsPhrasesRow NewRow() { return (WordsPhrasesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsPhrasesRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsPhrasesRow); }

      public void RemoveRow(WordsPhrasesRow row) { this.Rows.Remove(row); }

      public WordsPhrasesRow NewRow(String firstWord, String restOfPhrase)
      {
        WordsPhrasesRow row = NewRow();
        row.FirstWord = firstWord;
        row.RestOfPhrase = restOfPhrase;
        return row;
      }

      public void AddRow(String firstWord, String restOfPhrase)
      {
        WordsPhrasesRow row = NewRow(firstWord, restOfPhrase);
        AddRow(row);
      }

      public DataColumn FirstWordColumn { get { return this.Columns["FirstWord"]; } }

      public DataColumn RestOfPhraseColumn { get { return this.Columns["RestOfPhrase"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("FirstWord", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RestOfPhrase", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsPhrasesTable() : this(ColumnSet.All) { }

      public WordsPhrasesTable(ColumnSet columnSet)
      {
        this.TableName = "WordsPhrases";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsPhrasesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsPhrases
    {
      public const string TableName = "WordsPhrases";

      public enum Column { FirstWord, RestOfPhrase }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.FirstWord, "FirstWord" },
        { Column.RestOfPhrase, "RestOfPhrase" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsPhrases";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT FirstWord,RestOfPhrase FROM WordsPhrases";
        }
      }

      public static WordsPhrasesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT FirstWord,RestOfPhrase FROM WordsPhrases";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsPhrasesTable.ColumnSet.All);
      }

      public static WordsPhrasesTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsPhrasesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsPhrasesTable FillTable(DbCommand command, WordsPhrasesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsPhrasesTable table = new WordsPhrasesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string FirstWordColumnName { get { return "FirstWord"; } }

      public static string RestOfPhraseColumnName { get { return "RestOfPhrase"; } }

      public static int FirstWordMaxLength { get { return 40; } }

      public static int RestOfPhraseMaxLength { get { return 80; } }

      public static bool FirstWordRestOfPhraseExists(String firstWord, String restOfPhrase)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByFirstWordRestOfPhrase(Column _column, String firstWord, String restOfPhrase)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsPhrasesTable GetDataByFirstWordRestOfPhrase(String firstWord, String restOfPhrase, int commandTimeout = -1)
      {
        string cmdText = "SELECT FirstWord,RestOfPhrase FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        return FillTable(cmd, WordsPhrasesTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsPhrasesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsPhrasesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsPhrases()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsPhrases

    #region vote.WordsSpecial

    public partial class WordsSpecialRow : DataRow
    {
      internal WordsSpecialRow(DataRowBuilder rb) : base(rb) {}

      public String Word
      {
        get { return this["Word"] as String; }
        set { if (value == null) this["Word"] = DBNull.Value; else this["Word"] = value; }
      }
    }

    [Serializable]
    public partial class WordsSpecialTable : TypedTableBase<WordsSpecialRow>
    {
      public WordsSpecialRow this[int index] { get { return (WordsSpecialRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsSpecialRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsSpecialTable(); }

      new public WordsSpecialRow NewRow() { return (WordsSpecialRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsSpecialRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsSpecialRow); }

      public void RemoveRow(WordsSpecialRow row) { this.Rows.Remove(row); }

      public WordsSpecialRow NewRow(String word)
      {
        WordsSpecialRow row = NewRow();
        row.Word = word;
        return row;
      }

      public void AddRow(String word)
      {
        WordsSpecialRow row = NewRow(word);
        AddRow(row);
      }

      public DataColumn WordColumn { get { return this.Columns["Word"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Word", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsSpecialTable() : this(ColumnSet.All) { }

      public WordsSpecialTable(ColumnSet columnSet)
      {
        this.TableName = "WordsSpecial";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsSpecialTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsSpecial
    {
      public const string TableName = "WordsSpecial";

      public enum Column { Word }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Word, "Word" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsSpecial";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Word FROM WordsSpecial";
        }
      }

      public static WordsSpecialTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsSpecial";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsSpecialTable.ColumnSet.All);
      }

      public static WordsSpecialTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsSpecialTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsSpecialTable FillTable(DbCommand command, WordsSpecialTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsSpecialTable table = new WordsSpecialTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string WordColumnName { get { return "Word"; } }

      public static int WordMaxLength { get { return 40; } }

      public static bool WordExists(String word)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsSpecial WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByWord(Column _column, String word)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsSpecial WHERE Word=@Word";
        cmdText = Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsSpecialTable GetDataByWord(String word, int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsSpecial WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        return FillTable(cmd, WordsSpecialTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsSpecialTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsSpecialTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsSpecial()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsSpecial

    #region vote.repair_temp

    public partial class repair_tempRow : DataRow
    {
      internal repair_tempRow(DataRowBuilder rb) : base(rb) {}

      public String StateFp
      {
        get { return this["StateFp"] as String; }
        set { if (value == null) this["StateFp"] = DBNull.Value; else this["StateFp"] = value; }
      }

      public String CountyFp
      {
        get { return this["CountyFp"] as String; }
        set { if (value == null) this["CountyFp"] = DBNull.Value; else this["CountyFp"] = value; }
      }

      public String TigerCode
      {
        get { return this["TigerCode"] as String; }
        set { if (value == null) this["TigerCode"] = DBNull.Value; else this["TigerCode"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }
    }

    [Serializable]
    public partial class repair_tempTable : TypedTableBase<repair_tempRow>
    {
      public repair_tempRow this[int index] { get { return (repair_tempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(repair_tempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new repair_tempTable(); }

      new public repair_tempRow NewRow() { return (repair_tempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new repair_tempRow(rb); }

      protected override Type GetRowType()
      { return typeof(repair_tempRow); }

      public void RemoveRow(repair_tempRow row) { this.Rows.Remove(row); }

      public repair_tempRow NewRow(String stateFp, String countyFp, String tigerCode, String name)
      {
        repair_tempRow row = NewRow();
        row.StateFp = stateFp;
        row.CountyFp = countyFp;
        row.TigerCode = tigerCode;
        row.Name = name;
        return row;
      }

      public void AddRow(String stateFp, String countyFp, String tigerCode, String name)
      {
        repair_tempRow row = NewRow(stateFp, countyFp, tigerCode, name);
        AddRow(row);
      }

      public DataColumn StateFpColumn { get { return this.Columns["StateFp"]; } }

      public DataColumn CountyFpColumn { get { return this.Columns["CountyFp"]; } }

      public DataColumn TigerCodeColumn { get { return this.Columns["TigerCode"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateFp", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyFp", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TigerCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public repair_tempTable() : this(ColumnSet.All) { }

      public repair_tempTable(ColumnSet columnSet)
      {
        this.TableName = "repair_temp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected repair_tempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class repair_temp
    {
      public const string TableName = "repair_temp";

      public enum Column { StateFp, CountyFp, TigerCode, Name }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateFp, "StateFp" },
        { Column.CountyFp, "CountyFp" },
        { Column.TigerCode, "TigerCode" },
        { Column.Name, "Name" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM repair_temp";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateFp, String countyFp, String tigerCode, String name, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO repair_temp (StateFp,CountyFp,TigerCode,Name) VALUES (@StateFp,@CountyFp,@TigerCode,@Name)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateFp", stateFp);
        VoteDb.AddCommandParameter(cmd, "CountyFp", countyFp);
        VoteDb.AddCommandParameter(cmd, "TigerCode", tigerCode);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateFp,CountyFp,TigerCode,Name FROM repair_temp";
        }
      }

      public static repair_tempTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateFp,CountyFp,TigerCode,Name FROM repair_temp";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, repair_tempTable.ColumnSet.All);
      }

      public static repair_tempTable FillTable(DbCommand command)
      {
        return FillTable(command, repair_tempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static repair_tempTable FillTable(DbCommand command, repair_tempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          repair_tempTable table = new repair_tempTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(repair_tempTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, repair_tempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(repair_tempTable table, repair_tempTable.ColumnSet columnSet = repair_tempTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string StateFpColumnName { get { return "StateFp"; } }

      public static string CountyFpColumnName { get { return "CountyFp"; } }

      public static string TigerCodeColumnName { get { return "TigerCode"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static int StateFpMaxLength { get { return 2; } }

      public static int CountyFpMaxLength { get { return 5; } }

      public static int TigerCodeMaxLength { get { return 5; } }

      public static int NameMaxLength { get { return 100; } }

      public static string GetSelectCommandText(repair_tempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case repair_tempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static repair_temp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.repair_temp
  }
}
