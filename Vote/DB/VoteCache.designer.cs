//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteCache
  {
    #region votecache Database

    public static partial class VoteCacheDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=votecache";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteCacheDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteCache.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVoteCache.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout = -1)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion votecache Database

    #region votecache.CacheControl

    public partial class CacheControlRow : DataRow
    {
      internal CacheControlRow(DataRowBuilder rb) : base(rb) {}

      public String PrimaryKey
      {
        get { return this["PrimaryKey"] as String; }
        set { if (value == null) this["PrimaryKey"] = DBNull.Value; else this["PrimaryKey"] = value; }
      }

      public Int32 Expiration
      {
        get { return (Int32) this["Expiration"]; }
        set { this["Expiration"] = value; }
      }

      public Int32 FuzzFactor
      {
        get { return (Int32) this["FuzzFactor"]; }
        set { this["FuzzFactor"] = value; }
      }

      public DateTime WhenCleared
      {
        get { return (DateTime) this["WhenCleared"]; }
        set { this["WhenCleared"] = value; }
      }
    }

    [Serializable]
    public partial class CacheControlTable : TypedTableBase<CacheControlRow>
    {
      public CacheControlRow this[int index] { get { return (CacheControlRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CacheControlRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CacheControlTable(); }

      new public CacheControlRow NewRow() { return (CacheControlRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CacheControlRow(rb); }

      protected override Type GetRowType()
      { return typeof(CacheControlRow); }

      public void RemoveRow(CacheControlRow row) { this.Rows.Remove(row); }

      public CacheControlRow NewRow(String primaryKey, Int32 expiration, Int32 fuzzFactor, DateTime whenCleared)
      {
        CacheControlRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.Expiration = expiration;
        row.FuzzFactor = fuzzFactor;
        row.WhenCleared = whenCleared;
        return row;
      }

      public void AddRow(String primaryKey, Int32 expiration, Int32 fuzzFactor, DateTime whenCleared)
      {
        CacheControlRow row = NewRow(primaryKey, expiration, fuzzFactor, whenCleared);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn ExpirationColumn { get { return this.Columns["Expiration"]; } }

      public DataColumn FuzzFactorColumn { get { return this.Columns["FuzzFactor"]; } }

      public DataColumn WhenClearedColumn { get { return this.Columns["WhenCleared"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(String));
        _column.MaxLength = 16;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Expiration", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FuzzFactor", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WhenCleared", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CacheControlTable() : this(ColumnSet.All) { }

      public CacheControlTable(ColumnSet columnSet)
      {
        this.TableName = "CacheControl";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected CacheControlTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class CacheControl
    {
      public const string TableName = "CacheControl";

      public enum Column { PrimaryKey, Expiration, FuzzFactor, WhenCleared }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.Expiration, "Expiration" },
        { Column.FuzzFactor, "FuzzFactor" },
        { Column.WhenCleared, "WhenCleared" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String primaryKey, Int32 expiration, Int32 fuzzFactor, DateTime whenCleared, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CacheControl (PrimaryKey,Expiration,FuzzFactor,WhenCleared) VALUES (@PrimaryKey,@Expiration,@FuzzFactor,@WhenCleared)";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "Expiration", expiration);
        VoteCacheDb.AddCommandParameter(cmd, "FuzzFactor", fuzzFactor);
        VoteCacheDb.AddCommandParameter(cmd, "WhenCleared", whenCleared);
        VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,Expiration,FuzzFactor,WhenCleared FROM CacheControl";
        }
      }

      public static CacheControlTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,Expiration,FuzzFactor,WhenCleared FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CacheControlTable.ColumnSet.All);
      }

      public static CacheControlTable FillTable(DbCommand command)
      {
        return FillTable(command, CacheControlTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CacheControlTable FillTable(DbCommand command, CacheControlTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          command.Connection = cn;
          CacheControlTable table = new CacheControlTable(columnSet);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(CacheControlTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, CacheControlTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(CacheControlTable table, CacheControlTable.ColumnSet columnSet = CacheControlTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteCacheDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteCacheDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string ExpirationColumnName { get { return "Expiration"; } }

      public static string FuzzFactorColumnName { get { return "FuzzFactor"; } }

      public static string WhenClearedColumnName { get { return "WhenCleared"; } }

      public static int PrimaryKeyMaxLength { get { return 16; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPrimaryKey(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PrimaryKey FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetExpiration()
      {
        return _GetExpiration(null);
      }

      public static Int32 GetExpiration(Int32 defaultValue)
      {
        return _GetExpiration(defaultValue).Value;
      }

      private static Int32? _GetExpiration(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Expiration FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetFuzzFactor()
      {
        return _GetFuzzFactor(null);
      }

      public static Int32 GetFuzzFactor(Int32 defaultValue)
      {
        return _GetFuzzFactor(defaultValue).Value;
      }

      private static Int32? _GetFuzzFactor(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT FuzzFactor FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetWhenCleared()
      {
        return _GetWhenCleared(null);
      }

      public static DateTime GetWhenCleared(DateTime defaultValue)
      {
        return _GetWhenCleared(defaultValue).Value;
      }

      private static DateTime? _GetWhenCleared(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT WhenCleared FROM CacheControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM CacheControl";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdatePrimaryKey(String newValue)
      {
        string cmdText = "UPDATE CacheControl SET PrimaryKey=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExpiration(Int32 newValue)
      {
        string cmdText = "UPDATE CacheControl SET Expiration=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFuzzFactor(Int32 newValue)
      {
        string cmdText = "UPDATE CacheControl SET FuzzFactor=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWhenCleared(DateTime newValue)
      {
        string cmdText = "UPDATE CacheControl SET WhenCleared=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE CacheControl SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(CacheControlTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CacheControlTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static CacheControl()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votecache.CacheControl

    #region votecache.CacheInvalidation

    public partial class CacheInvalidationRow : DataRow
    {
      internal CacheInvalidationRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String TransactionType
      {
        get { return this["TransactionType"] as String; }
        set { if (value == null) this["TransactionType"] = DBNull.Value; else this["TransactionType"] = value; }
      }

      public String CacheKey
      {
        get { return this["CacheKey"] as String; }
        set { if (value == null) this["CacheKey"] = DBNull.Value; else this["CacheKey"] = value; }
      }

      public DateTime CacheTimeStamp
      {
        get { return (DateTime) this["CacheTimeStamp"]; }
        set { this["CacheTimeStamp"] = value; }
      }

      public Boolean IsCommonCacheInvalidated
      {
        get { return (Boolean) this["IsCommonCacheInvalidated"]; }
        set { this["IsCommonCacheInvalidated"] = value; }
      }
    }

    [Serializable]
    public partial class CacheInvalidationTable : TypedTableBase<CacheInvalidationRow>
    {
      public CacheInvalidationRow this[int index] { get { return (CacheInvalidationRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CacheInvalidationRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CacheInvalidationTable(); }

      new public CacheInvalidationRow NewRow() { return (CacheInvalidationRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CacheInvalidationRow(rb); }

      protected override Type GetRowType()
      { return typeof(CacheInvalidationRow); }

      public void RemoveRow(CacheInvalidationRow row) { this.Rows.Remove(row); }

      public CacheInvalidationRow NewRow(Int32 id, String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated)
      {
        CacheInvalidationRow row = NewRow();
        row.Id = id;
        row.TransactionType = transactionType;
        row.CacheKey = cacheKey;
        row.CacheTimeStamp = cacheTimeStamp;
        row.IsCommonCacheInvalidated = isCommonCacheInvalidated;
        return row;
      }

      public void AddRow(Int32 id, String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated)
      {
        CacheInvalidationRow row = NewRow(id, transactionType, cacheKey, cacheTimeStamp, isCommonCacheInvalidated);
        AddRow(row);
      }

      public CacheInvalidationRow NewRow(String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated)
      {
        CacheInvalidationRow row = NewRow();
        row.TransactionType = transactionType;
        row.CacheKey = cacheKey;
        row.CacheTimeStamp = cacheTimeStamp;
        row.IsCommonCacheInvalidated = isCommonCacheInvalidated;
        return row;
      }

      public void AddRow(String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated)
      {
        CacheInvalidationRow row = NewRow(transactionType, cacheKey, cacheTimeStamp, isCommonCacheInvalidated);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn TransactionTypeColumn { get { return this.Columns["TransactionType"]; } }

      public DataColumn CacheKeyColumn { get { return this.Columns["CacheKey"]; } }

      public DataColumn CacheTimeStampColumn { get { return this.Columns["CacheTimeStamp"]; } }

      public DataColumn IsCommonCacheInvalidatedColumn { get { return this.Columns["IsCommonCacheInvalidated"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("TransactionType", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheKey", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheTimeStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCommonCacheInvalidated", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CacheInvalidationTable() : this(ColumnSet.All) { }

      public CacheInvalidationTable(ColumnSet columnSet)
      {
        this.TableName = "CacheInvalidation";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected CacheInvalidationTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class CacheInvalidation
    {
      public const string TableName = "CacheInvalidation";

      public enum Column { Id, TransactionType, CacheKey, CacheTimeStamp, IsCommonCacheInvalidated }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.TransactionType, "TransactionType" },
        { Column.CacheKey, "CacheKey" },
        { Column.CacheTimeStamp, "CacheTimeStamp" },
        { Column.IsCommonCacheInvalidated, "IsCommonCacheInvalidated" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CacheInvalidation";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CacheInvalidation (Id,TransactionType,CacheKey,CacheTimeStamp,IsCommonCacheInvalidated) VALUES (@Id,@TransactionType,@CacheKey,@CacheTimeStamp,@IsCommonCacheInvalidated)";
        switch (VoteCacheDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "TransactionType", transactionType);
        VoteCacheDb.AddCommandParameter(cmd, "CacheKey", cacheKey);
        VoteCacheDb.AddCommandParameter(cmd, "CacheTimeStamp", cacheTimeStamp);
        VoteCacheDb.AddCommandParameter(cmd, "IsCommonCacheInvalidated", isCommonCacheInvalidated);
        return Convert.ToInt32(VoteCacheDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String transactionType, String cacheKey, DateTime cacheTimeStamp, Boolean isCommonCacheInvalidated, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CacheInvalidation (TransactionType,CacheKey,CacheTimeStamp,IsCommonCacheInvalidated) VALUES (@TransactionType,@CacheKey,@CacheTimeStamp,@IsCommonCacheInvalidated)";
        switch (VoteCacheDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "TransactionType", transactionType);
        VoteCacheDb.AddCommandParameter(cmd, "CacheKey", cacheKey);
        VoteCacheDb.AddCommandParameter(cmd, "CacheTimeStamp", cacheTimeStamp);
        VoteCacheDb.AddCommandParameter(cmd, "IsCommonCacheInvalidated", isCommonCacheInvalidated);
        return Convert.ToInt32(VoteCacheDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,TransactionType,CacheKey,CacheTimeStamp,IsCommonCacheInvalidated FROM CacheInvalidation";
        }
      }

      public static CacheInvalidationTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,TransactionType,CacheKey,CacheTimeStamp,IsCommonCacheInvalidated FROM CacheInvalidation";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CacheInvalidationTable.ColumnSet.All);
      }

      public static CacheInvalidationTable FillTable(DbCommand command)
      {
        return FillTable(command, CacheInvalidationTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CacheInvalidationTable FillTable(DbCommand command, CacheInvalidationTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          command.Connection = cn;
          CacheInvalidationTable table = new CacheInvalidationTable(columnSet);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(CacheInvalidationTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, CacheInvalidationTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(CacheInvalidationTable table, CacheInvalidationTable.ColumnSet columnSet = CacheInvalidationTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteCacheDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteCacheDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string TransactionTypeColumnName { get { return "TransactionType"; } }

      public static string CacheKeyColumnName { get { return "CacheKey"; } }

      public static string CacheTimeStampColumnName { get { return "CacheTimeStamp"; } }

      public static string IsCommonCacheInvalidatedColumnName { get { return "IsCommonCacheInvalidated"; } }

      public static int TransactionTypeMaxLength { get { return 45; } }

      public static int CacheKeyMaxLength { get { return 45; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetTransactionTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TransactionType FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCacheKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CacheKey FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetCacheTimeStampById(Int32 id)
      {
        return _GetCacheTimeStampById(id, null);
      }

      public static DateTime GetCacheTimeStampById(Int32 id, DateTime defaultValue)
      {
        return _GetCacheTimeStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetCacheTimeStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheTimeStamp FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsCommonCacheInvalidatedById(Int32 id)
      {
        return _GetIsCommonCacheInvalidatedById(id, null);
      }

      public static Boolean GetIsCommonCacheInvalidatedById(Int32 id, Boolean defaultValue)
      {
        return _GetIsCommonCacheInvalidatedById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsCommonCacheInvalidatedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCommonCacheInvalidated FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM CacheInvalidation WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CacheInvalidationTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,TransactionType,CacheKey,CacheTimeStamp,IsCommonCacheInvalidated FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, CacheInvalidationTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransactionTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET TransactionType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET CacheKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheTimeStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET CacheTimeStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCommonCacheInvalidatedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET IsCommonCacheInvalidated=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE CacheInvalidation SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CacheInvalidation WHERE Id=@Id";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(CacheInvalidationTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CacheInvalidationTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static CacheInvalidation()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votecache.CacheInvalidation

    #region votecache.CachePages

    public partial class CachePagesRow : DataRow
    {
      internal CachePagesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public String PageType
      {
        get { return this["PageType"] as String; }
        set { if (value == null) this["PageType"] = DBNull.Value; else this["PageType"] = value; }
      }

      public String PageKey
      {
        get { return this["PageKey"] as String; }
        set { if (value == null) this["PageKey"] = DBNull.Value; else this["PageKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] PageImage
      {
        get { return this["PageImage"] as Byte[]; }
        set { if (value == null) this["PageImage"] = DBNull.Value; else this["PageImage"] = value; }
      }
    }

    [Serializable]
    public partial class CachePagesTable : TypedTableBase<CachePagesRow>
    {
      public CachePagesRow this[int index] { get { return (CachePagesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CachePagesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CachePagesTable(); }

      new public CachePagesRow NewRow() { return (CachePagesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CachePagesRow(rb); }

      protected override Type GetRowType()
      { return typeof(CachePagesRow); }

      public void RemoveRow(CachePagesRow row) { this.Rows.Remove(row); }

      public CachePagesRow NewRow(Int32 primaryKey, String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage)
      {
        CachePagesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.PageType = pageType;
        row.PageKey = pageKey;
        row.DateStamp = dateStamp;
        row.PageImage = pageImage;
        return row;
      }

      public void AddRow(Int32 primaryKey, String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage)
      {
        CachePagesRow row = NewRow(primaryKey, pageType, pageKey, dateStamp, pageImage);
        AddRow(row);
      }

      public CachePagesRow NewRow(String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage)
      {
        CachePagesRow row = NewRow();
        row.PageType = pageType;
        row.PageKey = pageKey;
        row.DateStamp = dateStamp;
        row.PageImage = pageImage;
        return row;
      }

      public void AddRow(String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage)
      {
        CachePagesRow row = NewRow(pageType, pageKey, dateStamp, pageImage);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn PageTypeColumn { get { return this.Columns["PageType"]; } }

      public DataColumn PageKeyColumn { get { return this.Columns["PageKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageImageColumn { get { return this.Columns["PageImage"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PageType", typeof(String));
        _column.MaxLength = 32;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageKey", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageImage", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      public CachePagesTable() : this(ColumnSet.All) { }

      public CachePagesTable(ColumnSet columnSet)
      {
        this.TableName = "CachePages";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected CachePagesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class CachePages
    {
      public const string TableName = "CachePages";

      public enum Column { PrimaryKey, PageType, PageKey, DateStamp, PageImage }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.PageType, "PageType" },
        { Column.PageKey, "PageKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.PageImage, "PageImage" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CachePages";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int DeleteTable(int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CachePages";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE CachePages";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CachePages (PrimaryKey,PageType,PageKey,DateStamp,PageImage) VALUES (@PrimaryKey,@PageType,@PageKey,@DateStamp,@PageImage)";
        switch (VoteCacheDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteCacheDb.AddCommandParameter(cmd, "PageImage", pageImage);
        return Convert.ToInt32(VoteCacheDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String pageType, String pageKey, DateTime dateStamp, Byte[] pageImage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO CachePages (PageType,PageKey,DateStamp,PageImage) VALUES (@PageType,@PageKey,@DateStamp,@PageImage)";
        switch (VoteCacheDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteCacheDb.AddCommandParameter(cmd, "PageImage", pageImage);
        return Convert.ToInt32(VoteCacheDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,PageType,PageKey,DateStamp,PageImage FROM CachePages";
        }
      }

      public static CachePagesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PageType,PageKey,DateStamp,PageImage FROM CachePages";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CachePagesTable.ColumnSet.All);
      }

      public static CachePagesTable FillTable(DbCommand command)
      {
        return FillTable(command, CachePagesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CachePagesTable FillTable(DbCommand command, CachePagesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          command.Connection = cn;
          CachePagesTable table = new CachePagesTable(columnSet);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(CachePagesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, CachePagesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(CachePagesTable table, CachePagesTable.ColumnSet columnSet = CachePagesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteCacheDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteCacheDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string PageTypeColumnName { get { return "PageType"; } }

      public static string PageKeyColumnName { get { return "PageKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageImageColumnName { get { return "PageImage"; } }

      public static int PageTypeMaxLength { get { return 32; } }

      public static int PageKeyMaxLength { get { return 200; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPageTypeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageType FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageKey FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Byte[] GetPageImageByPrimaryKey(Int32 primaryKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageImage FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CachePagesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PageType,PageKey,DateStamp,PageImage FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, CachePagesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageTypeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET PageType=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET PageKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageImageByPrimaryKey(Byte[] newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET PageImage=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE CachePages SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CachePages WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static bool PageTypePageKeyExists(String pageType, String pageKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetPrimaryKeyByPageTypePageKey(String pageType, String pageKey)
      {
        return _GetPrimaryKeyByPageTypePageKey(pageType, pageKey, null);
      }

      public static Int32 GetPrimaryKeyByPageTypePageKey(String pageType, String pageKey, Int32 defaultValue)
      {
        return _GetPrimaryKeyByPageTypePageKey(pageType, pageKey, defaultValue).Value;
      }

      private static Int32? _GetPrimaryKeyByPageTypePageKey(String pageType, String pageKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryKey FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPageTypeByPageTypePageKey(String pageType, String pageKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageType FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageKeyByPageTypePageKey(String pageType, String pageKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageKey FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPageTypePageKey(String pageType, String pageKey)
      {
        return _GetDateStampByPageTypePageKey(pageType, pageKey, null);
      }

      public static DateTime GetDateStampByPageTypePageKey(String pageType, String pageKey, DateTime defaultValue)
      {
        return _GetDateStampByPageTypePageKey(pageType, pageKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPageTypePageKey(String pageType, String pageKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Byte[] GetPageImageByPageTypePageKey(String pageType, String pageKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageImage FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static object GetColumnByPageTypePageKey(Column _column, String pageType, String pageKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CachePagesTable GetDataByPageTypePageKey(String pageType, String pageKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PageType,PageKey,DateStamp,PageImage FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        return FillTable(cmd, CachePagesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPageTypePageKey(Int32 newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET PrimaryKey=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageTypeByPageTypePageKey(String newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET PageType=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageKeyByPageTypePageKey(String newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET PageKey=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPageTypePageKey(DateTime newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET DateStamp=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageImageByPageTypePageKey(Byte[] newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET PageImage=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPageTypePageKey(Column _column, object newValue, String pageType, String pageKey)
      {
        string cmdText = "UPDATE CachePages SET {0}=@newValue WHERE PageType=@PageType AND PageKey=@PageKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPageTypePageKey(String pageType, String pageKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM CachePages WHERE PageType=@PageType AND PageKey=@PageKey";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "PageType", pageType);
        VoteCacheDb.AddCommandParameter(cmd, "PageKey", pageKey);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(CachePagesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CachePagesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static CachePages()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votecache.CachePages

    #region votecache.DonationNags

    public partial class DonationNagsRow : DataRow
    {
      internal DonationNagsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 MessageNumber
      {
        get { return (Int32) this["MessageNumber"]; }
        set { this["MessageNumber"] = value; }
      }

      public String MessageHeading
      {
        get { return this["MessageHeading"] as String; }
        set { if (value == null) this["MessageHeading"] = DBNull.Value; else this["MessageHeading"] = value; }
      }

      public String MessageText
      {
        get { return this["MessageText"] as String; }
        set { if (value == null) this["MessageText"] = DBNull.Value; else this["MessageText"] = value; }
      }

      public Int32? NextMessageNumber
      {
        get { if (this.IsNull("NextMessageNumber")) return null; else return (Int32) this["NextMessageNumber"]; }
        set { if (value.HasValue) this["NextMessageNumber"] = value.Value; else this["NextMessageNumber"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class DonationNagsTable : TypedTableBase<DonationNagsRow>
    {
      public DonationNagsRow this[int index] { get { return (DonationNagsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DonationNagsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DonationNagsTable(); }

      new public DonationNagsRow NewRow() { return (DonationNagsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DonationNagsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DonationNagsRow); }

      public void RemoveRow(DonationNagsRow row) { this.Rows.Remove(row); }

      public DonationNagsRow NewRow(Int32 messageNumber, String messageHeading, String messageText, Int32? nextMessageNumber)
      {
        DonationNagsRow row = NewRow();
        row.MessageNumber = messageNumber;
        row.MessageHeading = messageHeading;
        row.MessageText = messageText;
        row.NextMessageNumber = nextMessageNumber;
        return row;
      }

      public void AddRow(Int32 messageNumber, String messageHeading, String messageText, Int32? nextMessageNumber)
      {
        DonationNagsRow row = NewRow(messageNumber, messageHeading, messageText, nextMessageNumber);
        AddRow(row);
      }

      public DataColumn MessageNumberColumn { get { return this.Columns["MessageNumber"]; } }

      public DataColumn MessageHeadingColumn { get { return this.Columns["MessageHeading"]; } }

      public DataColumn MessageTextColumn { get { return this.Columns["MessageText"]; } }

      public DataColumn NextMessageNumberColumn { get { return this.Columns["NextMessageNumber"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("MessageNumber", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MessageHeading", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("MessageText", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("NextMessageNumber", typeof(Int32));
        base.Columns.Add(_column);
      }

      public DonationNagsTable() : this(ColumnSet.All) { }

      public DonationNagsTable(ColumnSet columnSet)
      {
        this.TableName = "DonationNags";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DonationNagsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DonationNags
    {
      public const string TableName = "DonationNags";

      public enum Column { MessageNumber, MessageHeading, MessageText, NextMessageNumber }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.MessageNumber, "MessageNumber" },
        { Column.MessageHeading, "MessageHeading" },
        { Column.MessageText, "MessageText" },
        { Column.NextMessageNumber, "NextMessageNumber" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DonationNags";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 messageNumber, String messageHeading, String messageText, Int32? nextMessageNumber, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DonationNags (MessageNumber,MessageHeading,MessageText,NextMessageNumber) VALUES (@MessageNumber,@MessageHeading,@MessageText,@NextMessageNumber)";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        VoteCacheDb.AddCommandParameter(cmd, "MessageHeading", messageHeading);
        VoteCacheDb.AddCommandParameter(cmd, "MessageText", messageText);
        VoteCacheDb.AddCommandParameter(cmd, "NextMessageNumber", nextMessageNumber);
        VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT MessageNumber,MessageHeading,MessageText,NextMessageNumber FROM DonationNags";
        }
      }

      public static DonationNagsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT MessageNumber,MessageHeading,MessageText,NextMessageNumber FROM DonationNags";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DonationNagsTable.ColumnSet.All);
      }

      public static DonationNagsTable FillTable(DbCommand command)
      {
        return FillTable(command, DonationNagsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DonationNagsTable FillTable(DbCommand command, DonationNagsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          command.Connection = cn;
          DonationNagsTable table = new DonationNagsTable(columnSet);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(DonationNagsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, DonationNagsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(DonationNagsTable table, DonationNagsTable.ColumnSet columnSet = DonationNagsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteCacheDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteCacheDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string MessageNumberColumnName { get { return "MessageNumber"; } }

      public static string MessageHeadingColumnName { get { return "MessageHeading"; } }

      public static string MessageTextColumnName { get { return "MessageText"; } }

      public static string NextMessageNumberColumnName { get { return "NextMessageNumber"; } }

      public static int MessageHeadingMaxLength { get { return int.MaxValue; } }

      public static int MessageTextMaxLength { get { return int.MaxValue; } }

      public static bool MessageNumberExists(Int32 messageNumber)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetMessageHeadingByMessageNumber(Int32 messageNumber, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MessageHeading FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageTextByMessageNumber(Int32 messageNumber, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MessageText FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetNextMessageNumberByMessageNumber(Int32 messageNumber)
      {
        return _GetNextMessageNumberByMessageNumber(messageNumber, null);
      }

      public static Int32 GetNextMessageNumberByMessageNumber(Int32 messageNumber, Int32 defaultValue)
      {
        return _GetNextMessageNumberByMessageNumber(messageNumber, defaultValue).Value;
      }

      private static Int32? _GetNextMessageNumberByMessageNumber(Int32 messageNumber, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT NextMessageNumber FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByMessageNumber(Column _column, Int32 messageNumber)
      {
        object result;
        string cmdText = "SELECT {0} FROM DonationNags WHERE MessageNumber=@MessageNumber";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationNagsTable GetDataByMessageNumber(Int32 messageNumber, int commandTimeout = -1)
      {
        string cmdText = "SELECT MessageNumber,MessageHeading,MessageText,NextMessageNumber FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        return FillTable(cmd, DonationNagsTable.ColumnSet.All);
      }

      public static int UpdateMessageNumberByMessageNumber(Int32 newValue, Int32 messageNumber)
      {
        string cmdText = "UPDATE DonationNags SET MessageNumber=@newValue WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageHeadingByMessageNumber(String newValue, Int32 messageNumber)
      {
        string cmdText = "UPDATE DonationNags SET MessageHeading=@newValue WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageTextByMessageNumber(String newValue, Int32 messageNumber)
      {
        string cmdText = "UPDATE DonationNags SET MessageText=@newValue WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNextMessageNumberByMessageNumber(Int32? newValue, Int32 messageNumber)
      {
        string cmdText = "UPDATE DonationNags SET NextMessageNumber=@newValue WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteCacheDb.AddCommandParameter(cmd, "newValue", o);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMessageNumber(Column _column, object newValue, Int32 messageNumber)
      {
        string cmdText = "UPDATE DonationNags SET {0}=@newValue WHERE MessageNumber=@MessageNumber";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMessageNumber(Int32 messageNumber, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM DonationNags WHERE MessageNumber=@MessageNumber";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "MessageNumber", messageNumber);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DonationNagsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DonationNagsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DonationNags()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votecache.DonationNags

    #region votecache.DonationNagsControl

    public partial class DonationNagsControlRow : DataRow
    {
      internal DonationNagsControlRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Boolean IsNaggingEnabled
      {
        get { return (Boolean) this["IsNaggingEnabled"]; }
        set { this["IsNaggingEnabled"] = value; }
      }
    }

    [Serializable]
    public partial class DonationNagsControlTable : TypedTableBase<DonationNagsControlRow>
    {
      public DonationNagsControlRow this[int index] { get { return (DonationNagsControlRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DonationNagsControlRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DonationNagsControlTable(); }

      new public DonationNagsControlRow NewRow() { return (DonationNagsControlRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DonationNagsControlRow(rb); }

      protected override Type GetRowType()
      { return typeof(DonationNagsControlRow); }

      public void RemoveRow(DonationNagsControlRow row) { this.Rows.Remove(row); }

      public DonationNagsControlRow NewRow(Int32 id, Boolean isNaggingEnabled)
      {
        DonationNagsControlRow row = NewRow();
        row.Id = id;
        row.IsNaggingEnabled = isNaggingEnabled;
        return row;
      }

      public void AddRow(Int32 id, Boolean isNaggingEnabled)
      {
        DonationNagsControlRow row = NewRow(id, isNaggingEnabled);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn IsNaggingEnabledColumn { get { return this.Columns["IsNaggingEnabled"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsNaggingEnabled", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DonationNagsControlTable() : this(ColumnSet.All) { }

      public DonationNagsControlTable(ColumnSet columnSet)
      {
        this.TableName = "DonationNagsControl";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DonationNagsControlTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DonationNagsControl
    {
      public const string TableName = "DonationNagsControl";

      public enum Column { Id, IsNaggingEnabled }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.IsNaggingEnabled, "IsNaggingEnabled" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DonationNagsControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 id, Boolean isNaggingEnabled, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DonationNagsControl (Id,IsNaggingEnabled) VALUES (@Id,@IsNaggingEnabled)";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        VoteCacheDb.AddCommandParameter(cmd, "Id", id);
        VoteCacheDb.AddCommandParameter(cmd, "IsNaggingEnabled", isNaggingEnabled);
        VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,IsNaggingEnabled FROM DonationNagsControl";
        }
      }

      public static DonationNagsControlTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,IsNaggingEnabled FROM DonationNagsControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DonationNagsControlTable.ColumnSet.All);
      }

      public static DonationNagsControlTable FillTable(DbCommand command)
      {
        return FillTable(command, DonationNagsControlTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DonationNagsControlTable FillTable(DbCommand command, DonationNagsControlTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          command.Connection = cn;
          DonationNagsControlTable table = new DonationNagsControlTable(columnSet);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(DonationNagsControlTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, DonationNagsControlTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(DonationNagsControlTable table, DonationNagsControlTable.ColumnSet columnSet = DonationNagsControlTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteCacheDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteCacheDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteCacheDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteCacheDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string IsNaggingEnabledColumnName { get { return "IsNaggingEnabled"; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DonationNagsControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetId()
      {
        return _GetId(null);
      }

      public static Int32 GetId(Int32 defaultValue)
      {
        return _GetId(defaultValue).Value;
      }

      private static Int32? _GetId(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM DonationNagsControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsNaggingEnabled()
      {
        return _GetIsNaggingEnabled(null);
      }

      public static Boolean GetIsNaggingEnabled(Boolean defaultValue)
      {
        return _GetIsNaggingEnabled(defaultValue).Value;
      }

      private static Boolean? _GetIsNaggingEnabled(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsNaggingEnabled FROM DonationNagsControl";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM DonationNagsControl";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        result = VoteCacheDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateId(Int32 newValue)
      {
        string cmdText = "UPDATE DonationNagsControl SET Id=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNaggingEnabled(Boolean newValue)
      {
        string cmdText = "UPDATE DonationNagsControl SET IsNaggingEnabled=@newValue";
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE DonationNagsControl SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteCacheDb.GetCommand(cmdText, -1);
        VoteCacheDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteCacheDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DonationNagsControlTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DonationNagsControlTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DonationNagsControl()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votecache.DonationNagsControl
  }
}
