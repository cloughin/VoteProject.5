using System.Collections.Generic;
using System.Xml;
using static System.String;

namespace GenerateDbClasses
{
  class DatabasesGenerator
  {
    private readonly XmlElement _DatabasesElement;
    private readonly string _Namespace;

    public DatabasesGenerator(XmlElement databasesElement, 
      string namespaceName)
    {
      _DatabasesElement = databasesElement;
      if (IsNullOrWhiteSpace(namespaceName))
        namespaceName = databasesElement.GetAttribute("namespace");
      if (IsNullOrWhiteSpace(namespaceName))
        namespaceName = "DB";
      _Namespace = namespaceName;
    }

    public void Generate()
    {
      Writer.Write("//------------------------------------------------------------------------------");
      Writer.Write("//     This code was generated by a tool.");
      Writer.Write("//");
      Writer.Write("//     Changes to this file may cause incorrect behavior and will be lost if");
      Writer.Write("//     the code is regenerated.");
      Writer.Write("//------------------------------------------------------------------------------");
      Writer.Write();
      Writer.Write("using System;");
      Writer.Write("using System.Collections.Generic;");
      Writer.Write("using System.Configuration;");
      Writer.Write("using System.Web.Configuration;");
      Writer.Write("using System.Data;");
      Writer.Write("using System.Data.Common;");
      Writer.Write("using System.Diagnostics.CodeAnalysis;");
      Writer.Write("using System.Linq;");
      Writer.Write("using System.Runtime.Serialization;");
      Writer.Write("using static System.String;");
      if (Generator.SupportMsSql)
        Writer.Write("using System.Data.SqlClient;");
      if (Generator.SupportMySql)
        Writer.Write("using MySql.Data.MySqlClient;");
      Writer.Spacer();
      Writer.Write("namespace {0}", _Namespace);
      using (new Block())
      {
        if (!Generator.Secondary)
        {
          var supportedProviders = new List<string>();
          if (Generator.SupportMsSql) supportedProviders.Add("MsSql");
          if (Generator.SupportMySql) supportedProviders.Add("MySql");
          Writer.Write("public enum DbProvider {{ {0} }}",
            Join(", ", supportedProviders));
          Writer.Spacer();
          GenerateDataReaderBaseClass();
        }
        foreach (XmlElement databaseElement in _DatabasesElement)
          ProcessDatabase(databaseElement);
      }
    }

    private static void GenerateDataReaderBaseClass()
    {
      Writer.Write("public abstract class DataReaderBase : IDataReader, IDisposable, IDataRecord");
      using (new Block())
      {
        Writer.WriteUnformatted("DbDataReader _DataReader;");
        Writer.WriteUnformatted("DbConnection _Connection;");
        Writer.WriteUnformatted("public DataReaderBase(DbDataReader dataReader, DbConnection connection) { _DataReader = dataReader; _Connection = connection; }");
        Writer.WriteUnformatted("public DbDataReader DataReader { get { return _DataReader; } }");
        Writer.WriteUnformatted("public int Depth { get { return _DataReader.Depth; } }");
        Writer.WriteUnformatted("public int FieldCount { get { return _DataReader.FieldCount; } }");
        Writer.WriteUnformatted("public bool HasRows { get { return _DataReader.HasRows; } }");
        Writer.WriteUnformatted("public bool IsClosed { get { return _DataReader.IsClosed; } }");
        Writer.WriteUnformatted("public int RecordsAffected { get { return _DataReader.RecordsAffected; } }");
        Writer.WriteUnformatted("public virtual int VisibleFieldCount { get { return _DataReader.VisibleFieldCount; } }");
        Writer.WriteUnformatted("public object this[int ordinal] { get { return _DataReader[ordinal]; } }");
        Writer.WriteUnformatted("public object this[string name] { get { return _DataReader[name]; } }");
        Writer.WriteUnformatted("public void Close() { _DataReader.Close(); }");
        Writer.WriteUnformatted("public void Dispose() { _DataReader.Dispose(); if (_Connection != null) _Connection.Dispose(); }");
        Writer.WriteUnformatted("public bool GetBoolean(int ordinal) { return _DataReader.GetBoolean(ordinal); }");
        Writer.WriteUnformatted("public byte GetByte(int ordinal) { return _DataReader.GetByte(ordinal); }");
        Writer.WriteUnformatted("public long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) { return _DataReader.GetBytes(ordinal, dataOffset, buffer, bufferOffset, length); }");
        Writer.WriteUnformatted("public char GetChar(int ordinal) { return _DataReader.GetChar(ordinal); }");
        Writer.WriteUnformatted("public long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) { return _DataReader.GetChars(ordinal, dataOffset, buffer, bufferOffset, length); }");
        Writer.WriteUnformatted("public string GetDataTypeName(int ordinal) { return _DataReader.GetDataTypeName(ordinal); }");
        Writer.WriteUnformatted("public DateTime GetDateTime(int ordinal) { return _DataReader.GetDateTime(ordinal); }");
        Writer.WriteUnformatted("public decimal GetDecimal(int ordinal) { return _DataReader.GetDecimal(ordinal); }");
        Writer.WriteUnformatted("public double GetDouble(int ordinal) { return _DataReader.GetDouble(ordinal); }");
        Writer.WriteUnformatted("public Type GetFieldType(int ordinal) { return _DataReader.GetFieldType(ordinal); }");
        Writer.WriteUnformatted("public float GetFloat(int ordinal) { return _DataReader.GetFloat(ordinal); }");
        Writer.WriteUnformatted("public Guid GetGuid(int ordinal) { return _DataReader.GetGuid(ordinal); }");
        Writer.WriteUnformatted("public short GetInt16(int ordinal) { return _DataReader.GetInt16(ordinal); }");
        Writer.WriteUnformatted("public int GetInt32(int ordinal) { return _DataReader.GetInt32(ordinal); }");
        Writer.WriteUnformatted("public long GetInt64(int ordinal) { return _DataReader.GetInt64(ordinal); }");
        Writer.WriteUnformatted("public string GetName(int ordinal) { return _DataReader.GetName(ordinal); }");
        Writer.WriteUnformatted("public int GetOrdinal(string name) { return _DataReader.GetOrdinal(name); }");
        Writer.WriteUnformatted("public virtual Type GetProviderSpecificFieldType(int ordinal) { return _DataReader.GetProviderSpecificFieldType(ordinal); }");
        Writer.WriteUnformatted("public virtual object GetProviderSpecificValue(int ordinal) { return _DataReader.GetProviderSpecificValue(ordinal); }");
        Writer.WriteUnformatted("public virtual int GetProviderSpecificValues(object[] values) { return _DataReader.GetProviderSpecificValues(values); }");
        Writer.WriteUnformatted("public DataTable GetSchemaTable() { return _DataReader.GetSchemaTable(); }");
        Writer.WriteUnformatted("public string GetString(int ordinal) { return _DataReader.GetString(ordinal); }");
        Writer.WriteUnformatted("public object GetValue(int ordinal) { return _DataReader.GetValue(ordinal); }");
        Writer.WriteUnformatted("public int GetValues(object[] values) { return _DataReader.GetValues(values); }");
        Writer.WriteUnformatted("public bool IsDBNull(int ordinal) { return _DataReader.IsDBNull(ordinal); }");
        Writer.WriteUnformatted("public bool NextResult() { return _DataReader.NextResult(); }");
        Writer.WriteUnformatted("public bool Read() { return _DataReader.Read(); }");
        Writer.WriteUnformatted("IDataReader IDataRecord.GetData(int ordinal) { return _DataReader.GetData(ordinal); }");
      }
      Writer.Spacer();
    }

    private static void ProcessDatabase(XmlElement databaseElement)
    {
      var databaseGenerator =
        new DatabaseGenerator(databaseElement);
      databaseGenerator.Generate();
    }
  }
}
