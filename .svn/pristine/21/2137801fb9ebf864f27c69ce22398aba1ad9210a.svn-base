using System;

namespace DB.Vote
{
  public partial class VolunteersViewRow {}

  public partial class VolunteersView
  {
    public static void DeleteByEmail(String email, int commandTimeout = -1)
    {
      PartiesEmails.DeleteByPartyEmailIsVolunteer(email, true, commandTimeout);
    }

    public static VolunteersViewTable GetAllDataSorted(string stateCode = null, string partyKey = null, 
      int commandTimeout = -1)
    {
      string whereClause;
      switch (stateCode)
      {
        case null:
          whereClause = string.Empty;
          break;

        case "":
          whereClause = " WHERE StateCode IS NULL";
          break;

        case "*ALL*":
          whereClause = string.Empty;
          break;

        default:
          switch (partyKey)
          {
            //case "*NONE*":
            //  whereClause = string.Format(" WHERE StateCode='{0}' AND PartyKey=''", stateCode);
            //  break;

            case "*ALL*":
              whereClause = string.Format(" WHERE StateCode='{0}'", stateCode);
              break;

            default:
              whereClause = string.Format(" WHERE StateCode='{0}' AND PartyKey='{1}'", stateCode, partyKey);
              break;
          }
          break;
      }
      var cmdText = SelectAllCommandText + whereClause +
        " ORDER BY StateName,PartyName,LastName,FirstName";
      var cmd = VoteDb.GetCommand(cmdText, commandTimeout);
      return FillTable(cmd, VolunteersViewTable.ColumnSet.All);
    }

    public static void Insert(
      String email, String password, String partyKey, String firstName,
      String lastName, String phone, int commandTimeout = -1)
    {
      const string cmdText = "INSERT INTO PartiesEmails (PartyEmail,PartyPassword,PartyKey," +
        "PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer,DateStamp) " +
        "VALUES (@PartyEmail,@PartyPassword,@PartyKey,@PartyContactFirstName,@PartyContactLastName," +
        "@PartyContactPhone,@PartyContactTitle,@IsVolunteer,@DateStamp)";
      var cmd = VoteDb.GetCommand(cmdText, commandTimeout);
      VoteDb.AddCommandParameter(cmd, "PartyEmail", email);
      VoteDb.AddCommandParameter(cmd, "PartyPassword", password);
      VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
      VoteDb.AddCommandParameter(cmd, "PartyContactFirstName", firstName);
      VoteDb.AddCommandParameter(cmd, "PartyContactLastName", lastName);
      VoteDb.AddCommandParameter(cmd, "PartyContactPhone", phone);
      VoteDb.AddCommandParameter(cmd, "PartyContactTitle", string.Empty);
      VoteDb.AddCommandParameter(cmd, "IsVolunteer", true);
      VoteDb.AddCommandParameter(cmd, "DateStamp", DateTime.UtcNow);
      VoteDb.ExecuteNonQuery(cmd);
    }

    public static int UpdateEmail(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyEmail(newValue, email);
    }

    public static int UpdateFirstName(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyContactFirstName(newValue, email);
    }

    public static int UpdateLastName(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyContactLastName(newValue, email);
    }

    public static int UpdatePartyKey(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyKey(newValue, email);
    }

    public static int UpdatePassword(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyPassword(newValue, email);
    }

    public static int UpdatePhone(String newValue, String email)
    {
      return PartiesEmails.UpdatePartyContactPhone(newValue, email);
    }

    public static int UpdateColumn(Column column, object newValue, string email)
    {
      var cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyEmail=@PartyEmail";

      PartiesEmails.Column partiesEmailsColumn;
      switch (column)
      {
        case Column.Email:
          partiesEmailsColumn = PartiesEmails.Column.PartyEmail;
          break;

        case Column.FirstName:
          partiesEmailsColumn = PartiesEmails.Column.PartyContactFirstName;
          break;

        case Column.LastName:
          partiesEmailsColumn = PartiesEmails.Column.PartyContactLastName;
          break;

        case Column.PartyKey:
          partiesEmailsColumn = PartiesEmails.Column.PartyKey;
          break;

        case Column.Password:
          partiesEmailsColumn = PartiesEmails.Column.PartyPassword;
          break;

        case Column.Phone:
          partiesEmailsColumn = PartiesEmails.Column.PartyContactPhone;
          break;

        default:
          throw new Exception("VolunteersView invalid column");
      }

      cmdText = string.Format(cmdText, PartiesEmails.GetColumnName(partiesEmailsColumn));
      var cmd = VoteDb.GetCommand(cmdText, -1);
      VoteDb.AddCommandParameter(cmd, "PartyEmail", email);
      VoteDb.AddCommandParameter(cmd, "newValue", newValue);
      return VoteDb.ExecuteNonQuery(cmd);
    }
  }
}