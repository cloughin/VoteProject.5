using System;
using System.Configuration;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using DB.Vote;
using DB.VoteZipNewLocal;
using Vote.Reports;

namespace Vote
{
  public partial class BallotPage : CacheablePage
  {
    private string _ZipQueryError;

    protected BallotPage()
    {
      NoIndex = true;
    }

    #region Caching support

    protected override string GetCacheKey()
    {
      bool explorerLink;
      if (
        !Boolean.TryParse(
          ConfigurationManager.AppSettings["UseExplorerOnBallotPage"],
          out explorerLink)) explorerLink = false;
      var key = UrlManager.GetStateCodeFromHostName() + "." + QueryState + "." +
        QueryElection + "." + QueryCongress + "." + QueryStateSenate + "." +
        QueryStateHouse + "." + QueryCounty + "." + explorerLink;
      var siteId = UrlManager.CurrentQuerySiteId;
      if (!string.IsNullOrEmpty(siteId))
        key += "." + siteId;

      return key;
    }

    protected override string GetCacheType()
    {
      return "Ballot";
    }

    #endregion Caching support

    private void CreateHeading(int officeContestsCount)
    {
      var tr = new HtmlTableRow().AddTo(BallotHeadingTable, "trBallotTitle");
      var td = new HtmlTableCell().AddTo(tr, "tdBallotTitle");
      new HtmlNbsp().AddTo(td);
      new HtmlBreak().AddTo(td);
      new LiteralControl(PageCache.Elections.GetElectionDesc(QueryElection)).AddTo(
        td);

      var districtInfo = FormatLegislativeDistrictsFromQueryStringForHeading();
      new HtmlTableCell {InnerHtml = districtInfo}.AddTo(tr, "tdBallotSubTitle");

      tr = new HtmlTableRow().AddTo(BallotHeadingTable, "trBallotInstruction");
      td = new HtmlTableCell {ColSpan = 2, Align = "left"}.AddTo(tr,
        "tdBallotInstruction");
      new HtmlBreak().AddTo(td);

      string instruction;
      if (officeContestsCount > 0)
        if (PageCache.Elections.GetElectionDate(QueryElection) >= DateTime.Today)
          instruction =
            "This sample ballot is not an exact replica of the ballot you will see" +
              " at the polls. Instead, it provides the federal and state candidate" +
              " choices and ballot measures you will be presented with, along with links" +
              " to allow you to further explore the candidates and issues. Click the" +
              " \"Compare the Candidates\" button for a side-by-side comparison of" +
              " all candidates for an office, including bios and their views on the issues.";
        else
          instruction =
            "This sample ballot is not an exact replica of the ballot you will see at" +
              " the polls. Instead, it provides the federal and state candidate choices" +
              " and ballot measures you will be presented with. Click an Office Title or" +
              " the Compare button to obtain a wealth of information to make informed" +
              " comparisons of the candidates. Comparisons include their bios and their" +
              " positions and views on the issues. Click on a Referendum Title to obtain" +
              " more information about that ballot measure.";
      else
        instruction =
          "There are no office contests for your legislative districts.";
      new LiteralControl(instruction).AddTo(td);

      var additionalInfo =
        PageCache.Elections.GetElectionAdditionalInfo(QueryElection)
          .ReplaceNewLinesWithBreakTags();
      if (!string.IsNullOrWhiteSpace(additionalInfo))
      {
        new HtmlBreak(2).AddTo(td);
        new LiteralControl(additionalInfo).AddTo(td);
      }

      if (officeContestsCount > 0)
      {
        var ballotInstructions =
          PageCache.Elections.GetBallotInstructions(QueryElection);
        if (!string.IsNullOrWhiteSpace(ballotInstructions))
        {
          new HtmlBreak(2).AddTo(td);
          new LiteralControl(ballotInstructions).AddTo(td);
        }

        var countyBoardWebAddress =
          NormalizeUrl(States.GetCountyBoardsWebAddress(
           Elections.GetStateCodeFromKey(QueryElection)));
        new HtmlBreak(2).AddTo(td);
        new LiteralControl("We suggest that you consult your ").AddTo(td);
        const string linkText = "local county board&rsquo;s website";
        if (string.IsNullOrWhiteSpace(countyBoardWebAddress))
          new LiteralControl(linkText).AddTo(td);
        else
          new HtmlAnchor {
            HRef = countyBoardWebAddress,
            Target = "_blank",
            InnerHtml = linkText
          }.AddTo(td);
        new LiteralControl(" for sample ballots which better represent what you will encounter on election day.").AddTo(td);

        if (
          StateCache.GetIsIncumbentShownOnBallots(
            Elections.GetStateCodeFromKey(QueryElection)))
        {
          new HtmlBreak(2).AddTo(td);
          new LiteralControl("* = Incumbent").AddTo(td);
        }
      }
    }

    private string GetMetaContent()
    {
      return "Sample Ballot for " +
        PageCache.Elections.GetElectionDesc(QueryElection) + ", " +
        FormatLegislativeDistrictsFromQueryString(", ");
    }

    protected override void OnPreInit(EventArgs e)
    {
      var zip = Request.QueryString["zip"];
      if (!string.IsNullOrEmpty(zip))
        try
        {
          // handle zip based queries
          var electionKey = Request.QueryString["election"];
          if (string.IsNullOrEmpty(electionKey))
            throw new VoteException("The election key is missing");
          zip = zip.Replace("-", "");
          if (zip.Length != 9)
            throw new VoteException("The zip must be nine digits");
          var zip5 = zip.Substring(0, 5);
          var zip4 = zip.Substring(5, 4);
          var table = Uszd.GetDataByZip5Zip4(zip5, zip4);
          if (table.Count == 0)
            throw new VoteException("Could not find this zip code");
          var row = table[0];
          var redirect =
            string.Format(
              "/ballot.aspx?State={0}&Election={1}&" +
                "Congress={2}&StateSenate={3}&StateHouse={4}&County={5}",
              StateCache.StateCodeFromLdsStateCode(row.LdsStateCode), electionKey,
              row.Congress.ZeroPad(3), row.StateSenate.ZeroPad(3),
              row.StateHouse.ZeroPad(3), row.County.ZeroPad(3));
          redirect = UrlManager.ApplySiteIdToUrl(redirect);
          Response.Redirect(redirect);
        }
        catch (VoteException ex)
        {
          _ZipQueryError = ex.Message;
        }
      else // classic mode
        base.OnPreInit(e);
    }

    protected void Page_Load(object sender, EventArgs e)
    {
      // The OnPreInit method of the parent class handles serving from cache, 
      // in which case this method is never called.

      try
      {
        this.IncludeCss("~/css/MainCommon.css");
        this.IncludeCss("~/css/SecondaryCommon.css");
        this.IncludeCss("~/css/All.css");
        this.IncludeCss("~/css/Ballot.css");
        this.IncludeCss("~/css/BallotNew.css");

        var metaContent = GetMetaContent();
        TitleTag.Text = metaContent;
        MetaDescriptionTag.Content = metaContent;
        MetaKeywordsTag.Content = metaContent;

        if (_ZipQueryError != null)
        {
          InnerContent.Controls.Clear();
          var p = new HtmlGenericControl("p").AddTo(InnerContent, "not-found-error");
          new LiteralControl(_ZipQueryError).AddTo(p);
          return;
        }

        int officeContests;
        bool useExplorer;
        if (
          !Boolean.TryParse(
            ConfigurationManager.AppSettings["UseExplorerOnBallotPage"],
            out useExplorer)) useExplorer = false;
        BallotReport.GetReport(QueryElection, QueryCongress, QueryStateSenate,
          QueryStateHouse, QueryCounty, useExplorer, out officeContests)
          .AddTo(ReportPlaceHolder);
        CreateHeading(officeContests);
        BallotReferendumReport.GetReport(QueryElection, QueryCounty)
          .AddTo(ReferendumReportPlaceHolder);
      }
      catch (Exception) {}
    }
  }
}