//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteTemp
  {
    #region votetemp Database

    public static partial class VoteTempDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=votetemp";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteTempDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteTemp.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVoteTemp.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, DbConnection cn)
      {
        return GetCommand(cmdText, cn, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion votetemp Database

    #region votetemp.LogLogins

    public partial class LogLoginsRow : DataRow
    {
      internal LogLoginsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String UserCountyCode
      {
        get { return this["UserCountyCode"] as String; }
        set { if (value == null) this["UserCountyCode"] = DBNull.Value; else this["UserCountyCode"] = value; }
      }

      public String UserLocalCode
      {
        get { return this["UserLocalCode"] as String; }
        set { if (value == null) this["UserLocalCode"] = DBNull.Value; else this["UserLocalCode"] = value; }
      }

      public String UserDesignCode
      {
        get { return this["UserDesignCode"] as String; }
        set { if (value == null) this["UserDesignCode"] = DBNull.Value; else this["UserDesignCode"] = value; }
      }

      public String UserOrganizationCode
      {
        get { return this["UserOrganizationCode"] as String; }
        set { if (value == null) this["UserOrganizationCode"] = DBNull.Value; else this["UserOrganizationCode"] = value; }
      }

      public String UserIssuesCode
      {
        get { return this["UserIssuesCode"] as String; }
        set { if (value == null) this["UserIssuesCode"] = DBNull.Value; else this["UserIssuesCode"] = value; }
      }

      public String UserPartyKey
      {
        get { return this["UserPartyKey"] as String; }
        set { if (value == null) this["UserPartyKey"] = DBNull.Value; else this["UserPartyKey"] = value; }
      }

      public String UserPoliticianKey
      {
        get { return this["UserPoliticianKey"] as String; }
        set { if (value == null) this["UserPoliticianKey"] = DBNull.Value; else this["UserPoliticianKey"] = value; }
      }
    }

    [Serializable]
    public partial class LogLoginsTable : TypedTableBase<LogLoginsRow>
    {
      public LogLoginsRow this[int index] { get { return (LogLoginsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogLoginsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogLoginsTable(); }

      new public LogLoginsRow NewRow() { return (LogLoginsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogLoginsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogLoginsRow); }

      public void RemoveRow(LogLoginsRow row) { this.Rows.Remove(row); }

      public LogLoginsRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalCode = userLocalCode;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public LogLoginsRow NewRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalCode = userLocalCode;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn UserCountyCodeColumn { get { return this.Columns["UserCountyCode"]; } }

      public DataColumn UserLocalCodeColumn { get { return this.Columns["UserLocalCode"]; } }

      public DataColumn UserDesignCodeColumn { get { return this.Columns["UserDesignCode"]; } }

      public DataColumn UserOrganizationCodeColumn { get { return this.Columns["UserOrganizationCode"]; } }

      public DataColumn UserIssuesCodeColumn { get { return this.Columns["UserIssuesCode"]; } }

      public DataColumn UserPartyKeyColumn { get { return this.Columns["UserPartyKey"]; } }

      public DataColumn UserPoliticianKeyColumn { get { return this.Columns["UserPoliticianKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserLocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserDesignCode", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserIssuesCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogLoginsTable() : this(ColumnSet.All) { }

      public LogLoginsTable(ColumnSet columnSet)
      {
        this.TableName = "LogLogins";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogLoginsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogLogins
    {
      public const string TableName = "LogLogins";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, UserStateCode, UserCountyCode, UserLocalCode, UserDesignCode, UserOrganizationCode, UserIssuesCode, UserPartyKey, UserPoliticianKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.UserCountyCode, "UserCountyCode" },
        { Column.UserLocalCode, "UserLocalCode" },
        { Column.UserDesignCode, "UserDesignCode" },
        { Column.UserOrganizationCode, "UserOrganizationCode" },
        { Column.UserIssuesCode, "UserIssuesCode" },
        { Column.UserPartyKey, "UserPartyKey" },
        { Column.UserPoliticianKey, "UserPoliticianKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        return Insert(primaryKey, dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey, -1);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout)
      {
        string cmdText = "INSERT INTO LogLogins (PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalCode,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteTempDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteTempDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteTempDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteTempDb.AddCommandParameter(cmd, "UserLocalCode", userLocalCode);
        VoteTempDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteTempDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteTempDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteTempDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteTempDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteTempDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        return Insert(dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey, -1);
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout)
      {
        string cmdText = "INSERT INTO LogLogins (DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalCode,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteTempDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteTempDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteTempDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteTempDb.AddCommandParameter(cmd, "UserLocalCode", userLocalCode);
        VoteTempDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteTempDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteTempDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteTempDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteTempDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteTempDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        }
      }

      public static LogLoginsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static LogLoginsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static LogLoginsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogLoginsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogLoginsTable FillTable(DbCommand command, LogLoginsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogLoginsTable table = new LogLoginsTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogLoginsTable table)
      {
        UpdateTable(table, LogLoginsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LogLoginsTable table, LogLoginsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LogLoginsTable table, int commandTimeout)
      {
        UpdateTable(table, LogLoginsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LogLoginsTable table, LogLoginsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LogLoginsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogLoginsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogLoginsTable table, LogLoginsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string UserCountyCodeColumnName { get { return "UserCountyCode"; } }

      public static string UserLocalCodeColumnName { get { return "UserLocalCode"; } }

      public static string UserDesignCodeColumnName { get { return "UserDesignCode"; } }

      public static string UserOrganizationCodeColumnName { get { return "UserOrganizationCode"; } }

      public static string UserIssuesCodeColumnName { get { return "UserIssuesCode"; } }

      public static string UserPartyKeyColumnName { get { return "UserPartyKey"; } }

      public static string UserPoliticianKeyColumnName { get { return "UserPoliticianKey"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserSecurityMaxLength { get { return 30; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int UserCountyCodeMaxLength { get { return 3; } }

      public static int UserLocalCodeMaxLength { get { return 2; } }

      public static int UserDesignCodeMaxLength { get { return 100; } }

      public static int UserOrganizationCodeMaxLength { get { return 50; } }

      public static int UserIssuesCodeMaxLength { get { return 2; } }

      public static int UserPartyKeyMaxLength { get { return 5; } }

      public static int UserPoliticianKeyMaxLength { get { return 50; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey)
      {
        return GetUserNameByPrimaryKey(primaryKey, null);
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey)
      {
        return GetUserSecurityByPrimaryKey(primaryKey, null);
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserStateCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserCountyCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserCountyCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserCountyCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserLocalCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserLocalCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserLocalCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserDesignCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserDesignCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserDesignCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserDesignCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserOrganizationCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserOrganizationCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserOrganizationCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserOrganizationCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserIssuesCodeByPrimaryKey(Int32 primaryKey)
      {
        return GetUserIssuesCodeByPrimaryKey(primaryKey, null);
      }

      public static String GetUserIssuesCodeByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserIssuesCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPartyKeyByPrimaryKey(Int32 primaryKey)
      {
        return GetUserPartyKeyByPrimaryKey(primaryKey, null);
      }

      public static String GetUserPartyKeyByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserPartyKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPoliticianKeyByPrimaryKey(Int32 primaryKey)
      {
        return GetUserPoliticianKeyByPrimaryKey(primaryKey, null);
      }

      public static String GetUserPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByPrimaryKey(Int32 primaryKey)
      {
        return GetDataByPrimaryKey(primaryKey, -1);
      }

      public static LogLoginsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey)
      {
        return DeleteByPrimaryKey(primaryKey, -1);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByUserName(String userName)
      {
        return CountByUserName(userName, -1);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByUserName(String userName)
      {
        return GetDataByUserName(userName, -1);
      }

      public static LogLoginsTable GetDataByUserName(String userName, int commandTimeout)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName)
      {
        return DeleteByUserName(userName, -1);
      }

      public static int DeleteByUserName(String userName, int commandTimeout)
      {
        string cmdText = "DELETE FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogLoginsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogLoginsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogLogins()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.LogLogins

    #region votetemp.SitemapElectionsTemp

    public partial class SitemapElectionsTempRow : DataRow
    {
      internal SitemapElectionsTempRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapElectionsTempTable : TypedTableBase<SitemapElectionsTempRow>
    {
      public SitemapElectionsTempRow this[int index] { get { return (SitemapElectionsTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapElectionsTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapElectionsTempTable(); }

      new public SitemapElectionsTempRow NewRow() { return (SitemapElectionsTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapElectionsTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapElectionsTempRow); }

      public void RemoveRow(SitemapElectionsTempRow row) { this.Rows.Remove(row); }

      public SitemapElectionsTempRow NewRow(String electionKey)
      {
        SitemapElectionsTempRow row = NewRow();
        row.ElectionKey = electionKey;
        return row;
      }

      public void AddRow(String electionKey)
      {
        SitemapElectionsTempRow row = NewRow(electionKey);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapElectionsTempTable() : this(ColumnSet.All) { }

      public SitemapElectionsTempTable(ColumnSet columnSet)
      {
        this.TableName = "SitemapElectionsTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SitemapElectionsTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SitemapElectionsTemp
    {
      public const string TableName = "SitemapElectionsTemp";

      public enum Column { ElectionKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapElectionsTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE SitemapElectionsTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String electionKey)
      {
        Insert(electionKey, -1);
      }

      public static void Insert(String electionKey, int commandTimeout)
      {
        string cmdText = "INSERT INTO SitemapElectionsTemp (ElectionKey) VALUES (@ElectionKey)";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey FROM SitemapElectionsTemp";
        }
      }

      public static SitemapElectionsTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static SitemapElectionsTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ElectionKey FROM SitemapElectionsTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapElectionsTempTable.ColumnSet.All);
      }

      public static SitemapElectionsTempTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapElectionsTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapElectionsTempTable FillTable(DbCommand command, SitemapElectionsTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapElectionsTempTable table = new SitemapElectionsTempTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SitemapElectionsTempTable table)
      {
        UpdateTable(table, SitemapElectionsTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapElectionsTempTable table, SitemapElectionsTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapElectionsTempTable table, int commandTimeout)
      {
        UpdateTable(table, SitemapElectionsTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapElectionsTempTable table, SitemapElectionsTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapElectionsTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SitemapElectionsTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SitemapElectionsTempTable table, SitemapElectionsTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static bool ElectionKeyExists(String electionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapElectionsTemp WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKey(String electionKey)
      {
        return GetElectionKeyByElectionKey(electionKey, null);
      }

      public static String GetElectionKeyByElectionKey(String electionKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM SitemapElectionsTemp WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM SitemapElectionsTemp WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SitemapElectionsTempTable GetDataByElectionKey(String electionKey)
      {
        return GetDataByElectionKey(electionKey, -1);
      }

      public static SitemapElectionsTempTable GetDataByElectionKey(String electionKey, int commandTimeout)
      {
        string cmdText = "SELECT ElectionKey FROM SitemapElectionsTemp WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, SitemapElectionsTempTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE SitemapElectionsTemp SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE SitemapElectionsTemp SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey)
      {
        return DeleteByElectionKey(electionKey, -1);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM SitemapElectionsTemp WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SitemapElectionsTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapElectionsTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static SitemapElectionsTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.SitemapElectionsTemp

    #region votetemp.SitemapIssuesTemp

    public partial class SitemapIssuesTempRow : DataRow
    {
      internal SitemapIssuesTempRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 Candidates
      {
        get { return (Int32) this["Candidates"]; }
        set { this["Candidates"] = value; }
      }

      public Int32 Answers
      {
        get { return (Int32) this["Answers"]; }
        set { this["Answers"] = value; }
      }

      public DateTime LastResponse
      {
        get { return (DateTime) this["LastResponse"]; }
        set { this["LastResponse"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapIssuesTempTable : TypedTableBase<SitemapIssuesTempRow>
    {
      public SitemapIssuesTempRow this[int index] { get { return (SitemapIssuesTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapIssuesTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapIssuesTempTable(); }

      new public SitemapIssuesTempRow NewRow() { return (SitemapIssuesTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapIssuesTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapIssuesTempRow); }

      public void RemoveRow(SitemapIssuesTempRow row) { this.Rows.Remove(row); }

      public SitemapIssuesTempRow NewRow(String electionKey, String officeKey, String issueKey, Int32 candidates, Int32 answers, DateTime lastResponse)
      {
        SitemapIssuesTempRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.IssueKey = issueKey;
        row.Candidates = candidates;
        row.Answers = answers;
        row.LastResponse = lastResponse;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String issueKey, Int32 candidates, Int32 answers, DateTime lastResponse)
      {
        SitemapIssuesTempRow row = NewRow(electionKey, officeKey, issueKey, candidates, answers, lastResponse);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn CandidatesColumn { get { return this.Columns["Candidates"]; } }

      public DataColumn AnswersColumn { get { return this.Columns["Answers"]; } }

      public DataColumn LastResponseColumn { get { return this.Columns["LastResponse"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Candidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answers", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastResponse", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapIssuesTempTable() : this(ColumnSet.All) { }

      public SitemapIssuesTempTable(ColumnSet columnSet)
      {
        this.TableName = "SitemapIssuesTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SitemapIssuesTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SitemapIssuesTemp
    {
      public const string TableName = "SitemapIssuesTemp";

      public enum Column { ElectionKey, OfficeKey, IssueKey, Candidates, Answers, LastResponse }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.IssueKey, "IssueKey" },
        { Column.Candidates, "Candidates" },
        { Column.Answers, "Answers" },
        { Column.LastResponse, "LastResponse" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE SitemapIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String electionKey, String officeKey, String issueKey, Int32 candidates, Int32 answers, DateTime lastResponse)
      {
        Insert(electionKey, officeKey, issueKey, candidates, answers, lastResponse, -1);
      }

      public static void Insert(String electionKey, String officeKey, String issueKey, Int32 candidates, Int32 answers, DateTime lastResponse, int commandTimeout)
      {
        string cmdText = "INSERT INTO SitemapIssuesTemp (ElectionKey,OfficeKey,IssueKey,Candidates,Answers,LastResponse) VALUES (@ElectionKey,@OfficeKey,@IssueKey,@Candidates,@Answers,@LastResponse)";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "Candidates", candidates);
        VoteTempDb.AddCommandParameter(cmd, "Answers", answers);
        VoteTempDb.AddCommandParameter(cmd, "LastResponse", lastResponse);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,IssueKey,Candidates,Answers,LastResponse FROM SitemapIssuesTemp";
        }
      }

      public static SitemapIssuesTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static SitemapIssuesTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,IssueKey,Candidates,Answers,LastResponse FROM SitemapIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapIssuesTempTable.ColumnSet.All);
      }

      public static SitemapIssuesTempTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapIssuesTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapIssuesTempTable FillTable(DbCommand command, SitemapIssuesTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapIssuesTempTable table = new SitemapIssuesTempTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SitemapIssuesTempTable table)
      {
        UpdateTable(table, SitemapIssuesTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapIssuesTempTable table, SitemapIssuesTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapIssuesTempTable table, int commandTimeout)
      {
        UpdateTable(table, SitemapIssuesTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapIssuesTempTable table, SitemapIssuesTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapIssuesTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SitemapIssuesTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SitemapIssuesTempTable table, SitemapIssuesTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string CandidatesColumnName { get { return "Candidates"; } }

      public static string AnswersColumnName { get { return "Answers"; } }

      public static string LastResponseColumnName { get { return "LastResponse"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int IssueKeyMaxLength { get { return 100; } }

      public static bool ElectionKeyOfficeKeyIssueKeyExists(String electionKey, String officeKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return GetElectionKeyByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static String GetElectionKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return GetOfficeKeyByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static String GetOfficeKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return GetIssueKeyByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static String GetIssueKeyByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetCandidatesByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return _GetCandidatesByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static Int32 GetCandidatesByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, Int32 defaultValue)
      {
        return _GetCandidatesByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, defaultValue).Value;
      }

      private static Int32? _GetCandidatesByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Candidates FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetAnswersByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return _GetAnswersByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static Int32 GetAnswersByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, Int32 defaultValue)
      {
        return _GetAnswersByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, defaultValue).Value;
      }

      private static Int32? _GetAnswersByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Answers FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastResponseByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return _GetLastResponseByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, null);
      }

      public static DateTime GetLastResponseByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, DateTime defaultValue)
      {
        return _GetLastResponseByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, defaultValue).Value;
      }

      private static DateTime? _GetLastResponseByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastResponse FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByElectionKeyOfficeKeyIssueKey(Column _column, String electionKey, String officeKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SitemapIssuesTempTable GetDataByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return GetDataByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, -1);
      }

      public static SitemapIssuesTempTable GetDataByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, int commandTimeout)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,IssueKey,Candidates,Answers,LastResponse FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, SitemapIssuesTempTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyIssueKey(String newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyIssueKey(String newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByElectionKeyOfficeKeyIssueKey(String newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET IssueKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesByElectionKeyOfficeKeyIssueKey(Int32 newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET Candidates=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByElectionKeyOfficeKeyIssueKey(Int32 newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET Answers=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastResponseByElectionKeyOfficeKeyIssueKey(DateTime newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET LastResponse=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyIssueKey(Column _column, object newValue, String electionKey, String officeKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapIssuesTemp SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey)
      {
        return DeleteByElectionKeyOfficeKeyIssueKey(electionKey, officeKey, issueKey, -1);
      }

      public static int DeleteByElectionKeyOfficeKeyIssueKey(String electionKey, String officeKey, String issueKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM SitemapIssuesTemp WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SitemapIssuesTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapIssuesTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static SitemapIssuesTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.SitemapIssuesTemp

    #region votetemp.SitemapPoliticiansIssuesTemp

    public partial class SitemapPoliticiansIssuesTempRow : DataRow
    {
      internal SitemapPoliticiansIssuesTempRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 Answers
      {
        get { return (Int32) this["Answers"]; }
        set { this["Answers"] = value; }
      }

      public DateTime LastResponse
      {
        get { return (DateTime) this["LastResponse"]; }
        set { this["LastResponse"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapPoliticiansIssuesTempTable : TypedTableBase<SitemapPoliticiansIssuesTempRow>
    {
      public SitemapPoliticiansIssuesTempRow this[int index] { get { return (SitemapPoliticiansIssuesTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapPoliticiansIssuesTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapPoliticiansIssuesTempTable(); }

      new public SitemapPoliticiansIssuesTempRow NewRow() { return (SitemapPoliticiansIssuesTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapPoliticiansIssuesTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapPoliticiansIssuesTempRow); }

      public void RemoveRow(SitemapPoliticiansIssuesTempRow row) { this.Rows.Remove(row); }

      public SitemapPoliticiansIssuesTempRow NewRow(String politicianKey, String issueKey, Int32 answers, DateTime lastResponse)
      {
        SitemapPoliticiansIssuesTempRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.IssueKey = issueKey;
        row.Answers = answers;
        row.LastResponse = lastResponse;
        return row;
      }

      public void AddRow(String politicianKey, String issueKey, Int32 answers, DateTime lastResponse)
      {
        SitemapPoliticiansIssuesTempRow row = NewRow(politicianKey, issueKey, answers, lastResponse);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn AnswersColumn { get { return this.Columns["Answers"]; } }

      public DataColumn LastResponseColumn { get { return this.Columns["LastResponse"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answers", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastResponse", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapPoliticiansIssuesTempTable() : this(ColumnSet.All) { }

      public SitemapPoliticiansIssuesTempTable(ColumnSet columnSet)
      {
        this.TableName = "SitemapPoliticiansIssuesTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SitemapPoliticiansIssuesTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SitemapPoliticiansIssuesTemp
    {
      public const string TableName = "SitemapPoliticiansIssuesTemp";

      public enum Column { PoliticianKey, IssueKey, Answers, LastResponse }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.IssueKey, "IssueKey" },
        { Column.Answers, "Answers" },
        { Column.LastResponse, "LastResponse" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapPoliticiansIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE SitemapPoliticiansIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String politicianKey, String issueKey, Int32 answers, DateTime lastResponse)
      {
        Insert(politicianKey, issueKey, answers, lastResponse, -1);
      }

      public static void Insert(String politicianKey, String issueKey, Int32 answers, DateTime lastResponse, int commandTimeout)
      {
        string cmdText = "INSERT INTO SitemapPoliticiansIssuesTemp (PoliticianKey,IssueKey,Answers,LastResponse) VALUES (@PoliticianKey,@IssueKey,@Answers,@LastResponse)";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "Answers", answers);
        VoteTempDb.AddCommandParameter(cmd, "LastResponse", lastResponse);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,IssueKey,Answers,LastResponse FROM SitemapPoliticiansIssuesTemp";
        }
      }

      public static SitemapPoliticiansIssuesTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static SitemapPoliticiansIssuesTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,IssueKey,Answers,LastResponse FROM SitemapPoliticiansIssuesTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapPoliticiansIssuesTempTable.ColumnSet.All);
      }

      public static SitemapPoliticiansIssuesTempTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapPoliticiansIssuesTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapPoliticiansIssuesTempTable FillTable(DbCommand command, SitemapPoliticiansIssuesTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapPoliticiansIssuesTempTable table = new SitemapPoliticiansIssuesTempTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table)
      {
        UpdateTable(table, SitemapPoliticiansIssuesTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table, SitemapPoliticiansIssuesTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table, int commandTimeout)
      {
        UpdateTable(table, SitemapPoliticiansIssuesTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table, SitemapPoliticiansIssuesTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SitemapPoliticiansIssuesTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SitemapPoliticiansIssuesTempTable table, SitemapPoliticiansIssuesTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string AnswersColumnName { get { return "Answers"; } }

      public static string LastResponseColumnName { get { return "LastResponse"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int IssueKeyMaxLength { get { return 100; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByPoliticianKey(String politicianKey)
      {
        return CountByPoliticianKey(politicianKey, -1);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SitemapPoliticiansIssuesTempTable GetDataByPoliticianKey(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static SitemapPoliticiansIssuesTempTable GetDataByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,IssueKey,Answers,LastResponse FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, SitemapPoliticiansIssuesTempTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET Answers=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastResponseByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET LastResponse=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey)
      {
        return DeleteByPoliticianKey(politicianKey, -1);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static bool PoliticianKeyIssueKeyExists(String politicianKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return GetPoliticianKeyByPoliticianKeyIssueKey(politicianKey, issueKey, null);
      }

      public static String GetPoliticianKeyByPoliticianKeyIssueKey(String politicianKey, String issueKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return GetIssueKeyByPoliticianKeyIssueKey(politicianKey, issueKey, null);
      }

      public static String GetIssueKeyByPoliticianKeyIssueKey(String politicianKey, String issueKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetAnswersByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return _GetAnswersByPoliticianKeyIssueKey(politicianKey, issueKey, null);
      }

      public static Int32 GetAnswersByPoliticianKeyIssueKey(String politicianKey, String issueKey, Int32 defaultValue)
      {
        return _GetAnswersByPoliticianKeyIssueKey(politicianKey, issueKey, defaultValue).Value;
      }

      private static Int32? _GetAnswersByPoliticianKeyIssueKey(String politicianKey, String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Answers FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastResponseByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return _GetLastResponseByPoliticianKeyIssueKey(politicianKey, issueKey, null);
      }

      public static DateTime GetLastResponseByPoliticianKeyIssueKey(String politicianKey, String issueKey, DateTime defaultValue)
      {
        return _GetLastResponseByPoliticianKeyIssueKey(politicianKey, issueKey, defaultValue).Value;
      }

      private static DateTime? _GetLastResponseByPoliticianKeyIssueKey(String politicianKey, String issueKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastResponse FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPoliticianKeyIssueKey(Column _column, String politicianKey, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SitemapPoliticiansIssuesTempTable GetDataByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return GetDataByPoliticianKeyIssueKey(politicianKey, issueKey, -1);
      }

      public static SitemapPoliticiansIssuesTempTable GetDataByPoliticianKeyIssueKey(String politicianKey, String issueKey, int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,IssueKey,Answers,LastResponse FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, SitemapPoliticiansIssuesTempTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyIssueKey(String newValue, String politicianKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKeyIssueKey(String newValue, String politicianKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByPoliticianKeyIssueKey(Int32 newValue, String politicianKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET Answers=@newValue WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastResponseByPoliticianKeyIssueKey(DateTime newValue, String politicianKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET LastResponse=@newValue WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyIssueKey(Column _column, object newValue, String politicianKey, String issueKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansIssuesTemp SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyIssueKey(String politicianKey, String issueKey)
      {
        return DeleteByPoliticianKeyIssueKey(politicianKey, issueKey, -1);
      }

      public static int DeleteByPoliticianKeyIssueKey(String politicianKey, String issueKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM SitemapPoliticiansIssuesTemp WHERE PoliticianKey=@PoliticianKey AND IssueKey=@IssueKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SitemapPoliticiansIssuesTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapPoliticiansIssuesTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static SitemapPoliticiansIssuesTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.SitemapPoliticiansIssuesTemp

    #region votetemp.SitemapPoliticiansTemp

    public partial class SitemapPoliticiansTempRow : DataRow
    {
      internal SitemapPoliticiansTempRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapPoliticiansTempTable : TypedTableBase<SitemapPoliticiansTempRow>
    {
      public SitemapPoliticiansTempRow this[int index] { get { return (SitemapPoliticiansTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapPoliticiansTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapPoliticiansTempTable(); }

      new public SitemapPoliticiansTempRow NewRow() { return (SitemapPoliticiansTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapPoliticiansTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapPoliticiansTempRow); }

      public void RemoveRow(SitemapPoliticiansTempRow row) { this.Rows.Remove(row); }

      public SitemapPoliticiansTempRow NewRow(String politicianKey)
      {
        SitemapPoliticiansTempRow row = NewRow();
        row.PoliticianKey = politicianKey;
        return row;
      }

      public void AddRow(String politicianKey)
      {
        SitemapPoliticiansTempRow row = NewRow(politicianKey);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapPoliticiansTempTable() : this(ColumnSet.All) { }

      public SitemapPoliticiansTempTable(ColumnSet columnSet)
      {
        this.TableName = "SitemapPoliticiansTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected SitemapPoliticiansTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class SitemapPoliticiansTemp
    {
      public const string TableName = "SitemapPoliticiansTemp";

      public enum Column { PoliticianKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapPoliticiansTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE SitemapPoliticiansTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String politicianKey)
      {
        Insert(politicianKey, -1);
      }

      public static void Insert(String politicianKey, int commandTimeout)
      {
        string cmdText = "INSERT INTO SitemapPoliticiansTemp (PoliticianKey) VALUES (@PoliticianKey)";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey FROM SitemapPoliticiansTemp";
        }
      }

      public static SitemapPoliticiansTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static SitemapPoliticiansTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey FROM SitemapPoliticiansTemp";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapPoliticiansTempTable.ColumnSet.All);
      }

      public static SitemapPoliticiansTempTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapPoliticiansTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapPoliticiansTempTable FillTable(DbCommand command, SitemapPoliticiansTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapPoliticiansTempTable table = new SitemapPoliticiansTempTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table)
      {
        UpdateTable(table, SitemapPoliticiansTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table, SitemapPoliticiansTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table, int commandTimeout)
      {
        UpdateTable(table, SitemapPoliticiansTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table, SitemapPoliticiansTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, SitemapPoliticiansTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(SitemapPoliticiansTempTable table, SitemapPoliticiansTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM SitemapPoliticiansTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, null);
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM SitemapPoliticiansTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM SitemapPoliticiansTemp WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static SitemapPoliticiansTempTable GetDataByPoliticianKey(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static SitemapPoliticiansTempTable GetDataByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey FROM SitemapPoliticiansTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, SitemapPoliticiansTempTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansTemp SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE SitemapPoliticiansTemp SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey)
      {
        return DeleteByPoliticianKey(politicianKey, -1);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM SitemapPoliticiansTemp WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(SitemapPoliticiansTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapPoliticiansTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static SitemapPoliticiansTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.SitemapPoliticiansTemp

    #region votetemp.TempEmailAddresses

    public partial class TempEmailAddressesRow : DataRow
    {
      internal TempEmailAddressesRow(DataRowBuilder rb) : base(rb) {}

      public String Email
      {
        get { return this["EmailAddress"] as String; }
        set { if (value == null) this["EmailAddress"] = DBNull.Value; else this["EmailAddress"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String FirstName
      {
        get { return this["FName"] as String; }
        set { if (value == null) this["FName"] = DBNull.Value; else this["FName"] = value; }
      }

      public String LastName
      {
        get { return this["LName"] as String; }
        set { if (value == null) this["LName"] = DBNull.Value; else this["LName"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }
    }

    [Serializable]
    public partial class TempEmailAddressesTable : TypedTableBase<TempEmailAddressesRow>
    {
      public TempEmailAddressesRow this[int index] { get { return (TempEmailAddressesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TempEmailAddressesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TempEmailAddressesTable(); }

      new public TempEmailAddressesRow NewRow() { return (TempEmailAddressesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TempEmailAddressesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TempEmailAddressesRow); }

      public void RemoveRow(TempEmailAddressesRow row) { this.Rows.Remove(row); }

      public TempEmailAddressesRow NewRow(String email, String contact, String politicianKey, String officeKey, String electionKey, String stateCode, String partyKey, String firstName, String lastName, String title, String address, String cityStateZip)
      {
        TempEmailAddressesRow row = NewRow();
        row.Email = email;
        row.Contact = contact;
        row.PoliticianKey = politicianKey;
        row.OfficeKey = officeKey;
        row.ElectionKey = electionKey;
        row.StateCode = stateCode;
        row.PartyKey = partyKey;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Title = title;
        row.Address = address;
        row.CityStateZip = cityStateZip;
        return row;
      }

      public void AddRow(String email, String contact, String politicianKey, String officeKey, String electionKey, String stateCode, String partyKey, String firstName, String lastName, String title, String address, String cityStateZip)
      {
        TempEmailAddressesRow row = NewRow(email, contact, politicianKey, officeKey, electionKey, stateCode, partyKey, firstName, lastName, title, address, cityStateZip);
        AddRow(row);
      }

      public DataColumn EmailColumn { get { return this.Columns["EmailAddress"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LName"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("EmailAddress", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TempEmailAddressesTable() : this(ColumnSet.All) { }

      public TempEmailAddressesTable(ColumnSet columnSet)
      {
        this.TableName = "TempEmailAddresses";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TempEmailAddressesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TempEmailAddresses
    {
      public const string TableName = "TempEmailAddresses";

      public enum Column { Email, Contact, PoliticianKey, OfficeKey, ElectionKey, StateCode, PartyKey, FirstName, LastName, Title, Address, CityStateZip }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Email, "EmailAddress" },
        { Column.Contact, "Contact" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.StateCode, "StateCode" },
        { Column.PartyKey, "PartyKey" },
        { Column.FirstName, "FName" },
        { Column.LastName, "LName" },
        { Column.Title, "Title" },
        { Column.Address, "Address" },
        { Column.CityStateZip, "CityStateZip" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailAddresses";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE TempEmailAddresses";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String email, String contact, String politicianKey, String officeKey, String electionKey, String stateCode, String partyKey, String firstName, String lastName, String title, String address, String cityStateZip)
      {
        Insert(email, contact, politicianKey, officeKey, electionKey, stateCode, partyKey, firstName, lastName, title, address, cityStateZip, -1);
      }

      public static void Insert(String email, String contact, String politicianKey, String officeKey, String electionKey, String stateCode, String partyKey, String firstName, String lastName, String title, String address, String cityStateZip, int commandTimeout)
      {
        string cmdText = "INSERT INTO TempEmailAddresses (EmailAddress,Contact,PoliticianKey,OfficeKey,ElectionKey,StateCode,PartyKey,FName,LName,Title,Address,CityStateZip) VALUES (@Email,@Contact,@PoliticianKey,@OfficeKey,@ElectionKey,@StateCode,@PartyKey,@FirstName,@LastName,@Title,@Address,@CityStateZip)";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "Contact", contact);
        VoteTempDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteTempDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteTempDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteTempDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteTempDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteTempDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteTempDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteTempDb.AddCommandParameter(cmd, "Title", title);
        VoteTempDb.AddCommandParameter(cmd, "Address", address);
        VoteTempDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT EmailAddress,Contact,PoliticianKey,OfficeKey,ElectionKey,StateCode,PartyKey,FName,LName,Title,Address,CityStateZip FROM TempEmailAddresses";
        }
      }

      public static TempEmailAddressesTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static TempEmailAddressesTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT EmailAddress,Contact,PoliticianKey,OfficeKey,ElectionKey,StateCode,PartyKey,FName,LName,Title,Address,CityStateZip FROM TempEmailAddresses";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TempEmailAddressesTable.ColumnSet.All);
      }

      public static TempEmailAddressesTable FillTable(DbCommand command)
      {
        return FillTable(command, TempEmailAddressesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TempEmailAddressesTable FillTable(DbCommand command, TempEmailAddressesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          command.Connection = cn;
          TempEmailAddressesTable table = new TempEmailAddressesTable(columnSet);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TempEmailAddressesTable table)
      {
        UpdateTable(table, TempEmailAddressesTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(TempEmailAddressesTable table, TempEmailAddressesTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(TempEmailAddressesTable table, int commandTimeout)
      {
        UpdateTable(table, TempEmailAddressesTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(TempEmailAddressesTable table, TempEmailAddressesTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(TempEmailAddressesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, TempEmailAddressesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TempEmailAddressesTable table, TempEmailAddressesTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteTempDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteTempDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteTempDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteTempDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EmailColumnName { get { return "EmailAddress"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string FirstNameColumnName { get { return "FName"; } }

      public static string LastNameColumnName { get { return "LName"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int FirstNameMaxLength { get { return int.MaxValue; } }

      public static int LastNameMaxLength { get { return int.MaxValue; } }

      public static int TitleMaxLength { get { return int.MaxValue; } }

      public static int AddressMaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailByEmail(String email)
      {
        return GetEmailByEmail(email, null);
      }

      public static String GetEmailByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailAddress FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactByEmail(String email)
      {
        return GetContactByEmail(email, null);
      }

      public static String GetContactByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Contact FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByEmail(String email)
      {
        return GetPoliticianKeyByEmail(email, null);
      }

      public static String GetPoliticianKeyByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByEmail(String email)
      {
        return GetOfficeKeyByEmail(email, null);
      }

      public static String GetOfficeKeyByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByEmail(String email)
      {
        return GetElectionKeyByEmail(email, null);
      }

      public static String GetElectionKeyByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByEmail(String email)
      {
        return GetStateCodeByEmail(email, null);
      }

      public static String GetStateCodeByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyByEmail(String email)
      {
        return GetPartyKeyByEmail(email, null);
      }

      public static String GetPartyKeyByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstNameByEmail(String email)
      {
        return GetFirstNameByEmail(email, null);
      }

      public static String GetFirstNameByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FName FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameByEmail(String email)
      {
        return GetLastNameByEmail(email, null);
      }

      public static String GetLastNameByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LName FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitleByEmail(String email)
      {
        return GetTitleByEmail(email, null);
      }

      public static String GetTitleByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Title FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressByEmail(String email)
      {
        return GetAddressByEmail(email, null);
      }

      public static String GetAddressByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Address FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZipByEmail(String email)
      {
        return GetCityStateZipByEmail(email, null);
      }

      public static String GetCityStateZipByEmail(String email, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmailAddresses WHERE EmailAddress=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        result = VoteTempDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailAddressesTable GetDataByEmail(String email)
      {
        return GetDataByEmail(email, -1);
      }

      public static TempEmailAddressesTable GetDataByEmail(String email, int commandTimeout)
      {
        string cmdText = "SELECT EmailAddress,Contact,PoliticianKey,OfficeKey,ElectionKey,StateCode,PartyKey,FName,LName,Title,Address,CityStateZip FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, TempEmailAddressesTable.ColumnSet.All);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET EmailAddress=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET Contact=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET PoliticianKey=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET OfficeKey=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET ElectionKey=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET StateCode=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET PartyKey=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET FName=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET LName=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET Title=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET Address=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET CityStateZip=@newValue WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE TempEmailAddresses SET {0}=@newValue WHERE EmailAddress=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, -1);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        VoteTempDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email)
      {
        return DeleteByEmail(email, -1);
      }

      public static int DeleteByEmail(String email, int commandTimeout)
      {
        string cmdText = "DELETE FROM TempEmailAddresses WHERE EmailAddress=@Email";
        DbCommand cmd = VoteTempDb.GetCommand(cmdText, commandTimeout);
        VoteTempDb.AddCommandParameter(cmd, "Email", email);
        return VoteTempDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TempEmailAddressesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TempEmailAddressesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TempEmailAddresses()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votetemp.TempEmailAddresses
  }
}
