using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using DB.Vote;

namespace Vote
{
  public partial class ReferendumPage : CacheablePage
  {
    #region Caching support

    protected override string GetCacheKey()
    {
      return UrlManager.GetStateCodeFromHostName() + "." + QueryState + "." +
        QueryElection + "." + QueryReferendum;
    }

    protected override string GetCacheType()
    {
      return "Referendum";
    }

    #endregion Caching support

    private readonly string _ElectionKey = QueryElection;
    private readonly string _ReferendumKey = QueryReferendum;
    private string _ElectionDescription;
    private ReferendumsRow _Referendum;

    private string GetPageTitle()
    {
      return
        PageCache.Referendums.GetReferendumTitle(_ElectionKey, _ReferendumKey) +
          ", " +
          StateCache.GetStateName(Referendums.GetStateCodeFromKey(_ReferendumKey)) +
          " Ballot Measure / Referendum" + ", " + _ElectionDescription;
    }

    private static Control CreateAnchor(string url, string anchorText, string cssClass = "")
    {
      return new HtmlAnchor
      {
        HRef = NormalizeUrl(url),
        InnerHtml = anchorText,
        Target = "view"
      }.AddCssClasses(cssClass);
    }

    private void CreateReport()
    {
      ReferendumTitle.InnerHtml = _Referendum.ReferendumTitle.ReplaceNewLinesWithParagraphs();
      ReferendumSubTitle.InnerHtml = StateCache.GetStateName(Referendums.GetStateCodeFromKey(_ReferendumKey)) +
        " Ballot Measure / Referendum";
      ReferendumSubTitle.Visible = false;
      ReferendumDescription.InnerHtml = _ElectionDescription;
      ReferendumElection.InnerHtml = _ElectionDescription;

      var referendumDescription = _Referendum.ReferendumDescription;
      if (string.IsNullOrWhiteSpace(referendumDescription))
      {
        ReferendumDescriptionLabel.Visible = false;
        ReferendumDescription.Visible = false;
      }
      else
      {
        ReferendumDescriptionLabel.InnerHtml = "Description:";
        ReferendumDescription.InnerHtml = referendumDescription.ReplaceNewLinesWithParagraphs();
      }

      var detail = _Referendum.ReferendumDetail;
      var detailUrl = _Referendum.ReferendumDetailUrl;
      if (string.IsNullOrWhiteSpace(detailUrl) && string.IsNullOrWhiteSpace(detail))
      {
        ReferendumDetailLabel.Visible = false;
        ReferendumDetail.Visible = false;
      }
      else if (string.IsNullOrWhiteSpace(detail))
      {
        ReferendumDetailLabel.InnerHtml = CreateAnchor(detailUrl, "Link to Detail", "no-print")
          .RenderToString();
        ReferendumDetail.Visible = false;
      }
      else
      {
        ReferendumDetailLabel.InnerHtml = "Detail " + CreateAnchor(detailUrl, "(link to detail)",
          "parenthetical no-print").RenderToString();
        ReferendumDetail.InnerHtml = detail.ReplaceNewLinesWithParagraphs();
      }

      var fullText = _Referendum.ReferendumFullText;
      var fullTextUrl = _Referendum.ReferendumFullTextUrl;
      if (string.IsNullOrWhiteSpace(fullTextUrl) && string.IsNullOrWhiteSpace(fullText))
      {
        ReferendumFullTextLabel.Visible = false;
        ReferendumFullText.Visible = false;
      }
      else if (string.IsNullOrWhiteSpace(fullText))
      {
        ReferendumFullTextLabel.InnerHtml = CreateAnchor(fullTextUrl, "Link to Full Text", "no-print")
          .RenderToString();
        ReferendumFullText.Visible = false;
      }
      else
      {
        ReferendumFullTextLabel.InnerHtml = "Full Text " + CreateAnchor(fullTextUrl, "(link to full text)")
            .RenderToString();
        ReferendumFullText.InnerHtml = fullText.ReplaceNewLinesWithParagraphs();
      }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
      _ElectionDescription = PageCache.Elections.GetElectionDesc(_ElectionKey);
      var table = Referendums.GetData(_ElectionKey, _ReferendumKey);
      if (table.Count == 1)
        _Referendum = table[0];

      var pageTitle = GetPageTitle();
      Title = pageTitle;
      MetaDescription = pageTitle;
      MetaKeywords = pageTitle;

      if (_Referendum != null)
        CreateReport();
    }
  }
}