using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web.Script.Services;
using System.Web.Services;
using System.Web.UI;
using DB;
using DB.Vote;
using DB.VoteLog;
using Vote.Reports;
using DonationNagsRow = DB.VoteCacheLocal.DonationNagsRow;

namespace Vote
{
  [WebService(Namespace = "http://tempuri.org/")]
  [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
  [ToolboxItem(false)]
  [ScriptService]
  public class WebService : System.Web.Services.WebService
  {
    private static string EncodeBallotChoices(object choices)
    {
      // offices separated by $
      // candidates separated by |
      // writeIn indicated by *
      string result = null;
      var officeDictionary = choices as Dictionary<string, object>;
      if (officeDictionary != null)
      {
        var offices = new List<string>();
        foreach (var officeKey in officeDictionary.Keys)
        {
          var candidateDictionary = officeDictionary[officeKey] as Dictionary<string, object>;
          if (candidateDictionary != null)
          {
            var keys = new List<string> { Offices.GetId(officeKey).ToString() };
            foreach (var politicianKey in candidateDictionary.Keys)
            {
              if (candidateDictionary[politicianKey] is int)
              {
                // politician key
                keys.Add(Politicians.GetId(politicianKey).ToString());
              }
              else
              {
                var writeIn = candidateDictionary[politicianKey] as string;
                if (writeIn != null)
                {
                  writeIn = Uri.EscapeUriString(Regex.Replace(writeIn, "[$|]", "-"));
                  keys.Add("*" + writeIn);
                }
              }
            }
            offices.Add(string.Join("|", keys));
          }
        }
        result = string.Join("$", offices);
      }
      return result;
    }

    // ReSharper disable NotAccessedField.Global
    public class DonationNag
    {
      public string MessageHeading;
      public string MessageText;
      public int NextMessageNumber;
    }

    public class UpcomingElection
    {
      public string Description;
      public string Href;
    }

    public class ExplorerInfo
    {
      public string Title = string.Empty;
      public string Html = string.Empty;
    }

    // ReSharper restore NotAccessedField.Global

    [WebMethod]
    public object DecodeBallotChoices(string choices)
    {
      var officeDictionary = new Dictionary<string, object>();
      var officeSplit = choices.Split('$');
      foreach (var office in officeSplit)
      {
        var candidateSplit = office.Split('|');
        if (candidateSplit.Length > 1)
        {
          int id;
          if (!int.TryParse(candidateSplit[0], out id)) id = -1;
          var officeKey = Offices.GetOfficeKeyById(id);
          if (!string.IsNullOrWhiteSpace(officeKey))
          {
            var candidateDictionary = new Dictionary<string, object>();
            for (var inx = 1; inx < candidateSplit.Length; inx++)
            {
              var candidate = candidateSplit[inx];
              if (candidate.Length > 1 && candidate.StartsWith("*")) // writeIn
              {
                var writeIn = Uri.UnescapeDataString(candidate.Substring(1)).Trim();
                if (!string.IsNullOrWhiteSpace(writeIn))
                  candidateDictionary.Add("writeIn", writeIn);
              }
              else
              {
                if (!int.TryParse(candidate, out id)) id = -1;
                var politicianKey = Politicians.GetPoliticianKeyById(id);
                if (!string.IsNullOrWhiteSpace(politicianKey))
                  candidateDictionary.Add(politicianKey.ToUpperInvariant(), 1);
              }
            }
            if (candidateDictionary.Count > 0)
              officeDictionary.Add(officeKey.ToUpperInvariant(), candidateDictionary);
          }
        }
      }
      return officeDictionary.Count == 0 ? null : officeDictionary;
    }

    [WebMethod]
    public string SendBallotChoices(string name, string email, string url, object choices)
    {
      var encodedChoices = EncodeBallotChoices(choices);
      var uri = new Uri(url);
      var qsc = QueryStringCollection.Parse(uri.Query);
      var electionKey = qsc["election"];

      // remove any old friend and choices
      qsc.Remove("friend");
      qsc.Remove("choices");

      // add in new
      qsc.Add("friend", name);
      qsc.Add("choices", encodedChoices);

      var newUri = new UriBuilder(uri.Scheme, uri.Host, uri.Port, uri.AbsolutePath)
      {
        Query = qsc.ToString()
      };

      // get the template
      var template =
        EmailTemplates.GetDataByNameOwnerTypeOwner("Share Ballot Choices", "U", "SpecialTemplates")[
          0];

      var substitutions = new Substitutions("[[ShareChoicesName]]", name, "[[ShareChoicesLink]]",
        Substitutions.CreateWebAnchor(newUri.Uri, "View My Choices"))
      {
        ElectionKey = electionKey
      };

      var subject = substitutions.Substitute(template.Subject);
      var body = substitutions.Substitute(template.Body);

      return null;
    }

    [WebMethod]
    public AddressFinderResult FindAddress(string input, bool remember, string email, string siteId)
    {
      var result = AddressFinder.Find(input, true, email, remember);
      result.DomainCode = UrlManager.CurrentDomainDataCode;

      if (!string.IsNullOrEmpty(siteId) &&
        !string.IsNullOrEmpty(result.SuccessMessage))
        result.RedirectUrl += "&Site=" + siteId;

      return result;
    }

    [WebMethod]
    public AddressFinderResult FindState(string input, string email, string siteId)
    {
      var redirectUri = UrlManager.GetForVotersPageUri(input);
      //Uri redirectUri = UrlManager.GetOfficialsPageUri(input);

      var result = new AddressFinderResult
        {
          State = input.ToUpper(),
          RedirectUrl = redirectUri.ToString(),
          SuccessMessage =
            "Redirecting to the " + StateCache.GetStateName(input) +
              " 'for Voters' page"
        };

      result.FillHostAndState();

      if (!string.IsNullOrWhiteSpace(email))
        result.Log(email);

      if (!string.IsNullOrEmpty(siteId) &&
        !string.IsNullOrEmpty(result.SuccessMessage))
        result.RedirectUrl += "&Site=" + siteId;

      return result;
    }

    [WebMethod]
    public SimpleListItem[] GetCongressionalDistricts(string stateCode)
    {
      try
      { // reduce CongressionalDistrict codes from 3 to 2 characters
        return Offices.GetDistrictItems(stateCode, OfficeClass.USHouse)
          .Select(i =>
          {
            i.Value = i.Value.Substring(1);
            return i;
          })
          .ToArray();
      }
      catch (Exception e)
      {
        VotePage.LogException("WebService/GetCongressionalDistricts", e);
        throw;
      }
    }

    [WebMethod]
    public SimpleListItem[] GetCounties(string stateCode)
    {
      try
      {
        return CountyCache.GetCountiesByState(stateCode)
          .Select(
            countyCode =>
              new SimpleListItem
              {
                Text = Counties.GetName(stateCode, countyCode),
                Value = countyCode
              })
          .ToArray();
      }
      catch (Exception e)
      {
        VotePage.LogException("WebService/GetCounties", e);
        throw;
      }
    }

    [WebMethod]
    public DonationNag GetDonationNag(int cookieIndex)
    {
      var result = new DonationNag();
      if (MemCache.IsNaggingEnabled)
      {
        var donationNagsTable = MemCache.CachedDonationNagsTable;
        var donationNagsRow = donationNagsTable.Cast<DonationNagsRow>()
          .FirstOrDefault(row => row.MessageNumber == cookieIndex);
        var maxIndex = Enumerable.Select(donationNagsTable.Cast<DonationNagsRow>(), row => row.MessageNumber)
          .Max();
        result.NextMessageNumber = Math.Min(cookieIndex + 1, maxIndex);
        if (donationNagsRow != null) // no dialog if null
        {
          result.MessageHeading = donationNagsRow.MessageHeading;
          result.MessageText = donationNagsRow.MessageText;
          if (donationNagsRow.NextMessageNumber != null)
            result.NextMessageNumber = donationNagsRow.NextMessageNumber.Value;
        }
      }
      else
      {
        result.MessageHeading = string.Empty;
        result.MessageText = string.Empty;
        result.NextMessageNumber = cookieIndex;
      }
      return result;
    }

    [WebMethod]
    public SimpleListItem[] GetElections(string stateCode)
    {
      try
      {
        return
         new List<SimpleListItem>
          {
            new SimpleListItem(string.Empty, "<select an election>")
          }.Union(
           Enumerable.Select(Elections.GetViewableControlDataByStateCodeCountyCodeLocalCode(
               stateCode, string.Empty, string.Empty)
               .OrderByDescending(row => row.ElectionDate)
               .ThenBy(row => row.ElectionOrder)
               .ThenBy(row => row.ElectionDesc), row =>
               new SimpleListItem(row.ElectionKey,
                 row.ElectionDesc)))
           .ToArray();
      }
      catch (Exception e)
      {
        VotePage.LogException("WebService/GetElections", e);
        throw;
      }
    }

    [WebMethod]
    public ExplorerInfo GetElectionExplorer(string electionKey, string congress,
      string stateSenate, string stateHouse, string countyCode)
    {
      int totalContests;
      int ballotMeasures;
      var ei = new ExplorerInfo();
      var report = BallotReport2Tabbed.GetReport(electionKey, congress, stateSenate,
        stateHouse, countyCode, out totalContests, out ballotMeasures);
      if (totalContests > 0 || ballotMeasures > 0)
      {
        ei.Title = Elections.GetElectionDesc(electionKey);
        // render to string mucks up the hrefs in the tabs, so fix them
        ei.Html = report.RenderToString().Replace("href=\"../#", "href=\"#");
      }
      return ei;
    }

    [WebMethod]
    public string GetMoreText(string key)
    {
      var keyPart = key.Split(new []{':'});
      var result = string.Empty;
      if (keyPart.Length >= 3) // need at least type, min and max
      {
        var type = keyPart[0];
        int min;
        int max;
        if (int.TryParse(keyPart[1], out min) && int.TryParse(keyPart[2], out max))
          switch (type)
          {
            case "answer":
            case "ytdesc":
              if (keyPart.Length == 6) // need PoliticianKey, QuestionKey and Sequence
              {
                var politicianKey = keyPart[3];
                var questionKey = keyPart[4];
                int sequence;
                string text = null;
                if (int.TryParse(keyPart[5], out sequence))
                  switch (type)
                  {
                    case "answer":
                      text = Answers.GetAnswerByPoliticianKeyQuestionKeySequence(politicianKey,
                        questionKey, sequence).SafeString();
                      break;

                    case "ytdesc":
                    {
                      DataRow row = null;
                      if (sequence == -1) // from politicians
                        row = Politicians.GetPoliticianIntroReportData(politicianKey);
                      else
                      {
                        var table = Answers.GetVideoDescData(politicianKey, questionKey, sequence);
                        if (table.Count == 1)
                          row = table[0];
                      }
                      if (row != null)
                        text = ResponsiveIssuesReport.FormatYouTubeDescription(
                          row.YouTubeDescription().SafeString(),
                          row.YouTubeRunningTime());
                      break;
                      
                    }
                  }
                if (!string.IsNullOrEmpty(text))
                  result = VotePage.GetMorePart2(text, min, max);
              }
              break;
          }
      }
      return result;
    }

    [WebMethod]
    public SimpleListItem[] GetStateHouseDistricts(string stateCode)
    {
      try
      {
        return Offices.GetDistrictItems(stateCode, OfficeClass.StateHouse)
          .ToArray();
      }
      catch (Exception e)
      {
        VotePage.LogException("WebService/GetStateHouseDistricts", e);
        throw;
      }
    }

    [WebMethod]
    public string GetStateLinks(string input)
    {
      var div = new HtmlDiv();
      ForResearchPage.AddStateLinksToDiv(div, input, true, true);

      var htmlArray = div.Controls.OfType<Control>()
        .Select(db.RenderToString)
        .ToArray();

      return string.Join("", htmlArray);
    }

    [WebMethod]
    public SimpleListItem[] GetStateSenateDistricts(string stateCode)
    {
      try
      {
        return Offices.GetDistrictItems(stateCode, OfficeClass.StateSenate)
          .ToArray();
      }
      catch (Exception e)
      {
        VotePage.LogException("WebService/GetStateSenateDistricts", e);
        throw;
      }
    }

    [WebMethod]
    public UpcomingElection[] GetUpcomingElections(
      string stateCode, string congress, string stateSenate, string stateHouse,
      string county)
    {
      var list = new List<UpcomingElection>();

      var futureElectionsTable =
        Elections.GetFutureViewableDisplayDataByStateCode(stateCode);

      foreach (var row in futureElectionsTable)
      {
        list.Add(
          new UpcomingElection
            {
              Description = row.ElectionDesc,
              Href =
                UrlManager.GetBallotPageUri(
                  row.ElectionKey, congress, stateSenate, stateHouse, county)
                  .ToString()
            });
      }

      // mod 1/24/2013
      // if there are no future elections, return the most recent past election(s)
      if (list.Count == 0)
      {
        var pastElectionsTable =
          Elections.GetPastViewableDisplayDataByStateCode(stateCode);

        if (pastElectionsTable.Count != 0)
        {
          var date = pastElectionsTable[0].ElectionDate;
          foreach (var row in pastElectionsTable)
          {
            if (row.ElectionDate != date) break;
            list.Add(
              new UpcomingElection
                {
                  Description = row.ElectionDesc,
                  Href =
                    UrlManager.GetBallotPageUri(
                      row.ElectionKey, congress, stateSenate, stateHouse, county)
                      .ToString()
                });
          }
        }
      }

      return list.ToArray();
    }

    [WebMethod]
    public void SubmitSampleBallotEmail(
      string email, string siteId, string script, string stateCode,
      string electionKey, string congressionalDistrict, string stateSenateDistrict,
      string stateHouseDistrict, string county)
    {
      try
      {
        var table = LogSampleBallotRequests.GetDataByEmail(email);
        LogSampleBallotRequestsRow row;
        if (table.Count == 0)
        {
          row = table.NewRow();
          row.Email = email;
          table.AddRow(row);
        }
        else
          row = table[0];
        row.LastUpdateDate = DateTime.UtcNow;
        row.SiteId = siteId;
        row.Script = script;
        row.ExplicitOptIn = true;
        row.StateCode = stateCode;
        row.ElectionKey = electionKey;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        LogSampleBallotRequests.UpdateTable(table);
      }
      // ReSharper disable once EmptyGeneralCatchClause
      catch {} // tolerate errors
    }
  }
}