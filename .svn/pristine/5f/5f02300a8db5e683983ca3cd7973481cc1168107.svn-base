//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  public enum DbProvider { MsSql, MySql }

  public abstract class DataReaderBase : IDataReader, IDisposable, IDataRecord
  {
    DbDataReader _DataReader;
    DbConnection _Connection;
    public DataReaderBase(DbDataReader dataReader, DbConnection connection) { _DataReader = dataReader; _Connection = connection; }
    public DbDataReader DataReader { get { return _DataReader; } }
    public int Depth { get { return _DataReader.Depth; } }
    public int FieldCount { get { return _DataReader.FieldCount; } }
    public bool HasRows { get { return _DataReader.HasRows; } }
    public bool IsClosed { get { return _DataReader.IsClosed; } }
    public int RecordsAffected { get { return _DataReader.RecordsAffected; } }
    public virtual int VisibleFieldCount { get { return _DataReader.VisibleFieldCount; } }
    public object this[int ordinal] { get { return _DataReader[ordinal]; } }
    public object this[string name] { get { return _DataReader[name]; } }
    public void Close() { _DataReader.Close(); }
    public void Dispose() { _DataReader.Dispose(); if (_Connection != null) _Connection.Dispose(); }
    public bool GetBoolean(int ordinal) { return _DataReader.GetBoolean(ordinal); }
    public byte GetByte(int ordinal) { return _DataReader.GetByte(ordinal); }
    public long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) { return _DataReader.GetBytes(ordinal, dataOffset, buffer, bufferOffset, length); }
    public char GetChar(int ordinal) { return _DataReader.GetChar(ordinal); }
    public long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) { return _DataReader.GetChars(ordinal, dataOffset, buffer, bufferOffset, length); }
    public string GetDataTypeName(int ordinal) { return _DataReader.GetDataTypeName(ordinal); }
    public DateTime GetDateTime(int ordinal) { return _DataReader.GetDateTime(ordinal); }
    public decimal GetDecimal(int ordinal) { return _DataReader.GetDecimal(ordinal); }
    public double GetDouble(int ordinal) { return _DataReader.GetDouble(ordinal); }
    public Type GetFieldType(int ordinal) { return _DataReader.GetFieldType(ordinal); }
    public float GetFloat(int ordinal) { return _DataReader.GetFloat(ordinal); }
    public Guid GetGuid(int ordinal) { return _DataReader.GetGuid(ordinal); }
    public short GetInt16(int ordinal) { return _DataReader.GetInt16(ordinal); }
    public int GetInt32(int ordinal) { return _DataReader.GetInt32(ordinal); }
    public long GetInt64(int ordinal) { return _DataReader.GetInt64(ordinal); }
    public string GetName(int ordinal) { return _DataReader.GetName(ordinal); }
    public int GetOrdinal(string name) { return _DataReader.GetOrdinal(name); }
    public virtual Type GetProviderSpecificFieldType(int ordinal) { return _DataReader.GetProviderSpecificFieldType(ordinal); }
    public virtual object GetProviderSpecificValue(int ordinal) { return _DataReader.GetProviderSpecificValue(ordinal); }
    public virtual int GetProviderSpecificValues(object[] values) { return _DataReader.GetProviderSpecificValues(values); }
    public DataTable GetSchemaTable() { return _DataReader.GetSchemaTable(); }
    public string GetString(int ordinal) { return _DataReader.GetString(ordinal); }
    public object GetValue(int ordinal) { return _DataReader.GetValue(ordinal); }
    public int GetValues(object[] values) { return _DataReader.GetValues(values); }
    public bool IsDBNull(int ordinal) { return _DataReader.IsDBNull(ordinal); }
    public bool NextResult() { return _DataReader.NextResult(); }
    public bool Read() { return _DataReader.Read(); }
    IDataReader IDataRecord.GetData(int ordinal) { return _DataReader.GetData(ordinal); }
  }

  namespace Vote
  {
    #region vote Database

    public static partial class VoteDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=vote";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVote.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVote.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout = -1)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion vote Database

    #region vote.Addresses

    public partial class AddressesRow : DataRow
    {
      internal AddressesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String SourceCode
      {
        get { return this["SourceCode"] as String; }
        set { if (value == null) this["SourceCode"] = DBNull.Value; else this["SourceCode"] = value; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
        set { this["OptOut"] = value; }
      }

      public Boolean SendSampleBallots
      {
        get { return (Boolean) this["SendSampleBallots"]; }
        set { this["SendSampleBallots"] = value; }
      }

      public DateTime EmailAttachedDate
      {
        get { return (DateTime) this["EmailAttachedDate"]; }
        set { this["EmailAttachedDate"] = value; }
      }

      public String EmailAttachedSource
      {
        get { return this["EmailAttachedSource"] as String; }
        set { if (value == null) this["EmailAttachedSource"] = DBNull.Value; else this["EmailAttachedSource"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public DateTime DistrictLookupDate
      {
        get { return (DateTime) this["DistrictLookupDate"]; }
        set { this["DistrictLookupDate"] = value; }
      }
    }

    [Serializable]
    public partial class AddressesTable : TypedTableBase<AddressesRow>
    {
      public AddressesRow this[int index] { get { return (AddressesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AddressesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AddressesTable(); }

      new public AddressesRow NewRow() { return (AddressesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AddressesRow(rb); }

      protected override Type GetRowType()
      { return typeof(AddressesRow); }

      public void RemoveRow(AddressesRow row) { this.Rows.Remove(row); }

      public AddressesRow NewRow(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate)
      {
        AddressesRow row = NewRow();
        row.Id = id;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Email = email;
        row.Phone = phone;
        row.DateStamp = dateStamp;
        row.SourceCode = sourceCode;
        row.OptOut = optOut;
        row.SendSampleBallots = sendSampleBallots;
        row.EmailAttachedDate = emailAttachedDate;
        row.EmailAttachedSource = emailAttachedSource;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.DistrictLookupDate = districtLookupDate;
        return row;
      }

      public void AddRow(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate)
      {
        AddressesRow row = NewRow(id, firstName, lastName, address, city, stateCode, zip5, zip4, email, phone, dateStamp, sourceCode, optOut, sendSampleBallots, emailAttachedDate, emailAttachedSource, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, districtLookupDate);
        AddRow(row);
      }

      public AddressesRow NewRow(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate)
      {
        AddressesRow row = NewRow();
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Email = email;
        row.Phone = phone;
        row.DateStamp = dateStamp;
        row.SourceCode = sourceCode;
        row.OptOut = optOut;
        row.SendSampleBallots = sendSampleBallots;
        row.EmailAttachedDate = emailAttachedDate;
        row.EmailAttachedSource = emailAttachedSource;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.DistrictLookupDate = districtLookupDate;
        return row;
      }

      public void AddRow(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate)
      {
        AddressesRow row = NewRow(firstName, lastName, address, city, stateCode, zip5, zip4, email, phone, dateStamp, sourceCode, optOut, sendSampleBallots, emailAttachedDate, emailAttachedSource, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, districtLookupDate);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn SourceCodeColumn { get { return this.Columns["SourceCode"]; } }

      public DataColumn OptOutColumn { get { return this.Columns["OptOut"]; } }

      public DataColumn SendSampleBallotsColumn { get { return this.Columns["SendSampleBallots"]; } }

      public DataColumn EmailAttachedDateColumn { get { return this.Columns["EmailAttachedDate"]; } }

      public DataColumn EmailAttachedSourceColumn { get { return this.Columns["EmailAttachedSource"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn DistrictLookupDateColumn { get { return this.Columns["DistrictLookupDate"]; } }

      public enum ColumnSet { All, Emails, DistrictCoding }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SourceCode", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OptOut", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SendSampleBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAttachedDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAttachedSource", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictLookupDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDistrictCodingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictLookupDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public AddressesTable() : this(ColumnSet.All) { }

      public AddressesTable(ColumnSet columnSet)
      {
        this.TableName = "Addresses";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Emails:
            InitEmailsColumns();
            break;

          case ColumnSet.DistrictCoding:
            InitDistrictCodingColumns();
            break;
        }
      }

      protected AddressesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Addresses
    {
      public const string TableName = "Addresses";

      public enum Column { Id, FirstName, LastName, Address, City, StateCode, Zip5, Zip4, Email, Phone, DateStamp, SourceCode, OptOut, SendSampleBallots, EmailAttachedDate, EmailAttachedSource, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County, DistrictLookupDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.Email, "Email" },
        { Column.Phone, "Phone" },
        { Column.DateStamp, "DateStamp" },
        { Column.SourceCode, "SourceCode" },
        { Column.OptOut, "OptOut" },
        { Column.SendSampleBallots, "SendSampleBallots" },
        { Column.EmailAttachedDate, "EmailAttachedDate" },
        { Column.EmailAttachedSource, "EmailAttachedSource" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" },
        { Column.DistrictLookupDate, "DistrictLookupDate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Addresses (Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate) VALUES (@Id,@FirstName,@LastName,@Address,@City,@StateCode,@Zip5,@Zip4,@Email,@Phone,@DateStamp,@SourceCode,@OptOut,@SendSampleBallots,@EmailAttachedDate,@EmailAttachedSource,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@DistrictLookupDate)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "SourceCode", sourceCode);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "SendSampleBallots", sendSampleBallots);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedDate", emailAttachedDate);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedSource", emailAttachedSource);
        VoteDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteDb.AddCommandParameter(cmd, "County", county);
        VoteDb.AddCommandParameter(cmd, "DistrictLookupDate", districtLookupDate);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, DateTime dateStamp, String sourceCode, Boolean optOut, Boolean sendSampleBallots, DateTime emailAttachedDate, String emailAttachedSource, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, DateTime districtLookupDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Addresses (FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate) VALUES (@FirstName,@LastName,@Address,@City,@StateCode,@Zip5,@Zip4,@Email,@Phone,@DateStamp,@SourceCode,@OptOut,@SendSampleBallots,@EmailAttachedDate,@EmailAttachedSource,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@DistrictLookupDate)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteDb.AddCommandParameter(cmd, "SourceCode", sourceCode);
        VoteDb.AddCommandParameter(cmd, "OptOut", optOut);
        VoteDb.AddCommandParameter(cmd, "SendSampleBallots", sendSampleBallots);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedDate", emailAttachedDate);
        VoteDb.AddCommandParameter(cmd, "EmailAttachedSource", emailAttachedSource);
        VoteDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteDb.AddCommandParameter(cmd, "County", county);
        VoteDb.AddCommandParameter(cmd, "DistrictLookupDate", districtLookupDate);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses";
        }
      }

      public static AddressesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static AddressesTable FillTable(DbCommand command)
      {
        return FillTable(command, AddressesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AddressesTable FillTable(DbCommand command, AddressesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AddressesTable table = new AddressesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(AddressesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, AddressesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(AddressesTable table, AddressesTable.ColumnSet columnSet = AddressesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string SourceCodeColumnName { get { return "SourceCode"; } }

      public static string OptOutColumnName { get { return "OptOut"; } }

      public static string SendSampleBallotsColumnName { get { return "SendSampleBallots"; } }

      public static string EmailAttachedDateColumnName { get { return "EmailAttachedDate"; } }

      public static string EmailAttachedSourceColumnName { get { return "EmailAttachedSource"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string DistrictLookupDateColumnName { get { return "DistrictLookupDate"; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int AddressMaxLength { get { return 80; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PhoneMaxLength { get { return 30; } }

      public static int SourceCodeMaxLength { get { return 4; } }

      public static int EmailAttachedSourceMaxLength { get { return 4; } }

      public static int CongressionalDistrictMaxLength { get { return 2; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Addresses WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AddressesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetDataReaderByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.All) + " WHERE Email=@Email";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Id=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET FirstName=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET LastName=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Address=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET City=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Zip5=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Zip4=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET Phone=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET DateStamp=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SourceCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET OptOut=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSendSampleBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET SendSampleBallots=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedSourceByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedSource=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET CongressionalDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateSenateDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET StateHouseDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET County=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictLookupDateByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET DistrictLookupDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Addresses SET {0}=@newValue WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetFirstNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FirstName FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastName FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip5ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip5 FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip4ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip4 FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetSourceCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SourceCode FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetOptOutById(Int32 id)
      {
        return _GetOptOutById(id, null);
      }

      public static Boolean GetOptOutById(Int32 id, Boolean defaultValue)
      {
        return _GetOptOutById(id, defaultValue).Value;
      }

      private static Boolean? _GetOptOutById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT OptOut FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetSendSampleBallotsById(Int32 id)
      {
        return _GetSendSampleBallotsById(id, null);
      }

      public static Boolean GetSendSampleBallotsById(Int32 id, Boolean defaultValue)
      {
        return _GetSendSampleBallotsById(id, defaultValue).Value;
      }

      private static Boolean? _GetSendSampleBallotsById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT SendSampleBallots FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetEmailAttachedDateById(Int32 id)
      {
        return _GetEmailAttachedDateById(id, null);
      }

      public static DateTime GetEmailAttachedDateById(Int32 id, DateTime defaultValue)
      {
        return _GetEmailAttachedDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetEmailAttachedDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailAttachedDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEmailAttachedSourceById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAttachedSource FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseDistrictById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseDistrict FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDistrictLookupDateById(Int32 id)
      {
        return _GetDistrictLookupDateById(id, null);
      }

      public static DateTime GetDistrictLookupDateById(Int32 id, DateTime defaultValue)
      {
        return _GetDistrictLookupDateById(id, defaultValue).Value;
      }

      private static DateTime? _GetDistrictLookupDateById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DistrictLookupDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Addresses WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AddressesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetDataReaderById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.All) + " WHERE Id=@Id";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET FirstName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET LastName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Address=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET City=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Zip5=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Zip4=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET Phone=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SourceCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET OptOut=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSendSampleBallotsById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET SendSampleBallots=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedSourceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedSource=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET CongressionalDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateSenateDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET StateHouseDistrict=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET County=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictLookupDateById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET DistrictLookupDate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE Addresses SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmailAddressCityStateCodeZip5Zip4(String email, String address, String city, String stateCode, String zip5, String zip4, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Addresses WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmailAddressCityStateCodeZip5Zip4(Column _column, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        object result;
        string cmdText = "SELECT {0} FROM Addresses WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AddressesTable GetDataByEmailAddressCityStateCodeZip5Zip4(String email, String address, String city, String stateCode, String zip5, String zip4, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,DateStamp,SourceCode,OptOut,SendSampleBallots,EmailAttachedDate,EmailAttachedSource,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        return FillTable(cmd, AddressesTable.ColumnSet.All);
      }

      public static AddressesReader GetDataReaderByEmailAddressCityStateCodeZip5Zip4(String email, String address, String city, String stateCode, String zip5, String zip4, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.All) + " WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdByEmailAddressCityStateCodeZip5Zip4(Int32 newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Id=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET FirstName=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET LastName=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Address=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET City=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET StateCode=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Zip5=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Zip4=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Email=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET Phone=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByEmailAddressCityStateCodeZip5Zip4(DateTime newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET DateStamp=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceCodeByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET SourceCode=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOptOutByEmailAddressCityStateCodeZip5Zip4(Boolean newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET OptOut=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSendSampleBallotsByEmailAddressCityStateCodeZip5Zip4(Boolean newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET SendSampleBallots=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedDateByEmailAddressCityStateCodeZip5Zip4(DateTime newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedDate=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailAttachedSourceByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET EmailAttachedSource=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET CongressionalDistrict=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET StateSenateDistrict=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET StateHouseDistrict=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmailAddressCityStateCodeZip5Zip4(String newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET County=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictLookupDateByEmailAddressCityStateCodeZip5Zip4(DateTime newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET DistrictLookupDate=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailAddressCityStateCodeZip5Zip4(Column _column, object newValue, String email, String address, String city, String stateCode, String zip5, String zip4)
      {
        string cmdText = "UPDATE Addresses SET {0}=@newValue WHERE Email=@Email AND Address=@Address AND City=@City AND StateCode=@StateCode AND Zip5=@Zip5 AND Zip4=@Zip4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectEmailsCommandText
      {
        get
        {
          return "SELECT Id,Email FROM Addresses";
        }
      }

      public static AddressesTable GetAllEmailsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.Emails);
      }

      public static AddressesReader GetAllEmailsDataReader(int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.Emails);
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateEmails(AddressesTable table)
      {
        UpdateEmails(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateEmails(AddressesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AddressesTable.ColumnSet.Emails, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectDistrictCodingCommandText
      {
        get
        {
          return "SELECT Id,Address,City,StateCode,Zip5,Zip4,Email,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses";
        }
      }

      public static AddressesTable GetAllDistrictCodingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Address,City,StateCode,Zip5,Zip4,Email,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,DistrictLookupDate FROM Addresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesTable.ColumnSet.DistrictCoding);
      }

      public static AddressesReader GetAllDistrictCodingDataReader(int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(AddressesTable.ColumnSet.DistrictCoding);
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new AddressesReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateDistrictCoding(AddressesTable table)
      {
        UpdateDistrictCoding(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDistrictCoding(AddressesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, AddressesTable.ColumnSet.DistrictCoding, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(AddressesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AddressesTable.ColumnSet.All:
            return SelectAllCommandText;

          case AddressesTable.ColumnSet.Emails:
            return SelectEmailsCommandText;

          case AddressesTable.ColumnSet.DistrictCoding:
            return SelectDistrictCodingCommandText;

          default:
            return null;
        }
      }

      static Addresses()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class AddressesReader : DataReaderBase
    {
      public AddressesReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String SourceCode
      {
        get { return this["SourceCode"] as String; }
      }

      public Boolean OptOut
      {
        get { return (Boolean) this["OptOut"]; }
      }

      public Boolean SendSampleBallots
      {
        get { return (Boolean) this["SendSampleBallots"]; }
      }

      public DateTime EmailAttachedDate
      {
        get { return (DateTime) this["EmailAttachedDate"]; }
      }

      public String EmailAttachedSource
      {
        get { return this["EmailAttachedSource"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public DateTime DistrictLookupDate
      {
        get { return (DateTime) this["DistrictLookupDate"]; }
      }
    }

    #endregion vote.Addresses

    #region vote.AddressesMaster

    public partial class AddressesMasterRow : DataRow
    {
      internal AddressesMasterRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime? LastRemoveMalformed
      {
        get { if (this.IsNull("LastRemoveMalformed")) return null; else return (DateTime) this["LastRemoveMalformed"]; }
        set { if (value.HasValue) this["LastRemoveMalformed"] = value.Value; else this["LastRemoveMalformed"] = DBNull.Value; }
      }

      public DateTime? LastTransferFromAddressLog
      {
        get { if (this.IsNull("LastTransferFromAddressLog")) return null; else return (DateTime) this["LastTransferFromAddressLog"]; }
        set { if (value.HasValue) this["LastTransferFromAddressLog"] = value.Value; else this["LastTransferFromAddressLog"] = DBNull.Value; }
      }

      public DateTime? LastTransferFromSampleBallotLog
      {
        get { if (this.IsNull("LastTransferFromSampleBallotLog")) return null; else return (DateTime) this["LastTransferFromSampleBallotLog"]; }
        set { if (value.HasValue) this["LastTransferFromSampleBallotLog"] = value.Value; else this["LastTransferFromSampleBallotLog"] = DBNull.Value; }
      }

      public DateTime? LastLookupMissingDistricts
      {
        get { if (this.IsNull("LastLookupMissingDistricts")) return null; else return (DateTime) this["LastLookupMissingDistricts"]; }
        set { if (value.HasValue) this["LastLookupMissingDistricts"] = value.Value; else this["LastLookupMissingDistricts"] = DBNull.Value; }
      }

      public DateTime? LastRefreshAllDistricts
      {
        get { if (this.IsNull("LastRefreshAllDistricts")) return null; else return (DateTime) this["LastRefreshAllDistricts"]; }
        set { if (value.HasValue) this["LastRefreshAllDistricts"] = value.Value; else this["LastRefreshAllDistricts"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class AddressesMasterTable : TypedTableBase<AddressesMasterRow>
    {
      public AddressesMasterRow this[int index] { get { return (AddressesMasterRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AddressesMasterRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AddressesMasterTable(); }

      new public AddressesMasterRow NewRow() { return (AddressesMasterRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AddressesMasterRow(rb); }

      protected override Type GetRowType()
      { return typeof(AddressesMasterRow); }

      public void RemoveRow(AddressesMasterRow row) { this.Rows.Remove(row); }

      public AddressesMasterRow NewRow(Int32 id, DateTime? lastRemoveMalformed, DateTime? lastTransferFromAddressLog, DateTime? lastTransferFromSampleBallotLog, DateTime? lastLookupMissingDistricts, DateTime? lastRefreshAllDistricts)
      {
        AddressesMasterRow row = NewRow();
        row.Id = id;
        row.LastRemoveMalformed = lastRemoveMalformed;
        row.LastTransferFromAddressLog = lastTransferFromAddressLog;
        row.LastTransferFromSampleBallotLog = lastTransferFromSampleBallotLog;
        row.LastLookupMissingDistricts = lastLookupMissingDistricts;
        row.LastRefreshAllDistricts = lastRefreshAllDistricts;
        return row;
      }

      public void AddRow(Int32 id, DateTime? lastRemoveMalformed, DateTime? lastTransferFromAddressLog, DateTime? lastTransferFromSampleBallotLog, DateTime? lastLookupMissingDistricts, DateTime? lastRefreshAllDistricts)
      {
        AddressesMasterRow row = NewRow(id, lastRemoveMalformed, lastTransferFromAddressLog, lastTransferFromSampleBallotLog, lastLookupMissingDistricts, lastRefreshAllDistricts);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LastRemoveMalformedColumn { get { return this.Columns["LastRemoveMalformed"]; } }

      public DataColumn LastTransferFromAddressLogColumn { get { return this.Columns["LastTransferFromAddressLog"]; } }

      public DataColumn LastTransferFromSampleBallotLogColumn { get { return this.Columns["LastTransferFromSampleBallotLog"]; } }

      public DataColumn LastLookupMissingDistrictsColumn { get { return this.Columns["LastLookupMissingDistricts"]; } }

      public DataColumn LastRefreshAllDistrictsColumn { get { return this.Columns["LastRefreshAllDistricts"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastRemoveMalformed", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastTransferFromAddressLog", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastTransferFromSampleBallotLog", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastLookupMissingDistricts", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("LastRefreshAllDistricts", typeof(DateTime));
        base.Columns.Add(_column);
      }

      public AddressesMasterTable() : this(ColumnSet.All) { }

      public AddressesMasterTable(ColumnSet columnSet)
      {
        this.TableName = "AddressesMaster";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected AddressesMasterTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class AddressesMaster
    {
      public const string TableName = "AddressesMaster";

      public enum Column { Id, LastRemoveMalformed, LastTransferFromAddressLog, LastTransferFromSampleBallotLog, LastLookupMissingDistricts, LastRefreshAllDistricts }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LastRemoveMalformed, "LastRemoveMalformed" },
        { Column.LastTransferFromAddressLog, "LastTransferFromAddressLog" },
        { Column.LastTransferFromSampleBallotLog, "LastTransferFromSampleBallotLog" },
        { Column.LastLookupMissingDistricts, "LastLookupMissingDistricts" },
        { Column.LastRefreshAllDistricts, "LastRefreshAllDistricts" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LastRemoveMalformed,LastTransferFromAddressLog,LastTransferFromSampleBallotLog,LastLookupMissingDistricts,LastRefreshAllDistricts FROM AddressesMaster";
        }
      }

      public static AddressesMasterTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LastRemoveMalformed,LastTransferFromAddressLog,LastTransferFromSampleBallotLog,LastLookupMissingDistricts,LastRefreshAllDistricts FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AddressesMasterTable.ColumnSet.All);
      }

      public static AddressesMasterTable FillTable(DbCommand command)
      {
        return FillTable(command, AddressesMasterTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AddressesMasterTable FillTable(DbCommand command, AddressesMasterTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AddressesMasterTable table = new AddressesMasterTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LastRemoveMalformedColumnName { get { return "LastRemoveMalformed"; } }

      public static string LastTransferFromAddressLogColumnName { get { return "LastTransferFromAddressLog"; } }

      public static string LastTransferFromSampleBallotLogColumnName { get { return "LastTransferFromSampleBallotLog"; } }

      public static string LastLookupMissingDistrictsColumnName { get { return "LastLookupMissingDistricts"; } }

      public static string LastRefreshAllDistrictsColumnName { get { return "LastRefreshAllDistricts"; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AddressesMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM AddressesMaster";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateId(Int32 newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET Id=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastRemoveMalformed(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastRemoveMalformed=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastTransferFromAddressLog(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastTransferFromAddressLog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastTransferFromSampleBallotLog(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastTransferFromSampleBallotLog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastLookupMissingDistricts(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastLookupMissingDistricts=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastRefreshAllDistricts(DateTime? newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET LastRefreshAllDistricts=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE AddressesMaster SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(AddressesMasterTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AddressesMasterTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static AddressesMaster()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.AddressesMaster

    #region vote.Answers

    public partial class AnswersRow : DataRow
    {
      internal AnswersRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public Int32 Sequence
      {
        get { return (Int32) this["Sequence"]; }
        set { this["Sequence"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan YouTubeRunningTime
      {
        get { return (TimeSpan) this["YouTubeRunningTime"]; }
        set { this["YouTubeRunningTime"] = value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime YouTubeDate
      {
        get { return (DateTime) this["YouTubeDate"]; }
        set { this["YouTubeDate"] = value; }
      }

      public DateTime YouTubeRefreshTime
      {
        get { return (DateTime) this["YouTubeRefreshTime"]; }
        set { this["YouTubeRefreshTime"] = value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class AnswersTable : TypedTableBase<AnswersRow>
    {
      public AnswersRow this[int index] { get { return (AnswersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AnswersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AnswersTable(); }

      new public AnswersRow NewRow() { return (AnswersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AnswersRow(rb); }

      protected override Type GetRowType()
      { return typeof(AnswersRow); }

      public void RemoveRow(AnswersRow row) { this.Rows.Remove(row); }

      public AnswersRow NewRow(String politicianKey, String questionKey, Int32 sequence, String stateCode, String issueKey, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable)
      {
        AnswersRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.QuestionKey = questionKey;
        row.Sequence = sequence;
        row.StateCode = stateCode;
        row.IssueKey = issueKey;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        return row;
      }

      public void AddRow(String politicianKey, String questionKey, Int32 sequence, String stateCode, String issueKey, String answer, String source, DateTime dateStamp, String userName, String youTubeUrl, String youTubeDescription, TimeSpan youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime youTubeDate, DateTime youTubeRefreshTime, String youTubeAutoDisable)
      {
        AnswersRow row = NewRow(politicianKey, questionKey, sequence, stateCode, issueKey, answer, source, dateStamp, userName, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      public AnswersTable() : this(ColumnSet.All) { }

      public AnswersTable(ColumnSet columnSet)
      {
        this.TableName = "Answers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected AnswersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Answers
    {
      public const string TableName = "Answers";

      public enum Column { PoliticianKey, QuestionKey, Sequence, StateCode, IssueKey, Answer, Source, DateStamp, UserName, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.QuestionKey, "QuestionKey" },
        { Column.Sequence, "Sequence" },
        { Column.StateCode, "StateCode" },
        { Column.IssueKey, "IssueKey" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM Answers";
        }
      }

      public static AnswersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM Answers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static AnswersTable FillTable(DbCommand command)
      {
        return FillTable(command, AnswersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AnswersTable FillTable(DbCommand command, AnswersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AnswersTable table = new AnswersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(AnswersTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, AnswersTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(AnswersTable table, AnswersTable.ColumnSet columnSet = AnswersTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKeyQuestionKey(Column _column, String politicianKey, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int DeleteByPoliticianKeyQuestionKey(String politicianKey, String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PoliticianKeyQuestionKeySequenceExists(String politicianKey, String questionKey, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestionKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT QuestionKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAnswerByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Answer FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSourceByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetDateStampByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetDateStampByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeUrlByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeUrl FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeDescriptionByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeDescription FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static TimeSpan? GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static TimeSpan GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan defaultValue)
      {
        return _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static TimeSpan? _GetYouTubeRunningTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, TimeSpan? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRunningTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (TimeSpan) result;
      }

      public static String GetYouTubeSourceByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSource FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeSourceUrlByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeSourceUrl FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeDateByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeDateByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeDate FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, null);
      }

      public static DateTime GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime defaultValue)
      {
        return _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(politicianKey, questionKey, sequence, defaultValue).Value;
      }

      private static DateTime? _GetYouTubeRefreshTimeByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT YouTubeRefreshTime FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetYouTubeAutoDisableByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPoliticianKeyQuestionKeySequence(Column _column, String politicianKey, String questionKey, Int32 sequence)
      {
        object result;
        string cmdText = "SELECT {0} FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static AnswersTable GetDataByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,QuestionKey,Sequence,StateCode,IssueKey,Answer,Source,DateStamp,UserName,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return FillTable(cmd, AnswersTable.ColumnSet.All);
      }

      public static int DeleteByPoliticianKeyQuestionKeySequence(String politicianKey, String questionKey, Int32 sequence, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Answers WHERE PoliticianKey=@PoliticianKey AND QuestionKey=@QuestionKey AND Sequence=@Sequence";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "Sequence", sequence);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(AnswersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AnswersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Answers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Answers

    #region vote.AnswersView

    public partial class AnswersViewRow : DataRow
    {
      internal AnswersViewRow(DataRowBuilder rb) : base(rb) {}

      public String IssueGroupKey
      {
        get { return this["IssueGroupKey"] as String; }
        set { if (value == null) this["IssueGroupKey"] = DBNull.Value; else this["IssueGroupKey"] = value; }
      }

      public Int32? IssueGroupOrder
      {
        get { if (this.IsNull("IssueGroupOrder")) return null; else return (Int32) this["IssueGroupOrder"]; }
        set { if (value.HasValue) this["IssueGroupOrder"] = value.Value; else this["IssueGroupOrder"] = DBNull.Value; }
      }

      public String IssueGroupHeading
      {
        get { return this["IssueGroupHeading"] as String; }
        set { if (value == null) this["IssueGroupHeading"] = DBNull.Value; else this["IssueGroupHeading"] = value; }
      }

      public String IssueGroupSubHeading
      {
        get { return this["IssueGroupSubHeading"] as String; }
        set { if (value == null) this["IssueGroupSubHeading"] = DBNull.Value; else this["IssueGroupSubHeading"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32? IssueOrder
      {
        get { if (this.IsNull("IssueOrder")) return null; else return (Int32) this["IssueOrder"]; }
        set { if (value.HasValue) this["IssueOrder"] = value.Value; else this["IssueOrder"] = DBNull.Value; }
      }

      public String IssueLevel
      {
        get { return this["IssueLevel"] as String; }
        set { if (value == null) this["IssueLevel"] = DBNull.Value; else this["IssueLevel"] = value; }
      }

      public String Issue
      {
        get { return this["Issue"] as String; }
        set { if (value == null) this["Issue"] = DBNull.Value; else this["Issue"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public Int32? QuestionOrder
      {
        get { if (this.IsNull("QuestionOrder")) return null; else return (Int32) this["QuestionOrder"]; }
        set { if (value.HasValue) this["QuestionOrder"] = value.Value; else this["QuestionOrder"] = DBNull.Value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Answer
      {
        get { return this["Answer"] as String; }
        set { if (value == null) this["Answer"] = DBNull.Value; else this["Answer"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime? DateStamp
      {
        get { if (this.IsNull("DateStamp")) return null; else return (DateTime) this["DateStamp"]; }
        set { if (value.HasValue) this["DateStamp"] = value.Value; else this["DateStamp"] = DBNull.Value; }
      }

      public Int32? Sequence
      {
        get { if (this.IsNull("Sequence")) return null; else return (Int32) this["Sequence"]; }
        set { if (value.HasValue) this["Sequence"] = value.Value; else this["Sequence"] = DBNull.Value; }
      }

      public String YouTubeUrl
      {
        get { return this["YouTubeUrl"] as String; }
        set { if (value == null) this["YouTubeUrl"] = DBNull.Value; else this["YouTubeUrl"] = value; }
      }

      public String YouTubeDescription
      {
        get { return this["YouTubeDescription"] as String; }
        set { if (value == null) this["YouTubeDescription"] = DBNull.Value; else this["YouTubeDescription"] = value; }
      }

      public TimeSpan? YouTubeRunningTime
      {
        get { if (this.IsNull("YouTubeRunningTime")) return null; else return (TimeSpan) this["YouTubeRunningTime"]; }
        set { if (value.HasValue) this["YouTubeRunningTime"] = value.Value; else this["YouTubeRunningTime"] = DBNull.Value; }
      }

      public String YouTubeSource
      {
        get { return this["YouTubeSource"] as String; }
        set { if (value == null) this["YouTubeSource"] = DBNull.Value; else this["YouTubeSource"] = value; }
      }

      public String YouTubeSourceUrl
      {
        get { return this["YouTubeSourceUrl"] as String; }
        set { if (value == null) this["YouTubeSourceUrl"] = DBNull.Value; else this["YouTubeSourceUrl"] = value; }
      }

      public DateTime? YouTubeDate
      {
        get { if (this.IsNull("YouTubeDate")) return null; else return (DateTime) this["YouTubeDate"]; }
        set { if (value.HasValue) this["YouTubeDate"] = value.Value; else this["YouTubeDate"] = DBNull.Value; }
      }

      public DateTime? YouTubeRefreshTime
      {
        get { if (this.IsNull("YouTubeRefreshTime")) return null; else return (DateTime) this["YouTubeRefreshTime"]; }
        set { if (value.HasValue) this["YouTubeRefreshTime"] = value.Value; else this["YouTubeRefreshTime"] = DBNull.Value; }
      }

      public String YouTubeAutoDisable
      {
        get { return this["YouTubeAutoDisable"] as String; }
        set { if (value == null) this["YouTubeAutoDisable"] = DBNull.Value; else this["YouTubeAutoDisable"] = value; }
      }
    }

    [Serializable]
    public partial class AnswersViewTable : TypedTableBase<AnswersViewRow>
    {
      public AnswersViewRow this[int index] { get { return (AnswersViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(AnswersViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new AnswersViewTable(); }

      new public AnswersViewRow NewRow() { return (AnswersViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new AnswersViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(AnswersViewRow); }

      public void RemoveRow(AnswersViewRow row) { this.Rows.Remove(row); }

      public AnswersViewRow NewRow(String issueGroupKey, Int32? issueGroupOrder, String issueGroupHeading, String issueGroupSubHeading, String issueKey, Int32? issueOrder, String issueLevel, String issue, String stateCode, String questionKey, Int32? questionOrder, String question, String politicianKey, String answer, String source, DateTime? dateStamp, Int32? sequence, String youTubeUrl, String youTubeDescription, TimeSpan? youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime? youTubeDate, DateTime? youTubeRefreshTime, String youTubeAutoDisable)
      {
        AnswersViewRow row = NewRow();
        row.IssueGroupKey = issueGroupKey;
        row.IssueGroupOrder = issueGroupOrder;
        row.IssueGroupHeading = issueGroupHeading;
        row.IssueGroupSubHeading = issueGroupSubHeading;
        row.IssueKey = issueKey;
        row.IssueOrder = issueOrder;
        row.IssueLevel = issueLevel;
        row.Issue = issue;
        row.StateCode = stateCode;
        row.QuestionKey = questionKey;
        row.QuestionOrder = questionOrder;
        row.Question = question;
        row.PoliticianKey = politicianKey;
        row.Answer = answer;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.Sequence = sequence;
        row.YouTubeUrl = youTubeUrl;
        row.YouTubeDescription = youTubeDescription;
        row.YouTubeRunningTime = youTubeRunningTime;
        row.YouTubeSource = youTubeSource;
        row.YouTubeSourceUrl = youTubeSourceUrl;
        row.YouTubeDate = youTubeDate;
        row.YouTubeRefreshTime = youTubeRefreshTime;
        row.YouTubeAutoDisable = youTubeAutoDisable;
        return row;
      }

      public void AddRow(String issueGroupKey, Int32? issueGroupOrder, String issueGroupHeading, String issueGroupSubHeading, String issueKey, Int32? issueOrder, String issueLevel, String issue, String stateCode, String questionKey, Int32? questionOrder, String question, String politicianKey, String answer, String source, DateTime? dateStamp, Int32? sequence, String youTubeUrl, String youTubeDescription, TimeSpan? youTubeRunningTime, String youTubeSource, String youTubeSourceUrl, DateTime? youTubeDate, DateTime? youTubeRefreshTime, String youTubeAutoDisable)
      {
        AnswersViewRow row = NewRow(issueGroupKey, issueGroupOrder, issueGroupHeading, issueGroupSubHeading, issueKey, issueOrder, issueLevel, issue, stateCode, questionKey, questionOrder, question, politicianKey, answer, source, dateStamp, sequence, youTubeUrl, youTubeDescription, youTubeRunningTime, youTubeSource, youTubeSourceUrl, youTubeDate, youTubeRefreshTime, youTubeAutoDisable);
        AddRow(row);
      }

      public DataColumn IssueGroupKeyColumn { get { return this.Columns["IssueGroupKey"]; } }

      public DataColumn IssueGroupOrderColumn { get { return this.Columns["IssueGroupOrder"]; } }

      public DataColumn IssueGroupHeadingColumn { get { return this.Columns["IssueGroupHeading"]; } }

      public DataColumn IssueGroupSubHeadingColumn { get { return this.Columns["IssueGroupSubHeading"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public DataColumn IssueLevelColumn { get { return this.Columns["IssueLevel"]; } }

      public DataColumn IssueColumn { get { return this.Columns["Issue"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn QuestionOrderColumn { get { return this.Columns["QuestionOrder"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn AnswerColumn { get { return this.Columns["Answer"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn SequenceColumn { get { return this.Columns["Sequence"]; } }

      public DataColumn YouTubeUrlColumn { get { return this.Columns["YouTubeUrl"]; } }

      public DataColumn YouTubeDescriptionColumn { get { return this.Columns["YouTubeDescription"]; } }

      public DataColumn YouTubeRunningTimeColumn { get { return this.Columns["YouTubeRunningTime"]; } }

      public DataColumn YouTubeSourceColumn { get { return this.Columns["YouTubeSource"]; } }

      public DataColumn YouTubeSourceUrlColumn { get { return this.Columns["YouTubeSourceUrl"]; } }

      public DataColumn YouTubeDateColumn { get { return this.Columns["YouTubeDate"]; } }

      public DataColumn YouTubeRefreshTimeColumn { get { return this.Columns["YouTubeRefreshTime"]; } }

      public DataColumn YouTubeAutoDisableColumn { get { return this.Columns["YouTubeAutoDisable"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueGroupKey", typeof(String));
        _column.MaxLength = 20;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupHeading", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueGroupSubHeading", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("IssueLevel", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionOrder", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.MaxLength = 150;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
        _column = new DataColumn("Answer", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("Sequence", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDescription", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRunningTime", typeof(TimeSpan));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSource", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeSourceUrl", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeDate", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeRefreshTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeAutoDisable", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
      }

      public AnswersViewTable() : this(ColumnSet.All) { }

      public AnswersViewTable(ColumnSet columnSet)
      {
        this.TableName = "AnswersView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected AnswersViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class AnswersView
    {
      public const string TableName = "AnswersView";

      public enum Column { IssueGroupKey, IssueGroupOrder, IssueGroupHeading, IssueGroupSubHeading, IssueKey, IssueOrder, IssueLevel, Issue, StateCode, QuestionKey, QuestionOrder, Question, PoliticianKey, Answer, Source, DateStamp, Sequence, YouTubeUrl, YouTubeDescription, YouTubeRunningTime, YouTubeSource, YouTubeSourceUrl, YouTubeDate, YouTubeRefreshTime, YouTubeAutoDisable }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueGroupKey, "IssueGroupKey" },
        { Column.IssueGroupOrder, "IssueGroupOrder" },
        { Column.IssueGroupHeading, "IssueGroupHeading" },
        { Column.IssueGroupSubHeading, "IssueGroupSubHeading" },
        { Column.IssueKey, "IssueKey" },
        { Column.IssueOrder, "IssueOrder" },
        { Column.IssueLevel, "IssueLevel" },
        { Column.Issue, "Issue" },
        { Column.StateCode, "StateCode" },
        { Column.QuestionKey, "QuestionKey" },
        { Column.QuestionOrder, "QuestionOrder" },
        { Column.Question, "Question" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Answer, "Answer" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.Sequence, "Sequence" },
        { Column.YouTubeUrl, "YouTubeUrl" },
        { Column.YouTubeDescription, "YouTubeDescription" },
        { Column.YouTubeRunningTime, "YouTubeRunningTime" },
        { Column.YouTubeSource, "YouTubeSource" },
        { Column.YouTubeSourceUrl, "YouTubeSourceUrl" },
        { Column.YouTubeDate, "YouTubeDate" },
        { Column.YouTubeRefreshTime, "YouTubeRefreshTime" },
        { Column.YouTubeAutoDisable, "YouTubeAutoDisable" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM AnswersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueGroupKey,IssueGroupOrder,IssueGroupHeading,IssueGroupSubHeading,IssueKey,IssueOrder,IssueLevel,Issue,StateCode,QuestionKey,QuestionOrder,Question,PoliticianKey,Answer,Source,DateStamp,Sequence,YouTubeUrl,YouTubeDescription,YouTubeRunningTime,YouTubeSource,YouTubeSourceUrl,YouTubeDate,YouTubeRefreshTime,YouTubeAutoDisable FROM AnswersView";
        }
      }

      public static AnswersViewTable FillTable(DbCommand command)
      {
        return FillTable(command, AnswersViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static AnswersViewTable FillTable(DbCommand command, AnswersViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          AnswersViewTable table = new AnswersViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IssueGroupKeyColumnName { get { return "IssueGroupKey"; } }

      public static string IssueGroupOrderColumnName { get { return "IssueGroupOrder"; } }

      public static string IssueGroupHeadingColumnName { get { return "IssueGroupHeading"; } }

      public static string IssueGroupSubHeadingColumnName { get { return "IssueGroupSubHeading"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static string IssueLevelColumnName { get { return "IssueLevel"; } }

      public static string IssueColumnName { get { return "Issue"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string QuestionOrderColumnName { get { return "QuestionOrder"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string AnswerColumnName { get { return "Answer"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string SequenceColumnName { get { return "Sequence"; } }

      public static string YouTubeUrlColumnName { get { return "YouTubeUrl"; } }

      public static string YouTubeDescriptionColumnName { get { return "YouTubeDescription"; } }

      public static string YouTubeRunningTimeColumnName { get { return "YouTubeRunningTime"; } }

      public static string YouTubeSourceColumnName { get { return "YouTubeSource"; } }

      public static string YouTubeSourceUrlColumnName { get { return "YouTubeSourceUrl"; } }

      public static string YouTubeDateColumnName { get { return "YouTubeDate"; } }

      public static string YouTubeRefreshTimeColumnName { get { return "YouTubeRefreshTime"; } }

      public static string YouTubeAutoDisableColumnName { get { return "YouTubeAutoDisable"; } }

      public static int IssueGroupKeyMaxLength { get { return 20; } }

      public static int IssueGroupHeadingMaxLength { get { return 255; } }

      public static int IssueGroupSubHeadingMaxLength { get { return 255; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int IssueLevelMaxLength { get { return 1; } }

      public static int IssueMaxLength { get { return 40; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int QuestionMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int AnswerMaxLength { get { return int.MaxValue; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeDescriptionMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceMaxLength { get { return int.MaxValue; } }

      public static int YouTubeSourceUrlMaxLength { get { return int.MaxValue; } }

      public static int YouTubeAutoDisableMaxLength { get { return 40; } }

      public static string GetSelectCommandText(AnswersViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case AnswersViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static AnswersView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.AnswersView

    #region vote.BallotPediaCsvs

    public partial class BallotPediaCsvsRow : DataRow
    {
      internal BallotPediaCsvsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Filename
      {
        get { return this["Filename"] as String; }
        set { if (value == null) this["Filename"] = DBNull.Value; else this["Filename"] = value; }
      }

      public DateTime UploadTime
      {
        get { return (DateTime) this["UploadTime"]; }
        set { this["UploadTime"] = value; }
      }

      public String Content
      {
        get { return this["Content"] as String; }
        set { if (value == null) this["Content"] = DBNull.Value; else this["Content"] = value; }
      }

      public Int32 Candidates
      {
        get { return (Int32) this["Candidates"]; }
        set { this["Candidates"] = value; }
      }

      public Int32 CandidatesCoded
      {
        get { return (Int32) this["CandidatesCoded"]; }
        set { this["CandidatesCoded"] = value; }
      }

      public Boolean Completed
      {
        get { return (Boolean) this["Completed"]; }
        set { this["Completed"] = value; }
      }
    }

    [Serializable]
    public partial class BallotPediaCsvsTable : TypedTableBase<BallotPediaCsvsRow>
    {
      public BallotPediaCsvsRow this[int index] { get { return (BallotPediaCsvsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(BallotPediaCsvsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new BallotPediaCsvsTable(); }

      new public BallotPediaCsvsRow NewRow() { return (BallotPediaCsvsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new BallotPediaCsvsRow(rb); }

      protected override Type GetRowType()
      { return typeof(BallotPediaCsvsRow); }

      public void RemoveRow(BallotPediaCsvsRow row) { this.Rows.Remove(row); }

      public BallotPediaCsvsRow NewRow(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow();
        row.Id = id;
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.Candidates = candidates;
        row.CandidatesCoded = candidatesCoded;
        row.Completed = completed;
        return row;
      }

      public void AddRow(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow(id, filename, uploadTime, content, candidates, candidatesCoded, completed);
        AddRow(row);
      }

      public BallotPediaCsvsRow NewRow(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow();
        row.Filename = filename;
        row.UploadTime = uploadTime;
        row.Content = content;
        row.Candidates = candidates;
        row.CandidatesCoded = candidatesCoded;
        row.Completed = completed;
        return row;
      }

      public void AddRow(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed)
      {
        BallotPediaCsvsRow row = NewRow(filename, uploadTime, content, candidates, candidatesCoded, completed);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn FilenameColumn { get { return this.Columns["Filename"]; } }

      public DataColumn UploadTimeColumn { get { return this.Columns["UploadTime"]; } }

      public DataColumn ContentColumn { get { return this.Columns["Content"]; } }

      public DataColumn CandidatesColumn { get { return this.Columns["Candidates"]; } }

      public DataColumn CandidatesCodedColumn { get { return this.Columns["CandidatesCoded"]; } }

      public DataColumn CompletedColumn { get { return this.Columns["Completed"]; } }

      public enum ColumnSet { All, NoContent }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Content", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Candidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidatesCoded", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitNoContentColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Filename", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UploadTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Candidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidatesCoded", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Completed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public BallotPediaCsvsTable() : this(ColumnSet.All) { }

      public BallotPediaCsvsTable(ColumnSet columnSet)
      {
        this.TableName = "BallotPediaCsvs";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.NoContent:
            InitNoContentColumns();
            break;
        }
      }

      protected BallotPediaCsvsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class BallotPediaCsvs
    {
      public const string TableName = "BallotPediaCsvs";

      public enum Column { Id, Filename, UploadTime, Content, Candidates, CandidatesCoded, Completed }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Filename, "Filename" },
        { Column.UploadTime, "UploadTime" },
        { Column.Content, "Content" },
        { Column.Candidates, "Candidates" },
        { Column.CandidatesCoded, "CandidatesCoded" },
        { Column.Completed, "Completed" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BallotPediaCsvs (Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed) VALUES (@Id,@Filename,@UploadTime,@Content,@Candidates,@CandidatesCoded,@Completed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "Candidates", candidates);
        VoteDb.AddCommandParameter(cmd, "CandidatesCoded", candidatesCoded);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String filename, DateTime uploadTime, String content, Int32 candidates, Int32 candidatesCoded, Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO BallotPediaCsvs (Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed) VALUES (@Filename,@UploadTime,@Content,@Candidates,@CandidatesCoded,@Completed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "UploadTime", uploadTime);
        VoteDb.AddCommandParameter(cmd, "Content", content);
        VoteDb.AddCommandParameter(cmd, "Candidates", candidates);
        VoteDb.AddCommandParameter(cmd, "CandidatesCoded", candidatesCoded);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        }
      }

      public static BallotPediaCsvsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static BallotPediaCsvsTable FillTable(DbCommand command)
      {
        return FillTable(command, BallotPediaCsvsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static BallotPediaCsvsTable FillTable(DbCommand command, BallotPediaCsvsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          BallotPediaCsvsTable table = new BallotPediaCsvsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string FilenameColumnName { get { return "Filename"; } }

      public static string UploadTimeColumnName { get { return "UploadTime"; } }

      public static string ContentColumnName { get { return "Content"; } }

      public static string CandidatesColumnName { get { return "Candidates"; } }

      public static string CandidatesCodedColumnName { get { return "CandidatesCoded"; } }

      public static string CompletedColumnName { get { return "Completed"; } }

      public static int FilenameMaxLength { get { return 255; } }

      public static int ContentMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetFilenameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Filename FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetUploadTimeById(Int32 id)
      {
        return _GetUploadTimeById(id, null);
      }

      public static DateTime GetUploadTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetUploadTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetUploadTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT UploadTime FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContentById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Content FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetCandidatesById(Int32 id)
      {
        return _GetCandidatesById(id, null);
      }

      public static Int32 GetCandidatesById(Int32 id, Int32 defaultValue)
      {
        return _GetCandidatesById(id, defaultValue).Value;
      }

      private static Int32? _GetCandidatesById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Candidates FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetCandidatesCodedById(Int32 id)
      {
        return _GetCandidatesCodedById(id, null);
      }

      public static Int32 GetCandidatesCodedById(Int32 id, Int32 defaultValue)
      {
        return _GetCandidatesCodedById(id, defaultValue).Value;
      }

      private static Int32? _GetCandidatesCodedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CandidatesCoded FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetCompletedById(Int32 id)
      {
        return _GetCompletedById(id, null);
      }

      public static Boolean GetCompletedById(Int32 id, Boolean defaultValue)
      {
        return _GetCompletedById(id, defaultValue).Value;
      }

      private static Boolean? _GetCompletedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Completed FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM BallotPediaCsvs WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static BallotPediaCsvsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFilenameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Filename=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUploadTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET UploadTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContentById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Content=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Candidates=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesCodedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET CandidatesCoded=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompletedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Completed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BallotPediaCsvs WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool FilenameExists(String filename)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetIdByFilename(String filename)
      {
        return _GetIdByFilename(filename, null);
      }

      public static Int32 GetIdByFilename(String filename, Int32 defaultValue)
      {
        return _GetIdByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetIdByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetFilenameByFilename(String filename, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Filename FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetUploadTimeByFilename(String filename)
      {
        return _GetUploadTimeByFilename(filename, null);
      }

      public static DateTime GetUploadTimeByFilename(String filename, DateTime defaultValue)
      {
        return _GetUploadTimeByFilename(filename, defaultValue).Value;
      }

      private static DateTime? _GetUploadTimeByFilename(String filename, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT UploadTime FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContentByFilename(String filename, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Content FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetCandidatesByFilename(String filename)
      {
        return _GetCandidatesByFilename(filename, null);
      }

      public static Int32 GetCandidatesByFilename(String filename, Int32 defaultValue)
      {
        return _GetCandidatesByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetCandidatesByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Candidates FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetCandidatesCodedByFilename(String filename)
      {
        return _GetCandidatesCodedByFilename(filename, null);
      }

      public static Int32 GetCandidatesCodedByFilename(String filename, Int32 defaultValue)
      {
        return _GetCandidatesCodedByFilename(filename, defaultValue).Value;
      }

      private static Int32? _GetCandidatesCodedByFilename(String filename, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT CandidatesCoded FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetCompletedByFilename(String filename)
      {
        return _GetCompletedByFilename(filename, null);
      }

      public static Boolean GetCompletedByFilename(String filename, Boolean defaultValue)
      {
        return _GetCompletedByFilename(filename, defaultValue).Value;
      }

      private static Boolean? _GetCompletedByFilename(String filename, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT Completed FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByFilename(Column _column, String filename)
      {
        object result;
        string cmdText = "SELECT {0} FROM BallotPediaCsvs WHERE Filename=@Filename";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static BallotPediaCsvsTable GetDataByFilename(String filename, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Content,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.All);
      }

      public static int UpdateIdByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Id=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFilenameByFilename(String newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Filename=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUploadTimeByFilename(DateTime newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET UploadTime=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContentByFilename(String newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Content=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Candidates=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidatesCodedByFilename(Int32 newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET CandidatesCoded=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCompletedByFilename(Boolean newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET Completed=@newValue WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFilename(Column _column, object newValue, String filename)
      {
        string cmdText = "UPDATE BallotPediaCsvs SET {0}=@newValue WHERE Filename=@Filename";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFilename(String filename, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM BallotPediaCsvs WHERE Filename=@Filename";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Filename", filename);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectNoContentCommandText
      {
        get
        {
          return "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        }
      }

      public static BallotPediaCsvsTable GetAllNoContentData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.NoContent);
      }

      public static BallotPediaCsvsTable GetNoContentDataByCompleted(Boolean completed, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Filename,UploadTime,Candidates,CandidatesCoded,Completed FROM BallotPediaCsvs WHERE Completed=@Completed";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Completed", completed);
        return FillTable(cmd, BallotPediaCsvsTable.ColumnSet.NoContent);
      }

      public static BallotPediaCsvsTable GetNoContentData(Boolean completed, int commandTimeout = -1)
      {
        return GetNoContentDataByCompleted(completed, commandTimeout);
      }

      public static string GetSelectCommandText(BallotPediaCsvsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case BallotPediaCsvsTable.ColumnSet.All:
            return SelectAllCommandText;

          case BallotPediaCsvsTable.ColumnSet.NoContent:
            return SelectNoContentCommandText;

          default:
            return null;
        }
      }

      static BallotPediaCsvs()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.BallotPediaCsvs

    #region vote.Counties

    public partial class CountiesRow : DataRow
    {
      internal CountiesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String StateCountyCode
      {
        get { return this["StateCountyCode"] as String; }
        set { if (value == null) this["StateCountyCode"] = DBNull.Value; else this["StateCountyCode"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public String EmailPage
      {
        get { return this["EmailPage"] as String; }
        set { if (value == null) this["EmailPage"] = DBNull.Value; else this["EmailPage"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public Boolean IsCountyTagForDeletion
      {
        get { return (Boolean) this["IsCountyTagForDeletion"]; }
        set { this["IsCountyTagForDeletion"] = value; }
      }

      public String ElectionKeyOfficialsReportStatus
      {
        get { return this["ElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["ElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["ElectionKeyOfficialsReportStatus"] = value; }
      }
    }

    [Serializable]
    public partial class CountiesTable : TypedTableBase<CountiesRow>
    {
      public CountiesRow this[int index] { get { return (CountiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(CountiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new CountiesTable(); }

      new public CountiesRow NewRow() { return (CountiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new CountiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(CountiesRow); }

      public void RemoveRow(CountiesRow row) { this.Rows.Remove(row); }

      public CountiesRow NewRow(String stateCode, String countyCode, String county, String stateCountyCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isCountyTagForDeletion, String electionKeyOfficialsReportStatus)
      {
        CountiesRow row = NewRow();
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.County = county;
        row.StateCountyCode = stateCountyCode;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.EmailPage = emailPage;
        row.UrlDataPage = urlDataPage;
        row.IsCountyTagForDeletion = isCountyTagForDeletion;
        row.ElectionKeyOfficialsReportStatus = electionKeyOfficialsReportStatus;
        return row;
      }

      public void AddRow(String stateCode, String countyCode, String county, String stateCountyCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isCountyTagForDeletion, String electionKeyOfficialsReportStatus)
      {
        CountiesRow row = NewRow(stateCode, countyCode, county, stateCountyCode, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, emailPage, urlDataPage, isCountyTagForDeletion, electionKeyOfficialsReportStatus);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn StateCountyCodeColumn { get { return this.Columns["StateCountyCode"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn EmailPageColumn { get { return this.Columns["EmailPage"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn IsCountyTagForDeletionColumn { get { return this.Columns["IsCountyTagForDeletion"]; } }

      public DataColumn ElectionKeyOfficialsReportStatusColumn { get { return this.Columns["ElectionKeyOfficialsReportStatus"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCountyTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public CountiesTable() : this(ColumnSet.All) { }

      public CountiesTable(ColumnSet columnSet)
      {
        this.TableName = "Counties";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected CountiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Counties
    {
      public const string TableName = "Counties";

      public enum Column { StateCode, CountyCode, County, StateCountyCode, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, EmailPage, UrlDataPage, IsCountyTagForDeletion, ElectionKeyOfficialsReportStatus }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.County, "County" },
        { Column.StateCountyCode, "StateCountyCode" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.EmailPage, "EmailPage" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.IsCountyTagForDeletion, "IsCountyTagForDeletion" },
        { Column.ElectionKeyOfficialsReportStatus, "ElectionKeyOfficialsReportStatus" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,ElectionKeyOfficialsReportStatus FROM Counties";
        }
      }

      public static CountiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,ElectionKeyOfficialsReportStatus FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static CountiesTable FillTable(DbCommand command)
      {
        return FillTable(command, CountiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static CountiesTable FillTable(DbCommand command, CountiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          CountiesTable table = new CountiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string StateCountyCodeColumnName { get { return "StateCountyCode"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string EmailPageColumnName { get { return "EmailPage"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string IsCountyTagForDeletionColumnName { get { return "IsCountyTagForDeletion"; } }

      public static string ElectionKeyOfficialsReportStatusColumnName { get { return "ElectionKeyOfficialsReportStatus"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 100; } }

      public static int StateCountyCodeMaxLength { get { return 3; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int EmailPageMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static int ElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static bool StateCodeCountyCodeExists(String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetStateCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCountyCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCountyCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCountyByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCounty(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCountyByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetStateCountyCodeByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyCode FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetStateCountyCodeByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactTitleByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactTitleByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetContactEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetContactEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetPhoneByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetPhoneByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltContactByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltContactByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltContactTitleByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltContactTitleByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAltPhoneByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAltPhoneByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetEmailByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetEmailByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetUrlByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetUrlByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetBallotNameByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetBallotNameByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAddressLine1ByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAddressLine1ByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetAddressLine2ByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetAddressLine2ByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetCityStateZipByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetCityStateZipByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetNotesByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetNotesByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetEmailPageByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailPage FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailPage(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetEmailPageByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static String GetUrlDataPageByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetUrlDataPageByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static Boolean? GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode)
      {
        return _GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, null);
      }

      public static Boolean? GetIsCountyTagForDeletion(String stateCode, String countyCode)
      {
        return GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode);
      }

      public static Boolean GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode, Boolean defaultValue)
      {
        return _GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, defaultValue).Value;
      }

      public static Boolean GetIsCountyTagForDeletion(String stateCode, String countyCode, Boolean defaultValue)
      {
        return GetIsCountyTagForDeletionByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      private static Boolean? _GetIsCountyTagForDeletionByStateCodeCountyCode(String stateCode, String countyCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCountyTagForDeletion FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetElectionKeyOfficialsReportStatusByStateCodeCountyCode(String stateCode, String countyCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyOfficialsReportStatus FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyOfficialsReportStatus(String stateCode, String countyCode, String defaultValue = null)
      {
        return GetElectionKeyOfficialsReportStatusByStateCodeCountyCode(stateCode, countyCode, defaultValue);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode, String countyCode)
      {
        return GetColumnByStateCodeCountyCode(_column, stateCode, countyCode);
      }

      public static CountiesTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,ElectionKeyOfficialsReportStatus FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static CountiesTable GetData(String stateCode, String countyCode, int commandTimeout = -1)
      {
        return GetDataByStateCodeCountyCode(stateCode, countyCode, commandTimeout);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateStateCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateCountyCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCountyByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCounty(String newValue, String stateCode, String countyCode)
      {
        return UpdateCountyByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateStateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCode(String newValue, String stateCode, String countyCode)
      {
        return UpdateStateCountyCodeByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactTitleByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateContactEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateContactEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdatePhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode, String countyCode)
      {
        return UpdatePhoneByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltContactByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltContactTitleByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAltPhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode, String countyCode)
      {
        return UpdateAltPhoneByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode, String countyCode)
      {
        return UpdateEmailByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode, String countyCode)
      {
        return UpdateUrlByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateBallotNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode, String countyCode)
      {
        return UpdateBallotNameByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateElectionsAuthorityByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode, String countyCode)
      {
        return UpdateElectionsAuthorityByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAddressLine1ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode, String countyCode)
      {
        return UpdateAddressLine1ByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateAddressLine2ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode, String countyCode)
      {
        return UpdateAddressLine2ByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateCityStateZipByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode, String countyCode)
      {
        return UpdateCityStateZipByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateNotesByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode, String countyCode)
      {
        return UpdateNotesByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateEmailPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPage(String newValue, String stateCode, String countyCode)
      {
        return UpdateEmailPageByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateUrlDataPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode, String countyCode)
      {
        return UpdateUrlDataPageByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateIsCountyTagForDeletionByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletion(Boolean newValue, String stateCode, String countyCode)
      {
        return UpdateIsCountyTagForDeletionByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET ElectionKeyOfficialsReportStatus=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatus(String newValue, String stateCode, String countyCode)
      {
        return UpdateElectionKeyOfficialsReportStatusByStateCodeCountyCode(newValue, stateCode, countyCode);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode, String countyCode)
      {
         return UpdateColumnByStateCodeCountyCode(_column, newValue, stateCode, countyCode);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountiesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,ElectionKeyOfficialsReportStatus FROM Counties WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletionByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Counties SET ElectionKeyOfficialsReportStatus=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Counties WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Counties WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static CountiesTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County,StateCountyCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsCountyTagForDeletion,ElectionKeyOfficialsReportStatus FROM Counties WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, CountiesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET CountyCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET County=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET StateCountyCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET EmailPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCountyTagForDeletionByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET IsCountyTagForDeletion=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET ElectionKeyOfficialsReportStatus=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE Counties SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,County FROM Counties";
        }
      }

      public static CountiesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County FROM Counties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static CountiesTable GetCacheDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County FROM Counties WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static CountiesTable GetCacheData(String stateCode, String countyCode, int commandTimeout = -1)
      {
        return GetCacheDataByStateCodeCountyCode(stateCode, countyCode, commandTimeout);
      }

      public static CountiesTable GetCacheDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,County FROM Counties WHERE StateCode=@StateCode ORDER BY County";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, CountiesTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(CountiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case CountiesTable.ColumnSet.All:
            return SelectAllCommandText;

          case CountiesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Counties()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Counties

    #region vote.DebugLog

    public partial class DebugLogRow : DataRow
    {
      internal DebugLogRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime? DateTime
      {
        get { if (this.IsNull("DateTime")) return null; else return (DateTime) this["DateTime"]; }
        set { if (value.HasValue) this["DateTime"] = value.Value; else this["DateTime"] = DBNull.Value; }
      }

      public String MessageType
      {
        get { return this["MessageType"] as String; }
        set { if (value == null) this["MessageType"] = DBNull.Value; else this["MessageType"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class DebugLogTable : TypedTableBase<DebugLogRow>
    {
      public DebugLogRow this[int index] { get { return (DebugLogRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DebugLogRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DebugLogTable(); }

      new public DebugLogRow NewRow() { return (DebugLogRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DebugLogRow(rb); }

      protected override Type GetRowType()
      { return typeof(DebugLogRow); }

      public void RemoveRow(DebugLogRow row) { this.Rows.Remove(row); }

      public DebugLogRow NewRow(Int32 id, DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow();
        row.Id = id;
        row.DateTime = dateTime;
        row.MessageType = messageType;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 id, DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow(id, dateTime, messageType, message);
        AddRow(row);
      }

      public DebugLogRow NewRow(DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow();
        row.DateTime = dateTime;
        row.MessageType = messageType;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime? dateTime, String messageType, String message)
      {
        DebugLogRow row = NewRow(dateTime, messageType, message);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateTimeColumn { get { return this.Columns["DateTime"]; } }

      public DataColumn MessageTypeColumn { get { return this.Columns["MessageType"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("MessageType", typeof(String));
        _column.MaxLength = 128;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
      }

      public DebugLogTable() : this(ColumnSet.All) { }

      public DebugLogTable(ColumnSet columnSet)
      {
        this.TableName = "DebugLog";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DebugLogTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DebugLog
    {
      public const string TableName = "DebugLog";

      public enum Column { Id, DateTime, MessageType, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateTime, "DateTime" },
        { Column.MessageType, "MessageType" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime? dateTime, String messageType, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DebugLog (Id,DateTime,MessageType,Message) VALUES (@Id,@DateTime,@MessageType,@Message)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "DateTime", dateTime);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime? dateTime, String messageType, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO DebugLog (DateTime,MessageType,Message) VALUES (@DateTime,@MessageType,@Message)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DateTime", dateTime);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateTime,MessageType,Message FROM DebugLog";
        }
      }

      public static DebugLogTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static DebugLogTable FillTable(DbCommand command)
      {
        return FillTable(command, DebugLogTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DebugLogTable FillTable(DbCommand command, DebugLogTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DebugLogTable table = new DebugLogTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(DebugLogTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, DebugLogTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(DebugLogTable table, DebugLogTable.ColumnSet columnSet = DebugLogTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateTimeColumnName { get { return "DateTime"; } }

      public static string MessageTypeColumnName { get { return "MessageType"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int MessageTypeMaxLength { get { return 128; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateTimeById(Int32 id)
      {
        return _GetDateTimeById(id, null);
      }

      public static DateTime GetDateTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetDateTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateTime FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMessageTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MessageType FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM DebugLog WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DebugLogTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateTimeById(DateTime? newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET DateTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET MessageType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET Message=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE DebugLog SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM DebugLog WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMessageType(String messageType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMessageType(Column _column, String messageType)
      {
        object result;
        string cmdText = "SELECT {0} FROM DebugLog WHERE MessageType=@MessageType";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DebugLogTable GetDataByMessageType(String messageType, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateTime,MessageType,Message FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        return FillTable(cmd, DebugLogTable.ColumnSet.All);
      }

      public static int UpdateIdByMessageType(Int32 newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET Id=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateTimeByMessageType(DateTime? newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET DateTime=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageTypeByMessageType(String newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET MessageType=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMessageType(String newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET Message=@newValue WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMessageType(Column _column, object newValue, String messageType)
      {
        string cmdText = "UPDATE DebugLog SET {0}=@newValue WHERE MessageType=@MessageType";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMessageType(String messageType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM DebugLog WHERE MessageType=@MessageType";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "MessageType", messageType);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DebugLogTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DebugLogTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DebugLog()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.DebugLog

    #region vote.DistrictAddressesView

    public partial class DistrictAddressesViewRow : DataRow
    {
      internal DistrictAddressesViewRow(DataRowBuilder rb) : base(rb) {}

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String CD
      {
        get { return this["CD"] as String; }
        set { if (value == null) this["CD"] = DBNull.Value; else this["CD"] = value; }
      }

      public String SD
      {
        get { return this["SD"] as String; }
        set { if (value == null) this["SD"] = DBNull.Value; else this["SD"] = value; }
      }

      public String HD
      {
        get { return this["HD"] as String; }
        set { if (value == null) this["HD"] = DBNull.Value; else this["HD"] = value; }
      }

      public String CNTY
      {
        get { return this["CNTY"] as String; }
        set { if (value == null) this["CNTY"] = DBNull.Value; else this["CNTY"] = value; }
      }
    }

    [Serializable]
    public partial class DistrictAddressesViewTable : TypedTableBase<DistrictAddressesViewRow>
    {
      public DistrictAddressesViewRow this[int index] { get { return (DistrictAddressesViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DistrictAddressesViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DistrictAddressesViewTable(); }

      new public DistrictAddressesViewRow NewRow() { return (DistrictAddressesViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DistrictAddressesViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(DistrictAddressesViewRow); }

      public void RemoveRow(DistrictAddressesViewRow row) { this.Rows.Remove(row); }

      public DistrictAddressesViewRow NewRow(DateTime dateStamp, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, String cd, String sd, String hd, String cnty)
      {
        DistrictAddressesViewRow row = NewRow();
        row.DateStamp = dateStamp;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Email = email;
        row.Phone = phone;
        row.CD = cd;
        row.SD = sd;
        row.HD = hd;
        row.CNTY = cnty;
        return row;
      }

      public void AddRow(DateTime dateStamp, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String email, String phone, String cd, String sd, String hd, String cnty)
      {
        DistrictAddressesViewRow row = NewRow(dateStamp, firstName, lastName, address, city, stateCode, zip5, zip4, email, phone, cd, sd, hd, cnty);
        AddRow(row);
      }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn CDColumn { get { return this.Columns["CD"]; } }

      public DataColumn SDColumn { get { return this.Columns["SD"]; } }

      public DataColumn HDColumn { get { return this.Columns["HD"]; } }

      public DataColumn CNTYColumn { get { return this.Columns["CNTY"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CD", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CNTY", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DistrictAddressesViewTable() : this(ColumnSet.All) { }

      public DistrictAddressesViewTable(ColumnSet columnSet)
      {
        this.TableName = "DistrictAddressesView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DistrictAddressesViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DistrictAddressesView
    {
      public const string TableName = "DistrictAddressesView";

      public enum Column { DateStamp, FirstName, LastName, Address, City, StateCode, Zip5, Zip4, Email, Phone, CD, SD, HD, CNTY }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DateStamp, "DateStamp" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.Email, "Email" },
        { Column.Phone, "Phone" },
        { Column.CD, "CD" },
        { Column.SD, "SD" },
        { Column.HD, "HD" },
        { Column.CNTY, "CNTY" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DistrictAddressesView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DateStamp,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,Email,Phone,CD,SD,HD,CNTY FROM DistrictAddressesView";
        }
      }

      public static DistrictAddressesViewReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new DistrictAddressesViewReader(cmd.ExecuteReader(), cn);
      }

      public static DistrictAddressesViewTable FillTable(DbCommand command)
      {
        return FillTable(command, DistrictAddressesViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DistrictAddressesViewTable FillTable(DbCommand command, DistrictAddressesViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DistrictAddressesViewTable table = new DistrictAddressesViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string CDColumnName { get { return "CD"; } }

      public static string SDColumnName { get { return "SD"; } }

      public static string HDColumnName { get { return "HD"; } }

      public static string CNTYColumnName { get { return "CNTY"; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int AddressMaxLength { get { return 80; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PhoneMaxLength { get { return 30; } }

      public static int CDMaxLength { get { return 2; } }

      public static int SDMaxLength { get { return 3; } }

      public static int HDMaxLength { get { return 3; } }

      public static int CNTYMaxLength { get { return 3; } }

      public static string GetSelectCommandText(DistrictAddressesViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DistrictAddressesViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DistrictAddressesView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class DistrictAddressesViewReader : DataReaderBase
    {
      public DistrictAddressesViewReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
      }

      public String CD
      {
        get { return this["CD"] as String; }
      }

      public String SD
      {
        get { return this["SD"] as String; }
      }

      public String HD
      {
        get { return this["HD"] as String; }
      }

      public String CNTY
      {
        get { return this["CNTY"] as String; }
      }
    }

    #endregion vote.DistrictAddressesView

    #region vote.DomainDesigns

    public partial class DomainDesignsRow : DataRow
    {
      internal DomainDesignsRow(DataRowBuilder rb) : base(rb) {}

      public String DomainDesignCode
      {
        get { return this["DomainDesignCode"] as String; }
        set { if (value == null) this["DomainDesignCode"] = DBNull.Value; else this["DomainDesignCode"] = value; }
      }

      public String DomainDataCode
      {
        get { return this["DomainDataCode"] as String; }
        set { if (value == null) this["DomainDataCode"] = DBNull.Value; else this["DomainDataCode"] = value; }
      }

      public Boolean IsIncludedBannerAllPages
      {
        get { return (Boolean) this["IsIncludedBannerAllPages"]; }
        set { this["IsIncludedBannerAllPages"] = value; }
      }

      public Boolean IsIncludedDonateAllPages
      {
        get { return (Boolean) this["IsIncludedDonateAllPages"]; }
        set { this["IsIncludedDonateAllPages"] = value; }
      }

      public Boolean IsIncludedNavbarDefaultAllPages
      {
        get { return (Boolean) this["IsIncludedNavbarDefaultAllPages"]; }
        set { this["IsIncludedNavbarDefaultAllPages"] = value; }
      }

      public Boolean IsIncludeSpecialButtons
      {
        get { return (Boolean) this["IsIncludeSpecialButtons"]; }
        set { this["IsIncludeSpecialButtons"] = value; }
      }

      public Boolean IsIncludedFirstFooterAllPages
      {
        get { return (Boolean) this["IsIncludedFirstFooterAllPages"]; }
        set { this["IsIncludedFirstFooterAllPages"] = value; }
      }

      public Boolean IsIncludedSecondFooterAllPages
      {
        get { return (Boolean) this["IsIncludedSecondFooterAllPages"]; }
        set { this["IsIncludedSecondFooterAllPages"] = value; }
      }

      public Boolean IsIncludedEmailUsAllPages
      {
        get { return (Boolean) this["IsIncludedEmailUsAllPages"]; }
        set { this["IsIncludedEmailUsAllPages"] = value; }
      }

      public Boolean IsIncludedPoweredByAllPages
      {
        get { return (Boolean) this["IsIncludedPoweredByAllPages"]; }
        set { this["IsIncludedPoweredByAllPages"] = value; }
      }

      public Boolean IsIncludedTitleTagDefaultPageAllStatesDomain
      {
        get { return (Boolean) this["IsIncludedTitleTagDefaultPageAllStatesDomain"]; }
        set { this["IsIncludedTitleTagDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain
      {
        get { return (Boolean) this["IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain"]; }
        set { this["IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain
      {
        get { return (Boolean) this["IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain"]; }
        set { this["IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsIncludedMainContentDefaultPageAllStatesDomain
      {
        get { return (Boolean) this["IsIncludedMainContentDefaultPageAllStatesDomain"]; }
        set { this["IsIncludedMainContentDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsIncludedInstructionsDefaultPageAllStatesDomain
      {
        get { return (Boolean) this["IsIncludedInstructionsDefaultPageAllStatesDomain"]; }
        set { this["IsIncludedInstructionsDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsIncludedTitleTagDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsIncludedTitleTagDefaultPageSingleStateDomain"]; }
        set { this["IsIncludedTitleTagDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain"]; }
        set { this["IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain"]; }
        set { this["IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsIncludedInstructionsDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsIncludedInstructionsDefaultPageSingleStateDomain"]; }
        set { this["IsIncludedInstructionsDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsTextFirstFooterAllPages
      {
        get { return (Boolean) this["IsTextFirstFooterAllPages"]; }
        set { this["IsTextFirstFooterAllPages"] = value; }
      }

      public String FirstFooterAllPages
      {
        get { return this["FirstFooterAllPages"] as String; }
        set { if (value == null) this["FirstFooterAllPages"] = DBNull.Value; else this["FirstFooterAllPages"] = value; }
      }

      public Boolean IsTextSecondFooterAllPages
      {
        get { return (Boolean) this["IsTextSecondFooterAllPages"]; }
        set { this["IsTextSecondFooterAllPages"] = value; }
      }

      public String SecondFooterAllPages
      {
        get { return this["SecondFooterAllPages"] as String; }
        set { if (value == null) this["SecondFooterAllPages"] = DBNull.Value; else this["SecondFooterAllPages"] = value; }
      }

      public String EmailUsLineAllPages
      {
        get { return this["EmailUsLineAllPages"] as String; }
        set { if (value == null) this["EmailUsLineAllPages"] = DBNull.Value; else this["EmailUsLineAllPages"] = value; }
      }

      public String EmailUsAddressAllPages
      {
        get { return this["EmailUsAddressAllPages"] as String; }
        set { if (value == null) this["EmailUsAddressAllPages"] = DBNull.Value; else this["EmailUsAddressAllPages"] = value; }
      }

      public String TitleTagDefaultPageAllStatesDomain
      {
        get { return this["TitleTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["TitleTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["TitleTagDefaultPageAllStatesDomain"] = value; }
      }

      public String MetaDescriptionTagDefaultPageAllStatesDomain
      {
        get { return this["MetaDescriptionTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["MetaDescriptionTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["MetaDescriptionTagDefaultPageAllStatesDomain"] = value; }
      }

      public String MetaKeywordsTagDefaultPageAllStatesDomain
      {
        get { return this["MetaKeywordsTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["MetaKeywordsTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["MetaKeywordsTagDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsTextMainContentDefaultPageAllStatesDomainBeforeSelection
      {
        get { return (Boolean) this["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"]; }
        set { this["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public String MainContentDefaultPageAllStatesDomainBeforeSelection
      {
        get { return this["MainContentDefaultPageAllStatesDomainBeforeSelection"] as String; }
        set { if (value == null) this["MainContentDefaultPageAllStatesDomainBeforeSelection"] = DBNull.Value; else this["MainContentDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public Boolean IsTextMainContentDefaultPageAllStatesDomainAfterSelection
      {
        get { return (Boolean) this["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"]; }
        set { this["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String MainContentDefaultPageAllStatesDomainAfterSelection
      {
        get { return this["MainContentDefaultPageAllStatesDomainAfterSelection"] as String; }
        set { if (value == null) this["MainContentDefaultPageAllStatesDomainAfterSelection"] = DBNull.Value; else this["MainContentDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"]; }
        set { this["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public String InstructionsDefaultPageAllStatesDomainBeforeSelection
      {
        get { return this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] as String; }
        set { if (value == null) this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] = DBNull.Value; else this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageAllStatesDomainAfterSelection
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"]; }
        set { this["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String InstructionsDefaultPageAllStatesDomainAfterSelection
      {
        get { return this["InstructionsDefaultPageAllStatesDomainAfterSelection"] as String; }
        set { if (value == null) this["InstructionsDefaultPageAllStatesDomainAfterSelection"] = DBNull.Value; else this["InstructionsDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String TitleTagDefaultPageSingleStateDomain
      {
        get { return this["TitleTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["TitleTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["TitleTagDefaultPageSingleStateDomain"] = value; }
      }

      public String MetaDescriptionTagDefaultPageSingleStateDomain
      {
        get { return this["MetaDescriptionTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["MetaDescriptionTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["MetaDescriptionTagDefaultPageSingleStateDomain"] = value; }
      }

      public String MetaKeywordsTagDefaultPageSingleStateDomain
      {
        get { return this["MetaKeywordsTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["MetaKeywordsTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["MetaKeywordsTagDefaultPageSingleStateDomain"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomain
      {
        get { return this["MainContentDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomain"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageSingleStateDomain"]; }
        set { this["IsTextInstructionsDefaultPageSingleStateDomain"] = value; }
      }

      public String InstructionsDefaultPageSingleStateDomain
      {
        get { return this["InstructionsDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["InstructionsDefaultPageSingleStateDomain"] = DBNull.Value; else this["InstructionsDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsTextInstructionsUpcomingElectionBallotPage
      {
        get { return (Boolean) this["IsTextInstructionsUpcomingElectionBallotPage"]; }
        set { this["IsTextInstructionsUpcomingElectionBallotPage"] = value; }
      }

      public String InstructionsUpcomingElectionBallotPage
      {
        get { return this["InstructionsUpcomingElectionBallotPage"] as String; }
        set { if (value == null) this["InstructionsUpcomingElectionBallotPage"] = DBNull.Value; else this["InstructionsUpcomingElectionBallotPage"] = value; }
      }

      public Boolean IsTextInstructionsPreviousElectionBallotPage
      {
        get { return (Boolean) this["IsTextInstructionsPreviousElectionBallotPage"]; }
        set { this["IsTextInstructionsPreviousElectionBallotPage"] = value; }
      }

      public String InstructionsPreviousElectionBallotPage
      {
        get { return this["InstructionsPreviousElectionBallotPage"] as String; }
        set { if (value == null) this["InstructionsPreviousElectionBallotPage"] = DBNull.Value; else this["InstructionsPreviousElectionBallotPage"] = value; }
      }

      public Boolean IsTextInstructionsElectedPage
      {
        get { return (Boolean) this["IsTextInstructionsElectedPage"]; }
        set { this["IsTextInstructionsElectedPage"] = value; }
      }

      public String InstructionsElectedPage
      {
        get { return this["InstructionsElectedPage"] as String; }
        set { if (value == null) this["InstructionsElectedPage"] = DBNull.Value; else this["InstructionsElectedPage"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSPres
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSPres"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSPres"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSPres
      {
        get { return this["InstructionsElectedOfficialsPageUSPres"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSPres"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSPres"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSSenate
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSSenate"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSSenate"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSSenate
      {
        get { return this["InstructionsElectedOfficialsPageUSSenate"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSSenate"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSSenate"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSHouse
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSHouse"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSHouse"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSHouse
      {
        get { return this["InstructionsElectedOfficialsPageUSHouse"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSHouse"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSHouse"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageState
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageState"]; }
        set { this["IsTextInstructionsElectedOfficialsPageState"] = value; }
      }

      public String InstructionsElectedOfficialsPageState
      {
        get { return this["InstructionsElectedOfficialsPageState"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageState"] = DBNull.Value; else this["InstructionsElectedOfficialsPageState"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageCounty
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageCounty"]; }
        set { this["IsTextInstructionsElectedOfficialsPageCounty"] = value; }
      }

      public String InstructionsElectedOfficialsPageCounty
      {
        get { return this["InstructionsElectedOfficialsPageCounty"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageCounty"] = DBNull.Value; else this["InstructionsElectedOfficialsPageCounty"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageLocal
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageLocal"]; }
        set { this["IsTextInstructionsElectedOfficialsPageLocal"] = value; }
      }

      public String InstructionsElectedOfficialsPageLocal
      {
        get { return this["InstructionsElectedOfficialsPageLocal"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageLocal"] = DBNull.Value; else this["InstructionsElectedOfficialsPageLocal"] = value; }
      }

      public Boolean IsTextInstructionsIssuePage
      {
        get { return (Boolean) this["IsTextInstructionsIssuePage"]; }
        set { this["IsTextInstructionsIssuePage"] = value; }
      }

      public String InstructionsIssuePage
      {
        get { return this["InstructionsIssuePage"] as String; }
        set { if (value == null) this["InstructionsIssuePage"] = DBNull.Value; else this["InstructionsIssuePage"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListAnswers
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListAnswers"]; }
        set { this["IsTextInstructionsIssuePageIssueListAnswers"] = value; }
      }

      public String InstructionsIssuePageIssueListAnswers
      {
        get { return this["InstructionsIssuePageIssueListAnswers"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListAnswers"] = DBNull.Value; else this["InstructionsIssuePageIssueListAnswers"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListNoAnswers
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListNoAnswers"]; }
        set { this["IsTextInstructionsIssuePageIssueListNoAnswers"] = value; }
      }

      public String InstructionsIssuePageIssueListNoAnswers
      {
        get { return this["InstructionsIssuePageIssueListNoAnswers"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListNoAnswers"] = DBNull.Value; else this["InstructionsIssuePageIssueListNoAnswers"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListReport
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListReport"]; }
        set { this["IsTextInstructionsIssuePageIssueListReport"] = value; }
      }

      public String InstructionsIssuePageIssueListReport
      {
        get { return this["InstructionsIssuePageIssueListReport"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListReport"] = DBNull.Value; else this["InstructionsIssuePageIssueListReport"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListAnswers
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListAnswers"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListAnswers"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListAnswers
      {
        get { return this["InstructionsPoliticianIssuePageIssueListAnswers"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListAnswers"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListAnswers"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListNoAnswers
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListNoAnswers
      {
        get { return this["InstructionsPoliticianIssuePageIssueListNoAnswers"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListNoAnswers"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListNoAnswers"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListReport
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListReport"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListReport"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListReport
      {
        get { return this["InstructionsPoliticianIssuePageIssueListReport"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListReport"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListReport"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePage
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePage"]; }
        set { this["IsTextInstructionsPoliticianIssuePage"] = value; }
      }

      public String InstructionsPoliticianIssuePage
      {
        get { return this["InstructionsPoliticianIssuePage"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePage"] = DBNull.Value; else this["InstructionsPoliticianIssuePage"] = value; }
      }

      public Boolean IsTextInstructionsIntroPage
      {
        get { return (Boolean) this["IsTextInstructionsIntroPage"]; }
        set { this["IsTextInstructionsIntroPage"] = value; }
      }

      public String InstructionsIntroPage
      {
        get { return this["InstructionsIntroPage"] as String; }
        set { if (value == null) this["InstructionsIntroPage"] = DBNull.Value; else this["InstructionsIntroPage"] = value; }
      }

      public Boolean IsTextContentAboutUsPage
      {
        get { return (Boolean) this["IsTextContentAboutUsPage"]; }
        set { this["IsTextContentAboutUsPage"] = value; }
      }

      public String ContentAboutUsPage
      {
        get { return this["ContentAboutUsPage"] as String; }
        set { if (value == null) this["ContentAboutUsPage"] = DBNull.Value; else this["ContentAboutUsPage"] = value; }
      }

      public Boolean IsTextContentCandidatesPage
      {
        get { return (Boolean) this["IsTextContentCandidatesPage"]; }
        set { this["IsTextContentCandidatesPage"] = value; }
      }

      public String ContentCandidatesPage
      {
        get { return this["ContentCandidatesPage"] as String; }
        set { if (value == null) this["ContentCandidatesPage"] = DBNull.Value; else this["ContentCandidatesPage"] = value; }
      }

      public Boolean IsTextContentContactUsPage
      {
        get { return (Boolean) this["IsTextContentContactUsPage"]; }
        set { this["IsTextContentContactUsPage"] = value; }
      }

      public String ContentContactUsPage
      {
        get { return this["ContentContactUsPage"] as String; }
        set { if (value == null) this["ContentContactUsPage"] = DBNull.Value; else this["ContentContactUsPage"] = value; }
      }

      public Boolean IsTextContentInternsPage
      {
        get { return (Boolean) this["IsTextContentInternsPage"]; }
        set { this["IsTextContentInternsPage"] = value; }
      }

      public String ContentInternsPage
      {
        get { return this["ContentInternsPage"] as String; }
        set { if (value == null) this["ContentInternsPage"] = DBNull.Value; else this["ContentInternsPage"] = value; }
      }

      public Boolean IsTextContentPartiesPage
      {
        get { return (Boolean) this["IsTextContentPartiesPage"]; }
        set { this["IsTextContentPartiesPage"] = value; }
      }

      public String ContentPartiesPage
      {
        get { return this["ContentPartiesPage"] as String; }
        set { if (value == null) this["ContentPartiesPage"] = DBNull.Value; else this["ContentPartiesPage"] = value; }
      }

      public Boolean IsTextContentVotersPage
      {
        get { return (Boolean) this["IsTextContentVotersPage"]; }
        set { this["IsTextContentVotersPage"] = value; }
      }

      public String ContentVotersPage
      {
        get { return this["ContentVotersPage"] as String; }
        set { if (value == null) this["ContentVotersPage"] = DBNull.Value; else this["ContentVotersPage"] = value; }
      }

      public Boolean IsTextInstructionsArchivesPage
      {
        get { return (Boolean) this["IsTextInstructionsArchivesPage"]; }
        set { this["IsTextInstructionsArchivesPage"] = value; }
      }

      public String InstructionsArchivesPage
      {
        get { return this["InstructionsArchivesPage"] as String; }
        set { if (value == null) this["InstructionsArchivesPage"] = DBNull.Value; else this["InstructionsArchivesPage"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSPresPrimary
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSPresPrimary"]; }
        set { this["IsTextInstructionsElectionPageUSPresPrimary"] = value; }
      }

      public String InstructionsElectionPageUSPresPrimary
      {
        get { return this["InstructionsElectionPageUSPresPrimary"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSPresPrimary"] = DBNull.Value; else this["InstructionsElectionPageUSPresPrimary"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSPres
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSPres"]; }
        set { this["IsTextInstructionsElectionPageUSPres"] = value; }
      }

      public String InstructionsElectionPageUSPres
      {
        get { return this["InstructionsElectionPageUSPres"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSPres"] = DBNull.Value; else this["InstructionsElectionPageUSPres"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSSenate
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSSenate"]; }
        set { this["IsTextInstructionsElectionPageUSSenate"] = value; }
      }

      public String InstructionsElectionPageUSSenate
      {
        get { return this["InstructionsElectionPageUSSenate"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSSenate"] = DBNull.Value; else this["InstructionsElectionPageUSSenate"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSHouse
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSHouse"]; }
        set { this["IsTextInstructionsElectionPageUSHouse"] = value; }
      }

      public String InstructionsElectionPageUSHouse
      {
        get { return this["InstructionsElectionPageUSHouse"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSHouse"] = DBNull.Value; else this["InstructionsElectionPageUSHouse"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageState
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageState"]; }
        set { this["IsTextInstructionsElectionPageState"] = value; }
      }

      public String InstructionsElectionPageState
      {
        get { return this["InstructionsElectionPageState"] as String; }
        set { if (value == null) this["InstructionsElectionPageState"] = DBNull.Value; else this["InstructionsElectionPageState"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageCounty
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageCounty"]; }
        set { this["IsTextInstructionsElectionPageCounty"] = value; }
      }

      public String InstructionsElectionPageCounty
      {
        get { return this["InstructionsElectionPageCounty"] as String; }
        set { if (value == null) this["InstructionsElectionPageCounty"] = DBNull.Value; else this["InstructionsElectionPageCounty"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageLocal
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageLocal"]; }
        set { this["IsTextInstructionsElectionPageLocal"] = value; }
      }

      public String InstructionsElectionPageLocal
      {
        get { return this["InstructionsElectionPageLocal"] as String; }
        set { if (value == null) this["InstructionsElectionPageLocal"] = DBNull.Value; else this["InstructionsElectionPageLocal"] = value; }
      }

      public DateTime LastUpdated
      {
        get { return (DateTime) this["LastUpdated"]; }
        set { this["LastUpdated"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionNone
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionNone"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionNone"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionNone"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionGeneral
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionGeneral"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionGeneral"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionGeneral"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionOffYear
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionOffYear"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionOffYear"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionOffYear"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionSpecial
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionSpecial"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionSpecial"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionSpecial"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionPrimary
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionPrimary"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionPrimary"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionPrimary"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainContestsFederalStatewide
      {
        get { return this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageGovernors
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageGovernors"]; }
        set { this["IsTextInstructionsElectedOfficialsPageGovernors"] = value; }
      }

      public String InstructionsElectedOfficialsPageGovernors
      {
        get { return this["InstructionsElectedOfficialsPageGovernors"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageGovernors"] = DBNull.Value; else this["InstructionsElectedOfficialsPageGovernors"] = value; }
      }
    }

    [Serializable]
    public partial class DomainDesignsTable : TypedTableBase<DomainDesignsRow>
    {
      public DomainDesignsRow this[int index] { get { return (DomainDesignsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DomainDesignsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DomainDesignsTable(); }

      new public DomainDesignsRow NewRow() { return (DomainDesignsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DomainDesignsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DomainDesignsRow); }

      public void RemoveRow(DomainDesignsRow row) { this.Rows.Remove(row); }

      public DomainDesignsRow NewRow(String domainDesignCode, String domainDataCode, Boolean isIncludedBannerAllPages, Boolean isIncludedDonateAllPages, Boolean isIncludedNavbarDefaultAllPages, Boolean isIncludeSpecialButtons, Boolean isIncludedFirstFooterAllPages, Boolean isIncludedSecondFooterAllPages, Boolean isIncludedEmailUsAllPages, Boolean isIncludedPoweredByAllPages, Boolean isIncludedTitleTagDefaultPageAllStatesDomain, Boolean isIncludedMetaDescriptionTagDefaultPageAllStatesDomain, Boolean isIncludedMetaKeywordsTagDefaultPageAllStatesDomain, Boolean isIncludedMainContentDefaultPageAllStatesDomain, Boolean isIncludedInstructionsDefaultPageAllStatesDomain, Boolean isIncludedTitleTagDefaultPageSingleStateDomain, Boolean isIncludedMetaDescriptionTagDefaultPageSingleStateDomain, Boolean isIncludedMetaKeywordsTagDefaultPageSingleStateDomain, Boolean isIncludedInstructionsDefaultPageSingleStateDomain, Boolean isTextFirstFooterAllPages, String firstFooterAllPages, Boolean isTextSecondFooterAllPages, String secondFooterAllPages, String emailUsLineAllPages, String emailUsAddressAllPages, String titleTagDefaultPageAllStatesDomain, String metaDescriptionTagDefaultPageAllStatesDomain, String metaKeywordsTagDefaultPageAllStatesDomain, Boolean isTextMainContentDefaultPageAllStatesDomainBeforeSelection, String mainContentDefaultPageAllStatesDomainBeforeSelection, Boolean isTextMainContentDefaultPageAllStatesDomainAfterSelection, String mainContentDefaultPageAllStatesDomainAfterSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, String instructionsDefaultPageAllStatesDomainBeforeSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainAfterSelection, String instructionsDefaultPageAllStatesDomainAfterSelection, String titleTagDefaultPageSingleStateDomain, String metaDescriptionTagDefaultPageSingleStateDomain, String metaKeywordsTagDefaultPageSingleStateDomain, String mainContentDefaultPageSingleStateDomain, Boolean isTextInstructionsDefaultPageSingleStateDomain, String instructionsDefaultPageSingleStateDomain, Boolean isTextInstructionsUpcomingElectionBallotPage, String instructionsUpcomingElectionBallotPage, Boolean isTextInstructionsPreviousElectionBallotPage, String instructionsPreviousElectionBallotPage, Boolean isTextInstructionsElectedPage, String instructionsElectedPage, Boolean isTextInstructionsElectedOfficialsPageUSPres, String instructionsElectedOfficialsPageUSPres, Boolean isTextInstructionsElectedOfficialsPageUSSenate, String instructionsElectedOfficialsPageUSSenate, Boolean isTextInstructionsElectedOfficialsPageUSHouse, String instructionsElectedOfficialsPageUSHouse, Boolean isTextInstructionsElectedOfficialsPageState, String instructionsElectedOfficialsPageState, Boolean isTextInstructionsElectedOfficialsPageCounty, String instructionsElectedOfficialsPageCounty, Boolean isTextInstructionsElectedOfficialsPageLocal, String instructionsElectedOfficialsPageLocal, Boolean isTextInstructionsIssuePage, String instructionsIssuePage, Boolean isTextInstructionsIssuePageIssueListAnswers, String instructionsIssuePageIssueListAnswers, Boolean isTextInstructionsIssuePageIssueListNoAnswers, String instructionsIssuePageIssueListNoAnswers, Boolean isTextInstructionsIssuePageIssueListReport, String instructionsIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePageIssueListAnswers, String instructionsPoliticianIssuePageIssueListAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListNoAnswers, String instructionsPoliticianIssuePageIssueListNoAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListReport, String instructionsPoliticianIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePage, String instructionsPoliticianIssuePage, Boolean isTextInstructionsIntroPage, String instructionsIntroPage, Boolean isTextContentAboutUsPage, String contentAboutUsPage, Boolean isTextContentCandidatesPage, String contentCandidatesPage, Boolean isTextContentContactUsPage, String contentContactUsPage, Boolean isTextContentInternsPage, String contentInternsPage, Boolean isTextContentPartiesPage, String contentPartiesPage, Boolean isTextContentVotersPage, String contentVotersPage, Boolean isTextInstructionsArchivesPage, String instructionsArchivesPage, Boolean isTextInstructionsElectionPageUSPresPrimary, String instructionsElectionPageUSPresPrimary, Boolean isTextInstructionsElectionPageUSPres, String instructionsElectionPageUSPres, Boolean isTextInstructionsElectionPageUSSenate, String instructionsElectionPageUSSenate, Boolean isTextInstructionsElectionPageUSHouse, String instructionsElectionPageUSHouse, Boolean isTextInstructionsElectionPageState, String instructionsElectionPageState, Boolean isTextInstructionsElectionPageCounty, String instructionsElectionPageCounty, Boolean isTextInstructionsElectionPageLocal, String instructionsElectionPageLocal, DateTime lastUpdated, String mainContentDefaultPageSingleStateDomainElectionNone, String mainContentDefaultPageSingleStateDomainElectionGeneral, String mainContentDefaultPageSingleStateDomainElectionOffYear, String mainContentDefaultPageSingleStateDomainElectionSpecial, String mainContentDefaultPageSingleStateDomainElectionPrimary, String mainContentDefaultPageSingleStateDomainContestsFederalStatewide, Boolean isTextInstructionsElectedOfficialsPageGovernors, String instructionsElectedOfficialsPageGovernors)
      {
        DomainDesignsRow row = NewRow();
        row.DomainDesignCode = domainDesignCode;
        row.DomainDataCode = domainDataCode;
        row.IsIncludedBannerAllPages = isIncludedBannerAllPages;
        row.IsIncludedDonateAllPages = isIncludedDonateAllPages;
        row.IsIncludedNavbarDefaultAllPages = isIncludedNavbarDefaultAllPages;
        row.IsIncludeSpecialButtons = isIncludeSpecialButtons;
        row.IsIncludedFirstFooterAllPages = isIncludedFirstFooterAllPages;
        row.IsIncludedSecondFooterAllPages = isIncludedSecondFooterAllPages;
        row.IsIncludedEmailUsAllPages = isIncludedEmailUsAllPages;
        row.IsIncludedPoweredByAllPages = isIncludedPoweredByAllPages;
        row.IsIncludedTitleTagDefaultPageAllStatesDomain = isIncludedTitleTagDefaultPageAllStatesDomain;
        row.IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain = isIncludedMetaDescriptionTagDefaultPageAllStatesDomain;
        row.IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain = isIncludedMetaKeywordsTagDefaultPageAllStatesDomain;
        row.IsIncludedMainContentDefaultPageAllStatesDomain = isIncludedMainContentDefaultPageAllStatesDomain;
        row.IsIncludedInstructionsDefaultPageAllStatesDomain = isIncludedInstructionsDefaultPageAllStatesDomain;
        row.IsIncludedTitleTagDefaultPageSingleStateDomain = isIncludedTitleTagDefaultPageSingleStateDomain;
        row.IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain = isIncludedMetaDescriptionTagDefaultPageSingleStateDomain;
        row.IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain = isIncludedMetaKeywordsTagDefaultPageSingleStateDomain;
        row.IsIncludedInstructionsDefaultPageSingleStateDomain = isIncludedInstructionsDefaultPageSingleStateDomain;
        row.IsTextFirstFooterAllPages = isTextFirstFooterAllPages;
        row.FirstFooterAllPages = firstFooterAllPages;
        row.IsTextSecondFooterAllPages = isTextSecondFooterAllPages;
        row.SecondFooterAllPages = secondFooterAllPages;
        row.EmailUsLineAllPages = emailUsLineAllPages;
        row.EmailUsAddressAllPages = emailUsAddressAllPages;
        row.TitleTagDefaultPageAllStatesDomain = titleTagDefaultPageAllStatesDomain;
        row.MetaDescriptionTagDefaultPageAllStatesDomain = metaDescriptionTagDefaultPageAllStatesDomain;
        row.MetaKeywordsTagDefaultPageAllStatesDomain = metaKeywordsTagDefaultPageAllStatesDomain;
        row.IsTextMainContentDefaultPageAllStatesDomainBeforeSelection = isTextMainContentDefaultPageAllStatesDomainBeforeSelection;
        row.MainContentDefaultPageAllStatesDomainBeforeSelection = mainContentDefaultPageAllStatesDomainBeforeSelection;
        row.IsTextMainContentDefaultPageAllStatesDomainAfterSelection = isTextMainContentDefaultPageAllStatesDomainAfterSelection;
        row.MainContentDefaultPageAllStatesDomainAfterSelection = mainContentDefaultPageAllStatesDomainAfterSelection;
        row.IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection = isTextInstructionsDefaultPageAllStatesDomainBeforeSelection;
        row.InstructionsDefaultPageAllStatesDomainBeforeSelection = instructionsDefaultPageAllStatesDomainBeforeSelection;
        row.IsTextInstructionsDefaultPageAllStatesDomainAfterSelection = isTextInstructionsDefaultPageAllStatesDomainAfterSelection;
        row.InstructionsDefaultPageAllStatesDomainAfterSelection = instructionsDefaultPageAllStatesDomainAfterSelection;
        row.TitleTagDefaultPageSingleStateDomain = titleTagDefaultPageSingleStateDomain;
        row.MetaDescriptionTagDefaultPageSingleStateDomain = metaDescriptionTagDefaultPageSingleStateDomain;
        row.MetaKeywordsTagDefaultPageSingleStateDomain = metaKeywordsTagDefaultPageSingleStateDomain;
        row.MainContentDefaultPageSingleStateDomain = mainContentDefaultPageSingleStateDomain;
        row.IsTextInstructionsDefaultPageSingleStateDomain = isTextInstructionsDefaultPageSingleStateDomain;
        row.InstructionsDefaultPageSingleStateDomain = instructionsDefaultPageSingleStateDomain;
        row.IsTextInstructionsUpcomingElectionBallotPage = isTextInstructionsUpcomingElectionBallotPage;
        row.InstructionsUpcomingElectionBallotPage = instructionsUpcomingElectionBallotPage;
        row.IsTextInstructionsPreviousElectionBallotPage = isTextInstructionsPreviousElectionBallotPage;
        row.InstructionsPreviousElectionBallotPage = instructionsPreviousElectionBallotPage;
        row.IsTextInstructionsElectedPage = isTextInstructionsElectedPage;
        row.InstructionsElectedPage = instructionsElectedPage;
        row.IsTextInstructionsElectedOfficialsPageUSPres = isTextInstructionsElectedOfficialsPageUSPres;
        row.InstructionsElectedOfficialsPageUSPres = instructionsElectedOfficialsPageUSPres;
        row.IsTextInstructionsElectedOfficialsPageUSSenate = isTextInstructionsElectedOfficialsPageUSSenate;
        row.InstructionsElectedOfficialsPageUSSenate = instructionsElectedOfficialsPageUSSenate;
        row.IsTextInstructionsElectedOfficialsPageUSHouse = isTextInstructionsElectedOfficialsPageUSHouse;
        row.InstructionsElectedOfficialsPageUSHouse = instructionsElectedOfficialsPageUSHouse;
        row.IsTextInstructionsElectedOfficialsPageState = isTextInstructionsElectedOfficialsPageState;
        row.InstructionsElectedOfficialsPageState = instructionsElectedOfficialsPageState;
        row.IsTextInstructionsElectedOfficialsPageCounty = isTextInstructionsElectedOfficialsPageCounty;
        row.InstructionsElectedOfficialsPageCounty = instructionsElectedOfficialsPageCounty;
        row.IsTextInstructionsElectedOfficialsPageLocal = isTextInstructionsElectedOfficialsPageLocal;
        row.InstructionsElectedOfficialsPageLocal = instructionsElectedOfficialsPageLocal;
        row.IsTextInstructionsIssuePage = isTextInstructionsIssuePage;
        row.InstructionsIssuePage = instructionsIssuePage;
        row.IsTextInstructionsIssuePageIssueListAnswers = isTextInstructionsIssuePageIssueListAnswers;
        row.InstructionsIssuePageIssueListAnswers = instructionsIssuePageIssueListAnswers;
        row.IsTextInstructionsIssuePageIssueListNoAnswers = isTextInstructionsIssuePageIssueListNoAnswers;
        row.InstructionsIssuePageIssueListNoAnswers = instructionsIssuePageIssueListNoAnswers;
        row.IsTextInstructionsIssuePageIssueListReport = isTextInstructionsIssuePageIssueListReport;
        row.InstructionsIssuePageIssueListReport = instructionsIssuePageIssueListReport;
        row.IsTextInstructionsPoliticianIssuePageIssueListAnswers = isTextInstructionsPoliticianIssuePageIssueListAnswers;
        row.InstructionsPoliticianIssuePageIssueListAnswers = instructionsPoliticianIssuePageIssueListAnswers;
        row.IsTextInstructionsPoliticianIssuePageIssueListNoAnswers = isTextInstructionsPoliticianIssuePageIssueListNoAnswers;
        row.InstructionsPoliticianIssuePageIssueListNoAnswers = instructionsPoliticianIssuePageIssueListNoAnswers;
        row.IsTextInstructionsPoliticianIssuePageIssueListReport = isTextInstructionsPoliticianIssuePageIssueListReport;
        row.InstructionsPoliticianIssuePageIssueListReport = instructionsPoliticianIssuePageIssueListReport;
        row.IsTextInstructionsPoliticianIssuePage = isTextInstructionsPoliticianIssuePage;
        row.InstructionsPoliticianIssuePage = instructionsPoliticianIssuePage;
        row.IsTextInstructionsIntroPage = isTextInstructionsIntroPage;
        row.InstructionsIntroPage = instructionsIntroPage;
        row.IsTextContentAboutUsPage = isTextContentAboutUsPage;
        row.ContentAboutUsPage = contentAboutUsPage;
        row.IsTextContentCandidatesPage = isTextContentCandidatesPage;
        row.ContentCandidatesPage = contentCandidatesPage;
        row.IsTextContentContactUsPage = isTextContentContactUsPage;
        row.ContentContactUsPage = contentContactUsPage;
        row.IsTextContentInternsPage = isTextContentInternsPage;
        row.ContentInternsPage = contentInternsPage;
        row.IsTextContentPartiesPage = isTextContentPartiesPage;
        row.ContentPartiesPage = contentPartiesPage;
        row.IsTextContentVotersPage = isTextContentVotersPage;
        row.ContentVotersPage = contentVotersPage;
        row.IsTextInstructionsArchivesPage = isTextInstructionsArchivesPage;
        row.InstructionsArchivesPage = instructionsArchivesPage;
        row.IsTextInstructionsElectionPageUSPresPrimary = isTextInstructionsElectionPageUSPresPrimary;
        row.InstructionsElectionPageUSPresPrimary = instructionsElectionPageUSPresPrimary;
        row.IsTextInstructionsElectionPageUSPres = isTextInstructionsElectionPageUSPres;
        row.InstructionsElectionPageUSPres = instructionsElectionPageUSPres;
        row.IsTextInstructionsElectionPageUSSenate = isTextInstructionsElectionPageUSSenate;
        row.InstructionsElectionPageUSSenate = instructionsElectionPageUSSenate;
        row.IsTextInstructionsElectionPageUSHouse = isTextInstructionsElectionPageUSHouse;
        row.InstructionsElectionPageUSHouse = instructionsElectionPageUSHouse;
        row.IsTextInstructionsElectionPageState = isTextInstructionsElectionPageState;
        row.InstructionsElectionPageState = instructionsElectionPageState;
        row.IsTextInstructionsElectionPageCounty = isTextInstructionsElectionPageCounty;
        row.InstructionsElectionPageCounty = instructionsElectionPageCounty;
        row.IsTextInstructionsElectionPageLocal = isTextInstructionsElectionPageLocal;
        row.InstructionsElectionPageLocal = instructionsElectionPageLocal;
        row.LastUpdated = lastUpdated;
        row.MainContentDefaultPageSingleStateDomainElectionNone = mainContentDefaultPageSingleStateDomainElectionNone;
        row.MainContentDefaultPageSingleStateDomainElectionGeneral = mainContentDefaultPageSingleStateDomainElectionGeneral;
        row.MainContentDefaultPageSingleStateDomainElectionOffYear = mainContentDefaultPageSingleStateDomainElectionOffYear;
        row.MainContentDefaultPageSingleStateDomainElectionSpecial = mainContentDefaultPageSingleStateDomainElectionSpecial;
        row.MainContentDefaultPageSingleStateDomainElectionPrimary = mainContentDefaultPageSingleStateDomainElectionPrimary;
        row.MainContentDefaultPageSingleStateDomainContestsFederalStatewide = mainContentDefaultPageSingleStateDomainContestsFederalStatewide;
        row.IsTextInstructionsElectedOfficialsPageGovernors = isTextInstructionsElectedOfficialsPageGovernors;
        row.InstructionsElectedOfficialsPageGovernors = instructionsElectedOfficialsPageGovernors;
        return row;
      }

      public void AddRow(String domainDesignCode, String domainDataCode, Boolean isIncludedBannerAllPages, Boolean isIncludedDonateAllPages, Boolean isIncludedNavbarDefaultAllPages, Boolean isIncludeSpecialButtons, Boolean isIncludedFirstFooterAllPages, Boolean isIncludedSecondFooterAllPages, Boolean isIncludedEmailUsAllPages, Boolean isIncludedPoweredByAllPages, Boolean isIncludedTitleTagDefaultPageAllStatesDomain, Boolean isIncludedMetaDescriptionTagDefaultPageAllStatesDomain, Boolean isIncludedMetaKeywordsTagDefaultPageAllStatesDomain, Boolean isIncludedMainContentDefaultPageAllStatesDomain, Boolean isIncludedInstructionsDefaultPageAllStatesDomain, Boolean isIncludedTitleTagDefaultPageSingleStateDomain, Boolean isIncludedMetaDescriptionTagDefaultPageSingleStateDomain, Boolean isIncludedMetaKeywordsTagDefaultPageSingleStateDomain, Boolean isIncludedInstructionsDefaultPageSingleStateDomain, Boolean isTextFirstFooterAllPages, String firstFooterAllPages, Boolean isTextSecondFooterAllPages, String secondFooterAllPages, String emailUsLineAllPages, String emailUsAddressAllPages, String titleTagDefaultPageAllStatesDomain, String metaDescriptionTagDefaultPageAllStatesDomain, String metaKeywordsTagDefaultPageAllStatesDomain, Boolean isTextMainContentDefaultPageAllStatesDomainBeforeSelection, String mainContentDefaultPageAllStatesDomainBeforeSelection, Boolean isTextMainContentDefaultPageAllStatesDomainAfterSelection, String mainContentDefaultPageAllStatesDomainAfterSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, String instructionsDefaultPageAllStatesDomainBeforeSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainAfterSelection, String instructionsDefaultPageAllStatesDomainAfterSelection, String titleTagDefaultPageSingleStateDomain, String metaDescriptionTagDefaultPageSingleStateDomain, String metaKeywordsTagDefaultPageSingleStateDomain, String mainContentDefaultPageSingleStateDomain, Boolean isTextInstructionsDefaultPageSingleStateDomain, String instructionsDefaultPageSingleStateDomain, Boolean isTextInstructionsUpcomingElectionBallotPage, String instructionsUpcomingElectionBallotPage, Boolean isTextInstructionsPreviousElectionBallotPage, String instructionsPreviousElectionBallotPage, Boolean isTextInstructionsElectedPage, String instructionsElectedPage, Boolean isTextInstructionsElectedOfficialsPageUSPres, String instructionsElectedOfficialsPageUSPres, Boolean isTextInstructionsElectedOfficialsPageUSSenate, String instructionsElectedOfficialsPageUSSenate, Boolean isTextInstructionsElectedOfficialsPageUSHouse, String instructionsElectedOfficialsPageUSHouse, Boolean isTextInstructionsElectedOfficialsPageState, String instructionsElectedOfficialsPageState, Boolean isTextInstructionsElectedOfficialsPageCounty, String instructionsElectedOfficialsPageCounty, Boolean isTextInstructionsElectedOfficialsPageLocal, String instructionsElectedOfficialsPageLocal, Boolean isTextInstructionsIssuePage, String instructionsIssuePage, Boolean isTextInstructionsIssuePageIssueListAnswers, String instructionsIssuePageIssueListAnswers, Boolean isTextInstructionsIssuePageIssueListNoAnswers, String instructionsIssuePageIssueListNoAnswers, Boolean isTextInstructionsIssuePageIssueListReport, String instructionsIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePageIssueListAnswers, String instructionsPoliticianIssuePageIssueListAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListNoAnswers, String instructionsPoliticianIssuePageIssueListNoAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListReport, String instructionsPoliticianIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePage, String instructionsPoliticianIssuePage, Boolean isTextInstructionsIntroPage, String instructionsIntroPage, Boolean isTextContentAboutUsPage, String contentAboutUsPage, Boolean isTextContentCandidatesPage, String contentCandidatesPage, Boolean isTextContentContactUsPage, String contentContactUsPage, Boolean isTextContentInternsPage, String contentInternsPage, Boolean isTextContentPartiesPage, String contentPartiesPage, Boolean isTextContentVotersPage, String contentVotersPage, Boolean isTextInstructionsArchivesPage, String instructionsArchivesPage, Boolean isTextInstructionsElectionPageUSPresPrimary, String instructionsElectionPageUSPresPrimary, Boolean isTextInstructionsElectionPageUSPres, String instructionsElectionPageUSPres, Boolean isTextInstructionsElectionPageUSSenate, String instructionsElectionPageUSSenate, Boolean isTextInstructionsElectionPageUSHouse, String instructionsElectionPageUSHouse, Boolean isTextInstructionsElectionPageState, String instructionsElectionPageState, Boolean isTextInstructionsElectionPageCounty, String instructionsElectionPageCounty, Boolean isTextInstructionsElectionPageLocal, String instructionsElectionPageLocal, DateTime lastUpdated, String mainContentDefaultPageSingleStateDomainElectionNone, String mainContentDefaultPageSingleStateDomainElectionGeneral, String mainContentDefaultPageSingleStateDomainElectionOffYear, String mainContentDefaultPageSingleStateDomainElectionSpecial, String mainContentDefaultPageSingleStateDomainElectionPrimary, String mainContentDefaultPageSingleStateDomainContestsFederalStatewide, Boolean isTextInstructionsElectedOfficialsPageGovernors, String instructionsElectedOfficialsPageGovernors)
      {
        DomainDesignsRow row = NewRow(domainDesignCode, domainDataCode, isIncludedBannerAllPages, isIncludedDonateAllPages, isIncludedNavbarDefaultAllPages, isIncludeSpecialButtons, isIncludedFirstFooterAllPages, isIncludedSecondFooterAllPages, isIncludedEmailUsAllPages, isIncludedPoweredByAllPages, isIncludedTitleTagDefaultPageAllStatesDomain, isIncludedMetaDescriptionTagDefaultPageAllStatesDomain, isIncludedMetaKeywordsTagDefaultPageAllStatesDomain, isIncludedMainContentDefaultPageAllStatesDomain, isIncludedInstructionsDefaultPageAllStatesDomain, isIncludedTitleTagDefaultPageSingleStateDomain, isIncludedMetaDescriptionTagDefaultPageSingleStateDomain, isIncludedMetaKeywordsTagDefaultPageSingleStateDomain, isIncludedInstructionsDefaultPageSingleStateDomain, isTextFirstFooterAllPages, firstFooterAllPages, isTextSecondFooterAllPages, secondFooterAllPages, emailUsLineAllPages, emailUsAddressAllPages, titleTagDefaultPageAllStatesDomain, metaDescriptionTagDefaultPageAllStatesDomain, metaKeywordsTagDefaultPageAllStatesDomain, isTextMainContentDefaultPageAllStatesDomainBeforeSelection, mainContentDefaultPageAllStatesDomainBeforeSelection, isTextMainContentDefaultPageAllStatesDomainAfterSelection, mainContentDefaultPageAllStatesDomainAfterSelection, isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, instructionsDefaultPageAllStatesDomainBeforeSelection, isTextInstructionsDefaultPageAllStatesDomainAfterSelection, instructionsDefaultPageAllStatesDomainAfterSelection, titleTagDefaultPageSingleStateDomain, metaDescriptionTagDefaultPageSingleStateDomain, metaKeywordsTagDefaultPageSingleStateDomain, mainContentDefaultPageSingleStateDomain, isTextInstructionsDefaultPageSingleStateDomain, instructionsDefaultPageSingleStateDomain, isTextInstructionsUpcomingElectionBallotPage, instructionsUpcomingElectionBallotPage, isTextInstructionsPreviousElectionBallotPage, instructionsPreviousElectionBallotPage, isTextInstructionsElectedPage, instructionsElectedPage, isTextInstructionsElectedOfficialsPageUSPres, instructionsElectedOfficialsPageUSPres, isTextInstructionsElectedOfficialsPageUSSenate, instructionsElectedOfficialsPageUSSenate, isTextInstructionsElectedOfficialsPageUSHouse, instructionsElectedOfficialsPageUSHouse, isTextInstructionsElectedOfficialsPageState, instructionsElectedOfficialsPageState, isTextInstructionsElectedOfficialsPageCounty, instructionsElectedOfficialsPageCounty, isTextInstructionsElectedOfficialsPageLocal, instructionsElectedOfficialsPageLocal, isTextInstructionsIssuePage, instructionsIssuePage, isTextInstructionsIssuePageIssueListAnswers, instructionsIssuePageIssueListAnswers, isTextInstructionsIssuePageIssueListNoAnswers, instructionsIssuePageIssueListNoAnswers, isTextInstructionsIssuePageIssueListReport, instructionsIssuePageIssueListReport, isTextInstructionsPoliticianIssuePageIssueListAnswers, instructionsPoliticianIssuePageIssueListAnswers, isTextInstructionsPoliticianIssuePageIssueListNoAnswers, instructionsPoliticianIssuePageIssueListNoAnswers, isTextInstructionsPoliticianIssuePageIssueListReport, instructionsPoliticianIssuePageIssueListReport, isTextInstructionsPoliticianIssuePage, instructionsPoliticianIssuePage, isTextInstructionsIntroPage, instructionsIntroPage, isTextContentAboutUsPage, contentAboutUsPage, isTextContentCandidatesPage, contentCandidatesPage, isTextContentContactUsPage, contentContactUsPage, isTextContentInternsPage, contentInternsPage, isTextContentPartiesPage, contentPartiesPage, isTextContentVotersPage, contentVotersPage, isTextInstructionsArchivesPage, instructionsArchivesPage, isTextInstructionsElectionPageUSPresPrimary, instructionsElectionPageUSPresPrimary, isTextInstructionsElectionPageUSPres, instructionsElectionPageUSPres, isTextInstructionsElectionPageUSSenate, instructionsElectionPageUSSenate, isTextInstructionsElectionPageUSHouse, instructionsElectionPageUSHouse, isTextInstructionsElectionPageState, instructionsElectionPageState, isTextInstructionsElectionPageCounty, instructionsElectionPageCounty, isTextInstructionsElectionPageLocal, instructionsElectionPageLocal, lastUpdated, mainContentDefaultPageSingleStateDomainElectionNone, mainContentDefaultPageSingleStateDomainElectionGeneral, mainContentDefaultPageSingleStateDomainElectionOffYear, mainContentDefaultPageSingleStateDomainElectionSpecial, mainContentDefaultPageSingleStateDomainElectionPrimary, mainContentDefaultPageSingleStateDomainContestsFederalStatewide, isTextInstructionsElectedOfficialsPageGovernors, instructionsElectedOfficialsPageGovernors);
        AddRow(row);
      }

      public DataColumn DomainDesignCodeColumn { get { return this.Columns["DomainDesignCode"]; } }

      public DataColumn DomainDataCodeColumn { get { return this.Columns["DomainDataCode"]; } }

      public DataColumn IsIncludedBannerAllPagesColumn { get { return this.Columns["IsIncludedBannerAllPages"]; } }

      public DataColumn IsIncludedDonateAllPagesColumn { get { return this.Columns["IsIncludedDonateAllPages"]; } }

      public DataColumn IsIncludedNavbarDefaultAllPagesColumn { get { return this.Columns["IsIncludedNavbarDefaultAllPages"]; } }

      public DataColumn IsIncludeSpecialButtonsColumn { get { return this.Columns["IsIncludeSpecialButtons"]; } }

      public DataColumn IsIncludedFirstFooterAllPagesColumn { get { return this.Columns["IsIncludedFirstFooterAllPages"]; } }

      public DataColumn IsIncludedSecondFooterAllPagesColumn { get { return this.Columns["IsIncludedSecondFooterAllPages"]; } }

      public DataColumn IsIncludedEmailUsAllPagesColumn { get { return this.Columns["IsIncludedEmailUsAllPages"]; } }

      public DataColumn IsIncludedPoweredByAllPagesColumn { get { return this.Columns["IsIncludedPoweredByAllPages"]; } }

      public DataColumn IsIncludedTitleTagDefaultPageAllStatesDomainColumn { get { return this.Columns["IsIncludedTitleTagDefaultPageAllStatesDomain"]; } }

      public DataColumn IsIncludedMetaDescriptionTagDefaultPageAllStatesDomainColumn { get { return this.Columns["IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain"]; } }

      public DataColumn IsIncludedMetaKeywordsTagDefaultPageAllStatesDomainColumn { get { return this.Columns["IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain"]; } }

      public DataColumn IsIncludedMainContentDefaultPageAllStatesDomainColumn { get { return this.Columns["IsIncludedMainContentDefaultPageAllStatesDomain"]; } }

      public DataColumn IsIncludedInstructionsDefaultPageAllStatesDomainColumn { get { return this.Columns["IsIncludedInstructionsDefaultPageAllStatesDomain"]; } }

      public DataColumn IsIncludedTitleTagDefaultPageSingleStateDomainColumn { get { return this.Columns["IsIncludedTitleTagDefaultPageSingleStateDomain"]; } }

      public DataColumn IsIncludedMetaDescriptionTagDefaultPageSingleStateDomainColumn { get { return this.Columns["IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain"]; } }

      public DataColumn IsIncludedMetaKeywordsTagDefaultPageSingleStateDomainColumn { get { return this.Columns["IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain"]; } }

      public DataColumn IsIncludedInstructionsDefaultPageSingleStateDomainColumn { get { return this.Columns["IsIncludedInstructionsDefaultPageSingleStateDomain"]; } }

      public DataColumn IsTextFirstFooterAllPagesColumn { get { return this.Columns["IsTextFirstFooterAllPages"]; } }

      public DataColumn FirstFooterAllPagesColumn { get { return this.Columns["FirstFooterAllPages"]; } }

      public DataColumn IsTextSecondFooterAllPagesColumn { get { return this.Columns["IsTextSecondFooterAllPages"]; } }

      public DataColumn SecondFooterAllPagesColumn { get { return this.Columns["SecondFooterAllPages"]; } }

      public DataColumn EmailUsLineAllPagesColumn { get { return this.Columns["EmailUsLineAllPages"]; } }

      public DataColumn EmailUsAddressAllPagesColumn { get { return this.Columns["EmailUsAddressAllPages"]; } }

      public DataColumn TitleTagDefaultPageAllStatesDomainColumn { get { return this.Columns["TitleTagDefaultPageAllStatesDomain"]; } }

      public DataColumn MetaDescriptionTagDefaultPageAllStatesDomainColumn { get { return this.Columns["MetaDescriptionTagDefaultPageAllStatesDomain"]; } }

      public DataColumn MetaKeywordsTagDefaultPageAllStatesDomainColumn { get { return this.Columns["MetaKeywordsTagDefaultPageAllStatesDomain"]; } }

      public DataColumn IsTextMainContentDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn MainContentDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["MainContentDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn IsTextMainContentDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn MainContentDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["MainContentDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn IsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn InstructionsDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["InstructionsDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn IsTextInstructionsDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn InstructionsDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["InstructionsDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn TitleTagDefaultPageSingleStateDomainColumn { get { return this.Columns["TitleTagDefaultPageSingleStateDomain"]; } }

      public DataColumn MetaDescriptionTagDefaultPageSingleStateDomainColumn { get { return this.Columns["MetaDescriptionTagDefaultPageSingleStateDomain"]; } }

      public DataColumn MetaKeywordsTagDefaultPageSingleStateDomainColumn { get { return this.Columns["MetaKeywordsTagDefaultPageSingleStateDomain"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomain"]; } }

      public DataColumn IsTextInstructionsDefaultPageSingleStateDomainColumn { get { return this.Columns["IsTextInstructionsDefaultPageSingleStateDomain"]; } }

      public DataColumn InstructionsDefaultPageSingleStateDomainColumn { get { return this.Columns["InstructionsDefaultPageSingleStateDomain"]; } }

      public DataColumn IsTextInstructionsUpcomingElectionBallotPageColumn { get { return this.Columns["IsTextInstructionsUpcomingElectionBallotPage"]; } }

      public DataColumn InstructionsUpcomingElectionBallotPageColumn { get { return this.Columns["InstructionsUpcomingElectionBallotPage"]; } }

      public DataColumn IsTextInstructionsPreviousElectionBallotPageColumn { get { return this.Columns["IsTextInstructionsPreviousElectionBallotPage"]; } }

      public DataColumn InstructionsPreviousElectionBallotPageColumn { get { return this.Columns["InstructionsPreviousElectionBallotPage"]; } }

      public DataColumn IsTextInstructionsElectedPageColumn { get { return this.Columns["IsTextInstructionsElectedPage"]; } }

      public DataColumn InstructionsElectedPageColumn { get { return this.Columns["InstructionsElectedPage"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSPresColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSPres"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSPresColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSPres"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSSenateColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSSenate"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSSenateColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSSenate"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSHouseColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSHouse"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSHouseColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSHouse"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageStateColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageState"]; } }

      public DataColumn InstructionsElectedOfficialsPageStateColumn { get { return this.Columns["InstructionsElectedOfficialsPageState"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageCountyColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageCounty"]; } }

      public DataColumn InstructionsElectedOfficialsPageCountyColumn { get { return this.Columns["InstructionsElectedOfficialsPageCounty"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageLocalColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageLocal"]; } }

      public DataColumn InstructionsElectedOfficialsPageLocalColumn { get { return this.Columns["InstructionsElectedOfficialsPageLocal"]; } }

      public DataColumn IsTextInstructionsIssuePageColumn { get { return this.Columns["IsTextInstructionsIssuePage"]; } }

      public DataColumn InstructionsIssuePageColumn { get { return this.Columns["InstructionsIssuePage"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListAnswersColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListAnswers"]; } }

      public DataColumn InstructionsIssuePageIssueListAnswersColumn { get { return this.Columns["InstructionsIssuePageIssueListAnswers"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListNoAnswersColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListNoAnswers"]; } }

      public DataColumn InstructionsIssuePageIssueListNoAnswersColumn { get { return this.Columns["InstructionsIssuePageIssueListNoAnswers"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListReportColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListReport"]; } }

      public DataColumn InstructionsIssuePageIssueListReportColumn { get { return this.Columns["InstructionsIssuePageIssueListReport"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListAnswersColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListAnswers"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListAnswersColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListAnswers"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListNoAnswersColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListNoAnswersColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListNoAnswers"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListReportColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListReport"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListReportColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListReport"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePage"]; } }

      public DataColumn InstructionsPoliticianIssuePageColumn { get { return this.Columns["InstructionsPoliticianIssuePage"]; } }

      public DataColumn IsTextInstructionsIntroPageColumn { get { return this.Columns["IsTextInstructionsIntroPage"]; } }

      public DataColumn InstructionsIntroPageColumn { get { return this.Columns["InstructionsIntroPage"]; } }

      public DataColumn IsTextContentAboutUsPageColumn { get { return this.Columns["IsTextContentAboutUsPage"]; } }

      public DataColumn ContentAboutUsPageColumn { get { return this.Columns["ContentAboutUsPage"]; } }

      public DataColumn IsTextContentCandidatesPageColumn { get { return this.Columns["IsTextContentCandidatesPage"]; } }

      public DataColumn ContentCandidatesPageColumn { get { return this.Columns["ContentCandidatesPage"]; } }

      public DataColumn IsTextContentContactUsPageColumn { get { return this.Columns["IsTextContentContactUsPage"]; } }

      public DataColumn ContentContactUsPageColumn { get { return this.Columns["ContentContactUsPage"]; } }

      public DataColumn IsTextContentInternsPageColumn { get { return this.Columns["IsTextContentInternsPage"]; } }

      public DataColumn ContentInternsPageColumn { get { return this.Columns["ContentInternsPage"]; } }

      public DataColumn IsTextContentPartiesPageColumn { get { return this.Columns["IsTextContentPartiesPage"]; } }

      public DataColumn ContentPartiesPageColumn { get { return this.Columns["ContentPartiesPage"]; } }

      public DataColumn IsTextContentVotersPageColumn { get { return this.Columns["IsTextContentVotersPage"]; } }

      public DataColumn ContentVotersPageColumn { get { return this.Columns["ContentVotersPage"]; } }

      public DataColumn IsTextInstructionsArchivesPageColumn { get { return this.Columns["IsTextInstructionsArchivesPage"]; } }

      public DataColumn InstructionsArchivesPageColumn { get { return this.Columns["InstructionsArchivesPage"]; } }

      public DataColumn IsTextInstructionsElectionPageUSPresPrimaryColumn { get { return this.Columns["IsTextInstructionsElectionPageUSPresPrimary"]; } }

      public DataColumn InstructionsElectionPageUSPresPrimaryColumn { get { return this.Columns["InstructionsElectionPageUSPresPrimary"]; } }

      public DataColumn IsTextInstructionsElectionPageUSPresColumn { get { return this.Columns["IsTextInstructionsElectionPageUSPres"]; } }

      public DataColumn InstructionsElectionPageUSPresColumn { get { return this.Columns["InstructionsElectionPageUSPres"]; } }

      public DataColumn IsTextInstructionsElectionPageUSSenateColumn { get { return this.Columns["IsTextInstructionsElectionPageUSSenate"]; } }

      public DataColumn InstructionsElectionPageUSSenateColumn { get { return this.Columns["InstructionsElectionPageUSSenate"]; } }

      public DataColumn IsTextInstructionsElectionPageUSHouseColumn { get { return this.Columns["IsTextInstructionsElectionPageUSHouse"]; } }

      public DataColumn InstructionsElectionPageUSHouseColumn { get { return this.Columns["InstructionsElectionPageUSHouse"]; } }

      public DataColumn IsTextInstructionsElectionPageStateColumn { get { return this.Columns["IsTextInstructionsElectionPageState"]; } }

      public DataColumn InstructionsElectionPageStateColumn { get { return this.Columns["InstructionsElectionPageState"]; } }

      public DataColumn IsTextInstructionsElectionPageCountyColumn { get { return this.Columns["IsTextInstructionsElectionPageCounty"]; } }

      public DataColumn InstructionsElectionPageCountyColumn { get { return this.Columns["InstructionsElectionPageCounty"]; } }

      public DataColumn IsTextInstructionsElectionPageLocalColumn { get { return this.Columns["IsTextInstructionsElectionPageLocal"]; } }

      public DataColumn InstructionsElectionPageLocalColumn { get { return this.Columns["InstructionsElectionPageLocal"]; } }

      public DataColumn LastUpdatedColumn { get { return this.Columns["LastUpdated"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionNoneColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionNone"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionGeneralColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionGeneral"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionOffYearColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionOffYear"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionSpecialColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionSpecial"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionPrimaryColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionPrimary"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainContestsFederalStatewideColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageGovernorsColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageGovernors"]; } }

      public DataColumn InstructionsElectedOfficialsPageGovernorsColumn { get { return this.Columns["InstructionsElectedOfficialsPageGovernors"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDesignCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedBannerAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedDonateAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedNavbarDefaultAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludeSpecialButtons", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedFirstFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedSecondFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedEmailUsAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedPoweredByAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedTitleTagDefaultPageAllStatesDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedMainContentDefaultPageAllStatesDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedInstructionsDefaultPageAllStatesDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedTitleTagDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncludedInstructionsDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextFirstFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstFooterAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextSecondFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SecondFooterAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailUsLineAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailUsAddressAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TitleTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaDescriptionTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaKeywordsTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextMainContentDefaultPageAllStatesDomainBeforeSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageAllStatesDomainBeforeSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextMainContentDefaultPageAllStatesDomainAfterSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageAllStatesDomainAfterSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageAllStatesDomainBeforeSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageAllStatesDomainAfterSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageAllStatesDomainAfterSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TitleTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaDescriptionTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaKeywordsTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsUpcomingElectionBallotPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsUpcomingElectionBallotPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPreviousElectionBallotPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPreviousElectionBallotPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSPres", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSPres", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSSenate", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSSenate", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSHouse", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSHouse", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageState", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageCounty", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageCounty", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageLocal", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageLocal", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListNoAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListNoAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListNoAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListNoAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIntroPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIntroPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentAboutUsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentAboutUsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentCandidatesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentCandidatesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentContactUsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentContactUsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentInternsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentInternsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentPartiesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentPartiesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentVotersPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentVotersPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsArchivesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsArchivesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSPresPrimary", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSPresPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSPres", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSPres", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSSenate", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSSenate", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSHouse", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSHouse", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageState", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageCounty", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageCounty", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageLocal", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageLocal", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionNone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionGeneral", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionOffYear", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionSpecial", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainContestsFederalStatewide", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageGovernors", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageGovernors", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DomainDesignsTable() : this(ColumnSet.All) { }

      public DomainDesignsTable(ColumnSet columnSet)
      {
        this.TableName = "DomainDesigns";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DomainDesignsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DomainDesigns
    {
      public const string TableName = "DomainDesigns";

      public enum Column { DomainDesignCode, DomainDataCode, IsIncludedBannerAllPages, IsIncludedDonateAllPages, IsIncludedNavbarDefaultAllPages, IsIncludeSpecialButtons, IsIncludedFirstFooterAllPages, IsIncludedSecondFooterAllPages, IsIncludedEmailUsAllPages, IsIncludedPoweredByAllPages, IsIncludedTitleTagDefaultPageAllStatesDomain, IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain, IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain, IsIncludedMainContentDefaultPageAllStatesDomain, IsIncludedInstructionsDefaultPageAllStatesDomain, IsIncludedTitleTagDefaultPageSingleStateDomain, IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain, IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain, IsIncludedInstructionsDefaultPageSingleStateDomain, IsTextFirstFooterAllPages, FirstFooterAllPages, IsTextSecondFooterAllPages, SecondFooterAllPages, EmailUsLineAllPages, EmailUsAddressAllPages, TitleTagDefaultPageAllStatesDomain, MetaDescriptionTagDefaultPageAllStatesDomain, MetaKeywordsTagDefaultPageAllStatesDomain, IsTextMainContentDefaultPageAllStatesDomainBeforeSelection, MainContentDefaultPageAllStatesDomainBeforeSelection, IsTextMainContentDefaultPageAllStatesDomainAfterSelection, MainContentDefaultPageAllStatesDomainAfterSelection, IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection, InstructionsDefaultPageAllStatesDomainBeforeSelection, IsTextInstructionsDefaultPageAllStatesDomainAfterSelection, InstructionsDefaultPageAllStatesDomainAfterSelection, TitleTagDefaultPageSingleStateDomain, MetaDescriptionTagDefaultPageSingleStateDomain, MetaKeywordsTagDefaultPageSingleStateDomain, MainContentDefaultPageSingleStateDomain, IsTextInstructionsDefaultPageSingleStateDomain, InstructionsDefaultPageSingleStateDomain, IsTextInstructionsUpcomingElectionBallotPage, InstructionsUpcomingElectionBallotPage, IsTextInstructionsPreviousElectionBallotPage, InstructionsPreviousElectionBallotPage, IsTextInstructionsElectedPage, InstructionsElectedPage, IsTextInstructionsElectedOfficialsPageUSPres, InstructionsElectedOfficialsPageUSPres, IsTextInstructionsElectedOfficialsPageUSSenate, InstructionsElectedOfficialsPageUSSenate, IsTextInstructionsElectedOfficialsPageUSHouse, InstructionsElectedOfficialsPageUSHouse, IsTextInstructionsElectedOfficialsPageState, InstructionsElectedOfficialsPageState, IsTextInstructionsElectedOfficialsPageCounty, InstructionsElectedOfficialsPageCounty, IsTextInstructionsElectedOfficialsPageLocal, InstructionsElectedOfficialsPageLocal, IsTextInstructionsIssuePage, InstructionsIssuePage, IsTextInstructionsIssuePageIssueListAnswers, InstructionsIssuePageIssueListAnswers, IsTextInstructionsIssuePageIssueListNoAnswers, InstructionsIssuePageIssueListNoAnswers, IsTextInstructionsIssuePageIssueListReport, InstructionsIssuePageIssueListReport, IsTextInstructionsPoliticianIssuePageIssueListAnswers, InstructionsPoliticianIssuePageIssueListAnswers, IsTextInstructionsPoliticianIssuePageIssueListNoAnswers, InstructionsPoliticianIssuePageIssueListNoAnswers, IsTextInstructionsPoliticianIssuePageIssueListReport, InstructionsPoliticianIssuePageIssueListReport, IsTextInstructionsPoliticianIssuePage, InstructionsPoliticianIssuePage, IsTextInstructionsIntroPage, InstructionsIntroPage, IsTextContentAboutUsPage, ContentAboutUsPage, IsTextContentCandidatesPage, ContentCandidatesPage, IsTextContentContactUsPage, ContentContactUsPage, IsTextContentInternsPage, ContentInternsPage, IsTextContentPartiesPage, ContentPartiesPage, IsTextContentVotersPage, ContentVotersPage, IsTextInstructionsArchivesPage, InstructionsArchivesPage, IsTextInstructionsElectionPageUSPresPrimary, InstructionsElectionPageUSPresPrimary, IsTextInstructionsElectionPageUSPres, InstructionsElectionPageUSPres, IsTextInstructionsElectionPageUSSenate, InstructionsElectionPageUSSenate, IsTextInstructionsElectionPageUSHouse, InstructionsElectionPageUSHouse, IsTextInstructionsElectionPageState, InstructionsElectionPageState, IsTextInstructionsElectionPageCounty, InstructionsElectionPageCounty, IsTextInstructionsElectionPageLocal, InstructionsElectionPageLocal, LastUpdated, MainContentDefaultPageSingleStateDomainElectionNone, MainContentDefaultPageSingleStateDomainElectionGeneral, MainContentDefaultPageSingleStateDomainElectionOffYear, MainContentDefaultPageSingleStateDomainElectionSpecial, MainContentDefaultPageSingleStateDomainElectionPrimary, MainContentDefaultPageSingleStateDomainContestsFederalStatewide, IsTextInstructionsElectedOfficialsPageGovernors, InstructionsElectedOfficialsPageGovernors }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DomainDesignCode, "DomainDesignCode" },
        { Column.DomainDataCode, "DomainDataCode" },
        { Column.IsIncludedBannerAllPages, "IsIncludedBannerAllPages" },
        { Column.IsIncludedDonateAllPages, "IsIncludedDonateAllPages" },
        { Column.IsIncludedNavbarDefaultAllPages, "IsIncludedNavbarDefaultAllPages" },
        { Column.IsIncludeSpecialButtons, "IsIncludeSpecialButtons" },
        { Column.IsIncludedFirstFooterAllPages, "IsIncludedFirstFooterAllPages" },
        { Column.IsIncludedSecondFooterAllPages, "IsIncludedSecondFooterAllPages" },
        { Column.IsIncludedEmailUsAllPages, "IsIncludedEmailUsAllPages" },
        { Column.IsIncludedPoweredByAllPages, "IsIncludedPoweredByAllPages" },
        { Column.IsIncludedTitleTagDefaultPageAllStatesDomain, "IsIncludedTitleTagDefaultPageAllStatesDomain" },
        { Column.IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain, "IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain" },
        { Column.IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain, "IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain" },
        { Column.IsIncludedMainContentDefaultPageAllStatesDomain, "IsIncludedMainContentDefaultPageAllStatesDomain" },
        { Column.IsIncludedInstructionsDefaultPageAllStatesDomain, "IsIncludedInstructionsDefaultPageAllStatesDomain" },
        { Column.IsIncludedTitleTagDefaultPageSingleStateDomain, "IsIncludedTitleTagDefaultPageSingleStateDomain" },
        { Column.IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain, "IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain" },
        { Column.IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain, "IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain" },
        { Column.IsIncludedInstructionsDefaultPageSingleStateDomain, "IsIncludedInstructionsDefaultPageSingleStateDomain" },
        { Column.IsTextFirstFooterAllPages, "IsTextFirstFooterAllPages" },
        { Column.FirstFooterAllPages, "FirstFooterAllPages" },
        { Column.IsTextSecondFooterAllPages, "IsTextSecondFooterAllPages" },
        { Column.SecondFooterAllPages, "SecondFooterAllPages" },
        { Column.EmailUsLineAllPages, "EmailUsLineAllPages" },
        { Column.EmailUsAddressAllPages, "EmailUsAddressAllPages" },
        { Column.TitleTagDefaultPageAllStatesDomain, "TitleTagDefaultPageAllStatesDomain" },
        { Column.MetaDescriptionTagDefaultPageAllStatesDomain, "MetaDescriptionTagDefaultPageAllStatesDomain" },
        { Column.MetaKeywordsTagDefaultPageAllStatesDomain, "MetaKeywordsTagDefaultPageAllStatesDomain" },
        { Column.IsTextMainContentDefaultPageAllStatesDomainBeforeSelection, "IsTextMainContentDefaultPageAllStatesDomainBeforeSelection" },
        { Column.MainContentDefaultPageAllStatesDomainBeforeSelection, "MainContentDefaultPageAllStatesDomainBeforeSelection" },
        { Column.IsTextMainContentDefaultPageAllStatesDomainAfterSelection, "IsTextMainContentDefaultPageAllStatesDomainAfterSelection" },
        { Column.MainContentDefaultPageAllStatesDomainAfterSelection, "MainContentDefaultPageAllStatesDomainAfterSelection" },
        { Column.IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection, "IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection" },
        { Column.InstructionsDefaultPageAllStatesDomainBeforeSelection, "InstructionsDefaultPageAllStatesDomainBeforeSelection" },
        { Column.IsTextInstructionsDefaultPageAllStatesDomainAfterSelection, "IsTextInstructionsDefaultPageAllStatesDomainAfterSelection" },
        { Column.InstructionsDefaultPageAllStatesDomainAfterSelection, "InstructionsDefaultPageAllStatesDomainAfterSelection" },
        { Column.TitleTagDefaultPageSingleStateDomain, "TitleTagDefaultPageSingleStateDomain" },
        { Column.MetaDescriptionTagDefaultPageSingleStateDomain, "MetaDescriptionTagDefaultPageSingleStateDomain" },
        { Column.MetaKeywordsTagDefaultPageSingleStateDomain, "MetaKeywordsTagDefaultPageSingleStateDomain" },
        { Column.MainContentDefaultPageSingleStateDomain, "MainContentDefaultPageSingleStateDomain" },
        { Column.IsTextInstructionsDefaultPageSingleStateDomain, "IsTextInstructionsDefaultPageSingleStateDomain" },
        { Column.InstructionsDefaultPageSingleStateDomain, "InstructionsDefaultPageSingleStateDomain" },
        { Column.IsTextInstructionsUpcomingElectionBallotPage, "IsTextInstructionsUpcomingElectionBallotPage" },
        { Column.InstructionsUpcomingElectionBallotPage, "InstructionsUpcomingElectionBallotPage" },
        { Column.IsTextInstructionsPreviousElectionBallotPage, "IsTextInstructionsPreviousElectionBallotPage" },
        { Column.InstructionsPreviousElectionBallotPage, "InstructionsPreviousElectionBallotPage" },
        { Column.IsTextInstructionsElectedPage, "IsTextInstructionsElectedPage" },
        { Column.InstructionsElectedPage, "InstructionsElectedPage" },
        { Column.IsTextInstructionsElectedOfficialsPageUSPres, "IsTextInstructionsElectedOfficialsPageUSPres" },
        { Column.InstructionsElectedOfficialsPageUSPres, "InstructionsElectedOfficialsPageUSPres" },
        { Column.IsTextInstructionsElectedOfficialsPageUSSenate, "IsTextInstructionsElectedOfficialsPageUSSenate" },
        { Column.InstructionsElectedOfficialsPageUSSenate, "InstructionsElectedOfficialsPageUSSenate" },
        { Column.IsTextInstructionsElectedOfficialsPageUSHouse, "IsTextInstructionsElectedOfficialsPageUSHouse" },
        { Column.InstructionsElectedOfficialsPageUSHouse, "InstructionsElectedOfficialsPageUSHouse" },
        { Column.IsTextInstructionsElectedOfficialsPageState, "IsTextInstructionsElectedOfficialsPageState" },
        { Column.InstructionsElectedOfficialsPageState, "InstructionsElectedOfficialsPageState" },
        { Column.IsTextInstructionsElectedOfficialsPageCounty, "IsTextInstructionsElectedOfficialsPageCounty" },
        { Column.InstructionsElectedOfficialsPageCounty, "InstructionsElectedOfficialsPageCounty" },
        { Column.IsTextInstructionsElectedOfficialsPageLocal, "IsTextInstructionsElectedOfficialsPageLocal" },
        { Column.InstructionsElectedOfficialsPageLocal, "InstructionsElectedOfficialsPageLocal" },
        { Column.IsTextInstructionsIssuePage, "IsTextInstructionsIssuePage" },
        { Column.InstructionsIssuePage, "InstructionsIssuePage" },
        { Column.IsTextInstructionsIssuePageIssueListAnswers, "IsTextInstructionsIssuePageIssueListAnswers" },
        { Column.InstructionsIssuePageIssueListAnswers, "InstructionsIssuePageIssueListAnswers" },
        { Column.IsTextInstructionsIssuePageIssueListNoAnswers, "IsTextInstructionsIssuePageIssueListNoAnswers" },
        { Column.InstructionsIssuePageIssueListNoAnswers, "InstructionsIssuePageIssueListNoAnswers" },
        { Column.IsTextInstructionsIssuePageIssueListReport, "IsTextInstructionsIssuePageIssueListReport" },
        { Column.InstructionsIssuePageIssueListReport, "InstructionsIssuePageIssueListReport" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListAnswers, "IsTextInstructionsPoliticianIssuePageIssueListAnswers" },
        { Column.InstructionsPoliticianIssuePageIssueListAnswers, "InstructionsPoliticianIssuePageIssueListAnswers" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListNoAnswers, "IsTextInstructionsPoliticianIssuePageIssueListNoAnswers" },
        { Column.InstructionsPoliticianIssuePageIssueListNoAnswers, "InstructionsPoliticianIssuePageIssueListNoAnswers" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListReport, "IsTextInstructionsPoliticianIssuePageIssueListReport" },
        { Column.InstructionsPoliticianIssuePageIssueListReport, "InstructionsPoliticianIssuePageIssueListReport" },
        { Column.IsTextInstructionsPoliticianIssuePage, "IsTextInstructionsPoliticianIssuePage" },
        { Column.InstructionsPoliticianIssuePage, "InstructionsPoliticianIssuePage" },
        { Column.IsTextInstructionsIntroPage, "IsTextInstructionsIntroPage" },
        { Column.InstructionsIntroPage, "InstructionsIntroPage" },
        { Column.IsTextContentAboutUsPage, "IsTextContentAboutUsPage" },
        { Column.ContentAboutUsPage, "ContentAboutUsPage" },
        { Column.IsTextContentCandidatesPage, "IsTextContentCandidatesPage" },
        { Column.ContentCandidatesPage, "ContentCandidatesPage" },
        { Column.IsTextContentContactUsPage, "IsTextContentContactUsPage" },
        { Column.ContentContactUsPage, "ContentContactUsPage" },
        { Column.IsTextContentInternsPage, "IsTextContentInternsPage" },
        { Column.ContentInternsPage, "ContentInternsPage" },
        { Column.IsTextContentPartiesPage, "IsTextContentPartiesPage" },
        { Column.ContentPartiesPage, "ContentPartiesPage" },
        { Column.IsTextContentVotersPage, "IsTextContentVotersPage" },
        { Column.ContentVotersPage, "ContentVotersPage" },
        { Column.IsTextInstructionsArchivesPage, "IsTextInstructionsArchivesPage" },
        { Column.InstructionsArchivesPage, "InstructionsArchivesPage" },
        { Column.IsTextInstructionsElectionPageUSPresPrimary, "IsTextInstructionsElectionPageUSPresPrimary" },
        { Column.InstructionsElectionPageUSPresPrimary, "InstructionsElectionPageUSPresPrimary" },
        { Column.IsTextInstructionsElectionPageUSPres, "IsTextInstructionsElectionPageUSPres" },
        { Column.InstructionsElectionPageUSPres, "InstructionsElectionPageUSPres" },
        { Column.IsTextInstructionsElectionPageUSSenate, "IsTextInstructionsElectionPageUSSenate" },
        { Column.InstructionsElectionPageUSSenate, "InstructionsElectionPageUSSenate" },
        { Column.IsTextInstructionsElectionPageUSHouse, "IsTextInstructionsElectionPageUSHouse" },
        { Column.InstructionsElectionPageUSHouse, "InstructionsElectionPageUSHouse" },
        { Column.IsTextInstructionsElectionPageState, "IsTextInstructionsElectionPageState" },
        { Column.InstructionsElectionPageState, "InstructionsElectionPageState" },
        { Column.IsTextInstructionsElectionPageCounty, "IsTextInstructionsElectionPageCounty" },
        { Column.InstructionsElectionPageCounty, "InstructionsElectionPageCounty" },
        { Column.IsTextInstructionsElectionPageLocal, "IsTextInstructionsElectionPageLocal" },
        { Column.InstructionsElectionPageLocal, "InstructionsElectionPageLocal" },
        { Column.LastUpdated, "LastUpdated" },
        { Column.MainContentDefaultPageSingleStateDomainElectionNone, "MainContentDefaultPageSingleStateDomainElectionNone" },
        { Column.MainContentDefaultPageSingleStateDomainElectionGeneral, "MainContentDefaultPageSingleStateDomainElectionGeneral" },
        { Column.MainContentDefaultPageSingleStateDomainElectionOffYear, "MainContentDefaultPageSingleStateDomainElectionOffYear" },
        { Column.MainContentDefaultPageSingleStateDomainElectionSpecial, "MainContentDefaultPageSingleStateDomainElectionSpecial" },
        { Column.MainContentDefaultPageSingleStateDomainElectionPrimary, "MainContentDefaultPageSingleStateDomainElectionPrimary" },
        { Column.MainContentDefaultPageSingleStateDomainContestsFederalStatewide, "MainContentDefaultPageSingleStateDomainContestsFederalStatewide" },
        { Column.IsTextInstructionsElectedOfficialsPageGovernors, "IsTextInstructionsElectedOfficialsPageGovernors" },
        { Column.InstructionsElectedOfficialsPageGovernors, "InstructionsElectedOfficialsPageGovernors" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DomainDesigns";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DomainDesignCode,DomainDataCode,IsIncludedBannerAllPages,IsIncludedDonateAllPages,IsIncludedNavbarDefaultAllPages,IsIncludeSpecialButtons,IsIncludedFirstFooterAllPages,IsIncludedSecondFooterAllPages,IsIncludedEmailUsAllPages,IsIncludedPoweredByAllPages,IsIncludedTitleTagDefaultPageAllStatesDomain,IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain,IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain,IsIncludedMainContentDefaultPageAllStatesDomain,IsIncludedInstructionsDefaultPageAllStatesDomain,IsIncludedTitleTagDefaultPageSingleStateDomain,IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain,IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain,IsIncludedInstructionsDefaultPageSingleStateDomain,IsTextFirstFooterAllPages,FirstFooterAllPages,IsTextSecondFooterAllPages,SecondFooterAllPages,EmailUsLineAllPages,EmailUsAddressAllPages,TitleTagDefaultPageAllStatesDomain,MetaDescriptionTagDefaultPageAllStatesDomain,MetaKeywordsTagDefaultPageAllStatesDomain,IsTextMainContentDefaultPageAllStatesDomainBeforeSelection,MainContentDefaultPageAllStatesDomainBeforeSelection,IsTextMainContentDefaultPageAllStatesDomainAfterSelection,MainContentDefaultPageAllStatesDomainAfterSelection,IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection,InstructionsDefaultPageAllStatesDomainBeforeSelection,IsTextInstructionsDefaultPageAllStatesDomainAfterSelection,InstructionsDefaultPageAllStatesDomainAfterSelection,TitleTagDefaultPageSingleStateDomain,MetaDescriptionTagDefaultPageSingleStateDomain,MetaKeywordsTagDefaultPageSingleStateDomain,MainContentDefaultPageSingleStateDomain,IsTextInstructionsDefaultPageSingleStateDomain,InstructionsDefaultPageSingleStateDomain,IsTextInstructionsUpcomingElectionBallotPage,InstructionsUpcomingElectionBallotPage,IsTextInstructionsPreviousElectionBallotPage,InstructionsPreviousElectionBallotPage,IsTextInstructionsElectedPage,InstructionsElectedPage,IsTextInstructionsElectedOfficialsPageUSPres,InstructionsElectedOfficialsPageUSPres,IsTextInstructionsElectedOfficialsPageUSSenate,InstructionsElectedOfficialsPageUSSenate,IsTextInstructionsElectedOfficialsPageUSHouse,InstructionsElectedOfficialsPageUSHouse,IsTextInstructionsElectedOfficialsPageState,InstructionsElectedOfficialsPageState,IsTextInstructionsElectedOfficialsPageCounty,InstructionsElectedOfficialsPageCounty,IsTextInstructionsElectedOfficialsPageLocal,InstructionsElectedOfficialsPageLocal,IsTextInstructionsIssuePage,InstructionsIssuePage,IsTextInstructionsIssuePageIssueListAnswers,InstructionsIssuePageIssueListAnswers,IsTextInstructionsIssuePageIssueListNoAnswers,InstructionsIssuePageIssueListNoAnswers,IsTextInstructionsIssuePageIssueListReport,InstructionsIssuePageIssueListReport,IsTextInstructionsPoliticianIssuePageIssueListAnswers,InstructionsPoliticianIssuePageIssueListAnswers,IsTextInstructionsPoliticianIssuePageIssueListNoAnswers,InstructionsPoliticianIssuePageIssueListNoAnswers,IsTextInstructionsPoliticianIssuePageIssueListReport,InstructionsPoliticianIssuePageIssueListReport,IsTextInstructionsPoliticianIssuePage,InstructionsPoliticianIssuePage,IsTextInstructionsIntroPage,InstructionsIntroPage,IsTextContentAboutUsPage,ContentAboutUsPage,IsTextContentCandidatesPage,ContentCandidatesPage,IsTextContentContactUsPage,ContentContactUsPage,IsTextContentInternsPage,ContentInternsPage,IsTextContentPartiesPage,ContentPartiesPage,IsTextContentVotersPage,ContentVotersPage,IsTextInstructionsArchivesPage,InstructionsArchivesPage,IsTextInstructionsElectionPageUSPresPrimary,InstructionsElectionPageUSPresPrimary,IsTextInstructionsElectionPageUSPres,InstructionsElectionPageUSPres,IsTextInstructionsElectionPageUSSenate,InstructionsElectionPageUSSenate,IsTextInstructionsElectionPageUSHouse,InstructionsElectionPageUSHouse,IsTextInstructionsElectionPageState,InstructionsElectionPageState,IsTextInstructionsElectionPageCounty,InstructionsElectionPageCounty,IsTextInstructionsElectionPageLocal,InstructionsElectionPageLocal,LastUpdated,MainContentDefaultPageSingleStateDomainElectionNone,MainContentDefaultPageSingleStateDomainElectionGeneral,MainContentDefaultPageSingleStateDomainElectionOffYear,MainContentDefaultPageSingleStateDomainElectionSpecial,MainContentDefaultPageSingleStateDomainElectionPrimary,MainContentDefaultPageSingleStateDomainContestsFederalStatewide,IsTextInstructionsElectedOfficialsPageGovernors,InstructionsElectedOfficialsPageGovernors FROM DomainDesigns";
        }
      }

      public static DomainDesignsTable FillTable(DbCommand command)
      {
        return FillTable(command, DomainDesignsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DomainDesignsTable FillTable(DbCommand command, DomainDesignsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DomainDesignsTable table = new DomainDesignsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DomainDesignCodeColumnName { get { return "DomainDesignCode"; } }

      public static string DomainDataCodeColumnName { get { return "DomainDataCode"; } }

      public static string IsIncludedBannerAllPagesColumnName { get { return "IsIncludedBannerAllPages"; } }

      public static string IsIncludedDonateAllPagesColumnName { get { return "IsIncludedDonateAllPages"; } }

      public static string IsIncludedNavbarDefaultAllPagesColumnName { get { return "IsIncludedNavbarDefaultAllPages"; } }

      public static string IsIncludeSpecialButtonsColumnName { get { return "IsIncludeSpecialButtons"; } }

      public static string IsIncludedFirstFooterAllPagesColumnName { get { return "IsIncludedFirstFooterAllPages"; } }

      public static string IsIncludedSecondFooterAllPagesColumnName { get { return "IsIncludedSecondFooterAllPages"; } }

      public static string IsIncludedEmailUsAllPagesColumnName { get { return "IsIncludedEmailUsAllPages"; } }

      public static string IsIncludedPoweredByAllPagesColumnName { get { return "IsIncludedPoweredByAllPages"; } }

      public static string IsIncludedTitleTagDefaultPageAllStatesDomainColumnName { get { return "IsIncludedTitleTagDefaultPageAllStatesDomain"; } }

      public static string IsIncludedMetaDescriptionTagDefaultPageAllStatesDomainColumnName { get { return "IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain"; } }

      public static string IsIncludedMetaKeywordsTagDefaultPageAllStatesDomainColumnName { get { return "IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain"; } }

      public static string IsIncludedMainContentDefaultPageAllStatesDomainColumnName { get { return "IsIncludedMainContentDefaultPageAllStatesDomain"; } }

      public static string IsIncludedInstructionsDefaultPageAllStatesDomainColumnName { get { return "IsIncludedInstructionsDefaultPageAllStatesDomain"; } }

      public static string IsIncludedTitleTagDefaultPageSingleStateDomainColumnName { get { return "IsIncludedTitleTagDefaultPageSingleStateDomain"; } }

      public static string IsIncludedMetaDescriptionTagDefaultPageSingleStateDomainColumnName { get { return "IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain"; } }

      public static string IsIncludedMetaKeywordsTagDefaultPageSingleStateDomainColumnName { get { return "IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain"; } }

      public static string IsIncludedInstructionsDefaultPageSingleStateDomainColumnName { get { return "IsIncludedInstructionsDefaultPageSingleStateDomain"; } }

      public static string IsTextFirstFooterAllPagesColumnName { get { return "IsTextFirstFooterAllPages"; } }

      public static string FirstFooterAllPagesColumnName { get { return "FirstFooterAllPages"; } }

      public static string IsTextSecondFooterAllPagesColumnName { get { return "IsTextSecondFooterAllPages"; } }

      public static string SecondFooterAllPagesColumnName { get { return "SecondFooterAllPages"; } }

      public static string EmailUsLineAllPagesColumnName { get { return "EmailUsLineAllPages"; } }

      public static string EmailUsAddressAllPagesColumnName { get { return "EmailUsAddressAllPages"; } }

      public static string TitleTagDefaultPageAllStatesDomainColumnName { get { return "TitleTagDefaultPageAllStatesDomain"; } }

      public static string MetaDescriptionTagDefaultPageAllStatesDomainColumnName { get { return "MetaDescriptionTagDefaultPageAllStatesDomain"; } }

      public static string MetaKeywordsTagDefaultPageAllStatesDomainColumnName { get { return "MetaKeywordsTagDefaultPageAllStatesDomain"; } }

      public static string IsTextMainContentDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string MainContentDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "MainContentDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string IsTextMainContentDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "IsTextMainContentDefaultPageAllStatesDomainAfterSelection"; } }

      public static string MainContentDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "MainContentDefaultPageAllStatesDomainAfterSelection"; } }

      public static string IsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string InstructionsDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "InstructionsDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string IsTextInstructionsDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"; } }

      public static string InstructionsDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "InstructionsDefaultPageAllStatesDomainAfterSelection"; } }

      public static string TitleTagDefaultPageSingleStateDomainColumnName { get { return "TitleTagDefaultPageSingleStateDomain"; } }

      public static string MetaDescriptionTagDefaultPageSingleStateDomainColumnName { get { return "MetaDescriptionTagDefaultPageSingleStateDomain"; } }

      public static string MetaKeywordsTagDefaultPageSingleStateDomainColumnName { get { return "MetaKeywordsTagDefaultPageSingleStateDomain"; } }

      public static string MainContentDefaultPageSingleStateDomainColumnName { get { return "MainContentDefaultPageSingleStateDomain"; } }

      public static string IsTextInstructionsDefaultPageSingleStateDomainColumnName { get { return "IsTextInstructionsDefaultPageSingleStateDomain"; } }

      public static string InstructionsDefaultPageSingleStateDomainColumnName { get { return "InstructionsDefaultPageSingleStateDomain"; } }

      public static string IsTextInstructionsUpcomingElectionBallotPageColumnName { get { return "IsTextInstructionsUpcomingElectionBallotPage"; } }

      public static string InstructionsUpcomingElectionBallotPageColumnName { get { return "InstructionsUpcomingElectionBallotPage"; } }

      public static string IsTextInstructionsPreviousElectionBallotPageColumnName { get { return "IsTextInstructionsPreviousElectionBallotPage"; } }

      public static string InstructionsPreviousElectionBallotPageColumnName { get { return "InstructionsPreviousElectionBallotPage"; } }

      public static string IsTextInstructionsElectedPageColumnName { get { return "IsTextInstructionsElectedPage"; } }

      public static string InstructionsElectedPageColumnName { get { return "InstructionsElectedPage"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSPresColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSPres"; } }

      public static string InstructionsElectedOfficialsPageUSPresColumnName { get { return "InstructionsElectedOfficialsPageUSPres"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSSenateColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSSenate"; } }

      public static string InstructionsElectedOfficialsPageUSSenateColumnName { get { return "InstructionsElectedOfficialsPageUSSenate"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSHouseColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSHouse"; } }

      public static string InstructionsElectedOfficialsPageUSHouseColumnName { get { return "InstructionsElectedOfficialsPageUSHouse"; } }

      public static string IsTextInstructionsElectedOfficialsPageStateColumnName { get { return "IsTextInstructionsElectedOfficialsPageState"; } }

      public static string InstructionsElectedOfficialsPageStateColumnName { get { return "InstructionsElectedOfficialsPageState"; } }

      public static string IsTextInstructionsElectedOfficialsPageCountyColumnName { get { return "IsTextInstructionsElectedOfficialsPageCounty"; } }

      public static string InstructionsElectedOfficialsPageCountyColumnName { get { return "InstructionsElectedOfficialsPageCounty"; } }

      public static string IsTextInstructionsElectedOfficialsPageLocalColumnName { get { return "IsTextInstructionsElectedOfficialsPageLocal"; } }

      public static string InstructionsElectedOfficialsPageLocalColumnName { get { return "InstructionsElectedOfficialsPageLocal"; } }

      public static string IsTextInstructionsIssuePageColumnName { get { return "IsTextInstructionsIssuePage"; } }

      public static string InstructionsIssuePageColumnName { get { return "InstructionsIssuePage"; } }

      public static string IsTextInstructionsIssuePageIssueListAnswersColumnName { get { return "IsTextInstructionsIssuePageIssueListAnswers"; } }

      public static string InstructionsIssuePageIssueListAnswersColumnName { get { return "InstructionsIssuePageIssueListAnswers"; } }

      public static string IsTextInstructionsIssuePageIssueListNoAnswersColumnName { get { return "IsTextInstructionsIssuePageIssueListNoAnswers"; } }

      public static string InstructionsIssuePageIssueListNoAnswersColumnName { get { return "InstructionsIssuePageIssueListNoAnswers"; } }

      public static string IsTextInstructionsIssuePageIssueListReportColumnName { get { return "IsTextInstructionsIssuePageIssueListReport"; } }

      public static string InstructionsIssuePageIssueListReportColumnName { get { return "InstructionsIssuePageIssueListReport"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListAnswersColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListAnswers"; } }

      public static string InstructionsPoliticianIssuePageIssueListAnswersColumnName { get { return "InstructionsPoliticianIssuePageIssueListAnswers"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListNoAnswersColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"; } }

      public static string InstructionsPoliticianIssuePageIssueListNoAnswersColumnName { get { return "InstructionsPoliticianIssuePageIssueListNoAnswers"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListReportColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListReport"; } }

      public static string InstructionsPoliticianIssuePageIssueListReportColumnName { get { return "InstructionsPoliticianIssuePageIssueListReport"; } }

      public static string IsTextInstructionsPoliticianIssuePageColumnName { get { return "IsTextInstructionsPoliticianIssuePage"; } }

      public static string InstructionsPoliticianIssuePageColumnName { get { return "InstructionsPoliticianIssuePage"; } }

      public static string IsTextInstructionsIntroPageColumnName { get { return "IsTextInstructionsIntroPage"; } }

      public static string InstructionsIntroPageColumnName { get { return "InstructionsIntroPage"; } }

      public static string IsTextContentAboutUsPageColumnName { get { return "IsTextContentAboutUsPage"; } }

      public static string ContentAboutUsPageColumnName { get { return "ContentAboutUsPage"; } }

      public static string IsTextContentCandidatesPageColumnName { get { return "IsTextContentCandidatesPage"; } }

      public static string ContentCandidatesPageColumnName { get { return "ContentCandidatesPage"; } }

      public static string IsTextContentContactUsPageColumnName { get { return "IsTextContentContactUsPage"; } }

      public static string ContentContactUsPageColumnName { get { return "ContentContactUsPage"; } }

      public static string IsTextContentInternsPageColumnName { get { return "IsTextContentInternsPage"; } }

      public static string ContentInternsPageColumnName { get { return "ContentInternsPage"; } }

      public static string IsTextContentPartiesPageColumnName { get { return "IsTextContentPartiesPage"; } }

      public static string ContentPartiesPageColumnName { get { return "ContentPartiesPage"; } }

      public static string IsTextContentVotersPageColumnName { get { return "IsTextContentVotersPage"; } }

      public static string ContentVotersPageColumnName { get { return "ContentVotersPage"; } }

      public static string IsTextInstructionsArchivesPageColumnName { get { return "IsTextInstructionsArchivesPage"; } }

      public static string InstructionsArchivesPageColumnName { get { return "InstructionsArchivesPage"; } }

      public static string IsTextInstructionsElectionPageUSPresPrimaryColumnName { get { return "IsTextInstructionsElectionPageUSPresPrimary"; } }

      public static string InstructionsElectionPageUSPresPrimaryColumnName { get { return "InstructionsElectionPageUSPresPrimary"; } }

      public static string IsTextInstructionsElectionPageUSPresColumnName { get { return "IsTextInstructionsElectionPageUSPres"; } }

      public static string InstructionsElectionPageUSPresColumnName { get { return "InstructionsElectionPageUSPres"; } }

      public static string IsTextInstructionsElectionPageUSSenateColumnName { get { return "IsTextInstructionsElectionPageUSSenate"; } }

      public static string InstructionsElectionPageUSSenateColumnName { get { return "InstructionsElectionPageUSSenate"; } }

      public static string IsTextInstructionsElectionPageUSHouseColumnName { get { return "IsTextInstructionsElectionPageUSHouse"; } }

      public static string InstructionsElectionPageUSHouseColumnName { get { return "InstructionsElectionPageUSHouse"; } }

      public static string IsTextInstructionsElectionPageStateColumnName { get { return "IsTextInstructionsElectionPageState"; } }

      public static string InstructionsElectionPageStateColumnName { get { return "InstructionsElectionPageState"; } }

      public static string IsTextInstructionsElectionPageCountyColumnName { get { return "IsTextInstructionsElectionPageCounty"; } }

      public static string InstructionsElectionPageCountyColumnName { get { return "InstructionsElectionPageCounty"; } }

      public static string IsTextInstructionsElectionPageLocalColumnName { get { return "IsTextInstructionsElectionPageLocal"; } }

      public static string InstructionsElectionPageLocalColumnName { get { return "InstructionsElectionPageLocal"; } }

      public static string LastUpdatedColumnName { get { return "LastUpdated"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionNoneColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionNone"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionGeneralColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionGeneral"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionOffYearColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionOffYear"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionSpecialColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionSpecial"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionPrimaryColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionPrimary"; } }

      public static string MainContentDefaultPageSingleStateDomainContestsFederalStatewideColumnName { get { return "MainContentDefaultPageSingleStateDomainContestsFederalStatewide"; } }

      public static string IsTextInstructionsElectedOfficialsPageGovernorsColumnName { get { return "IsTextInstructionsElectedOfficialsPageGovernors"; } }

      public static string InstructionsElectedOfficialsPageGovernorsColumnName { get { return "InstructionsElectedOfficialsPageGovernors"; } }

      public static int DomainDesignCodeMaxLength { get { return 50; } }

      public static int DomainDataCodeMaxLength { get { return 2; } }

      public static int FirstFooterAllPagesMaxLength { get { return int.MaxValue; } }

      public static int SecondFooterAllPagesMaxLength { get { return int.MaxValue; } }

      public static int EmailUsLineAllPagesMaxLength { get { return int.MaxValue; } }

      public static int EmailUsAddressAllPagesMaxLength { get { return int.MaxValue; } }

      public static int TitleTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaDescriptionTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaKeywordsTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageAllStatesDomainBeforeSelectionMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageAllStatesDomainAfterSelectionMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageAllStatesDomainBeforeSelectionMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageAllStatesDomainAfterSelectionMaxLength { get { return int.MaxValue; } }

      public static int TitleTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaDescriptionTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaKeywordsTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int InstructionsUpcomingElectionBallotPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPreviousElectionBallotPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSPresMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSSenateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSHouseMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageStateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageCountyMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageLocalMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListNoAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListReportMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListNoAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListReportMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIntroPageMaxLength { get { return int.MaxValue; } }

      public static int ContentAboutUsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentCandidatesPageMaxLength { get { return int.MaxValue; } }

      public static int ContentContactUsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentInternsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentPartiesPageMaxLength { get { return int.MaxValue; } }

      public static int ContentVotersPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsArchivesPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSPresPrimaryMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSPresMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSSenateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSHouseMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageStateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageCountyMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageLocalMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionNoneMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionGeneralMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionOffYearMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionSpecialMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionPrimaryMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainContestsFederalStatewideMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageGovernorsMaxLength { get { return int.MaxValue; } }

      public static bool DomainDesignCodeExists(String domainDesignCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainDesignCodeByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDesignCode FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        return GetDomainDesignCodeByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetDomainDataCodeByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCode(String domainDesignCode, String defaultValue = null)
      {
        return GetDomainDataCodeByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsIncludedBannerAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedBannerAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedBannerAllPages(String domainDesignCode)
      {
        return GetIsIncludedBannerAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedBannerAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedBannerAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedBannerAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedBannerAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedBannerAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedBannerAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedDonateAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedDonateAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedDonateAllPages(String domainDesignCode)
      {
        return GetIsIncludedDonateAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedDonateAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedDonateAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedDonateAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedDonateAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedDonateAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedDonateAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedNavbarDefaultAllPages(String domainDesignCode)
      {
        return GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedNavbarDefaultAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedNavbarDefaultAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedNavbarDefaultAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludeSpecialButtonsByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludeSpecialButtonsByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludeSpecialButtons(String domainDesignCode)
      {
        return GetIsIncludeSpecialButtonsByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludeSpecialButtonsByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludeSpecialButtonsByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludeSpecialButtons(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludeSpecialButtonsByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludeSpecialButtonsByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludeSpecialButtons FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedFirstFooterAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedFirstFooterAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedFirstFooterAllPages(String domainDesignCode)
      {
        return GetIsIncludedFirstFooterAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedFirstFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedFirstFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedFirstFooterAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedFirstFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedFirstFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedFirstFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedSecondFooterAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedSecondFooterAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedSecondFooterAllPages(String domainDesignCode)
      {
        return GetIsIncludedSecondFooterAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedSecondFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedSecondFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedSecondFooterAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedSecondFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedSecondFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedSecondFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedEmailUsAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedEmailUsAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedEmailUsAllPages(String domainDesignCode)
      {
        return GetIsIncludedEmailUsAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedEmailUsAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedEmailUsAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedEmailUsAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedEmailUsAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedEmailUsAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedEmailUsAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedPoweredByAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedPoweredByAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedPoweredByAllPages(String domainDesignCode)
      {
        return GetIsIncludedPoweredByAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedPoweredByAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedPoweredByAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedPoweredByAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedPoweredByAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedPoweredByAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedPoweredByAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedTitleTagDefaultPageAllStatesDomain(String domainDesignCode)
      {
        return GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedTitleTagDefaultPageAllStatesDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedTitleTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedTitleTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomain(String domainDesignCode)
      {
        return GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedMetaDescriptionTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomain(String domainDesignCode)
      {
        return GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedMetaKeywordsTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedMainContentDefaultPageAllStatesDomain(String domainDesignCode)
      {
        return GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedMainContentDefaultPageAllStatesDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedMainContentDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedMainContentDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedInstructionsDefaultPageAllStatesDomain(String domainDesignCode)
      {
        return GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedInstructionsDefaultPageAllStatesDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedInstructionsDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedInstructionsDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedTitleTagDefaultPageSingleStateDomain(String domainDesignCode)
      {
        return GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedTitleTagDefaultPageSingleStateDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedTitleTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedTitleTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomain(String domainDesignCode)
      {
        return GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedMetaDescriptionTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomain(String domainDesignCode)
      {
        return GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedMetaKeywordsTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsIncludedInstructionsDefaultPageSingleStateDomain(String domainDesignCode)
      {
        return GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsIncludedInstructionsDefaultPageSingleStateDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsIncludedInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncludedInstructionsDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsTextFirstFooterAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextFirstFooterAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextFirstFooterAllPages(String domainDesignCode)
      {
        return GetIsTextFirstFooterAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextFirstFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextFirstFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextFirstFooterAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextFirstFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextFirstFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextFirstFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetFirstFooterAllPagesByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FirstFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstFooterAllPages(String domainDesignCode, String defaultValue = null)
      {
        return GetFirstFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextSecondFooterAllPagesByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextSecondFooterAllPagesByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextSecondFooterAllPages(String domainDesignCode)
      {
        return GetIsTextSecondFooterAllPagesByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextSecondFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextSecondFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextSecondFooterAllPages(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextSecondFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextSecondFooterAllPagesByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextSecondFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetSecondFooterAllPagesByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SecondFooterAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondFooterAllPages(String domainDesignCode, String defaultValue = null)
      {
        return GetSecondFooterAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetEmailUsLineAllPagesByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailUsLineAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailUsLineAllPages(String domainDesignCode, String defaultValue = null)
      {
        return GetEmailUsLineAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetEmailUsAddressAllPagesByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailUsAddressAllPages FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailUsAddressAllPages(String domainDesignCode, String defaultValue = null)
      {
        return GetEmailUsAddressAllPagesByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetTitleTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TitleTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitleTagDefaultPageAllStatesDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetTitleTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MetaDescriptionTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaDescriptionTagDefaultPageAllStatesDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetMetaDescriptionTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MetaKeywordsTagDefaultPageAllStatesDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaKeywordsTagDefaultPageAllStatesDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetMetaKeywordsTagDefaultPageAllStatesDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode)
      {
        return GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextMainContentDefaultPageAllStatesDomainBeforeSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageAllStatesDomainBeforeSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextMainContentDefaultPageAllStatesDomainAfterSelection(String domainDesignCode)
      {
        return GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextMainContentDefaultPageAllStatesDomainAfterSelection(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextMainContentDefaultPageAllStatesDomainAfterSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageAllStatesDomainAfterSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageAllStatesDomainAfterSelection(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode)
      {
        return GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsDefaultPageAllStatesDomainBeforeSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsDefaultPageAllStatesDomainBeforeSelection(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsDefaultPageAllStatesDomainBeforeSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelection(String domainDesignCode)
      {
        return GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelection(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsDefaultPageAllStatesDomainAfterSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsDefaultPageAllStatesDomainAfterSelection FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsDefaultPageAllStatesDomainAfterSelection(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsDefaultPageAllStatesDomainAfterSelectionByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetTitleTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TitleTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitleTagDefaultPageSingleStateDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetTitleTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MetaDescriptionTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaDescriptionTagDefaultPageSingleStateDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetMetaDescriptionTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MetaKeywordsTagDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaKeywordsTagDefaultPageSingleStateDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetMetaKeywordsTagDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsDefaultPageSingleStateDomain(String domainDesignCode)
      {
        return GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsDefaultPageSingleStateDomain(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsDefaultPageSingleStateDomainByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsDefaultPageSingleStateDomain FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsDefaultPageSingleStateDomain(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsDefaultPageSingleStateDomainByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsUpcomingElectionBallotPage(String domainDesignCode)
      {
        return GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsUpcomingElectionBallotPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsUpcomingElectionBallotPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsUpcomingElectionBallotPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsUpcomingElectionBallotPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsUpcomingElectionBallotPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsUpcomingElectionBallotPage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsUpcomingElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsPreviousElectionBallotPage(String domainDesignCode)
      {
        return GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsPreviousElectionBallotPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsPreviousElectionBallotPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsPreviousElectionBallotPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsPreviousElectionBallotPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsPreviousElectionBallotPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsPreviousElectionBallotPage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsPreviousElectionBallotPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedPage(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedPage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSPres(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSPres(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageUSPresByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageUSPres FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageUSPresByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageUSPres FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageUSPres(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageUSPresByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSSenate(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSSenate(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageUSSenate FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageUSSenate FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageUSSenate(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageUSHouse(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageUSHouse(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageUSHouse FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageUSHouse FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageUSHouse(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageState(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageState(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageStateByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageState FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageStateByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageState FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageState(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageStateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageCounty(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageCounty(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageCountyByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageCounty FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageCountyByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageCounty FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageCounty(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageCountyByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageLocal(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageLocal(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageLocalByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageLocal FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageLocalByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageLocal FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageLocal(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageLocalByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsIssuePageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsIssuePageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsIssuePage(String domainDesignCode)
      {
        return GetIsTextInstructionsIssuePageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsIssuePageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsIssuePageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsIssuePage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsIssuePageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsIssuePageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsIssuePage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsIssuePageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsIssuePage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsIssuePage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsIssuePageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListAnswers(String domainDesignCode)
      {
        return GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListAnswers(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsIssuePageIssueListAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsIssuePageIssueListAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsIssuePageIssueListAnswers(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListNoAnswers(String domainDesignCode)
      {
        return GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListNoAnswers(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsIssuePageIssueListNoAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsIssuePageIssueListNoAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsIssuePageIssueListNoAnswers(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsIssuePageIssueListReport(String domainDesignCode)
      {
        return GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsIssuePageIssueListReport(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsIssuePageIssueListReport FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsIssuePageIssueListReport FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsIssuePageIssueListReport(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListAnswers(String domainDesignCode)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListAnswers(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsPoliticianIssuePageIssueListAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsPoliticianIssuePageIssueListAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListAnswers(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsPoliticianIssuePageIssueListAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswers(String domainDesignCode)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswers(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsPoliticianIssuePageIssueListNoAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsPoliticianIssuePageIssueListNoAnswers FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListNoAnswers(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsPoliticianIssuePageIssueListNoAnswersByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageIssueListReport(String domainDesignCode)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageIssueListReport(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsPoliticianIssuePageIssueListReport FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsPoliticianIssuePageIssueListReport FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsPoliticianIssuePageIssueListReport(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsPoliticianIssuePageIssueListReportByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsPoliticianIssuePage(String domainDesignCode)
      {
        return GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsPoliticianIssuePage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsPoliticianIssuePageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsPoliticianIssuePage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsPoliticianIssuePageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsPoliticianIssuePage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsPoliticianIssuePage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsPoliticianIssuePageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsIntroPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsIntroPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsIntroPage(String domainDesignCode)
      {
        return GetIsTextInstructionsIntroPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsIntroPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsIntroPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsIntroPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsIntroPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsIntroPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsIntroPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsIntroPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsIntroPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsIntroPage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsIntroPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentAboutUsPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentAboutUsPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentAboutUsPage(String domainDesignCode)
      {
        return GetIsTextContentAboutUsPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentAboutUsPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentAboutUsPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentAboutUsPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentAboutUsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentAboutUsPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentAboutUsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentAboutUsPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentAboutUsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentAboutUsPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentAboutUsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentCandidatesPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentCandidatesPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentCandidatesPage(String domainDesignCode)
      {
        return GetIsTextContentCandidatesPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentCandidatesPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentCandidatesPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentCandidatesPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentCandidatesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentCandidatesPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentCandidatesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentCandidatesPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentCandidatesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentCandidatesPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentCandidatesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentContactUsPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentContactUsPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentContactUsPage(String domainDesignCode)
      {
        return GetIsTextContentContactUsPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentContactUsPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentContactUsPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentContactUsPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentContactUsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentContactUsPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentContactUsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentContactUsPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentContactUsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentContactUsPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentContactUsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentInternsPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentInternsPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentInternsPage(String domainDesignCode)
      {
        return GetIsTextContentInternsPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentInternsPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentInternsPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentInternsPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentInternsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentInternsPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentInternsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentInternsPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentInternsPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentInternsPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentInternsPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentPartiesPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentPartiesPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentPartiesPage(String domainDesignCode)
      {
        return GetIsTextContentPartiesPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentPartiesPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentPartiesPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentPartiesPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentPartiesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentPartiesPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentPartiesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentPartiesPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentPartiesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentPartiesPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentPartiesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextContentVotersPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextContentVotersPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextContentVotersPage(String domainDesignCode)
      {
        return GetIsTextContentVotersPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextContentVotersPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextContentVotersPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextContentVotersPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextContentVotersPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextContentVotersPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextContentVotersPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetContentVotersPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContentVotersPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContentVotersPage(String domainDesignCode, String defaultValue = null)
      {
        return GetContentVotersPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsArchivesPageByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsArchivesPageByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsArchivesPage(String domainDesignCode)
      {
        return GetIsTextInstructionsArchivesPageByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsArchivesPageByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsArchivesPageByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsArchivesPage(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsArchivesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsArchivesPageByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsArchivesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsArchivesPageByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsArchivesPage FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsArchivesPage(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsArchivesPageByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSPresPrimary(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageUSPresPrimary(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageUSPresPrimaryByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageUSPresPrimary FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageUSPresPrimaryByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageUSPresPrimary FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageUSPresPrimary(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageUSPresPrimaryByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSPres(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageUSPres(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageUSPresByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageUSPres FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageUSPresByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageUSPres FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageUSPres(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageUSPresByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSSenate(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageUSSenate(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageUSSenateByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageUSSenate FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageUSSenateByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageUSSenate FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageUSSenate(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageUSSenateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageUSHouse(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageUSHouse(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageUSHouseByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageUSHouse FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageUSHouseByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageUSHouse FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageUSHouse(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageUSHouseByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageStateByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageStateByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageState(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageStateByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageStateByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageStateByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageState(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageStateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageStateByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageState FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageStateByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageState FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageState(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageStateByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageCountyByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageCountyByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageCounty(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageCountyByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageCountyByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageCountyByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageCounty(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageCountyByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageCountyByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageCounty FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageCountyByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageCounty FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageCounty(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageCountyByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectionPageLocalByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectionPageLocalByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectionPageLocal(String domainDesignCode)
      {
        return GetIsTextInstructionsElectionPageLocalByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectionPageLocalByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectionPageLocalByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectionPageLocal(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectionPageLocalByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectionPageLocalByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectionPageLocal FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectionPageLocalByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectionPageLocal FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectionPageLocal(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectionPageLocalByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static DateTime? GetLastUpdatedByDomainDesignCode(String domainDesignCode)
      {
        return _GetLastUpdatedByDomainDesignCode(domainDesignCode, null);
      }

      public static DateTime? GetLastUpdated(String domainDesignCode)
      {
        return GetLastUpdatedByDomainDesignCode(domainDesignCode);
      }

      public static DateTime GetLastUpdatedByDomainDesignCode(String domainDesignCode, DateTime defaultValue)
      {
        return _GetLastUpdatedByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static DateTime GetLastUpdated(String domainDesignCode, DateTime defaultValue)
      {
        return GetLastUpdatedByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static DateTime? _GetLastUpdatedByDomainDesignCode(String domainDesignCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdated FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionNoneByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainElectionNone FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionNone(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainElectionNoneByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionGeneralByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainElectionGeneral FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionGeneral(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainElectionGeneralByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionOffYearByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainElectionOffYear FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionOffYear(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainElectionOffYearByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionSpecialByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainElectionSpecial FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionSpecial(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainElectionSpecialByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionPrimaryByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainElectionPrimary FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainElectionPrimary(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainElectionPrimaryByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static String GetMainContentDefaultPageSingleStateDomainContestsFederalStatewideByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MainContentDefaultPageSingleStateDomainContestsFederalStatewide FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMainContentDefaultPageSingleStateDomainContestsFederalStatewide(String domainDesignCode, String defaultValue = null)
      {
        return GetMainContentDefaultPageSingleStateDomainContestsFederalStatewideByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(String domainDesignCode)
      {
        return _GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(domainDesignCode, null);
      }

      public static Boolean? GetIsTextInstructionsElectedOfficialsPageGovernors(String domainDesignCode)
      {
        return GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(domainDesignCode);
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(String domainDesignCode, Boolean defaultValue)
      {
        return _GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(domainDesignCode, defaultValue).Value;
      }

      public static Boolean GetIsTextInstructionsElectedOfficialsPageGovernors(String domainDesignCode, Boolean defaultValue)
      {
        return GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(domainDesignCode, defaultValue);
      }

      private static Boolean? _GetIsTextInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(String domainDesignCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTextInstructionsElectedOfficialsPageGovernors FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(String domainDesignCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT InstructionsElectedOfficialsPageGovernors FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInstructionsElectedOfficialsPageGovernors(String domainDesignCode, String defaultValue = null)
      {
        return GetInstructionsElectedOfficialsPageGovernorsByDomainDesignCode(domainDesignCode, defaultValue);
      }

      public static object GetColumnByDomainDesignCode(Column _column, String domainDesignCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM DomainDesigns WHERE DomainDesignCode=@DomainDesignCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDesignCode", domainDesignCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String domainDesignCode)
      {
        return GetColumnByDomainDesignCode(_column, domainDesignCode);
      }

      public static string GetSelectCommandText(DomainDesignsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DomainDesignsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DomainDesigns()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.DomainDesigns

    #region vote.Domains

    public partial class DomainsRow : DataRow
    {
      internal DomainsRow(DataRowBuilder rb) : base(rb) {}

      public String DomainServerName
      {
        get { return this["DomainServerName"] as String; }
        set { if (value == null) this["DomainServerName"] = DBNull.Value; else this["DomainServerName"] = value; }
      }

      public String TestServerName
      {
        get { return this["TestServerName"] as String; }
        set { if (value == null) this["TestServerName"] = DBNull.Value; else this["TestServerName"] = value; }
      }

      public Boolean IsCanonical
      {
        get { return (Boolean) this["IsCanonical"]; }
        set { this["IsCanonical"] = value; }
      }

      public String DomainDesignCode
      {
        get { return this["DomainDesignCode"] as String; }
        set { if (value == null) this["DomainDesignCode"] = DBNull.Value; else this["DomainDesignCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String DomainDataCode
      {
        get { return this["DomainDataCode"] as String; }
        set { if (value == null) this["DomainDataCode"] = DBNull.Value; else this["DomainDataCode"] = value; }
      }

      public String DomainOrganizationCode
      {
        get { return this["DomainOrganizationCode"] as String; }
        set { if (value == null) this["DomainOrganizationCode"] = DBNull.Value; else this["DomainOrganizationCode"] = value; }
      }

      public String GoogleSiteVerificationCode
      {
        get { return this["GoogleSiteVerificationCode"] as String; }
        set { if (value == null) this["GoogleSiteVerificationCode"] = DBNull.Value; else this["GoogleSiteVerificationCode"] = value; }
      }

      public String YahooSiteVerificationCode
      {
        get { return this["YahooSiteVerificationCode"] as String; }
        set { if (value == null) this["YahooSiteVerificationCode"] = DBNull.Value; else this["YahooSiteVerificationCode"] = value; }
      }

      public String BingSiteVerificationCode
      {
        get { return this["BingSiteVerificationCode"] as String; }
        set { if (value == null) this["BingSiteVerificationCode"] = DBNull.Value; else this["BingSiteVerificationCode"] = value; }
      }
    }

    [Serializable]
    public partial class DomainsTable : TypedTableBase<DomainsRow>
    {
      public DomainsRow this[int index] { get { return (DomainsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DomainsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DomainsTable(); }

      new public DomainsRow NewRow() { return (DomainsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DomainsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DomainsRow); }

      public void RemoveRow(DomainsRow row) { this.Rows.Remove(row); }

      public DomainsRow NewRow(String domainServerName, String testServerName, Boolean isCanonical, String domainDesignCode, String stateCode, String domainDataCode, String domainOrganizationCode, String googleSiteVerificationCode, String yahooSiteVerificationCode, String bingSiteVerificationCode)
      {
        DomainsRow row = NewRow();
        row.DomainServerName = domainServerName;
        row.TestServerName = testServerName;
        row.IsCanonical = isCanonical;
        row.DomainDesignCode = domainDesignCode;
        row.StateCode = stateCode;
        row.DomainDataCode = domainDataCode;
        row.DomainOrganizationCode = domainOrganizationCode;
        row.GoogleSiteVerificationCode = googleSiteVerificationCode;
        row.YahooSiteVerificationCode = yahooSiteVerificationCode;
        row.BingSiteVerificationCode = bingSiteVerificationCode;
        return row;
      }

      public void AddRow(String domainServerName, String testServerName, Boolean isCanonical, String domainDesignCode, String stateCode, String domainDataCode, String domainOrganizationCode, String googleSiteVerificationCode, String yahooSiteVerificationCode, String bingSiteVerificationCode)
      {
        DomainsRow row = NewRow(domainServerName, testServerName, isCanonical, domainDesignCode, stateCode, domainDataCode, domainOrganizationCode, googleSiteVerificationCode, yahooSiteVerificationCode, bingSiteVerificationCode);
        AddRow(row);
      }

      public DataColumn DomainServerNameColumn { get { return this.Columns["DomainServerName"]; } }

      public DataColumn TestServerNameColumn { get { return this.Columns["TestServerName"]; } }

      public DataColumn IsCanonicalColumn { get { return this.Columns["IsCanonical"]; } }

      public DataColumn DomainDesignCodeColumn { get { return this.Columns["DomainDesignCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn DomainDataCodeColumn { get { return this.Columns["DomainDataCode"]; } }

      public DataColumn DomainOrganizationCodeColumn { get { return this.Columns["DomainOrganizationCode"]; } }

      public DataColumn GoogleSiteVerificationCodeColumn { get { return this.Columns["GoogleSiteVerificationCode"]; } }

      public DataColumn YahooSiteVerificationCodeColumn { get { return this.Columns["YahooSiteVerificationCode"]; } }

      public DataColumn BingSiteVerificationCodeColumn { get { return this.Columns["BingSiteVerificationCode"]; } }

      public enum ColumnSet { All, UrlManager }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TestServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCanonical", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDesignCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GoogleSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YahooSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BingSiteVerificationCode", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitUrlManagerColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TestServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCanonical", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainDesignCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DomainsTable() : this(ColumnSet.All) { }

      public DomainsTable(ColumnSet columnSet)
      {
        this.TableName = "Domains";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.UrlManager:
            InitUrlManagerColumns();
            break;
        }
      }

      protected DomainsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Domains
    {
      public const string TableName = "Domains";

      public enum Column { DomainServerName, TestServerName, IsCanonical, DomainDesignCode, StateCode, DomainDataCode, DomainOrganizationCode, GoogleSiteVerificationCode, YahooSiteVerificationCode, BingSiteVerificationCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DomainServerName, "DomainServerName" },
        { Column.TestServerName, "TestServerName" },
        { Column.IsCanonical, "IsCanonical" },
        { Column.DomainDesignCode, "DomainDesignCode" },
        { Column.StateCode, "StateCode" },
        { Column.DomainDataCode, "DomainDataCode" },
        { Column.DomainOrganizationCode, "DomainOrganizationCode" },
        { Column.GoogleSiteVerificationCode, "GoogleSiteVerificationCode" },
        { Column.YahooSiteVerificationCode, "YahooSiteVerificationCode" },
        { Column.BingSiteVerificationCode, "BingSiteVerificationCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,DomainOrganizationCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains";
        }
      }

      public static DomainsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,DomainOrganizationCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static DomainsTable FillTable(DbCommand command)
      {
        return FillTable(command, DomainsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DomainsTable FillTable(DbCommand command, DomainsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DomainsTable table = new DomainsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DomainServerNameColumnName { get { return "DomainServerName"; } }

      public static string TestServerNameColumnName { get { return "TestServerName"; } }

      public static string IsCanonicalColumnName { get { return "IsCanonical"; } }

      public static string DomainDesignCodeColumnName { get { return "DomainDesignCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string DomainDataCodeColumnName { get { return "DomainDataCode"; } }

      public static string DomainOrganizationCodeColumnName { get { return "DomainOrganizationCode"; } }

      public static string GoogleSiteVerificationCodeColumnName { get { return "GoogleSiteVerificationCode"; } }

      public static string YahooSiteVerificationCodeColumnName { get { return "YahooSiteVerificationCode"; } }

      public static string BingSiteVerificationCodeColumnName { get { return "BingSiteVerificationCode"; } }

      public static int DomainServerNameMaxLength { get { return 200; } }

      public static int TestServerNameMaxLength { get { return 200; } }

      public static int DomainDesignCodeMaxLength { get { return 10; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int DomainDataCodeMaxLength { get { return 2; } }

      public static int DomainOrganizationCodeMaxLength { get { return 50; } }

      public static int GoogleSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static int YahooSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static int BingSiteVerificationCodeMaxLength { get { return int.MaxValue; } }

      public static bool DomainServerNameExists(String domainServerName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainServerNameByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainServerName FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTestServerNameByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TestServerName FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsCanonicalByDomainServerName(String domainServerName)
      {
        return _GetIsCanonicalByDomainServerName(domainServerName, null);
      }

      public static Boolean GetIsCanonicalByDomainServerName(String domainServerName, Boolean defaultValue)
      {
        return _GetIsCanonicalByDomainServerName(domainServerName, defaultValue).Value;
      }

      private static Boolean? _GetIsCanonicalByDomainServerName(String domainServerName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCanonical FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetDomainDesignCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDesignCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainOrganizationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainOrganizationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoogleSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoogleSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYahooSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YahooSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBingSiteVerificationCodeByDomainServerName(String domainServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BingSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByDomainServerName(Column _column, String domainServerName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Domains WHERE DomainServerName=@DomainServerName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DomainsTable GetDataByDomainServerName(String domainServerName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,DomainOrganizationCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains WHERE DomainServerName=@DomainServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static bool TestServerNameExists(String testServerName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainServerNameByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainServerName FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTestServerNameByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TestServerName FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsCanonicalByTestServerName(String testServerName)
      {
        return _GetIsCanonicalByTestServerName(testServerName, null);
      }

      public static Boolean GetIsCanonicalByTestServerName(String testServerName, Boolean defaultValue)
      {
        return _GetIsCanonicalByTestServerName(testServerName, defaultValue).Value;
      }

      private static Boolean? _GetIsCanonicalByTestServerName(String testServerName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCanonical FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetDomainDesignCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDesignCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainOrganizationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainOrganizationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGoogleSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GoogleSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYahooSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YahooSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBingSiteVerificationCodeByTestServerName(String testServerName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BingSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByTestServerName(Column _column, String testServerName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Domains WHERE TestServerName=@TestServerName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DomainsTable GetDataByTestServerName(String testServerName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainDataCode,DomainOrganizationCode,GoogleSiteVerificationCode,YahooSiteVerificationCode,BingSiteVerificationCode FROM Domains WHERE TestServerName=@TestServerName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "TestServerName", testServerName);
        return FillTable(cmd, DomainsTable.ColumnSet.All);
      }

      public static string SelectUrlManagerCommandText
      {
        get
        {
          return "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainOrganizationCode FROM Domains";
        }
      }

      public static DomainsTable GetAllUrlManagerData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainServerName,TestServerName,IsCanonical,DomainDesignCode,StateCode,DomainOrganizationCode FROM Domains";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DomainsTable.ColumnSet.UrlManager);
      }

      public static string GetSelectCommandText(DomainsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DomainsTable.ColumnSet.All:
            return SelectAllCommandText;

          case DomainsTable.ColumnSet.UrlManager:
            return SelectUrlManagerCommandText;

          default:
            return null;
        }
      }

      static Domains()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Domains

    #region vote.DonationNags

    public partial class DonationNagsRow : DataRow
    {
      internal DonationNagsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 MessageNumber
      {
        get { return (Int32) this["MessageNumber"]; }
        set { this["MessageNumber"] = value; }
      }

      public String MessageHeading
      {
        get { return this["MessageHeading"] as String; }
        set { if (value == null) this["MessageHeading"] = DBNull.Value; else this["MessageHeading"] = value; }
      }

      public String MessageText
      {
        get { return this["MessageText"] as String; }
        set { if (value == null) this["MessageText"] = DBNull.Value; else this["MessageText"] = value; }
      }

      public Int32? NextMessageNumber
      {
        get { if (this.IsNull("NextMessageNumber")) return null; else return (Int32) this["NextMessageNumber"]; }
        set { if (value.HasValue) this["NextMessageNumber"] = value.Value; else this["NextMessageNumber"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class DonationNagsTable : TypedTableBase<DonationNagsRow>
    {
      public DonationNagsRow this[int index] { get { return (DonationNagsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DonationNagsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DonationNagsTable(); }

      new public DonationNagsRow NewRow() { return (DonationNagsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DonationNagsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DonationNagsRow); }

      public void RemoveRow(DonationNagsRow row) { this.Rows.Remove(row); }

      public DonationNagsRow NewRow(Int32 messageNumber, String messageHeading, String messageText, Int32? nextMessageNumber)
      {
        DonationNagsRow row = NewRow();
        row.MessageNumber = messageNumber;
        row.MessageHeading = messageHeading;
        row.MessageText = messageText;
        row.NextMessageNumber = nextMessageNumber;
        return row;
      }

      public void AddRow(Int32 messageNumber, String messageHeading, String messageText, Int32? nextMessageNumber)
      {
        DonationNagsRow row = NewRow(messageNumber, messageHeading, messageText, nextMessageNumber);
        AddRow(row);
      }

      public DataColumn MessageNumberColumn { get { return this.Columns["MessageNumber"]; } }

      public DataColumn MessageHeadingColumn { get { return this.Columns["MessageHeading"]; } }

      public DataColumn MessageTextColumn { get { return this.Columns["MessageText"]; } }

      public DataColumn NextMessageNumberColumn { get { return this.Columns["NextMessageNumber"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("MessageNumber", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MessageHeading", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("MessageText", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("NextMessageNumber", typeof(Int32));
        base.Columns.Add(_column);
      }

      public DonationNagsTable() : this(ColumnSet.All) { }

      public DonationNagsTable(ColumnSet columnSet)
      {
        this.TableName = "DonationNags";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DonationNagsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class DonationNags
    {
      public const string TableName = "DonationNags";

      public enum Column { MessageNumber, MessageHeading, MessageText, NextMessageNumber }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.MessageNumber, "MessageNumber" },
        { Column.MessageHeading, "MessageHeading" },
        { Column.MessageText, "MessageText" },
        { Column.NextMessageNumber, "NextMessageNumber" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM DonationNags";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT MessageNumber,MessageHeading,MessageText,NextMessageNumber FROM DonationNags";
        }
      }

      public static DonationNagsTable FillTable(DbCommand command)
      {
        return FillTable(command, DonationNagsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DonationNagsTable FillTable(DbCommand command, DonationNagsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DonationNagsTable table = new DonationNagsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string MessageNumberColumnName { get { return "MessageNumber"; } }

      public static string MessageHeadingColumnName { get { return "MessageHeading"; } }

      public static string MessageTextColumnName { get { return "MessageText"; } }

      public static string NextMessageNumberColumnName { get { return "NextMessageNumber"; } }

      public static int MessageHeadingMaxLength { get { return int.MaxValue; } }

      public static int MessageTextMaxLength { get { return int.MaxValue; } }

      public static string GetSelectCommandText(DonationNagsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DonationNagsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static DonationNags()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.DonationNags

    #region vote.Donations

    public partial class DonationsRow : DataRow
    {
      internal DonationsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime Date
      {
        get { return (DateTime) this["Date"]; }
        set { this["Date"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String FullName
      {
        get { return this["FullName"] as String; }
        set { if (value == null) this["FullName"] = DBNull.Value; else this["FullName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public Decimal Amount
      {
        get { return (Decimal) this["Amount"]; }
        set { this["Amount"] = value; }
      }
    }

    [Serializable]
    public partial class DonationsTable : TypedTableBase<DonationsRow>
    {
      public DonationsRow this[int index] { get { return (DonationsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(DonationsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new DonationsTable(); }

      new public DonationsRow NewRow() { return (DonationsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new DonationsRow(rb); }

      protected override Type GetRowType()
      { return typeof(DonationsRow); }

      public void RemoveRow(DonationsRow row) { this.Rows.Remove(row); }

      public DonationsRow NewRow(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount)
      {
        DonationsRow row = NewRow();
        row.Id = id;
        row.Email = email;
        row.Date = date;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.FullName = fullName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Phone = phone;
        row.Amount = amount;
        return row;
      }

      public void AddRow(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount)
      {
        DonationsRow row = NewRow(id, email, date, firstName, lastName, fullName, address, city, stateCode, zip5, zip4, phone, amount);
        AddRow(row);
      }

      public DonationsRow NewRow(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount)
      {
        DonationsRow row = NewRow();
        row.Email = email;
        row.Date = date;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.FullName = fullName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Phone = phone;
        row.Amount = amount;
        return row;
      }

      public void AddRow(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount)
      {
        DonationsRow row = NewRow(email, date, firstName, lastName, fullName, address, city, stateCode, zip5, zip4, phone, amount);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn DateColumn { get { return this.Columns["Date"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn FullNameColumn { get { return this.Columns["FullName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AmountColumn { get { return this.Columns["Amount"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Date", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FullName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Amount", typeof(Decimal));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public DonationsTable() : this(ColumnSet.All) { }

      public DonationsTable(ColumnSet columnSet)
      {
        this.TableName = "Donations";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected DonationsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Donations
    {
      public const string TableName = "Donations";

      public enum Column { Id, Email, Date, FirstName, LastName, FullName, Address, City, StateCode, Zip5, Zip4, Phone, Amount }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Email, "Email" },
        { Column.Date, "Date" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.FullName, "FullName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.Phone, "Phone" },
        { Column.Amount, "Amount" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Donations (Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount) VALUES (@Id,@Email,@Date,@FirstName,@LastName,@FullName,@Address,@City,@StateCode,@Zip5,@Zip4,@Phone,@Amount)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "FullName", fullName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Amount", amount);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String email, DateTime date, String firstName, String lastName, String fullName, String address, String city, String stateCode, String zip5, String zip4, String phone, Decimal amount, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Donations (Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount) VALUES (@Email,@Date,@FirstName,@LastName,@FullName,@Address,@City,@StateCode,@Zip5,@Zip4,@Phone,@Amount)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "FullName", fullName);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "City", city);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "Amount", amount);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount FROM Donations";
        }
      }

      public static DonationsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount FROM Donations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static DonationsTable FillTable(DbCommand command)
      {
        return FillTable(command, DonationsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static DonationsTable FillTable(DbCommand command, DonationsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          DonationsTable table = new DonationsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string DateColumnName { get { return "Date"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string FullNameColumnName { get { return "FullName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AmountColumnName { get { return "Amount"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int FullNameMaxLength { get { return 100; } }

      public static int AddressMaxLength { get { return 100; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int PhoneMaxLength { get { return 30; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM Donations WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Donations WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool EmailDateExists(String email, DateTime date)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Donations WHERE Email=@Email AND Date=@Date";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByEmailDate(Column _column, String email, DateTime date)
      {
        object result;
        string cmdText = "SELECT {0} FROM Donations WHERE Email=@Email AND Date=@Date";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static DonationsTable GetDataByEmailDate(String email, DateTime date, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Email,Date,FirstName,LastName,FullName,Address,City,StateCode,Zip5,Zip4,Phone,Amount FROM Donations WHERE Email=@Email AND Date=@Date";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        return FillTable(cmd, DonationsTable.ColumnSet.All);
      }

      public static int DeleteByEmailDate(String email, DateTime date, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Donations WHERE Email=@Email AND Date=@Date";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "Date", date);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(DonationsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case DonationsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Donations()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Donations

    #region vote.Elections

    public partial class ElectionsRow : DataRow
    {
      internal ElectionsRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public DateTime ElectionDate
      {
        get { return (DateTime) this["ElectionDate"]; }
        set { this["ElectionDate"] = value; }
      }

      public String ElectionYYYYMMDD
      {
        get { return this["ElectionYYYYMMDD"] as String; }
        set { if (value == null) this["ElectionYYYYMMDD"] = DBNull.Value; else this["ElectionYYYYMMDD"] = value; }
      }

      public String ElectionType
      {
        get { return this["ElectionType"] as String; }
        set { if (value == null) this["ElectionType"] = DBNull.Value; else this["ElectionType"] = value; }
      }

      public String NationalPartyCode
      {
        get { return this["NationalPartyCode"] as String; }
        set { if (value == null) this["NationalPartyCode"] = DBNull.Value; else this["NationalPartyCode"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }

      public String ElectionStatus
      {
        get { return this["ElectionStatus"] as String; }
        set { if (value == null) this["ElectionStatus"] = DBNull.Value; else this["ElectionStatus"] = value; }
      }

      public String ElectionDesc
      {
        get { return this["ElectionDesc"] as String; }
        set { if (value == null) this["ElectionDesc"] = DBNull.Value; else this["ElectionDesc"] = value; }
      }

      public String ElectionAdditionalInfo
      {
        get { return this["ElectionAdditionalInfo"] as String; }
        set { if (value == null) this["ElectionAdditionalInfo"] = DBNull.Value; else this["ElectionAdditionalInfo"] = value; }
      }

      public String ElectionResultsSource
      {
        get { return this["ElectionResultsSource"] as String; }
        set { if (value == null) this["ElectionResultsSource"] = DBNull.Value; else this["ElectionResultsSource"] = value; }
      }

      public DateTime ElectionResultsDate
      {
        get { return (DateTime) this["ElectionResultsDate"]; }
        set { this["ElectionResultsDate"] = value; }
      }

      public String BallotInstructions
      {
        get { return this["BallotInstructions"] as String; }
        set { if (value == null) this["BallotInstructions"] = DBNull.Value; else this["BallotInstructions"] = value; }
      }

      public Boolean IsViewable
      {
        get { return (Boolean) this["IsViewable"]; }
        set { this["IsViewable"] = value; }
      }

      public Int32 ContestsCovered
      {
        get { return (Int32) this["ContestsCovered"]; }
        set { this["ContestsCovered"] = value; }
      }

      public DateTime EmailsDateElectionRoster
      {
        get { return (DateTime) this["EmailsDateElectionRoster"]; }
        set { this["EmailsDateElectionRoster"] = value; }
      }

      public Int32 EmailsSentElectionRoster
      {
        get { return (Int32) this["EmailsSentElectionRoster"]; }
        set { this["EmailsSentElectionRoster"] = value; }
      }

      public DateTime EmailsDateElectionCompletion
      {
        get { return (DateTime) this["EmailsDateElectionCompletion"]; }
        set { this["EmailsDateElectionCompletion"] = value; }
      }

      public Int32 EmailsSentElectionCompletion
      {
        get { return (Int32) this["EmailsSentElectionCompletion"]; }
        set { this["EmailsSentElectionCompletion"] = value; }
      }

      public DateTime EmailsDateCandidatesLogin
      {
        get { return (DateTime) this["EmailsDateCandidatesLogin"]; }
        set { this["EmailsDateCandidatesLogin"] = value; }
      }

      public Int32 EmailsSentCandidatesLogin
      {
        get { return (Int32) this["EmailsSentCandidatesLogin"]; }
        set { this["EmailsSentCandidatesLogin"] = value; }
      }

      public DateTime EmailsDatePartiesLogin
      {
        get { return (DateTime) this["EmailsDatePartiesLogin"]; }
        set { this["EmailsDatePartiesLogin"] = value; }
      }

      public Int32 EmailsSentPartiesLogin
      {
        get { return (Int32) this["EmailsSentPartiesLogin"]; }
        set { this["EmailsSentPartiesLogin"] = value; }
      }

      public String ElectionKeyCanonical
      {
        get { return this["ElectionKeyCanonical"] as String; }
        set { if (value == null) this["ElectionKeyCanonical"] = DBNull.Value; else this["ElectionKeyCanonical"] = value; }
      }

      public Int32 ElectionOrder
      {
        get { return (Int32) this["ElectionOrder"]; }
        set { this["ElectionOrder"] = value; }
      }

      public Boolean IsWinnersIdentified
      {
        get { return (Boolean) this["IsWinnersIdentified"]; }
        set { this["IsWinnersIdentified"] = value; }
      }

      public Boolean IsBallotMeasuresResultsRecorded
      {
        get { return (Boolean) this["IsBallotMeasuresResultsRecorded"]; }
        set { this["IsBallotMeasuresResultsRecorded"] = value; }
      }

      public DateTime RegistrationDeadline
      {
        get { return (DateTime) this["RegistrationDeadline"]; }
        set { this["RegistrationDeadline"] = value; }
      }

      public DateTime EarlyVotingBegin
      {
        get { return (DateTime) this["EarlyVotingBegin"]; }
        set { this["EarlyVotingBegin"] = value; }
      }

      public DateTime EarlyVotingEnd
      {
        get { return (DateTime) this["EarlyVotingEnd"]; }
        set { this["EarlyVotingEnd"] = value; }
      }

      public DateTime MailBallotBegin
      {
        get { return (DateTime) this["MailBallotBegin"]; }
        set { this["MailBallotBegin"] = value; }
      }

      public DateTime MailBallotEnd
      {
        get { return (DateTime) this["MailBallotEnd"]; }
        set { this["MailBallotEnd"] = value; }
      }

      public DateTime MailBallotDeadline
      {
        get { return (DateTime) this["MailBallotDeadline"]; }
        set { this["MailBallotDeadline"] = value; }
      }

      public DateTime AbsenteeBallotBegin
      {
        get { return (DateTime) this["AbsenteeBallotBegin"]; }
        set { this["AbsenteeBallotBegin"] = value; }
      }

      public DateTime AbsenteeBallotEnd
      {
        get { return (DateTime) this["AbsenteeBallotEnd"]; }
        set { this["AbsenteeBallotEnd"] = value; }
      }

      public DateTime AbsenteeBallotDeadline
      {
        get { return (DateTime) this["AbsenteeBallotDeadline"]; }
        set { this["AbsenteeBallotDeadline"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsTable : TypedTableBase<ElectionsRow>
    {
      public ElectionsRow this[int index] { get { return (ElectionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsTable(); }

      new public ElectionsRow NewRow() { return (ElectionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsRow); }

      public void RemoveRow(ElectionsRow row) { this.Rows.Remove(row); }

      public ElectionsRow NewRow(String electionKey, String stateCode, String countyCode, String localCode, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, Int32 contestsCovered, DateTime emailsDateElectionRoster, Int32 emailsSentElectionRoster, DateTime emailsDateElectionCompletion, Int32 emailsSentElectionCompletion, DateTime emailsDateCandidatesLogin, Int32 emailsSentCandidatesLogin, DateTime emailsDatePartiesLogin, Int32 emailsSentPartiesLogin, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline)
      {
        ElectionsRow row = NewRow();
        row.ElectionKey = electionKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.ElectionDate = electionDate;
        row.ElectionYYYYMMDD = electionYYYYMMDD;
        row.ElectionType = electionType;
        row.NationalPartyCode = nationalPartyCode;
        row.PartyCode = partyCode;
        row.ElectionStatus = electionStatus;
        row.ElectionDesc = electionDesc;
        row.ElectionAdditionalInfo = electionAdditionalInfo;
        row.ElectionResultsSource = electionResultsSource;
        row.ElectionResultsDate = electionResultsDate;
        row.BallotInstructions = ballotInstructions;
        row.IsViewable = isViewable;
        row.ContestsCovered = contestsCovered;
        row.EmailsDateElectionRoster = emailsDateElectionRoster;
        row.EmailsSentElectionRoster = emailsSentElectionRoster;
        row.EmailsDateElectionCompletion = emailsDateElectionCompletion;
        row.EmailsSentElectionCompletion = emailsSentElectionCompletion;
        row.EmailsDateCandidatesLogin = emailsDateCandidatesLogin;
        row.EmailsSentCandidatesLogin = emailsSentCandidatesLogin;
        row.EmailsDatePartiesLogin = emailsDatePartiesLogin;
        row.EmailsSentPartiesLogin = emailsSentPartiesLogin;
        row.ElectionKeyCanonical = electionKeyCanonical;
        row.ElectionOrder = electionOrder;
        row.IsWinnersIdentified = isWinnersIdentified;
        row.IsBallotMeasuresResultsRecorded = isBallotMeasuresResultsRecorded;
        row.RegistrationDeadline = registrationDeadline;
        row.EarlyVotingBegin = earlyVotingBegin;
        row.EarlyVotingEnd = earlyVotingEnd;
        row.MailBallotBegin = mailBallotBegin;
        row.MailBallotEnd = mailBallotEnd;
        row.MailBallotDeadline = mailBallotDeadline;
        row.AbsenteeBallotBegin = absenteeBallotBegin;
        row.AbsenteeBallotEnd = absenteeBallotEnd;
        row.AbsenteeBallotDeadline = absenteeBallotDeadline;
        return row;
      }

      public void AddRow(String electionKey, String stateCode, String countyCode, String localCode, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, Int32 contestsCovered, DateTime emailsDateElectionRoster, Int32 emailsSentElectionRoster, DateTime emailsDateElectionCompletion, Int32 emailsSentElectionCompletion, DateTime emailsDateCandidatesLogin, Int32 emailsSentCandidatesLogin, DateTime emailsDatePartiesLogin, Int32 emailsSentPartiesLogin, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline)
      {
        ElectionsRow row = NewRow(electionKey, stateCode, countyCode, localCode, electionDate, electionYYYYMMDD, electionType, nationalPartyCode, partyCode, electionStatus, electionDesc, electionAdditionalInfo, electionResultsSource, electionResultsDate, ballotInstructions, isViewable, contestsCovered, emailsDateElectionRoster, emailsSentElectionRoster, emailsDateElectionCompletion, emailsSentElectionCompletion, emailsDateCandidatesLogin, emailsSentCandidatesLogin, emailsDatePartiesLogin, emailsSentPartiesLogin, electionKeyCanonical, electionOrder, isWinnersIdentified, isBallotMeasuresResultsRecorded, registrationDeadline, earlyVotingBegin, earlyVotingEnd, mailBallotBegin, mailBallotEnd, mailBallotDeadline, absenteeBallotBegin, absenteeBallotEnd, absenteeBallotDeadline);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn ElectionDateColumn { get { return this.Columns["ElectionDate"]; } }

      public DataColumn ElectionYYYYMMDDColumn { get { return this.Columns["ElectionYYYYMMDD"]; } }

      public DataColumn ElectionTypeColumn { get { return this.Columns["ElectionType"]; } }

      public DataColumn NationalPartyCodeColumn { get { return this.Columns["NationalPartyCode"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public DataColumn ElectionStatusColumn { get { return this.Columns["ElectionStatus"]; } }

      public DataColumn ElectionDescColumn { get { return this.Columns["ElectionDesc"]; } }

      public DataColumn ElectionAdditionalInfoColumn { get { return this.Columns["ElectionAdditionalInfo"]; } }

      public DataColumn ElectionResultsSourceColumn { get { return this.Columns["ElectionResultsSource"]; } }

      public DataColumn ElectionResultsDateColumn { get { return this.Columns["ElectionResultsDate"]; } }

      public DataColumn BallotInstructionsColumn { get { return this.Columns["BallotInstructions"]; } }

      public DataColumn IsViewableColumn { get { return this.Columns["IsViewable"]; } }

      public DataColumn ContestsCoveredColumn { get { return this.Columns["ContestsCovered"]; } }

      public DataColumn EmailsDateElectionRosterColumn { get { return this.Columns["EmailsDateElectionRoster"]; } }

      public DataColumn EmailsSentElectionRosterColumn { get { return this.Columns["EmailsSentElectionRoster"]; } }

      public DataColumn EmailsDateElectionCompletionColumn { get { return this.Columns["EmailsDateElectionCompletion"]; } }

      public DataColumn EmailsSentElectionCompletionColumn { get { return this.Columns["EmailsSentElectionCompletion"]; } }

      public DataColumn EmailsDateCandidatesLoginColumn { get { return this.Columns["EmailsDateCandidatesLogin"]; } }

      public DataColumn EmailsSentCandidatesLoginColumn { get { return this.Columns["EmailsSentCandidatesLogin"]; } }

      public DataColumn EmailsDatePartiesLoginColumn { get { return this.Columns["EmailsDatePartiesLogin"]; } }

      public DataColumn EmailsSentPartiesLoginColumn { get { return this.Columns["EmailsSentPartiesLogin"]; } }

      public DataColumn ElectionKeyCanonicalColumn { get { return this.Columns["ElectionKeyCanonical"]; } }

      public DataColumn ElectionOrderColumn { get { return this.Columns["ElectionOrder"]; } }

      public DataColumn IsWinnersIdentifiedColumn { get { return this.Columns["IsWinnersIdentified"]; } }

      public DataColumn IsBallotMeasuresResultsRecordedColumn { get { return this.Columns["IsBallotMeasuresResultsRecorded"]; } }

      public DataColumn RegistrationDeadlineColumn { get { return this.Columns["RegistrationDeadline"]; } }

      public DataColumn EarlyVotingBeginColumn { get { return this.Columns["EarlyVotingBegin"]; } }

      public DataColumn EarlyVotingEndColumn { get { return this.Columns["EarlyVotingEnd"]; } }

      public DataColumn MailBallotBeginColumn { get { return this.Columns["MailBallotBegin"]; } }

      public DataColumn MailBallotEndColumn { get { return this.Columns["MailBallotEnd"]; } }

      public DataColumn MailBallotDeadlineColumn { get { return this.Columns["MailBallotDeadline"]; } }

      public DataColumn AbsenteeBallotBeginColumn { get { return this.Columns["AbsenteeBallotBegin"]; } }

      public DataColumn AbsenteeBallotEndColumn { get { return this.Columns["AbsenteeBallotEnd"]; } }

      public DataColumn AbsenteeBallotDeadlineColumn { get { return this.Columns["AbsenteeBallotDeadline"]; } }

      public enum ColumnSet { All, Display, Cache, Date, Control }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionYYYYMMDD", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("NationalPartyCode", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionStatus", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsViewable", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContestsCovered", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateElectionRoster", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentElectionRoster", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateElectionCompletion", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentElectionCompletion", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateCandidatesLogin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentCandidatesLogin", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDatePartiesLogin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentPartiesLogin", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyCanonical", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinnersIdentified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsBallotMeasuresResultsRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RegistrationDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EarlyVotingEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MailBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotBegin", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotEnd", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AbsenteeBallotDeadline", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDisplayColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsViewable", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("NationalPartyCode", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionAdditionalInfo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionResultsSource", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitControlColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsTable() : this(ColumnSet.All) { }

      public ElectionsTable(ColumnSet columnSet)
      {
        this.TableName = "Elections";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Display:
            InitDisplayColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Date:
            InitDateColumns();
            break;

          case ColumnSet.Control:
            InitControlColumns();
            break;
        }
      }

      protected ElectionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Elections
    {
      public const string TableName = "Elections";

      public enum Column { ElectionKey, StateCode, CountyCode, LocalCode, ElectionDate, ElectionYYYYMMDD, ElectionType, NationalPartyCode, PartyCode, ElectionStatus, ElectionDesc, ElectionAdditionalInfo, ElectionResultsSource, ElectionResultsDate, BallotInstructions, IsViewable, ContestsCovered, EmailsDateElectionRoster, EmailsSentElectionRoster, EmailsDateElectionCompletion, EmailsSentElectionCompletion, EmailsDateCandidatesLogin, EmailsSentCandidatesLogin, EmailsDatePartiesLogin, EmailsSentPartiesLogin, ElectionKeyCanonical, ElectionOrder, IsWinnersIdentified, IsBallotMeasuresResultsRecorded, RegistrationDeadline, EarlyVotingBegin, EarlyVotingEnd, MailBallotBegin, MailBallotEnd, MailBallotDeadline, AbsenteeBallotBegin, AbsenteeBallotEnd, AbsenteeBallotDeadline }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.ElectionDate, "ElectionDate" },
        { Column.ElectionYYYYMMDD, "ElectionYYYYMMDD" },
        { Column.ElectionType, "ElectionType" },
        { Column.NationalPartyCode, "NationalPartyCode" },
        { Column.PartyCode, "PartyCode" },
        { Column.ElectionStatus, "ElectionStatus" },
        { Column.ElectionDesc, "ElectionDesc" },
        { Column.ElectionAdditionalInfo, "ElectionAdditionalInfo" },
        { Column.ElectionResultsSource, "ElectionResultsSource" },
        { Column.ElectionResultsDate, "ElectionResultsDate" },
        { Column.BallotInstructions, "BallotInstructions" },
        { Column.IsViewable, "IsViewable" },
        { Column.ContestsCovered, "ContestsCovered" },
        { Column.EmailsDateElectionRoster, "EmailsDateElectionRoster" },
        { Column.EmailsSentElectionRoster, "EmailsSentElectionRoster" },
        { Column.EmailsDateElectionCompletion, "EmailsDateElectionCompletion" },
        { Column.EmailsSentElectionCompletion, "EmailsSentElectionCompletion" },
        { Column.EmailsDateCandidatesLogin, "EmailsDateCandidatesLogin" },
        { Column.EmailsSentCandidatesLogin, "EmailsSentCandidatesLogin" },
        { Column.EmailsDatePartiesLogin, "EmailsDatePartiesLogin" },
        { Column.EmailsSentPartiesLogin, "EmailsSentPartiesLogin" },
        { Column.ElectionKeyCanonical, "ElectionKeyCanonical" },
        { Column.ElectionOrder, "ElectionOrder" },
        { Column.IsWinnersIdentified, "IsWinnersIdentified" },
        { Column.IsBallotMeasuresResultsRecorded, "IsBallotMeasuresResultsRecorded" },
        { Column.RegistrationDeadline, "RegistrationDeadline" },
        { Column.EarlyVotingBegin, "EarlyVotingBegin" },
        { Column.EarlyVotingEnd, "EarlyVotingEnd" },
        { Column.MailBallotBegin, "MailBallotBegin" },
        { Column.MailBallotEnd, "MailBallotEnd" },
        { Column.MailBallotDeadline, "MailBallotDeadline" },
        { Column.AbsenteeBallotBegin, "AbsenteeBallotBegin" },
        { Column.AbsenteeBallotEnd, "AbsenteeBallotEnd" },
        { Column.AbsenteeBallotDeadline, "AbsenteeBallotDeadline" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String stateCode, String countyCode, String localCode, DateTime electionDate, String electionYYYYMMDD, String electionType, String nationalPartyCode, String partyCode, String electionStatus, String electionDesc, String electionAdditionalInfo, String electionResultsSource, DateTime electionResultsDate, String ballotInstructions, Boolean isViewable, Int32 contestsCovered, DateTime emailsDateElectionRoster, Int32 emailsSentElectionRoster, DateTime emailsDateElectionCompletion, Int32 emailsSentElectionCompletion, DateTime emailsDateCandidatesLogin, Int32 emailsSentCandidatesLogin, DateTime emailsDatePartiesLogin, Int32 emailsSentPartiesLogin, String electionKeyCanonical, Int32 electionOrder, Boolean isWinnersIdentified, Boolean isBallotMeasuresResultsRecorded, DateTime registrationDeadline, DateTime earlyVotingBegin, DateTime earlyVotingEnd, DateTime mailBallotBegin, DateTime mailBallotEnd, DateTime mailBallotDeadline, DateTime absenteeBallotBegin, DateTime absenteeBallotEnd, DateTime absenteeBallotDeadline, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Elections (ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ContestsCovered,EmailsDateElectionRoster,EmailsSentElectionRoster,EmailsDateElectionCompletion,EmailsSentElectionCompletion,EmailsDateCandidatesLogin,EmailsSentCandidatesLogin,EmailsDatePartiesLogin,EmailsSentPartiesLogin,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline) VALUES (@ElectionKey,@StateCode,@CountyCode,@LocalCode,@ElectionDate,@ElectionYYYYMMDD,@ElectionType,@NationalPartyCode,@PartyCode,@ElectionStatus,@ElectionDesc,@ElectionAdditionalInfo,@ElectionResultsSource,@ElectionResultsDate,@BallotInstructions,@IsViewable,@ContestsCovered,@EmailsDateElectionRoster,@EmailsSentElectionRoster,@EmailsDateElectionCompletion,@EmailsSentElectionCompletion,@EmailsDateCandidatesLogin,@EmailsSentCandidatesLogin,@EmailsDatePartiesLogin,@EmailsSentPartiesLogin,@ElectionKeyCanonical,@ElectionOrder,@IsWinnersIdentified,@IsBallotMeasuresResultsRecorded,@RegistrationDeadline,@EarlyVotingBegin,@EarlyVotingEnd,@MailBallotBegin,@MailBallotEnd,@MailBallotDeadline,@AbsenteeBallotBegin,@AbsenteeBallotEnd,@AbsenteeBallotDeadline)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "ElectionDate", electionDate);
        VoteDb.AddCommandParameter(cmd, "ElectionYYYYMMDD", electionYYYYMMDD);
        VoteDb.AddCommandParameter(cmd, "ElectionType", electionType);
        VoteDb.AddCommandParameter(cmd, "NationalPartyCode", nationalPartyCode);
        VoteDb.AddCommandParameter(cmd, "PartyCode", partyCode);
        VoteDb.AddCommandParameter(cmd, "ElectionStatus", electionStatus);
        VoteDb.AddCommandParameter(cmd, "ElectionDesc", electionDesc);
        VoteDb.AddCommandParameter(cmd, "ElectionAdditionalInfo", electionAdditionalInfo);
        VoteDb.AddCommandParameter(cmd, "ElectionResultsSource", electionResultsSource);
        VoteDb.AddCommandParameter(cmd, "ElectionResultsDate", electionResultsDate);
        VoteDb.AddCommandParameter(cmd, "BallotInstructions", ballotInstructions);
        VoteDb.AddCommandParameter(cmd, "IsViewable", isViewable);
        VoteDb.AddCommandParameter(cmd, "ContestsCovered", contestsCovered);
        VoteDb.AddCommandParameter(cmd, "EmailsDateElectionRoster", emailsDateElectionRoster);
        VoteDb.AddCommandParameter(cmd, "EmailsSentElectionRoster", emailsSentElectionRoster);
        VoteDb.AddCommandParameter(cmd, "EmailsDateElectionCompletion", emailsDateElectionCompletion);
        VoteDb.AddCommandParameter(cmd, "EmailsSentElectionCompletion", emailsSentElectionCompletion);
        VoteDb.AddCommandParameter(cmd, "EmailsDateCandidatesLogin", emailsDateCandidatesLogin);
        VoteDb.AddCommandParameter(cmd, "EmailsSentCandidatesLogin", emailsSentCandidatesLogin);
        VoteDb.AddCommandParameter(cmd, "EmailsDatePartiesLogin", emailsDatePartiesLogin);
        VoteDb.AddCommandParameter(cmd, "EmailsSentPartiesLogin", emailsSentPartiesLogin);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyCanonical", electionKeyCanonical);
        VoteDb.AddCommandParameter(cmd, "ElectionOrder", electionOrder);
        VoteDb.AddCommandParameter(cmd, "IsWinnersIdentified", isWinnersIdentified);
        VoteDb.AddCommandParameter(cmd, "IsBallotMeasuresResultsRecorded", isBallotMeasuresResultsRecorded);
        VoteDb.AddCommandParameter(cmd, "RegistrationDeadline", registrationDeadline);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingBegin", earlyVotingBegin);
        VoteDb.AddCommandParameter(cmd, "EarlyVotingEnd", earlyVotingEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotBegin", mailBallotBegin);
        VoteDb.AddCommandParameter(cmd, "MailBallotEnd", mailBallotEnd);
        VoteDb.AddCommandParameter(cmd, "MailBallotDeadline", mailBallotDeadline);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotBegin", absenteeBallotBegin);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotEnd", absenteeBallotEnd);
        VoteDb.AddCommandParameter(cmd, "AbsenteeBallotDeadline", absenteeBallotDeadline);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ContestsCovered,EmailsDateElectionRoster,EmailsSentElectionRoster,EmailsDateElectionCompletion,EmailsSentElectionCompletion,EmailsDateCandidatesLogin,EmailsSentCandidatesLogin,EmailsDatePartiesLogin,EmailsSentPartiesLogin,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM Elections";
        }
      }

      public static ElectionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ContestsCovered,EmailsDateElectionRoster,EmailsSentElectionRoster,EmailsDateElectionCompletion,EmailsSentElectionCompletion,EmailsDateCandidatesLogin,EmailsSentCandidatesLogin,EmailsDatePartiesLogin,EmailsSentPartiesLogin,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static ElectionsTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsTable FillTable(DbCommand command, ElectionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsTable table = new ElectionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsTable table, ElectionsTable.ColumnSet columnSet = ElectionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string ElectionDateColumnName { get { return "ElectionDate"; } }

      public static string ElectionYYYYMMDDColumnName { get { return "ElectionYYYYMMDD"; } }

      public static string ElectionTypeColumnName { get { return "ElectionType"; } }

      public static string NationalPartyCodeColumnName { get { return "NationalPartyCode"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static string ElectionStatusColumnName { get { return "ElectionStatus"; } }

      public static string ElectionDescColumnName { get { return "ElectionDesc"; } }

      public static string ElectionAdditionalInfoColumnName { get { return "ElectionAdditionalInfo"; } }

      public static string ElectionResultsSourceColumnName { get { return "ElectionResultsSource"; } }

      public static string ElectionResultsDateColumnName { get { return "ElectionResultsDate"; } }

      public static string BallotInstructionsColumnName { get { return "BallotInstructions"; } }

      public static string IsViewableColumnName { get { return "IsViewable"; } }

      public static string ContestsCoveredColumnName { get { return "ContestsCovered"; } }

      public static string EmailsDateElectionRosterColumnName { get { return "EmailsDateElectionRoster"; } }

      public static string EmailsSentElectionRosterColumnName { get { return "EmailsSentElectionRoster"; } }

      public static string EmailsDateElectionCompletionColumnName { get { return "EmailsDateElectionCompletion"; } }

      public static string EmailsSentElectionCompletionColumnName { get { return "EmailsSentElectionCompletion"; } }

      public static string EmailsDateCandidatesLoginColumnName { get { return "EmailsDateCandidatesLogin"; } }

      public static string EmailsSentCandidatesLoginColumnName { get { return "EmailsSentCandidatesLogin"; } }

      public static string EmailsDatePartiesLoginColumnName { get { return "EmailsDatePartiesLogin"; } }

      public static string EmailsSentPartiesLoginColumnName { get { return "EmailsSentPartiesLogin"; } }

      public static string ElectionKeyCanonicalColumnName { get { return "ElectionKeyCanonical"; } }

      public static string ElectionOrderColumnName { get { return "ElectionOrder"; } }

      public static string IsWinnersIdentifiedColumnName { get { return "IsWinnersIdentified"; } }

      public static string IsBallotMeasuresResultsRecordedColumnName { get { return "IsBallotMeasuresResultsRecorded"; } }

      public static string RegistrationDeadlineColumnName { get { return "RegistrationDeadline"; } }

      public static string EarlyVotingBeginColumnName { get { return "EarlyVotingBegin"; } }

      public static string EarlyVotingEndColumnName { get { return "EarlyVotingEnd"; } }

      public static string MailBallotBeginColumnName { get { return "MailBallotBegin"; } }

      public static string MailBallotEndColumnName { get { return "MailBallotEnd"; } }

      public static string MailBallotDeadlineColumnName { get { return "MailBallotDeadline"; } }

      public static string AbsenteeBallotBeginColumnName { get { return "AbsenteeBallotBegin"; } }

      public static string AbsenteeBallotEndColumnName { get { return "AbsenteeBallotEnd"; } }

      public static string AbsenteeBallotDeadlineColumnName { get { return "AbsenteeBallotDeadline"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int ElectionYYYYMMDDMaxLength { get { return 8; } }

      public static int ElectionTypeMaxLength { get { return 1; } }

      public static int NationalPartyCodeMaxLength { get { return 1; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static int ElectionStatusMaxLength { get { return int.MaxValue; } }

      public static int ElectionDescMaxLength { get { return int.MaxValue; } }

      public static int ElectionAdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int ElectionResultsSourceMaxLength { get { return int.MaxValue; } }

      public static int BallotInstructionsMaxLength { get { return int.MaxValue; } }

      public static int ElectionKeyCanonicalMaxLength { get { return 18; } }

      public static bool ElectionKeyExists(String electionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String electionKey, String defaultValue = null)
      {
        return GetElectionKeyByElectionKey(electionKey, defaultValue);
      }

      public static String GetStateCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionKey, String defaultValue = null)
      {
        return GetStateCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetCountyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String electionKey, String defaultValue = null)
      {
        return GetCountyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetLocalCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCode(String electionKey, String defaultValue = null)
      {
        return GetLocalCodeByElectionKey(electionKey, defaultValue);
      }

      public static DateTime? GetElectionDateByElectionKey(String electionKey)
      {
        return _GetElectionDateByElectionKey(electionKey, null);
      }

      public static DateTime? GetElectionDate(String electionKey)
      {
        return GetElectionDateByElectionKey(electionKey);
      }

      public static DateTime GetElectionDateByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetElectionDateByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetElectionDate(String electionKey, DateTime defaultValue)
      {
        return GetElectionDateByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetElectionDateByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionDate FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetElectionYYYYMMDDByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionYYYYMMDD FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionYYYYMMDD(String electionKey, String defaultValue = null)
      {
        return GetElectionYYYYMMDDByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionTypeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionType FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionType(String electionKey, String defaultValue = null)
      {
        return GetElectionTypeByElectionKey(electionKey, defaultValue);
      }

      public static String GetNationalPartyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NationalPartyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNationalPartyCode(String electionKey, String defaultValue = null)
      {
        return GetNationalPartyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetPartyCodeByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCode FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCode(String electionKey, String defaultValue = null)
      {
        return GetPartyCodeByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionStatusByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionStatus FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionStatus(String electionKey, String defaultValue = null)
      {
        return GetElectionStatusByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionDescByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionDesc FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionDesc(String electionKey, String defaultValue = null)
      {
        return GetElectionDescByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionAdditionalInfoByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionAdditionalInfo FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionAdditionalInfo(String electionKey, String defaultValue = null)
      {
        return GetElectionAdditionalInfoByElectionKey(electionKey, defaultValue);
      }

      public static String GetElectionResultsSourceByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionResultsSource FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionResultsSource(String electionKey, String defaultValue = null)
      {
        return GetElectionResultsSourceByElectionKey(electionKey, defaultValue);
      }

      public static DateTime? GetElectionResultsDateByElectionKey(String electionKey)
      {
        return _GetElectionResultsDateByElectionKey(electionKey, null);
      }

      public static DateTime? GetElectionResultsDate(String electionKey)
      {
        return GetElectionResultsDateByElectionKey(electionKey);
      }

      public static DateTime GetElectionResultsDateByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetElectionResultsDateByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetElectionResultsDate(String electionKey, DateTime defaultValue)
      {
        return GetElectionResultsDateByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetElectionResultsDateByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionResultsDate FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetBallotInstructionsByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotInstructions FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotInstructions(String electionKey, String defaultValue = null)
      {
        return GetBallotInstructionsByElectionKey(electionKey, defaultValue);
      }

      public static Boolean? GetIsViewableByElectionKey(String electionKey)
      {
        return _GetIsViewableByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsViewable(String electionKey)
      {
        return GetIsViewableByElectionKey(electionKey);
      }

      public static Boolean GetIsViewableByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsViewableByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsViewable(String electionKey, Boolean defaultValue)
      {
        return GetIsViewableByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsViewableByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsViewable FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetContestsCoveredByElectionKey(String electionKey)
      {
        return _GetContestsCoveredByElectionKey(electionKey, null);
      }

      public static Int32? GetContestsCovered(String electionKey)
      {
        return GetContestsCoveredByElectionKey(electionKey);
      }

      public static Int32 GetContestsCoveredByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetContestsCoveredByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetContestsCovered(String electionKey, Int32 defaultValue)
      {
        return GetContestsCoveredByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetContestsCoveredByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ContestsCovered FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateElectionRosterByElectionKey(String electionKey)
      {
        return _GetEmailsDateElectionRosterByElectionKey(electionKey, null);
      }

      public static DateTime? GetEmailsDateElectionRoster(String electionKey)
      {
        return GetEmailsDateElectionRosterByElectionKey(electionKey);
      }

      public static DateTime GetEmailsDateElectionRosterByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEmailsDateElectionRosterByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEmailsDateElectionRoster(String electionKey, DateTime defaultValue)
      {
        return GetEmailsDateElectionRosterByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEmailsDateElectionRosterByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionRoster FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionRosterByElectionKey(String electionKey)
      {
        return _GetEmailsSentElectionRosterByElectionKey(electionKey, null);
      }

      public static Int32? GetEmailsSentElectionRoster(String electionKey)
      {
        return GetEmailsSentElectionRosterByElectionKey(electionKey);
      }

      public static Int32 GetEmailsSentElectionRosterByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetEmailsSentElectionRosterByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetEmailsSentElectionRoster(String electionKey, Int32 defaultValue)
      {
        return GetEmailsSentElectionRosterByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetEmailsSentElectionRosterByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionRoster FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateElectionCompletionByElectionKey(String electionKey)
      {
        return _GetEmailsDateElectionCompletionByElectionKey(electionKey, null);
      }

      public static DateTime? GetEmailsDateElectionCompletion(String electionKey)
      {
        return GetEmailsDateElectionCompletionByElectionKey(electionKey);
      }

      public static DateTime GetEmailsDateElectionCompletionByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEmailsDateElectionCompletionByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEmailsDateElectionCompletion(String electionKey, DateTime defaultValue)
      {
        return GetEmailsDateElectionCompletionByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEmailsDateElectionCompletionByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionCompletion FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionCompletionByElectionKey(String electionKey)
      {
        return _GetEmailsSentElectionCompletionByElectionKey(electionKey, null);
      }

      public static Int32? GetEmailsSentElectionCompletion(String electionKey)
      {
        return GetEmailsSentElectionCompletionByElectionKey(electionKey);
      }

      public static Int32 GetEmailsSentElectionCompletionByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetEmailsSentElectionCompletionByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetEmailsSentElectionCompletion(String electionKey, Int32 defaultValue)
      {
        return GetEmailsSentElectionCompletionByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetEmailsSentElectionCompletionByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionCompletion FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateCandidatesLoginByElectionKey(String electionKey)
      {
        return _GetEmailsDateCandidatesLoginByElectionKey(electionKey, null);
      }

      public static DateTime? GetEmailsDateCandidatesLogin(String electionKey)
      {
        return GetEmailsDateCandidatesLoginByElectionKey(electionKey);
      }

      public static DateTime GetEmailsDateCandidatesLoginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEmailsDateCandidatesLoginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEmailsDateCandidatesLogin(String electionKey, DateTime defaultValue)
      {
        return GetEmailsDateCandidatesLoginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEmailsDateCandidatesLoginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateCandidatesLogin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentCandidatesLoginByElectionKey(String electionKey)
      {
        return _GetEmailsSentCandidatesLoginByElectionKey(electionKey, null);
      }

      public static Int32? GetEmailsSentCandidatesLogin(String electionKey)
      {
        return GetEmailsSentCandidatesLoginByElectionKey(electionKey);
      }

      public static Int32 GetEmailsSentCandidatesLoginByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetEmailsSentCandidatesLoginByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetEmailsSentCandidatesLogin(String electionKey, Int32 defaultValue)
      {
        return GetEmailsSentCandidatesLoginByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetEmailsSentCandidatesLoginByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentCandidatesLogin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDatePartiesLoginByElectionKey(String electionKey)
      {
        return _GetEmailsDatePartiesLoginByElectionKey(electionKey, null);
      }

      public static DateTime? GetEmailsDatePartiesLogin(String electionKey)
      {
        return GetEmailsDatePartiesLoginByElectionKey(electionKey);
      }

      public static DateTime GetEmailsDatePartiesLoginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEmailsDatePartiesLoginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEmailsDatePartiesLogin(String electionKey, DateTime defaultValue)
      {
        return GetEmailsDatePartiesLoginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEmailsDatePartiesLoginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDatePartiesLogin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentPartiesLoginByElectionKey(String electionKey)
      {
        return _GetEmailsSentPartiesLoginByElectionKey(electionKey, null);
      }

      public static Int32? GetEmailsSentPartiesLogin(String electionKey)
      {
        return GetEmailsSentPartiesLoginByElectionKey(electionKey);
      }

      public static Int32 GetEmailsSentPartiesLoginByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetEmailsSentPartiesLoginByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetEmailsSentPartiesLogin(String electionKey, Int32 defaultValue)
      {
        return GetEmailsSentPartiesLoginByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetEmailsSentPartiesLoginByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentPartiesLogin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetElectionKeyCanonicalByElectionKey(String electionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyCanonical FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyCanonical(String electionKey, String defaultValue = null)
      {
        return GetElectionKeyCanonicalByElectionKey(electionKey, defaultValue);
      }

      public static Int32? GetElectionOrderByElectionKey(String electionKey)
      {
        return _GetElectionOrderByElectionKey(electionKey, null);
      }

      public static Int32? GetElectionOrder(String electionKey)
      {
        return GetElectionOrderByElectionKey(electionKey);
      }

      public static Int32 GetElectionOrderByElectionKey(String electionKey, Int32 defaultValue)
      {
        return _GetElectionOrderByElectionKey(electionKey, defaultValue).Value;
      }

      public static Int32 GetElectionOrder(String electionKey, Int32 defaultValue)
      {
        return GetElectionOrderByElectionKey(electionKey, defaultValue);
      }

      private static Int32? _GetElectionOrderByElectionKey(String electionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionOrder FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsWinnersIdentifiedByElectionKey(String electionKey)
      {
        return _GetIsWinnersIdentifiedByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsWinnersIdentified(String electionKey)
      {
        return GetIsWinnersIdentifiedByElectionKey(electionKey);
      }

      public static Boolean GetIsWinnersIdentifiedByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsWinnersIdentifiedByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsWinnersIdentified(String electionKey, Boolean defaultValue)
      {
        return GetIsWinnersIdentifiedByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsWinnersIdentifiedByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsWinnersIdentified FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey)
      {
        return _GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, null);
      }

      public static Boolean? GetIsBallotMeasuresResultsRecorded(String electionKey)
      {
        return GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey);
      }

      public static Boolean GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey, Boolean defaultValue)
      {
        return _GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, defaultValue).Value;
      }

      public static Boolean GetIsBallotMeasuresResultsRecorded(String electionKey, Boolean defaultValue)
      {
        return GetIsBallotMeasuresResultsRecordedByElectionKey(electionKey, defaultValue);
      }

      private static Boolean? _GetIsBallotMeasuresResultsRecordedByElectionKey(String electionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsBallotMeasuresResultsRecorded FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetRegistrationDeadlineByElectionKey(String electionKey)
      {
        return _GetRegistrationDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetRegistrationDeadline(String electionKey)
      {
        return GetRegistrationDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetRegistrationDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetRegistrationDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetRegistrationDeadline(String electionKey, DateTime defaultValue)
      {
        return GetRegistrationDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetRegistrationDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT RegistrationDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingBeginByElectionKey(String electionKey)
      {
        return _GetEarlyVotingBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetEarlyVotingBegin(String electionKey)
      {
        return GetEarlyVotingBeginByElectionKey(electionKey);
      }

      public static DateTime GetEarlyVotingBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingBegin(String electionKey, DateTime defaultValue)
      {
        return GetEarlyVotingBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetEarlyVotingEndByElectionKey(String electionKey)
      {
        return _GetEarlyVotingEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetEarlyVotingEnd(String electionKey)
      {
        return GetEarlyVotingEndByElectionKey(electionKey);
      }

      public static DateTime GetEarlyVotingEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetEarlyVotingEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetEarlyVotingEnd(String electionKey, DateTime defaultValue)
      {
        return GetEarlyVotingEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetEarlyVotingEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EarlyVotingEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotBeginByElectionKey(String electionKey)
      {
        return _GetMailBallotBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotBegin(String electionKey)
      {
        return GetMailBallotBeginByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotBegin(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotEndByElectionKey(String electionKey)
      {
        return _GetMailBallotEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotEnd(String electionKey)
      {
        return GetMailBallotEndByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotEnd(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetMailBallotDeadlineByElectionKey(String electionKey)
      {
        return _GetMailBallotDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetMailBallotDeadline(String electionKey)
      {
        return GetMailBallotDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetMailBallotDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetMailBallotDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetMailBallotDeadline(String electionKey, DateTime defaultValue)
      {
        return GetMailBallotDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetMailBallotDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MailBallotDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotBeginByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotBeginByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotBegin(String electionKey)
      {
        return GetAbsenteeBallotBeginByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotBeginByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotBeginByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotBegin(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotBeginByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotBeginByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotBegin FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotEndByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotEndByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotEnd(String electionKey)
      {
        return GetAbsenteeBallotEndByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotEndByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotEndByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotEnd(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotEndByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotEndByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotEnd FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetAbsenteeBallotDeadlineByElectionKey(String electionKey)
      {
        return _GetAbsenteeBallotDeadlineByElectionKey(electionKey, null);
      }

      public static DateTime? GetAbsenteeBallotDeadline(String electionKey)
      {
        return GetAbsenteeBallotDeadlineByElectionKey(electionKey);
      }

      public static DateTime GetAbsenteeBallotDeadlineByElectionKey(String electionKey, DateTime defaultValue)
      {
        return _GetAbsenteeBallotDeadlineByElectionKey(electionKey, defaultValue).Value;
      }

      public static DateTime GetAbsenteeBallotDeadline(String electionKey, DateTime defaultValue)
      {
        return GetAbsenteeBallotDeadlineByElectionKey(electionKey, defaultValue);
      }

      private static DateTime? _GetAbsenteeBallotDeadlineByElectionKey(String electionKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT AbsenteeBallotDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Elections WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionKey)
      {
        return GetColumnByElectionKey(_column, electionKey);
      }

      public static ElectionsTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionYYYYMMDD,ElectionType,NationalPartyCode,PartyCode,ElectionStatus,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,ElectionResultsDate,BallotInstructions,IsViewable,ContestsCovered,EmailsDateElectionRoster,EmailsSentElectionRoster,EmailsDateElectionCompletion,EmailsSentElectionCompletion,EmailsDateCandidatesLogin,EmailsSentCandidatesLogin,EmailsDatePartiesLogin,EmailsSentPartiesLogin,ElectionKeyCanonical,ElectionOrder,IsWinnersIdentified,IsBallotMeasuresResultsRecorded,RegistrationDeadline,EarlyVotingBegin,EarlyVotingEnd,MailBallotBegin,MailBallotEnd,MailBallotDeadline,AbsenteeBallotBegin,AbsenteeBallotEnd,AbsenteeBallotDeadline FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsTable.ColumnSet.All);
      }

      public static ElectionsTable GetData(String electionKey, int commandTimeout = -1)
      {
        return GetDataByElectionKey(electionKey, commandTimeout);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String electionKey)
      {
        return UpdateElectionKeyByElectionKey(newValue, electionKey);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionKey)
      {
        return UpdateStateCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String electionKey)
      {
        return UpdateCountyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateLocalCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCode(String newValue, String electionKey)
      {
        return UpdateLocalCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionDateByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDate=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDate(DateTime newValue, String electionKey)
      {
        return UpdateElectionDateByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionYYYYMMDDByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionYYYYMMDD=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYYYYMMDD(String newValue, String electionKey)
      {
        return UpdateElectionYYYYMMDDByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionTypeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionType=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionType(String newValue, String electionKey)
      {
        return UpdateElectionTypeByElectionKey(newValue, electionKey);
      }

      public static int UpdateNationalPartyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET NationalPartyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNationalPartyCode(String newValue, String electionKey)
      {
        return UpdateNationalPartyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdatePartyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET PartyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyCode(String newValue, String electionKey)
      {
        return UpdatePartyCodeByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionStatusByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionStatus=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionStatus(String newValue, String electionKey)
      {
        return UpdateElectionStatusByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionDescByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionDesc=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDesc(String newValue, String electionKey)
      {
        return UpdateElectionDescByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionAdditionalInfoByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionAdditionalInfo=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionAdditionalInfo(String newValue, String electionKey)
      {
        return UpdateElectionAdditionalInfoByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionResultsSourceByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsSource=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsSource(String newValue, String electionKey)
      {
        return UpdateElectionResultsSourceByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionResultsDateByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionResultsDate=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionResultsDate(DateTime newValue, String electionKey)
      {
        return UpdateElectionResultsDateByElectionKey(newValue, electionKey);
      }

      public static int UpdateBallotInstructionsByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET BallotInstructions=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotInstructions(String newValue, String electionKey)
      {
        return UpdateBallotInstructionsByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsViewableByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsViewable=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsViewable(Boolean newValue, String electionKey)
      {
        return UpdateIsViewableByElectionKey(newValue, electionKey);
      }

      public static int UpdateContestsCoveredByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ContestsCovered=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContestsCovered(Int32 newValue, String electionKey)
      {
        return UpdateContestsCoveredByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsDateElectionRosterByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsDateElectionRoster=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRoster(DateTime newValue, String electionKey)
      {
        return UpdateEmailsDateElectionRosterByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsSentElectionRosterByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsSentElectionRoster=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRoster(Int32 newValue, String electionKey)
      {
        return UpdateEmailsSentElectionRosterByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsDateElectionCompletionByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsDateElectionCompletion=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionCompletion(DateTime newValue, String electionKey)
      {
        return UpdateEmailsDateElectionCompletionByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsSentElectionCompletionByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsSentElectionCompletion=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionCompletion(Int32 newValue, String electionKey)
      {
        return UpdateEmailsSentElectionCompletionByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsDateCandidatesLoginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsDateCandidatesLogin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateCandidatesLogin(DateTime newValue, String electionKey)
      {
        return UpdateEmailsDateCandidatesLoginByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsSentCandidatesLoginByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsSentCandidatesLogin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentCandidatesLogin(Int32 newValue, String electionKey)
      {
        return UpdateEmailsSentCandidatesLoginByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsDatePartiesLoginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsDatePartiesLogin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDatePartiesLogin(DateTime newValue, String electionKey)
      {
        return UpdateEmailsDatePartiesLoginByElectionKey(newValue, electionKey);
      }

      public static int UpdateEmailsSentPartiesLoginByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EmailsSentPartiesLogin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentPartiesLogin(Int32 newValue, String electionKey)
      {
        return UpdateEmailsSentPartiesLoginByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionKeyCanonicalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionKeyCanonical=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCanonical(String newValue, String electionKey)
      {
        return UpdateElectionKeyCanonicalByElectionKey(newValue, electionKey);
      }

      public static int UpdateElectionOrderByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET ElectionOrder=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionOrder(Int32 newValue, String electionKey)
      {
        return UpdateElectionOrderByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsWinnersIdentifiedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsWinnersIdentified=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnersIdentified(Boolean newValue, String electionKey)
      {
        return UpdateIsWinnersIdentifiedByElectionKey(newValue, electionKey);
      }

      public static int UpdateIsBallotMeasuresResultsRecordedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET IsBallotMeasuresResultsRecorded=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBallotMeasuresResultsRecorded(Boolean newValue, String electionKey)
      {
        return UpdateIsBallotMeasuresResultsRecordedByElectionKey(newValue, electionKey);
      }

      public static int UpdateRegistrationDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET RegistrationDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRegistrationDeadline(DateTime newValue, String electionKey)
      {
        return UpdateRegistrationDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateEarlyVotingBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingBegin(DateTime newValue, String electionKey)
      {
        return UpdateEarlyVotingBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateEarlyVotingEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET EarlyVotingEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEarlyVotingEnd(DateTime newValue, String electionKey)
      {
        return UpdateEarlyVotingEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotBegin(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotEnd(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateMailBallotDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET MailBallotDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMailBallotDeadline(DateTime newValue, String electionKey)
      {
        return UpdateMailBallotDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotBeginByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotBegin=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotBegin(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotBeginByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotEndByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotEnd=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotEnd(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotEndByElectionKey(newValue, electionKey);
      }

      public static int UpdateAbsenteeBallotDeadlineByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET AbsenteeBallotDeadline=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbsenteeBallotDeadline(DateTime newValue, String electionKey)
      {
        return UpdateAbsenteeBallotDeadlineByElectionKey(newValue, electionKey);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE Elections SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionKey)
      {
         return UpdateColumnByElectionKey(_column, newValue, electionKey);
      }

      public static string SelectDisplayCommandText
      {
        get
        {
          return "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections";
        }
      }

      public static ElectionsTable GetAllDisplayData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Display);
      }

      public static void UpdateDisplay(ElectionsTable table)
      {
        UpdateDisplay(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDisplay(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Display, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsTable GetDisplayDataByStateCodeElectionTypeIsViewable(String stateCode, String electionType, Boolean isViewable, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections WHERE StateCode=@StateCode AND ElectionType=@ElectionType AND IsViewable=@IsViewable ORDER BY ElectionDate DESC,ElectionOrder ASC";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "ElectionType", electionType);
        VoteDb.AddCommandParameter(cmd, "IsViewable", isViewable);
        return FillTable(cmd, ElectionsTable.ColumnSet.Display);
      }

      public static ElectionsTable GetDisplayDataByStateCodeCountyCodeLocalCodeIsViewable(String stateCode, String countyCode, String localCode, Boolean isViewable, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,StateCode,CountyCode,LocalCode,ElectionDate,ElectionType,PartyCode,ElectionDesc,IsViewable FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode AND IsViewable=@IsViewable ORDER BY ElectionDate DESC,ElectionOrder ASC";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "IsViewable", isViewable);
        return FillTable(cmd, ElectionsTable.ColumnSet.Display);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections";
        }
      }

      public static ElectionsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ElectionsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsTable GetCacheDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionType,NationalPartyCode,ElectionDesc,ElectionAdditionalInfo,ElectionResultsSource,BallotInstructions FROM Elections WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsTable.ColumnSet.Cache);
      }

      public static ElectionsTable GetCacheData(String electionKey, int commandTimeout = -1)
      {
        return GetCacheDataByElectionKey(electionKey, commandTimeout);
      }

      public static string SelectDateCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate FROM Elections";
        }
      }

      public static ElectionsTable GetAllDateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Date);
      }

      public static void UpdateDate(ElectionsTable table)
      {
        UpdateDate(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDate(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Date, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectControlCommandText
      {
        get
        {
          return "SELECT ElectionKey,ElectionDate,ElectionDesc,ElectionOrder FROM Elections";
        }
      }

      public static ElectionsTable GetAllControlData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionDesc,ElectionOrder FROM Elections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsTable.ColumnSet.Control);
      }

      public static void UpdateControl(ElectionsTable table)
      {
        UpdateControl(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateControl(ElectionsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsTable.ColumnSet.Control, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsTable GetControlDataByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ElectionDate,ElectionDesc,ElectionOrder FROM Elections WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode ORDER BY ElectionDate DESC,ElectionOrder ASC,ElectionDesc ASC";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        return FillTable(cmd, ElectionsTable.ColumnSet.Control);
      }

      public static string GetSelectCommandText(ElectionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsTable.ColumnSet.Display:
            return SelectDisplayCommandText;

          case ElectionsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ElectionsTable.ColumnSet.Date:
            return SelectDateCommandText;

          case ElectionsTable.ColumnSet.Control:
            return SelectControlCommandText;

          default:
            return null;
        }
      }

      static Elections()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Elections

    #region vote.ElectionsIncumbentsRemoved

    public partial class ElectionsIncumbentsRemovedRow : DataRow
    {
      internal ElectionsIncumbentsRemovedRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsIncumbentsRemovedTable : TypedTableBase<ElectionsIncumbentsRemovedRow>
    {
      public ElectionsIncumbentsRemovedRow this[int index] { get { return (ElectionsIncumbentsRemovedRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsIncumbentsRemovedRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsIncumbentsRemovedTable(); }

      new public ElectionsIncumbentsRemovedRow NewRow() { return (ElectionsIncumbentsRemovedRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsIncumbentsRemovedRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsIncumbentsRemovedRow); }

      public void RemoveRow(ElectionsIncumbentsRemovedRow row) { this.Rows.Remove(row); }

      public ElectionsIncumbentsRemovedRow NewRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        ElectionsIncumbentsRemovedRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.DataLastUpdated = dataLastUpdated;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        ElectionsIncumbentsRemovedRow row = NewRow(electionKey, officeKey, politicianKey, runningMateKey, stateCode, countyCode, localCode, districtCode, dataLastUpdated, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsIncumbentsRemovedTable() : this(ColumnSet.All) { }

      public ElectionsIncumbentsRemovedTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsIncumbentsRemoved";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ElectionsIncumbentsRemovedTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsIncumbentsRemoved
    {
      public const string TableName = "ElectionsIncumbentsRemoved";

      public enum Column { ElectionKey, OfficeKey, PoliticianKey, RunningMateKey, StateCode, CountyCode, LocalCode, DistrictCode, DataLastUpdated, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsIncumbentsRemoved (ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName) VALUES (@ElectionKey,@OfficeKey,@PoliticianKey,@RunningMateKey,@StateCode,@CountyCode,@LocalCode,@DistrictCode,@DataLastUpdated,@UserSecurity,@UserName)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved";
        }
      }

      public static ElectionsIncumbentsRemovedTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static ElectionsIncumbentsRemovedTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsIncumbentsRemovedTable FillTable(DbCommand command, ElectionsIncumbentsRemovedTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsIncumbentsRemovedTable table = new ElectionsIncumbentsRemovedTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsIncumbentsRemovedTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsIncumbentsRemovedTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsIncumbentsRemovedTable table, ElectionsIncumbentsRemovedTable.ColumnSet columnSet = ElectionsIncumbentsRemovedTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int UserSecurityMaxLength { get { return 12; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByElectionKey(DateTime newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyPoliticianKeyExists(String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByElectionKeyOfficeKeyPoliticianKey(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsIncumbentsRemovedTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsIncumbentsRemovedTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET ElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET LocalCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsIncumbentsRemoved SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsIncumbentsRemoved WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ElectionsIncumbentsRemovedTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsIncumbentsRemovedTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ElectionsIncumbentsRemoved()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsIncumbentsRemoved

    #region vote.ElectionsOffices

    public partial class ElectionsOfficesRow : DataRow
    {
      internal ElectionsOfficesRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String ElectionKeyFederal
      {
        get { return this["ElectionKeyFederal"] as String; }
        set { if (value == null) this["ElectionKeyFederal"] = DBNull.Value; else this["ElectionKeyFederal"] = value; }
      }

      public String ElectionKeyCounty
      {
        get { return this["ElectionKeyCounty"] as String; }
        set { if (value == null) this["ElectionKeyCounty"] = DBNull.Value; else this["ElectionKeyCounty"] = value; }
      }

      public String ElectionKeyLocal
      {
        get { return this["ElectionKeyLocal"] as String; }
        set { if (value == null) this["ElectionKeyLocal"] = DBNull.Value; else this["ElectionKeyLocal"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Boolean IsWinnerIdentified
      {
        get { return (Boolean) this["IsWinnerIdentified"]; }
        set { this["IsWinnerIdentified"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsOfficesTable : TypedTableBase<ElectionsOfficesRow>
    {
      public ElectionsOfficesRow this[int index] { get { return (ElectionsOfficesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsOfficesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsOfficesTable(); }

      new public ElectionsOfficesRow NewRow() { return (ElectionsOfficesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsOfficesRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsOfficesRow); }

      public void RemoveRow(ElectionsOfficesRow row) { this.Rows.Remove(row); }

      public ElectionsOfficesRow NewRow(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified)
      {
        ElectionsOfficesRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.ElectionKeyState = electionKeyState;
        row.ElectionKeyFederal = electionKeyFederal;
        row.ElectionKeyCounty = electionKeyCounty;
        row.ElectionKeyLocal = electionKeyLocal;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.OfficeLevel = officeLevel;
        row.IsWinnerIdentified = isWinnerIdentified;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified)
      {
        ElectionsOfficesRow row = NewRow(electionKey, officeKey, electionKeyState, electionKeyFederal, electionKeyCounty, electionKeyLocal, stateCode, countyCode, localCode, districtCode, officeLevel, isWinnerIdentified);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn ElectionKeyFederalColumn { get { return this.Columns["ElectionKeyFederal"]; } }

      public DataColumn ElectionKeyCountyColumn { get { return this.Columns["ElectionKeyCounty"]; } }

      public DataColumn ElectionKeyLocalColumn { get { return this.Columns["ElectionKeyLocal"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn IsWinnerIdentifiedColumn { get { return this.Columns["IsWinnerIdentified"]; } }

      public enum ColumnSet { All, OfficeKeys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyFederal", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyCounty", typeof(String));
        _column.MaxLength = 15;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyLocal", typeof(String));
        _column.MaxLength = 17;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinnerIdentified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsOfficesTable() : this(ColumnSet.All) { }

      public ElectionsOfficesTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsOffices";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKeys:
            InitOfficeKeysColumns();
            break;
        }
      }

      protected ElectionsOfficesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsOffices
    {
      public const string TableName = "ElectionsOffices";

      public enum Column { ElectionKey, OfficeKey, ElectionKeyState, ElectionKeyFederal, ElectionKeyCounty, ElectionKeyLocal, StateCode, CountyCode, LocalCode, DistrictCode, OfficeLevel, IsWinnerIdentified }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.ElectionKeyFederal, "ElectionKeyFederal" },
        { Column.ElectionKeyCounty, "ElectionKeyCounty" },
        { Column.ElectionKeyLocal, "ElectionKeyLocal" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.IsWinnerIdentified, "IsWinnerIdentified" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 officeLevel, Boolean isWinnerIdentified, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsOffices (ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified) VALUES (@ElectionKey,@OfficeKey,@ElectionKeyState,@ElectionKeyFederal,@ElectionKeyCounty,@ElectionKeyLocal,@StateCode,@CountyCode,@LocalCode,@DistrictCode,@OfficeLevel,@IsWinnerIdentified)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyFederal", electionKeyFederal);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyCounty", electionKeyCounty);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyLocal", electionKeyLocal);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "IsWinnerIdentified", isWinnerIdentified);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices";
        }
      }

      public static ElectionsOfficesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static ElectionsOfficesTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsOfficesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsOfficesTable FillTable(DbCommand command, ElectionsOfficesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsOfficesTable table = new ElectionsOfficesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsOfficesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsOfficesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsOfficesTable table, ElectionsOfficesTable.ColumnSet columnSet = ElectionsOfficesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string ElectionKeyFederalColumnName { get { return "ElectionKeyFederal"; } }

      public static string ElectionKeyCountyColumnName { get { return "ElectionKeyCounty"; } }

      public static string ElectionKeyLocalColumnName { get { return "ElectionKeyLocal"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string IsWinnerIdentifiedColumnName { get { return "IsWinnerIdentified"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int ElectionKeyFederalMaxLength { get { return 12; } }

      public static int ElectionKeyCountyMaxLength { get { return 15; } }

      public static int ElectionKeyLocalMaxLength { get { return 17; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyCounty=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyLocal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyExists(String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByElectionKeyOfficeKey(Column _column, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsOfficesTable GetDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLevel,IsWinnerIdentified FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByElectionKeyOfficeKey(Int32 newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET OfficeLevel=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerIdentifiedByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET IsWinnerIdentified=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKey(Column _column, object newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsOffices SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsOffices WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeysCommandText
      {
        get
        {
          return "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices";
        }
      }

      public static ElectionsOfficesTable GetAllOfficeKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.OfficeKeys);
      }

      public static void UpdateOfficeKeys(ElectionsOfficesTable table)
      {
        UpdateOfficeKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKeys(ElectionsOfficesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsOfficesTable.ColumnSet.OfficeKeys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsOfficesTable GetOfficeKeysDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,DistrictCode,OfficeLevel FROM ElectionsOffices WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsOfficesTable.ColumnSet.OfficeKeys);
      }

      public static ElectionsOfficesTable GetOfficeKeysData(String electionKey, int commandTimeout = -1)
      {
        return GetOfficeKeysDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ElectionsOfficesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsOfficesTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsOfficesTable.ColumnSet.OfficeKeys:
            return SelectOfficeKeysCommandText;

          default:
            return null;
        }
      }

      static ElectionsOffices()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsOffices

    #region vote.ElectionsPoliticians

    public partial class ElectionsPoliticiansRow : DataRow
    {
      internal ElectionsPoliticiansRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String ElectionKeyFederal
      {
        get { return this["ElectionKeyFederal"] as String; }
        set { if (value == null) this["ElectionKeyFederal"] = DBNull.Value; else this["ElectionKeyFederal"] = value; }
      }

      public String ElectionKeyCounty
      {
        get { return this["ElectionKeyCounty"] as String; }
        set { if (value == null) this["ElectionKeyCounty"] = DBNull.Value; else this["ElectionKeyCounty"] = value; }
      }

      public String ElectionKeyLocal
      {
        get { return this["ElectionKeyLocal"] as String; }
        set { if (value == null) this["ElectionKeyLocal"] = DBNull.Value; else this["ElectionKeyLocal"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Int32 OrderOnBallot
      {
        get { return (Int32) this["OrderOnBallot"]; }
        set { this["OrderOnBallot"] = value; }
      }

      public Boolean IsWinner
      {
        get { return (Boolean) this["IsWinner"]; }
        set { this["IsWinner"] = value; }
      }

      public Boolean IsIncumbent
      {
        get { return (Boolean) this["IsIncumbent"]; }
        set { this["IsIncumbent"] = value; }
      }

      public Boolean AdvanceToRunoff
      {
        get { return (Boolean) this["AdvanceToRunoff"]; }
        set { this["AdvanceToRunoff"] = value; }
      }
    }

    [Serializable]
    public partial class ElectionsPoliticiansTable : TypedTableBase<ElectionsPoliticiansRow>
    {
      public ElectionsPoliticiansRow this[int index] { get { return (ElectionsPoliticiansRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ElectionsPoliticiansRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ElectionsPoliticiansTable(); }

      new public ElectionsPoliticiansRow NewRow() { return (ElectionsPoliticiansRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ElectionsPoliticiansRow(rb); }

      protected override Type GetRowType()
      { return typeof(ElectionsPoliticiansRow); }

      public void RemoveRow(ElectionsPoliticiansRow row) { this.Rows.Remove(row); }

      public ElectionsPoliticiansRow NewRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff)
      {
        ElectionsPoliticiansRow row = NewRow();
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.ElectionKeyState = electionKeyState;
        row.ElectionKeyFederal = electionKeyFederal;
        row.ElectionKeyCounty = electionKeyCounty;
        row.ElectionKeyLocal = electionKeyLocal;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.OrderOnBallot = orderOnBallot;
        row.IsWinner = isWinner;
        row.IsIncumbent = isIncumbent;
        row.AdvanceToRunoff = advanceToRunoff;
        return row;
      }

      public void AddRow(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff)
      {
        ElectionsPoliticiansRow row = NewRow(electionKey, officeKey, politicianKey, runningMateKey, electionKeyState, electionKeyFederal, electionKeyCounty, electionKeyLocal, stateCode, countyCode, localCode, districtCode, orderOnBallot, isWinner, isIncumbent, advanceToRunoff);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn ElectionKeyFederalColumn { get { return this.Columns["ElectionKeyFederal"]; } }

      public DataColumn ElectionKeyCountyColumn { get { return this.Columns["ElectionKeyCounty"]; } }

      public DataColumn ElectionKeyLocalColumn { get { return this.Columns["ElectionKeyLocal"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn OrderOnBallotColumn { get { return this.Columns["OrderOnBallot"]; } }

      public DataColumn IsWinnerColumn { get { return this.Columns["IsWinner"]; } }

      public DataColumn IsIncumbentColumn { get { return this.Columns["IsIncumbent"]; } }

      public DataColumn AdvanceToRunoffColumn { get { return this.Columns["AdvanceToRunoff"]; } }

      public enum ColumnSet { All, OfficeKey, Cache, Winners }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyFederal", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyCounty", typeof(String));
        _column.MaxLength = 15;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyLocal", typeof(String));
        _column.MaxLength = 17;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdvanceToRunoff", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitWinnersColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsWinner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdvanceToRunoff", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ElectionsPoliticiansTable() : this(ColumnSet.All) { }

      public ElectionsPoliticiansTable(ColumnSet columnSet)
      {
        this.TableName = "ElectionsPoliticians";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKey:
            InitOfficeKeyColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Winners:
            InitWinnersColumns();
            break;
        }
      }

      protected ElectionsPoliticiansTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ElectionsPoliticians
    {
      public const string TableName = "ElectionsPoliticians";

      public enum Column { ElectionKey, OfficeKey, PoliticianKey, RunningMateKey, ElectionKeyState, ElectionKeyFederal, ElectionKeyCounty, ElectionKeyLocal, StateCode, CountyCode, LocalCode, DistrictCode, OrderOnBallot, IsWinner, IsIncumbent, AdvanceToRunoff }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.ElectionKeyFederal, "ElectionKeyFederal" },
        { Column.ElectionKeyCounty, "ElectionKeyCounty" },
        { Column.ElectionKeyLocal, "ElectionKeyLocal" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.OrderOnBallot, "OrderOnBallot" },
        { Column.IsWinner, "IsWinner" },
        { Column.IsIncumbent, "IsIncumbent" },
        { Column.AdvanceToRunoff, "AdvanceToRunoff" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String officeKey, String politicianKey, String runningMateKey, String electionKeyState, String electionKeyFederal, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, String districtCode, Int32 orderOnBallot, Boolean isWinner, Boolean isIncumbent, Boolean advanceToRunoff, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO ElectionsPoliticians (ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff) VALUES (@ElectionKey,@OfficeKey,@PoliticianKey,@RunningMateKey,@ElectionKeyState,@ElectionKeyFederal,@ElectionKeyCounty,@ElectionKeyLocal,@StateCode,@CountyCode,@LocalCode,@DistrictCode,@OrderOnBallot,@IsWinner,@IsIncumbent,@AdvanceToRunoff)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyFederal", electionKeyFederal);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyCounty", electionKeyCounty);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyLocal", electionKeyLocal);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        VoteDb.AddCommandParameter(cmd, "IsWinner", isWinner);
        VoteDb.AddCommandParameter(cmd, "IsIncumbent", isIncumbent);
        VoteDb.AddCommandParameter(cmd, "AdvanceToRunoff", advanceToRunoff);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static ElectionsPoliticiansTable FillTable(DbCommand command)
      {
        return FillTable(command, ElectionsPoliticiansTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ElectionsPoliticiansTable FillTable(DbCommand command, ElectionsPoliticiansTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ElectionsPoliticiansTable table = new ElectionsPoliticiansTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ElectionsPoliticiansTable table, ElectionsPoliticiansTable.ColumnSet columnSet = ElectionsPoliticiansTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string ElectionKeyFederalColumnName { get { return "ElectionKeyFederal"; } }

      public static string ElectionKeyCountyColumnName { get { return "ElectionKeyCounty"; } }

      public static string ElectionKeyLocalColumnName { get { return "ElectionKeyLocal"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string OrderOnBallotColumnName { get { return "OrderOnBallot"; } }

      public static string IsWinnerColumnName { get { return "IsWinner"; } }

      public static string IsIncumbentColumnName { get { return "IsIncumbent"; } }

      public static string AdvanceToRunoffColumnName { get { return "AdvanceToRunoff"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int ElectionKeyFederalMaxLength { get { return 12; } }

      public static int ElectionKeyCountyMaxLength { get { return 15; } }

      public static int ElectionKeyLocalMaxLength { get { return 17; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKeyOfficeKey(Column _column, String electionKey, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKey(String newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKeyOfficeKey(Int32 newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByElectionKeyOfficeKey(Boolean newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKey(Column _column, object newValue, String electionKey, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyCounty=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyLocal=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyOfficeKeyPoliticianKeyExists(String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RunningMateKey FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyFederal FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyCountyByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyCounty FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyLocalByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyLocal FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Int32 GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      private static Int32? _GetOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      private static Boolean? _GetIsWinnerByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsWinner FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      private static Boolean? _GetIsIncumbentByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbent FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey)
      {
        return _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, null);
      }

      public static Boolean GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean defaultValue)
      {
        return _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(electionKey, officeKey, politicianKey, defaultValue).Value;
      }

      private static Boolean? _GetAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ElectionsPoliticiansTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,ElectionKeyState,ElectionKeyFederal,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,DistrictCode,OrderOnBallot,IsWinner,IsIncumbent,AdvanceToRunoff FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyState=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyFederalByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyFederal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyCounty=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET ElectionKeyLocal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET LocalCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET OrderOnBallot=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsWinnerByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsWinner=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET IsIncumbent=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdvanceToRunoffByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET AdvanceToRunoff=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE ElectionsPoliticians SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeyCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllOfficeKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static void UpdateOfficeKey(ElectionsPoliticiansTable table)
      {
        UpdateOfficeKey(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKey(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.OfficeKey, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyData(String politicianKey, int commandTimeout = -1)
      {
        return GetOfficeKeyDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static ElectionsPoliticiansTable GetOfficeKeyDataByRunningMateKey(String runningMateKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey FROM ElectionsPoliticians WHERE RunningMateKey=@RunningMateKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.OfficeKey);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ElectionsPoliticiansTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetCacheDataByElectionKeyOfficeKey(String electionKey, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,OrderOnBallot,IsIncumbent FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey ORDER BY OrderOnBallot";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Cache);
      }

      public static string SelectWinnersCommandText
      {
        get
        {
          return "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians";
        }
      }

      public static ElectionsPoliticiansTable GetAllWinnersData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Winners);
      }

      public static void UpdateWinners(ElectionsPoliticiansTable table)
      {
        UpdateWinners(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateWinners(ElectionsPoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ElectionsPoliticiansTable.ColumnSet.Winners, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ElectionsPoliticiansTable GetWinnersDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,OfficeKey,PoliticianKey,RunningMateKey,IsWinner,AdvanceToRunoff FROM ElectionsPoliticians WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ElectionsPoliticiansTable.ColumnSet.Winners);
      }

      public static ElectionsPoliticiansTable GetWinnersData(String electionKey, int commandTimeout = -1)
      {
        return GetWinnersDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ElectionsPoliticiansTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ElectionsPoliticiansTable.ColumnSet.All:
            return SelectAllCommandText;

          case ElectionsPoliticiansTable.ColumnSet.OfficeKey:
            return SelectOfficeKeyCommandText;

          case ElectionsPoliticiansTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ElectionsPoliticiansTable.ColumnSet.Winners:
            return SelectWinnersCommandText;

          default:
            return null;
        }
      }

      static ElectionsPoliticians()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.ElectionsPoliticians

    #region vote.EmailBatches

    public partial class EmailBatchesRow : DataRow
    {
      internal EmailBatchesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }

      public String FromAddress
      {
        get { return this["FromAddress"] as String; }
        set { if (value == null) this["FromAddress"] = DBNull.Value; else this["FromAddress"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Template
      {
        get { return this["Template"] as String; }
        set { if (value == null) this["Template"] = DBNull.Value; else this["Template"] = value; }
      }

      public DateTime CreationTime
      {
        get { return (DateTime) this["CreationTime"]; }
        set { this["CreationTime"] = value; }
      }

      public Boolean IsClosed
      {
        get { return (Boolean) this["IsClosed"]; }
        set { this["IsClosed"] = value; }
      }
    }

    [Serializable]
    public partial class EmailBatchesTable : TypedTableBase<EmailBatchesRow>
    {
      public EmailBatchesRow this[int index] { get { return (EmailBatchesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailBatchesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailBatchesTable(); }

      new public EmailBatchesRow NewRow() { return (EmailBatchesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailBatchesRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailBatchesRow); }

      public void RemoveRow(EmailBatchesRow row) { this.Rows.Remove(row); }

      public EmailBatchesRow NewRow(Int32 id, String name, String description, String fromAddress, String subject, String template, DateTime creationTime, Boolean isClosed)
      {
        EmailBatchesRow row = NewRow();
        row.Id = id;
        row.Name = name;
        row.Description = description;
        row.FromAddress = fromAddress;
        row.Subject = subject;
        row.Template = template;
        row.CreationTime = creationTime;
        row.IsClosed = isClosed;
        return row;
      }

      public void AddRow(Int32 id, String name, String description, String fromAddress, String subject, String template, DateTime creationTime, Boolean isClosed)
      {
        EmailBatchesRow row = NewRow(id, name, description, fromAddress, subject, template, creationTime, isClosed);
        AddRow(row);
      }

      public EmailBatchesRow NewRow(String name, String description, String fromAddress, String subject, String template, DateTime creationTime, Boolean isClosed)
      {
        EmailBatchesRow row = NewRow();
        row.Name = name;
        row.Description = description;
        row.FromAddress = fromAddress;
        row.Subject = subject;
        row.Template = template;
        row.CreationTime = creationTime;
        row.IsClosed = isClosed;
        return row;
      }

      public void AddRow(String name, String description, String fromAddress, String subject, String template, DateTime creationTime, Boolean isClosed)
      {
        EmailBatchesRow row = NewRow(name, description, fromAddress, subject, template, creationTime, isClosed);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public DataColumn FromAddressColumn { get { return this.Columns["FromAddress"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn TemplateColumn { get { return this.Columns["Template"]; } }

      public DataColumn CreationTimeColumn { get { return this.Columns["CreationTime"]; } }

      public DataColumn IsClosedColumn { get { return this.Columns["IsClosed"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Description", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FromAddress", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Template", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CreationTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsClosed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public EmailBatchesTable() : this(ColumnSet.All) { }

      public EmailBatchesTable(ColumnSet columnSet)
      {
        this.TableName = "EmailBatches";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailBatchesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailBatches
    {
      public const string TableName = "EmailBatches";

      public enum Column { Id, Name, Description, FromAddress, Subject, Template, CreationTime, IsClosed }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Name, "Name" },
        { Column.Description, "Description" },
        { Column.FromAddress, "FromAddress" },
        { Column.Subject, "Subject" },
        { Column.Template, "Template" },
        { Column.CreationTime, "CreationTime" },
        { Column.IsClosed, "IsClosed" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailBatches";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Name,Description,FromAddress,Subject,Template,CreationTime,IsClosed FROM EmailBatches";
        }
      }

      public static EmailBatchesTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailBatchesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailBatchesTable FillTable(DbCommand command, EmailBatchesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailBatchesTable table = new EmailBatchesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static string FromAddressColumnName { get { return "FromAddress"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string TemplateColumnName { get { return "Template"; } }

      public static string CreationTimeColumnName { get { return "CreationTime"; } }

      public static string IsClosedColumnName { get { return "IsClosed"; } }

      public static int NameMaxLength { get { return 100; } }

      public static int DescriptionMaxLength { get { return int.MaxValue; } }

      public static int FromAddressMaxLength { get { return 100; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int TemplateMaxLength { get { return int.MaxValue; } }

      public static string GetSelectCommandText(EmailBatchesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailBatchesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailBatches()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailBatches

    #region vote.EmailMaster

    public partial class EmailMasterRow : DataRow
    {
      internal EmailMasterRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String ReturnAddress
      {
        get { return this["ReturnAddress"] as String; }
        set { if (value == null) this["ReturnAddress"] = DBNull.Value; else this["ReturnAddress"] = value; }
      }

      public Int32 QuotaSafetyPercentage
      {
        get { return (Int32) this["QuotaSafetyPercentage"]; }
        set { this["QuotaSafetyPercentage"] = value; }
      }

      public String AwsAccessKeyId
      {
        get { return this["AwsAccessKeyId"] as String; }
        set { if (value == null) this["AwsAccessKeyId"] = DBNull.Value; else this["AwsAccessKeyId"] = value; }
      }

      public String AwsSecretKeyId
      {
        get { return this["AwsSecretKeyId"] as String; }
        set { if (value == null) this["AwsSecretKeyId"] = DBNull.Value; else this["AwsSecretKeyId"] = value; }
      }
    }

    [Serializable]
    public partial class EmailMasterTable : TypedTableBase<EmailMasterRow>
    {
      public EmailMasterRow this[int index] { get { return (EmailMasterRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailMasterRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailMasterTable(); }

      new public EmailMasterRow NewRow() { return (EmailMasterRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailMasterRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailMasterRow); }

      public void RemoveRow(EmailMasterRow row) { this.Rows.Remove(row); }

      public EmailMasterRow NewRow(Int32 id, String returnAddress, Int32 quotaSafetyPercentage, String awsAccessKeyId, String awsSecretKeyId)
      {
        EmailMasterRow row = NewRow();
        row.Id = id;
        row.ReturnAddress = returnAddress;
        row.QuotaSafetyPercentage = quotaSafetyPercentage;
        row.AwsAccessKeyId = awsAccessKeyId;
        row.AwsSecretKeyId = awsSecretKeyId;
        return row;
      }

      public void AddRow(Int32 id, String returnAddress, Int32 quotaSafetyPercentage, String awsAccessKeyId, String awsSecretKeyId)
      {
        EmailMasterRow row = NewRow(id, returnAddress, quotaSafetyPercentage, awsAccessKeyId, awsSecretKeyId);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn ReturnAddressColumn { get { return this.Columns["ReturnAddress"]; } }

      public DataColumn QuotaSafetyPercentageColumn { get { return this.Columns["QuotaSafetyPercentage"]; } }

      public DataColumn AwsAccessKeyIdColumn { get { return this.Columns["AwsAccessKeyId"]; } }

      public DataColumn AwsSecretKeyIdColumn { get { return this.Columns["AwsSecretKeyId"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReturnAddress", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuotaSafetyPercentage", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AwsAccessKeyId", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AwsSecretKeyId", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public EmailMasterTable() : this(ColumnSet.All) { }

      public EmailMasterTable(ColumnSet columnSet)
      {
        this.TableName = "EmailMaster";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailMasterTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailMaster
    {
      public const string TableName = "EmailMaster";

      public enum Column { Id, ReturnAddress, QuotaSafetyPercentage, AwsAccessKeyId, AwsSecretKeyId }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.ReturnAddress, "ReturnAddress" },
        { Column.QuotaSafetyPercentage, "QuotaSafetyPercentage" },
        { Column.AwsAccessKeyId, "AwsAccessKeyId" },
        { Column.AwsSecretKeyId, "AwsSecretKeyId" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,ReturnAddress,QuotaSafetyPercentage,AwsAccessKeyId,AwsSecretKeyId FROM EmailMaster";
        }
      }

      public static EmailMasterTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,ReturnAddress,QuotaSafetyPercentage,AwsAccessKeyId,AwsSecretKeyId FROM EmailMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, EmailMasterTable.ColumnSet.All);
      }

      public static EmailMasterTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailMasterTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailMasterTable FillTable(DbCommand command, EmailMasterTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailMasterTable table = new EmailMasterTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string ReturnAddressColumnName { get { return "ReturnAddress"; } }

      public static string QuotaSafetyPercentageColumnName { get { return "QuotaSafetyPercentage"; } }

      public static string AwsAccessKeyIdColumnName { get { return "AwsAccessKeyId"; } }

      public static string AwsSecretKeyIdColumnName { get { return "AwsSecretKeyId"; } }

      public static int ReturnAddressMaxLength { get { return 100; } }

      public static int AwsAccessKeyIdMaxLength { get { return 30; } }

      public static int AwsSecretKeyIdMaxLength { get { return 60; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailMaster";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailMaster";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static string GetSelectCommandText(EmailMasterTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailMasterTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailMaster()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailMaster

    #region vote.EmailQueue

    public partial class EmailQueueRow : DataRow
    {
      internal EmailQueueRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 EmailBatchId
      {
        get { return (Int32) this["EmailBatchId"]; }
        set { this["EmailBatchId"] = value; }
      }

      public String ToAddress
      {
        get { return this["ToAddress"] as String; }
        set { if (value == null) this["ToAddress"] = DBNull.Value; else this["ToAddress"] = value; }
      }

      public DateTime? SentTime
      {
        get { if (this.IsNull("SentTime")) return null; else return (DateTime) this["SentTime"]; }
        set { if (value.HasValue) this["SentTime"] = value.Value; else this["SentTime"] = DBNull.Value; }
      }

      public Boolean Rejected
      {
        get { return (Boolean) this["Rejected"]; }
        set { this["Rejected"] = value; }
      }

      public String RejectedReason
      {
        get { return this["RejectedReason"] as String; }
        set { if (value == null) this["RejectedReason"] = DBNull.Value; else this["RejectedReason"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }
    }

    [Serializable]
    public partial class EmailQueueTable : TypedTableBase<EmailQueueRow>
    {
      public EmailQueueRow this[int index] { get { return (EmailQueueRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailQueueRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailQueueTable(); }

      new public EmailQueueRow NewRow() { return (EmailQueueRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailQueueRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailQueueRow); }

      public void RemoveRow(EmailQueueRow row) { this.Rows.Remove(row); }

      public EmailQueueRow NewRow(Int32 id, Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county)
      {
        EmailQueueRow row = NewRow();
        row.Id = id;
        row.EmailBatchId = emailBatchId;
        row.ToAddress = toAddress;
        row.SentTime = sentTime;
        row.Rejected = rejected;
        row.RejectedReason = rejectedReason;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        return row;
      }

      public void AddRow(Int32 id, Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county)
      {
        EmailQueueRow row = NewRow(id, emailBatchId, toAddress, sentTime, rejected, rejectedReason, firstName, lastName, address, city, stateCode, zip5, zip4, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county);
        AddRow(row);
      }

      public EmailQueueRow NewRow(Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county)
      {
        EmailQueueRow row = NewRow();
        row.EmailBatchId = emailBatchId;
        row.ToAddress = toAddress;
        row.SentTime = sentTime;
        row.Rejected = rejected;
        row.RejectedReason = rejectedReason;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        return row;
      }

      public void AddRow(Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county)
      {
        EmailQueueRow row = NewRow(emailBatchId, toAddress, sentTime, rejected, rejectedReason, firstName, lastName, address, city, stateCode, zip5, zip4, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn EmailBatchIdColumn { get { return this.Columns["EmailBatchId"]; } }

      public DataColumn ToAddressColumn { get { return this.Columns["ToAddress"]; } }

      public DataColumn SentTimeColumn { get { return this.Columns["SentTime"]; } }

      public DataColumn RejectedColumn { get { return this.Columns["Rejected"]; } }

      public DataColumn RejectedReasonColumn { get { return this.Columns["RejectedReason"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailBatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ToAddress", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SentTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("Rejected", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RejectedReason", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public EmailQueueTable() : this(ColumnSet.All) { }

      public EmailQueueTable(ColumnSet columnSet)
      {
        this.TableName = "EmailQueue";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailQueueTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailQueue
    {
      public const string TableName = "EmailQueue";

      public enum Column { Id, EmailBatchId, ToAddress, SentTime, Rejected, RejectedReason, FirstName, LastName, Address, City, StateCode, Zip5, Zip4, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.EmailBatchId, "EmailBatchId" },
        { Column.ToAddress, "ToAddress" },
        { Column.SentTime, "SentTime" },
        { Column.Rejected, "Rejected" },
        { Column.RejectedReason, "RejectedReason" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailQueue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County FROM EmailQueue";
        }
      }

      public static EmailQueueTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County FROM EmailQueue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, EmailQueueTable.ColumnSet.All);
      }

      public static EmailQueueReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        return new EmailQueueReader(cmd.ExecuteReader(), cn);
      }

      public static EmailQueueTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailQueueTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailQueueTable FillTable(DbCommand command, EmailQueueTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailQueueTable table = new EmailQueueTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(EmailQueueTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, EmailQueueTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(EmailQueueTable table, EmailQueueTable.ColumnSet columnSet = EmailQueueTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string EmailBatchIdColumnName { get { return "EmailBatchId"; } }

      public static string ToAddressColumnName { get { return "ToAddress"; } }

      public static string SentTimeColumnName { get { return "SentTime"; } }

      public static string RejectedColumnName { get { return "Rejected"; } }

      public static string RejectedReasonColumnName { get { return "RejectedReason"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static int ToAddressMaxLength { get { return 100; } }

      public static int RejectedReasonMaxLength { get { return int.MaxValue; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int AddressMaxLength { get { return 80; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int CongressionalDistrictMaxLength { get { return 2; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int CountByEmailBatchId(Int32 emailBatchId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailQueue WHERE EmailBatchId=@EmailBatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmailBatchId(Column _column, Int32 emailBatchId)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailQueue WHERE EmailBatchId=@EmailBatchId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailQueueTable GetDataByEmailBatchId(Int32 emailBatchId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County FROM EmailQueue WHERE EmailBatchId=@EmailBatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        return FillTable(cmd, EmailQueueTable.ColumnSet.All);
      }

      public static EmailQueueReader GetDataReaderByEmailBatchId(Int32 emailBatchId, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(EmailQueueTable.ColumnSet.All) + " WHERE EmailBatchId=@EmailBatchId";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        return new EmailQueueReader(cmd.ExecuteReader(), cn);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailQueue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailQueue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailQueueTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County FROM EmailQueue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, EmailQueueTable.ColumnSet.All);
      }

      public static EmailQueueReader GetDataReaderById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(EmailQueueTable.ColumnSet.All) + " WHERE Id=@Id";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return new EmailQueueReader(cmd.ExecuteReader(), cn);
      }

      public static bool EmailBatchIdToAddressExists(Int32 emailBatchId, String toAddress)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailQueue WHERE EmailBatchId=@EmailBatchId AND ToAddress=@ToAddress";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        VoteDb.AddCommandParameter(cmd, "ToAddress", toAddress);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByEmailBatchIdToAddress(Column _column, Int32 emailBatchId, String toAddress)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailQueue WHERE EmailBatchId=@EmailBatchId AND ToAddress=@ToAddress";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        VoteDb.AddCommandParameter(cmd, "ToAddress", toAddress);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailQueueTable GetDataByEmailBatchIdToAddress(Int32 emailBatchId, String toAddress, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County FROM EmailQueue WHERE EmailBatchId=@EmailBatchId AND ToAddress=@ToAddress";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        VoteDb.AddCommandParameter(cmd, "ToAddress", toAddress);
        return FillTable(cmd, EmailQueueTable.ColumnSet.All);
      }

      public static EmailQueueReader GetDataReaderByEmailBatchIdToAddress(Int32 emailBatchId, String toAddress, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(EmailQueueTable.ColumnSet.All) + " WHERE EmailBatchId=@EmailBatchId AND ToAddress=@ToAddress";
        DbConnection cn = VoteDb.GetOpenConnection();
        DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailBatchId", emailBatchId);
        VoteDb.AddCommandParameter(cmd, "ToAddress", toAddress);
        return new EmailQueueReader(cmd.ExecuteReader(), cn);
      }

      public static string GetSelectCommandText(EmailQueueTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailQueueTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailQueue()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class EmailQueueReader : DataReaderBase
    {
      public EmailQueueReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
      }

      public Int32 EmailBatchId
      {
        get { return (Int32) this["EmailBatchId"]; }
      }

      public String ToAddress
      {
        get { return this["ToAddress"] as String; }
      }

      public DateTime? SentTime
      {
        get { if (this.IsDBNull(GetOrdinal("SentTime"))) return null; else return (DateTime) this["SentTime"]; }
      }

      public Boolean Rejected
      {
        get { return (Boolean) this["Rejected"]; }
      }

      public String RejectedReason
      {
        get { return this["RejectedReason"] as String; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }
    }

    #endregion vote.EmailQueue

    #region vote.EmailQueueView

    public partial class EmailQueueViewRow : DataRow
    {
      internal EmailQueueViewRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 EmailBatchId
      {
        get { return (Int32) this["EmailBatchId"]; }
        set { this["EmailBatchId"] = value; }
      }

      public String ToAddress
      {
        get { return this["ToAddress"] as String; }
        set { if (value == null) this["ToAddress"] = DBNull.Value; else this["ToAddress"] = value; }
      }

      public DateTime? SentTime
      {
        get { if (this.IsNull("SentTime")) return null; else return (DateTime) this["SentTime"]; }
        set { if (value.HasValue) this["SentTime"] = value.Value; else this["SentTime"] = DBNull.Value; }
      }

      public Boolean Rejected
      {
        get { return (Boolean) this["Rejected"]; }
        set { this["Rejected"] = value; }
      }

      public String RejectedReason
      {
        get { return this["RejectedReason"] as String; }
        set { if (value == null) this["RejectedReason"] = DBNull.Value; else this["RejectedReason"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public Boolean IsClosed
      {
        get { return (Boolean) this["IsClosed"]; }
        set { this["IsClosed"] = value; }
      }

      public String FromAddress
      {
        get { return this["FromAddress"] as String; }
        set { if (value == null) this["FromAddress"] = DBNull.Value; else this["FromAddress"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Template
      {
        get { return this["Template"] as String; }
        set { if (value == null) this["Template"] = DBNull.Value; else this["Template"] = value; }
      }
    }

    [Serializable]
    public partial class EmailQueueViewTable : TypedTableBase<EmailQueueViewRow>
    {
      public EmailQueueViewRow this[int index] { get { return (EmailQueueViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailQueueViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailQueueViewTable(); }

      new public EmailQueueViewRow NewRow() { return (EmailQueueViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailQueueViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailQueueViewRow); }

      public void RemoveRow(EmailQueueViewRow row) { this.Rows.Remove(row); }

      public EmailQueueViewRow NewRow(Int32 id, Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, Boolean isClosed, String fromAddress, String subject, String template)
      {
        EmailQueueViewRow row = NewRow();
        row.Id = id;
        row.EmailBatchId = emailBatchId;
        row.ToAddress = toAddress;
        row.SentTime = sentTime;
        row.Rejected = rejected;
        row.RejectedReason = rejectedReason;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Address = address;
        row.City = city;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.IsClosed = isClosed;
        row.FromAddress = fromAddress;
        row.Subject = subject;
        row.Template = template;
        return row;
      }

      public void AddRow(Int32 id, Int32 emailBatchId, String toAddress, DateTime? sentTime, Boolean rejected, String rejectedReason, String firstName, String lastName, String address, String city, String stateCode, String zip5, String zip4, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, Boolean isClosed, String fromAddress, String subject, String template)
      {
        EmailQueueViewRow row = NewRow(id, emailBatchId, toAddress, sentTime, rejected, rejectedReason, firstName, lastName, address, city, stateCode, zip5, zip4, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, isClosed, fromAddress, subject, template);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn EmailBatchIdColumn { get { return this.Columns["EmailBatchId"]; } }

      public DataColumn ToAddressColumn { get { return this.Columns["ToAddress"]; } }

      public DataColumn SentTimeColumn { get { return this.Columns["SentTime"]; } }

      public DataColumn RejectedColumn { get { return this.Columns["Rejected"]; } }

      public DataColumn RejectedReasonColumn { get { return this.Columns["RejectedReason"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn IsClosedColumn { get { return this.Columns["IsClosed"]; } }

      public DataColumn FromAddressColumn { get { return this.Columns["FromAddress"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn TemplateColumn { get { return this.Columns["Template"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailBatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ToAddress", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SentTime", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("Rejected", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RejectedReason", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsClosed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FromAddress", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Template", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public EmailQueueViewTable() : this(ColumnSet.All) { }

      public EmailQueueViewTable(ColumnSet columnSet)
      {
        this.TableName = "EmailQueueView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailQueueViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailQueueView
    {
      public const string TableName = "EmailQueueView";

      public enum Column { Id, EmailBatchId, ToAddress, SentTime, Rejected, RejectedReason, FirstName, LastName, Address, City, StateCode, Zip5, Zip4, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County, IsClosed, FromAddress, Subject, Template }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.EmailBatchId, "EmailBatchId" },
        { Column.ToAddress, "ToAddress" },
        { Column.SentTime, "SentTime" },
        { Column.Rejected, "Rejected" },
        { Column.RejectedReason, "RejectedReason" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Address, "Address" },
        { Column.City, "City" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" },
        { Column.IsClosed, "IsClosed" },
        { Column.FromAddress, "FromAddress" },
        { Column.Subject, "Subject" },
        { Column.Template, "Template" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailQueueView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,EmailBatchId,ToAddress,SentTime,Rejected,RejectedReason,FirstName,LastName,Address,City,StateCode,Zip5,Zip4,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,IsClosed,FromAddress,Subject,Template FROM EmailQueueView";
        }
      }

      public static EmailQueueViewTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailQueueViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailQueueViewTable FillTable(DbCommand command, EmailQueueViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailQueueViewTable table = new EmailQueueViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string EmailBatchIdColumnName { get { return "EmailBatchId"; } }

      public static string ToAddressColumnName { get { return "ToAddress"; } }

      public static string SentTimeColumnName { get { return "SentTime"; } }

      public static string RejectedColumnName { get { return "Rejected"; } }

      public static string RejectedReasonColumnName { get { return "RejectedReason"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string IsClosedColumnName { get { return "IsClosed"; } }

      public static string FromAddressColumnName { get { return "FromAddress"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string TemplateColumnName { get { return "Template"; } }

      public static int ToAddressMaxLength { get { return 100; } }

      public static int RejectedReasonMaxLength { get { return int.MaxValue; } }

      public static int FirstNameMaxLength { get { return 35; } }

      public static int LastNameMaxLength { get { return 35; } }

      public static int AddressMaxLength { get { return 80; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int CongressionalDistrictMaxLength { get { return 2; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int FromAddressMaxLength { get { return 100; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int TemplateMaxLength { get { return int.MaxValue; } }

      public static string GetSelectCommandText(EmailQueueViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailQueueViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailQueueView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailQueueView

    #region vote.EmailTemplates

    public partial class EmailTemplatesRow : DataRow
    {
      internal EmailTemplatesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }

      public String OwnerType
      {
        get { return this["OwnerType"] as String; }
        set { if (value == null) this["OwnerType"] = DBNull.Value; else this["OwnerType"] = value; }
      }

      public String Owner
      {
        get { return this["Owner"] as String; }
        set { if (value == null) this["Owner"] = DBNull.Value; else this["Owner"] = value; }
      }

      public Boolean IsPublic
      {
        get { return (Boolean) this["IsPublic"]; }
        set { this["IsPublic"] = value; }
      }

      public DateTime CreateTime
      {
        get { return (DateTime) this["CreateTime"]; }
        set { this["CreateTime"] = value; }
      }

      public DateTime LastUsedTime
      {
        get { return (DateTime) this["LastUsedTime"]; }
        set { this["LastUsedTime"] = value; }
      }

      public DateTime ModTime
      {
        get { return (DateTime) this["ModTime"]; }
        set { this["ModTime"] = value; }
      }

      public String Requirements
      {
        get { return this["Requirements"] as String; }
        set { if (value == null) this["Requirements"] = DBNull.Value; else this["Requirements"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Body
      {
        get { return this["Body"] as String; }
        set { if (value == null) this["Body"] = DBNull.Value; else this["Body"] = value; }
      }

      public String SelectRecipientOptions
      {
        get { return this["SelectRecipientOptions"] as String; }
        set { if (value == null) this["SelectRecipientOptions"] = DBNull.Value; else this["SelectRecipientOptions"] = value; }
      }

      public String EmailOptions
      {
        get { return this["EmailOptions"] as String; }
        set { if (value == null) this["EmailOptions"] = DBNull.Value; else this["EmailOptions"] = value; }
      }
    }

    [Serializable]
    public partial class EmailTemplatesTable : TypedTableBase<EmailTemplatesRow>
    {
      public EmailTemplatesRow this[int index] { get { return (EmailTemplatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(EmailTemplatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new EmailTemplatesTable(); }

      new public EmailTemplatesRow NewRow() { return (EmailTemplatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new EmailTemplatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(EmailTemplatesRow); }

      public void RemoveRow(EmailTemplatesRow row) { this.Rows.Remove(row); }

      public EmailTemplatesRow NewRow(Int32 id, String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions)
      {
        EmailTemplatesRow row = NewRow();
        row.Id = id;
        row.Name = name;
        row.OwnerType = ownerType;
        row.Owner = owner;
        row.IsPublic = isPublic;
        row.CreateTime = createTime;
        row.LastUsedTime = lastUsedTime;
        row.ModTime = modTime;
        row.Requirements = requirements;
        row.Subject = subject;
        row.Body = body;
        row.SelectRecipientOptions = selectRecipientOptions;
        row.EmailOptions = emailOptions;
        return row;
      }

      public void AddRow(Int32 id, String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions)
      {
        EmailTemplatesRow row = NewRow(id, name, ownerType, owner, isPublic, createTime, lastUsedTime, modTime, requirements, subject, body, selectRecipientOptions, emailOptions);
        AddRow(row);
      }

      public EmailTemplatesRow NewRow(String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions)
      {
        EmailTemplatesRow row = NewRow();
        row.Name = name;
        row.OwnerType = ownerType;
        row.Owner = owner;
        row.IsPublic = isPublic;
        row.CreateTime = createTime;
        row.LastUsedTime = lastUsedTime;
        row.ModTime = modTime;
        row.Requirements = requirements;
        row.Subject = subject;
        row.Body = body;
        row.SelectRecipientOptions = selectRecipientOptions;
        row.EmailOptions = emailOptions;
        return row;
      }

      public void AddRow(String name, String ownerType, String owner, Boolean isPublic, DateTime createTime, DateTime lastUsedTime, DateTime modTime, String requirements, String subject, String body, String selectRecipientOptions, String emailOptions)
      {
        EmailTemplatesRow row = NewRow(name, ownerType, owner, isPublic, createTime, lastUsedTime, modTime, requirements, subject, body, selectRecipientOptions, emailOptions);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public DataColumn OwnerTypeColumn { get { return this.Columns["OwnerType"]; } }

      public DataColumn OwnerColumn { get { return this.Columns["Owner"]; } }

      public DataColumn IsPublicColumn { get { return this.Columns["IsPublic"]; } }

      public DataColumn CreateTimeColumn { get { return this.Columns["CreateTime"]; } }

      public DataColumn LastUsedTimeColumn { get { return this.Columns["LastUsedTime"]; } }

      public DataColumn ModTimeColumn { get { return this.Columns["ModTime"]; } }

      public DataColumn RequirementsColumn { get { return this.Columns["Requirements"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn BodyColumn { get { return this.Columns["Body"]; } }

      public DataColumn SelectRecipientOptionsColumn { get { return this.Columns["SelectRecipientOptions"]; } }

      public DataColumn EmailOptionsColumn { get { return this.Columns["EmailOptions"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OwnerType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Owner", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPublic", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CreateTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastUsedTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ModTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Requirements", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Body", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SelectRecipientOptions", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailOptions", typeof(String));
        base.Columns.Add(_column);
      }

      public EmailTemplatesTable() : this(ColumnSet.All) { }

      public EmailTemplatesTable(ColumnSet columnSet)
      {
        this.TableName = "EmailTemplates";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected EmailTemplatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class EmailTemplates
    {
      public const string TableName = "EmailTemplates";

      public enum Column { Id, Name, OwnerType, Owner, IsPublic, CreateTime, LastUsedTime, ModTime, Requirements, Subject, Body, SelectRecipientOptions, EmailOptions }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Name, "Name" },
        { Column.OwnerType, "OwnerType" },
        { Column.Owner, "Owner" },
        { Column.IsPublic, "IsPublic" },
        { Column.CreateTime, "CreateTime" },
        { Column.LastUsedTime, "LastUsedTime" },
        { Column.ModTime, "ModTime" },
        { Column.Requirements, "Requirements" },
        { Column.Subject, "Subject" },
        { Column.Body, "Body" },
        { Column.SelectRecipientOptions, "SelectRecipientOptions" },
        { Column.EmailOptions, "EmailOptions" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions FROM EmailTemplates";
        }
      }

      public static EmailTemplatesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions FROM EmailTemplates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static EmailTemplatesTable FillTable(DbCommand command)
      {
        return FillTable(command, EmailTemplatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static EmailTemplatesTable FillTable(DbCommand command, EmailTemplatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          EmailTemplatesTable table = new EmailTemplatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(EmailTemplatesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, EmailTemplatesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(EmailTemplatesTable table, EmailTemplatesTable.ColumnSet columnSet = EmailTemplatesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static string OwnerTypeColumnName { get { return "OwnerType"; } }

      public static string OwnerColumnName { get { return "Owner"; } }

      public static string IsPublicColumnName { get { return "IsPublic"; } }

      public static string CreateTimeColumnName { get { return "CreateTime"; } }

      public static string LastUsedTimeColumnName { get { return "LastUsedTime"; } }

      public static string ModTimeColumnName { get { return "ModTime"; } }

      public static string RequirementsColumnName { get { return "Requirements"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string BodyColumnName { get { return "Body"; } }

      public static string SelectRecipientOptionsColumnName { get { return "SelectRecipientOptions"; } }

      public static string EmailOptionsColumnName { get { return "EmailOptions"; } }

      public static int NameMaxLength { get { return 255; } }

      public static int OwnerTypeMaxLength { get { return 1; } }

      public static int OwnerMaxLength { get { return 200; } }

      public static int RequirementsMaxLength { get { return 150; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int BodyMaxLength { get { return int.MaxValue; } }

      public static int SelectRecipientOptionsMaxLength { get { return int.MaxValue; } }

      public static int EmailOptionsMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailTemplates WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailTemplatesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Name=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET OwnerType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Owner=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPublicById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET IsPublic=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET CreateTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUsedTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET LastUsedTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateModTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET ModTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequirementsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Requirements=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Subject=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET Body=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectRecipientOptionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET SelectRecipientOptions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailOptionsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailOptions=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE EmailTemplates SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM EmailTemplates WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool NameOwnerTypeOwnerExists(String name, String ownerType, String owner)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByNameOwnerTypeOwner(Column _column, String name, String ownerType, String owner)
      {
        object result;
        string cmdText = "SELECT {0} FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static EmailTemplatesTable GetDataByNameOwnerTypeOwner(String name, String ownerType, String owner, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Name,OwnerType,Owner,IsPublic,CreateTime,LastUsedTime,ModTime,Requirements,Subject,Body,SelectRecipientOptions,EmailOptions FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        return FillTable(cmd, EmailTemplatesTable.ColumnSet.All);
      }

      public static int UpdateIdByNameOwnerTypeOwner(Int32 newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Id=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNameByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Name=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerTypeByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET OwnerType=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOwnerByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Owner=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPublicByNameOwnerTypeOwner(Boolean newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET IsPublic=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreateTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET CreateTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUsedTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET LastUsedTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateModTimeByNameOwnerTypeOwner(DateTime newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET ModTime=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequirementsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Requirements=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Subject=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET Body=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectRecipientOptionsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET SelectRecipientOptions=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailOptionsByNameOwnerTypeOwner(String newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET EmailOptions=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByNameOwnerTypeOwner(Column _column, object newValue, String name, String ownerType, String owner)
      {
        string cmdText = "UPDATE EmailTemplates SET {0}=@newValue WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByNameOwnerTypeOwner(String name, String ownerType, String owner, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM EmailTemplates WHERE Name=@Name AND OwnerType=@OwnerType AND Owner=@Owner";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Name", name);
        VoteDb.AddCommandParameter(cmd, "OwnerType", ownerType);
        VoteDb.AddCommandParameter(cmd, "Owner", owner);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(EmailTemplatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case EmailTemplatesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static EmailTemplates()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.EmailTemplates

    #region vote.Issues

    public partial class IssuesRow : DataRow
    {
      internal IssuesRow(DataRowBuilder rb) : base(rb) {}

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 IssueOrder
      {
        get { return (Int32) this["IssueOrder"]; }
        set { this["IssueOrder"] = value; }
      }

      public String Issue
      {
        get { return this["Issue"] as String; }
        set { if (value == null) this["Issue"] = DBNull.Value; else this["Issue"] = value; }
      }

      public String IssueLevel
      {
        get { return this["IssueLevel"] as String; }
        set { if (value == null) this["IssueLevel"] = DBNull.Value; else this["IssueLevel"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public Boolean IsIssueOmit
      {
        get { return (Boolean) this["IsIssueOmit"]; }
        set { this["IsIssueOmit"] = value; }
      }
    }

    [Serializable]
    public partial class IssuesTable : TypedTableBase<IssuesRow>
    {
      public IssuesRow this[int index] { get { return (IssuesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(IssuesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new IssuesTable(); }

      new public IssuesRow NewRow() { return (IssuesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new IssuesRow(rb); }

      protected override Type GetRowType()
      { return typeof(IssuesRow); }

      public void RemoveRow(IssuesRow row) { this.Rows.Remove(row); }

      public IssuesRow NewRow(String issueKey, Int32 issueOrder, String issue, String issueLevel, String stateCode, String countyCode, String localCode, Boolean isIssueOmit)
      {
        IssuesRow row = NewRow();
        row.IssueKey = issueKey;
        row.IssueOrder = issueOrder;
        row.Issue = issue;
        row.IssueLevel = issueLevel;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.IsIssueOmit = isIssueOmit;
        return row;
      }

      public void AddRow(String issueKey, Int32 issueOrder, String issue, String issueLevel, String stateCode, String countyCode, String localCode, Boolean isIssueOmit)
      {
        IssuesRow row = NewRow(issueKey, issueOrder, issue, issueLevel, stateCode, countyCode, localCode, isIssueOmit);
        AddRow(row);
      }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn IssueOrderColumn { get { return this.Columns["IssueOrder"]; } }

      public DataColumn IssueColumn { get { return this.Columns["Issue"]; } }

      public DataColumn IssueLevelColumn { get { return this.Columns["IssueLevel"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn IsIssueOmitColumn { get { return this.Columns["IsIssueOmit"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueLevel", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIssueOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Issue", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public IssuesTable() : this(ColumnSet.All) { }

      public IssuesTable(ColumnSet columnSet)
      {
        this.TableName = "Issues";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected IssuesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Issues
    {
      public const string TableName = "Issues";

      public enum Column { IssueKey, IssueOrder, Issue, IssueLevel, StateCode, CountyCode, LocalCode, IsIssueOmit }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.IssueKey, "IssueKey" },
        { Column.IssueOrder, "IssueOrder" },
        { Column.Issue, "Issue" },
        { Column.IssueLevel, "IssueLevel" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.IsIssueOmit, "IsIssueOmit" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalCode,IsIssueOmit FROM Issues";
        }
      }

      public static IssuesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalCode,IsIssueOmit FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static IssuesTable FillTable(DbCommand command)
      {
        return FillTable(command, IssuesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static IssuesTable FillTable(DbCommand command, IssuesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          IssuesTable table = new IssuesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string IssueOrderColumnName { get { return "IssueOrder"; } }

      public static string IssueColumnName { get { return "Issue"; } }

      public static string IssueLevelColumnName { get { return "IssueLevel"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string IsIssueOmitColumnName { get { return "IsIssueOmit"; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int IssueMaxLength { get { return 40; } }

      public static int IssueLevelMaxLength { get { return 1; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static bool IssueKeyExists(String issueKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetIssueKeyByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKey(String issueKey, String defaultValue = null)
      {
        return GetIssueKeyByIssueKey(issueKey, defaultValue);
      }

      public static Int32? GetIssueOrderByIssueKey(String issueKey)
      {
        return _GetIssueOrderByIssueKey(issueKey, null);
      }

      public static Int32? GetIssueOrder(String issueKey)
      {
        return GetIssueOrderByIssueKey(issueKey);
      }

      public static Int32 GetIssueOrderByIssueKey(String issueKey, Int32 defaultValue)
      {
        return _GetIssueOrderByIssueKey(issueKey, defaultValue).Value;
      }

      public static Int32 GetIssueOrder(String issueKey, Int32 defaultValue)
      {
        return GetIssueOrderByIssueKey(issueKey, defaultValue);
      }

      private static Int32? _GetIssueOrderByIssueKey(String issueKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT IssueOrder FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetIssueByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Issue FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssue(String issueKey, String defaultValue = null)
      {
        return GetIssueByIssueKey(issueKey, defaultValue);
      }

      public static String GetIssueLevelByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueLevel FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueLevel(String issueKey, String defaultValue = null)
      {
        return GetIssueLevelByIssueKey(issueKey, defaultValue);
      }

      public static String GetStateCodeByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String issueKey, String defaultValue = null)
      {
        return GetStateCodeByIssueKey(issueKey, defaultValue);
      }

      public static String GetCountyCodeByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String issueKey, String defaultValue = null)
      {
        return GetCountyCodeByIssueKey(issueKey, defaultValue);
      }

      public static String GetLocalCodeByIssueKey(String issueKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCode(String issueKey, String defaultValue = null)
      {
        return GetLocalCodeByIssueKey(issueKey, defaultValue);
      }

      public static Boolean? GetIsIssueOmitByIssueKey(String issueKey)
      {
        return _GetIsIssueOmitByIssueKey(issueKey, null);
      }

      public static Boolean? GetIsIssueOmit(String issueKey)
      {
        return GetIsIssueOmitByIssueKey(issueKey);
      }

      public static Boolean GetIsIssueOmitByIssueKey(String issueKey, Boolean defaultValue)
      {
        return _GetIsIssueOmitByIssueKey(issueKey, defaultValue).Value;
      }

      public static Boolean GetIsIssueOmit(String issueKey, Boolean defaultValue)
      {
        return GetIsIssueOmitByIssueKey(issueKey, defaultValue);
      }

      private static Boolean? _GetIsIssueOmitByIssueKey(String issueKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIssueOmit FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByIssueKey(Column _column, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Issues WHERE IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String issueKey)
      {
        return GetColumnByIssueKey(_column, issueKey);
      }

      public static IssuesTable GetDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,IssueOrder,Issue,IssueLevel,StateCode,CountyCode,LocalCode,IsIssueOmit FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssuesTable.ColumnSet.All);
      }

      public static IssuesTable GetData(String issueKey, int commandTimeout = -1)
      {
        return GetDataByIssueKey(issueKey, commandTimeout);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT IssueKey,Issue FROM Issues";
        }
      }

      public static IssuesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,Issue FROM Issues";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, IssuesTable.ColumnSet.Cache);
      }

      public static IssuesTable GetCacheDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT IssueKey,Issue FROM Issues WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, IssuesTable.ColumnSet.Cache);
      }

      public static IssuesTable GetCacheData(String issueKey, int commandTimeout = -1)
      {
        return GetCacheDataByIssueKey(issueKey, commandTimeout);
      }

      public static string GetSelectCommandText(IssuesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case IssuesTable.ColumnSet.All:
            return SelectAllCommandText;

          case IssuesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Issues()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Issues

    #region vote.LocalDistricts

    public partial class LocalDistrictsRow : DataRow
    {
      internal LocalDistrictsRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }

      public String StateLocalDistrictCode
      {
        get { return this["StateLocalDistrictCode"] as String; }
        set { if (value == null) this["StateLocalDistrictCode"] = DBNull.Value; else this["StateLocalDistrictCode"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public String EmailPage
      {
        get { return this["EmailPage"] as String; }
        set { if (value == null) this["EmailPage"] = DBNull.Value; else this["EmailPage"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public Boolean IsLocalDistrictTagForDeletion
      {
        get { return (Boolean) this["IsLocalDistrictTagForDeletion"]; }
        set { this["IsLocalDistrictTagForDeletion"] = value; }
      }

      public String ElectionKeyOfficialsReportStatus
      {
        get { return this["ElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["ElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["ElectionKeyOfficialsReportStatus"] = value; }
      }
    }

    [Serializable]
    public partial class LocalDistrictsTable : TypedTableBase<LocalDistrictsRow>
    {
      public LocalDistrictsRow this[int index] { get { return (LocalDistrictsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LocalDistrictsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LocalDistrictsTable(); }

      new public LocalDistrictsRow NewRow() { return (LocalDistrictsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LocalDistrictsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LocalDistrictsRow); }

      public void RemoveRow(LocalDistrictsRow row) { this.Rows.Remove(row); }

      public LocalDistrictsRow NewRow(String stateCode, String countyCode, String localCode, String localDistrict, String stateLocalDistrictCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, String electionKeyOfficialsReportStatus)
      {
        LocalDistrictsRow row = NewRow();
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.LocalDistrict = localDistrict;
        row.StateLocalDistrictCode = stateLocalDistrictCode;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.EmailPage = emailPage;
        row.UrlDataPage = urlDataPage;
        row.IsLocalDistrictTagForDeletion = isLocalDistrictTagForDeletion;
        row.ElectionKeyOfficialsReportStatus = electionKeyOfficialsReportStatus;
        return row;
      }

      public void AddRow(String stateCode, String countyCode, String localCode, String localDistrict, String stateLocalDistrictCode, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, String emailPage, String urlDataPage, Boolean isLocalDistrictTagForDeletion, String electionKeyOfficialsReportStatus)
      {
        LocalDistrictsRow row = NewRow(stateCode, countyCode, localCode, localDistrict, stateLocalDistrictCode, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, emailPage, urlDataPage, isLocalDistrictTagForDeletion, electionKeyOfficialsReportStatus);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public DataColumn StateLocalDistrictCodeColumn { get { return this.Columns["StateLocalDistrictCode"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn EmailPageColumn { get { return this.Columns["EmailPage"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn IsLocalDistrictTagForDeletionColumn { get { return this.Columns["IsLocalDistrictTagForDeletion"]; } }

      public DataColumn ElectionKeyOfficialsReportStatusColumn { get { return this.Columns["ElectionKeyOfficialsReportStatus"]; } }

      public enum ColumnSet { All, Cache, Display, Names }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateLocalDistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("EmailPage", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("IsLocalDistrictTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDisplayColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitNamesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LocalDistrictsTable() : this(ColumnSet.All) { }

      public LocalDistrictsTable(ColumnSet columnSet)
      {
        this.TableName = "LocalDistricts";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Display:
            InitDisplayColumns();
            break;

          case ColumnSet.Names:
            InitNamesColumns();
            break;
        }
      }

      protected LocalDistrictsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LocalDistricts
    {
      public const string TableName = "LocalDistricts";

      public enum Column { StateCode, CountyCode, LocalCode, LocalDistrict, StateLocalDistrictCode, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, EmailPage, UrlDataPage, IsLocalDistrictTagForDeletion, ElectionKeyOfficialsReportStatus }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.LocalDistrict, "LocalDistrict" },
        { Column.StateLocalDistrictCode, "StateLocalDistrictCode" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.EmailPage, "EmailPage" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.IsLocalDistrictTagForDeletion, "IsLocalDistrictTagForDeletion" },
        { Column.ElectionKeyOfficialsReportStatus, "ElectionKeyOfficialsReportStatus" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static LocalDistrictsTable FillTable(DbCommand command)
      {
        return FillTable(command, LocalDistrictsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LocalDistrictsTable FillTable(DbCommand command, LocalDistrictsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          LocalDistrictsTable table = new LocalDistrictsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static string StateLocalDistrictCodeColumnName { get { return "StateLocalDistrictCode"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string EmailPageColumnName { get { return "EmailPage"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string IsLocalDistrictTagForDeletionColumnName { get { return "IsLocalDistrictTagForDeletion"; } }

      public static string ElectionKeyOfficialsReportStatusColumnName { get { return "ElectionKeyOfficialsReportStatus"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static int StateLocalDistrictCodeMaxLength { get { return 3; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int EmailPageMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static int ElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static int CountByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCode(Column _column, String stateCode, String countyCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode ORDER BY LocalDistrict";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateLocalDistrictCodeByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET StateLocalDistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByStateCodeCountyCode(Boolean newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByStateCodeCountyCode(String newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionKeyOfficialsReportStatus=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCode(Column _column, object newValue, String stateCode, String countyCode)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool StateCodeCountyCodeLocalCodeExists(String stateCode, String countyCode, String localCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetStateCodeByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetCountyCodeByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetCountyCodeByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetLocalCodeByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetLocalCodeByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetLocalDistrictByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalDistrict(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetLocalDistrictByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetStateLocalDistrictCodeByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateLocalDistrictCode FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateLocalDistrictCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetStateLocalDistrictCodeByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetContactByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetContactByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetContactTitleByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetContactTitleByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetContactEmailByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetContactEmailByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetPhoneByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetPhoneByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAltContactByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAltContactByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAltContactTitleByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAltContactTitleByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAltEmailByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAltEmailByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAltPhoneByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAltPhoneByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetEmailByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetEmailByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetUrlByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetUrlByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetBallotNameByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetBallotNameByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAddressLine1ByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAddressLine1ByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetAddressLine2ByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetAddressLine2ByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetCityStateZipByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetCityStateZipByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetNotesByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetNotesByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetEmailPageByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailPage FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailPage(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetEmailPageByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static String GetUrlDataPageByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetUrlDataPageByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static Boolean? GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode)
      {
        return _GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, null);
      }

      public static Boolean? GetIsLocalDistrictTagForDeletion(String stateCode, String countyCode, String localCode)
      {
        return GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode);
      }

      public static Boolean GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, Boolean defaultValue)
      {
        return _GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue).Value;
      }

      public static Boolean GetIsLocalDistrictTagForDeletion(String stateCode, String countyCode, String localCode, Boolean defaultValue)
      {
        return GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      private static Boolean? _GetIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLocalDistrictTagForDeletion FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetElectionKeyOfficialsReportStatusByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyOfficialsReportStatus FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyOfficialsReportStatus(String stateCode, String countyCode, String localCode, String defaultValue = null)
      {
        return GetElectionKeyOfficialsReportStatusByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, defaultValue);
      }

      public static object GetColumnByStateCodeCountyCodeLocalCode(Column _column, String stateCode, String countyCode, String localCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode, String countyCode, String localCode)
      {
        return GetColumnByStateCodeCountyCodeLocalCode(_column, stateCode, countyCode, localCode);
      }

      public static LocalDistrictsTable GetDataByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static LocalDistrictsTable GetData(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        return GetDataByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, commandTimeout);
      }

      public static int UpdateStateCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateStateCodeByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateCountyCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateCountyCodeByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateLocalCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateLocalCodeByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateLocalDistrictByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrict(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateLocalDistrictByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateStateLocalDistrictCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET StateLocalDistrictCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateLocalDistrictCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateStateLocalDistrictCodeByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateContactByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateContactByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateContactTitleByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateContactTitleByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateContactEmailByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateContactEmailByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdatePhoneByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdatePhoneByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAltContactByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAltContactByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAltContactTitleByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAltContactTitleByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAltEmailByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAltEmailByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAltPhoneByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAltPhoneByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateEmailByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateEmailByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateUrlByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateUrlByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateBallotNameByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateBallotNameByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateElectionsAuthorityByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateElectionsAuthorityByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAddressLine1ByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAddressLine1ByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateAddressLine2ByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateAddressLine2ByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateCityStateZipByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateCityStateZipByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateNotesByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateNotesByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateEmailPageByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPage(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateEmailPageByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateUrlDataPageByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateUrlDataPageByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(Boolean newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletion(Boolean newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateIsLocalDistrictTagForDeletionByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionKeyOfficialsReportStatus=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatus(String newValue, String stateCode, String countyCode, String localCode)
      {
        return UpdateElectionKeyOfficialsReportStatusByStateCodeCountyCodeLocalCode(newValue, stateCode, countyCode, localCode);
      }

      public static int UpdateColumnByStateCodeCountyCodeLocalCode(Column _column, object newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode, String countyCode, String localCode)
      {
         return UpdateColumnByStateCodeCountyCodeLocalCode(_column, newValue, stateCode, countyCode, localCode);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET CountyCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateLocalDistrictCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET StateLocalDistrictCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionKeyOfficialsReportStatus=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LocalDistricts WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM LocalDistricts WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LocalDistrictsTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict,StateLocalDistrictCode,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,EmailPage,URLDataPage,IsLocalDistrictTagForDeletion,ElectionKeyOfficialsReportStatus FROM LocalDistricts WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET CountyCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalDistrictByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET LocalDistrict=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateLocalDistrictCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET StateLocalDistrictCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET EmailPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLocalDistrictTagForDeletionByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET IsLocalDistrictTagForDeletion=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET ElectionKeyOfficialsReportStatus=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE LocalDistricts SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Cache);
      }

      public static LocalDistrictsTable GetCacheDataByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Cache);
      }

      public static LocalDistrictsTable GetCacheData(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        return GetCacheDataByStateCodeCountyCodeLocalCode(stateCode, countyCode, localCode, commandTimeout);
      }

      public static string SelectDisplayCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllDisplayData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Display);
      }

      public static LocalDistrictsTable GetDisplayDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,CountyCode,LocalCode,LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode ORDER BY LocalDistrict";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Display);
      }

      public static string SelectNamesCommandText
      {
        get
        {
          return "SELECT LocalCode,LocalDistrict FROM LocalDistricts";
        }
      }

      public static LocalDistrictsTable GetAllNamesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT LocalCode,LocalDistrict FROM LocalDistricts";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Names);
      }

      public static LocalDistrictsTable GetNamesDataByStateCodeCountyCode(String stateCode, String countyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT LocalCode,LocalDistrict FROM LocalDistricts WHERE StateCode=@StateCode AND CountyCode=@CountyCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        return FillTable(cmd, LocalDistrictsTable.ColumnSet.Names);
      }

      public static string GetSelectCommandText(LocalDistrictsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LocalDistrictsTable.ColumnSet.All:
            return SelectAllCommandText;

          case LocalDistrictsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case LocalDistrictsTable.ColumnSet.Display:
            return SelectDisplayCommandText;

          case LocalDistrictsTable.ColumnSet.Names:
            return SelectNamesCommandText;

          default:
            return null;
        }
      }

      static LocalDistricts()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.LocalDistricts

    #region vote.Master

    public partial class MasterRow : DataRow
    {
      internal MasterRow(DataRowBuilder rb) : base(rb) {}

      public String ID
      {
        get { return this["ID"] as String; }
        set { if (value == null) this["ID"] = DBNull.Value; else this["ID"] = value; }
      }

      public Boolean IsTestMode
      {
        get { return (Boolean) this["IsTestMode"]; }
        set { this["IsTestMode"] = value; }
      }

      public Boolean IsDebugMode
      {
        get { return (Boolean) this["IsDebugMode"]; }
        set { this["IsDebugMode"] = value; }
      }

      public Boolean IsCachePages
      {
        get { return (Boolean) this["IsCachePages"]; }
        set { this["IsCachePages"] = value; }
      }

      public Boolean IsMasterControlsVisible
      {
        get { return (Boolean) this["IsMasterControlsVisible"]; }
        set { this["IsMasterControlsVisible"] = value; }
      }

      public Int32 PageCacheSeconds
      {
        get { return (Int32) this["PageCacheSeconds"]; }
        set { this["PageCacheSeconds"] = value; }
      }

      public String DefaultBallotsReady
      {
        get { return this["DefaultBallotsReady"] as String; }
        set { if (value == null) this["DefaultBallotsReady"] = DBNull.Value; else this["DefaultBallotsReady"] = value; }
      }

      public Boolean IsUSPresOfficialsReportCurrent
      {
        get { return (Boolean) this["IsUSPresOfficialsReportCurrent"]; }
        set { this["IsUSPresOfficialsReportCurrent"] = value; }
      }

      public String USPresElectionKeyOfficialsReportStatus
      {
        get { return this["USPresElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["USPresElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["USPresElectionKeyOfficialsReportStatus"] = value; }
      }

      public Boolean IsUSSenateOfficialsReportCurrent
      {
        get { return (Boolean) this["IsUSSenateOfficialsReportCurrent"]; }
        set { this["IsUSSenateOfficialsReportCurrent"] = value; }
      }

      public String USSenateElectionKeyOfficialsReportStatus
      {
        get { return this["USSenateElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["USSenateElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["USSenateElectionKeyOfficialsReportStatus"] = value; }
      }

      public Boolean IsUSHouseOfficialsReportCurrent
      {
        get { return (Boolean) this["IsUSHouseOfficialsReportCurrent"]; }
        set { this["IsUSHouseOfficialsReportCurrent"] = value; }
      }

      public String USHouseElectionKeyOfficialsReportStatus
      {
        get { return this["USHouseElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["USHouseElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["USHouseElectionKeyOfficialsReportStatus"] = value; }
      }

      public Boolean IsElectionDeletionPermitted
      {
        get { return (Boolean) this["IsElectionDeletionPermitted"]; }
        set { this["IsElectionDeletionPermitted"] = value; }
      }

      public String ElectedOfficialsLinksLine
      {
        get { return this["ElectedOfficialsLinksLine"] as String; }
        set { if (value == null) this["ElectedOfficialsLinksLine"] = DBNull.Value; else this["ElectedOfficialsLinksLine"] = value; }
      }

      public String BallotCandidateLinksLine
      {
        get { return this["BallotCandidateLinksLine"] as String; }
        set { if (value == null) this["BallotCandidateLinksLine"] = DBNull.Value; else this["BallotCandidateLinksLine"] = value; }
      }

      public String ElectedOfficialsAdminLinksLine
      {
        get { return this["ElectedOfficialsAdminLinksLine"] as String; }
        set { if (value == null) this["ElectedOfficialsAdminLinksLine"] = DBNull.Value; else this["ElectedOfficialsAdminLinksLine"] = value; }
      }

      public String BallotCandidateAdminLinksLine
      {
        get { return this["BallotCandidateAdminLinksLine"] as String; }
        set { if (value == null) this["BallotCandidateAdminLinksLine"] = DBNull.Value; else this["BallotCandidateAdminLinksLine"] = value; }
      }

      public String MasterIssueLinksLine
      {
        get { return this["MasterIssueLinksLine"] as String; }
        set { if (value == null) this["MasterIssueLinksLine"] = DBNull.Value; else this["MasterIssueLinksLine"] = value; }
      }

      public String MasterIssueReportsLinksLine
      {
        get { return this["MasterIssueReportsLinksLine"] as String; }
        set { if (value == null) this["MasterIssueReportsLinksLine"] = DBNull.Value; else this["MasterIssueReportsLinksLine"] = value; }
      }

      public String StateAdminHomeLinks
      {
        get { return this["StateAdminHomeLinks"] as String; }
        set { if (value == null) this["StateAdminHomeLinks"] = DBNull.Value; else this["StateAdminHomeLinks"] = value; }
      }

      public String DesignCodeLinksLine
      {
        get { return this["DesignCodeLinksLine"] as String; }
        set { if (value == null) this["DesignCodeLinksLine"] = DBNull.Value; else this["DesignCodeLinksLine"] = value; }
      }

      public String OrganizationCodeLinksLine
      {
        get { return this["OrganizationCodeLinksLine"] as String; }
        set { if (value == null) this["OrganizationCodeLinksLine"] = DBNull.Value; else this["OrganizationCodeLinksLine"] = value; }
      }

      public String PoliticalPartyLinksLine
      {
        get { return this["PoliticalPartyLinksLine"] as String; }
        set { if (value == null) this["PoliticalPartyLinksLine"] = DBNull.Value; else this["PoliticalPartyLinksLine"] = value; }
      }

      public String BoardOfElections50StateLinks
      {
        get { return this["BoardOfElections50StateLinks"] as String; }
        set { if (value == null) this["BoardOfElections50StateLinks"] = DBNull.Value; else this["BoardOfElections50StateLinks"] = value; }
      }

      public String Report1
      {
        get { return this["Report1"] as String; }
        set { if (value == null) this["Report1"] = DBNull.Value; else this["Report1"] = value; }
      }

      public String Report2
      {
        get { return this["Report2"] as String; }
        set { if (value == null) this["Report2"] = DBNull.Value; else this["Report2"] = value; }
      }

      public DateTime CacheRemoveElectionPagesIntro
      {
        get { return (DateTime) this["CacheRemoveElectionPagesIntro"]; }
        set { this["CacheRemoveElectionPagesIntro"] = value; }
      }

      public Boolean IsLog301And404Errors
      {
        get { return (Boolean) this["IsLog301And404Errors"]; }
        set { this["IsLog301And404Errors"] = value; }
      }

      public DateTime BulkUpdateElectionsUpcomingUS
      {
        get { return (DateTime) this["BulkUpdateElectionsUpcomingUS"]; }
        set { this["BulkUpdateElectionsUpcomingUS"] = value; }
      }

      public DateTime BulkUpdateElectionsUpcomingStates
      {
        get { return (DateTime) this["BulkUpdateElectionsUpcomingStates"]; }
        set { this["BulkUpdateElectionsUpcomingStates"] = value; }
      }

      public DateTime BulkUpdateElectionsUpcomingCounties
      {
        get { return (DateTime) this["BulkUpdateElectionsUpcomingCounties"]; }
        set { this["BulkUpdateElectionsUpcomingCounties"] = value; }
      }

      public DateTime BulkUpdateElectionsUpcomingLocals
      {
        get { return (DateTime) this["BulkUpdateElectionsUpcomingLocals"]; }
        set { this["BulkUpdateElectionsUpcomingLocals"] = value; }
      }

      public DateTime BulkUpdateElectionsPreviousUS
      {
        get { return (DateTime) this["BulkUpdateElectionsPreviousUS"]; }
        set { this["BulkUpdateElectionsPreviousUS"] = value; }
      }

      public DateTime BulkUpdateElectionsPreviousStates
      {
        get { return (DateTime) this["BulkUpdateElectionsPreviousStates"]; }
        set { this["BulkUpdateElectionsPreviousStates"] = value; }
      }

      public DateTime BulkUpdateElectionsPreviousCounties
      {
        get { return (DateTime) this["BulkUpdateElectionsPreviousCounties"]; }
        set { this["BulkUpdateElectionsPreviousCounties"] = value; }
      }

      public DateTime BulkUpdateElectionsPreviousLocals
      {
        get { return (DateTime) this["BulkUpdateElectionsPreviousLocals"]; }
        set { this["BulkUpdateElectionsPreviousLocals"] = value; }
      }

      public DateTime BulkUpdateOfficialsUS
      {
        get { return (DateTime) this["BulkUpdateOfficialsUS"]; }
        set { this["BulkUpdateOfficialsUS"] = value; }
      }

      public DateTime BulkUpdateOfficialsStates
      {
        get { return (DateTime) this["BulkUpdateOfficialsStates"]; }
        set { this["BulkUpdateOfficialsStates"] = value; }
      }

      public DateTime BulkUpdateOfficialsCounties
      {
        get { return (DateTime) this["BulkUpdateOfficialsCounties"]; }
        set { this["BulkUpdateOfficialsCounties"] = value; }
      }

      public DateTime BulkUpdateOfficialsLocals
      {
        get { return (DateTime) this["BulkUpdateOfficialsLocals"]; }
        set { this["BulkUpdateOfficialsLocals"] = value; }
      }

      public Boolean IsNewImageMethods
      {
        get { return (Boolean) this["IsNewImageMethods"]; }
        set { this["IsNewImageMethods"] = value; }
      }

      public String EmailsSubjectAllRosters
      {
        get { return this["EmailsSubjectAllRosters"] as String; }
        set { if (value == null) this["EmailsSubjectAllRosters"] = DBNull.Value; else this["EmailsSubjectAllRosters"] = value; }
      }

      public String EmailsBodyAllRosters
      {
        get { return this["EmailsBodyAllRosters"] as String; }
        set { if (value == null) this["EmailsBodyAllRosters"] = DBNull.Value; else this["EmailsBodyAllRosters"] = value; }
      }

      public String EmailsSubjectAllCandidates
      {
        get { return this["EmailsSubjectAllCandidates"] as String; }
        set { if (value == null) this["EmailsSubjectAllCandidates"] = DBNull.Value; else this["EmailsSubjectAllCandidates"] = value; }
      }

      public String EmailsBodyAllCandidates
      {
        get { return this["EmailsBodyAllCandidates"] as String; }
        set { if (value == null) this["EmailsBodyAllCandidates"] = DBNull.Value; else this["EmailsBodyAllCandidates"] = value; }
      }

      public String EmailsSubjectCandidatesLogin
      {
        get { return this["EmailsSubjectCandidatesLogin"] as String; }
        set { if (value == null) this["EmailsSubjectCandidatesLogin"] = DBNull.Value; else this["EmailsSubjectCandidatesLogin"] = value; }
      }

      public String EmailsBodyCandidatesLogin
      {
        get { return this["EmailsBodyCandidatesLogin"] as String; }
        set { if (value == null) this["EmailsBodyCandidatesLogin"] = DBNull.Value; else this["EmailsBodyCandidatesLogin"] = value; }
      }

      public String EmailsSubjectElectionRosterPrimary
      {
        get { return this["EmailsSubjectElectionRosterPrimary"] as String; }
        set { if (value == null) this["EmailsSubjectElectionRosterPrimary"] = DBNull.Value; else this["EmailsSubjectElectionRosterPrimary"] = value; }
      }

      public String EmailsBodyElectionRosterPrimary
      {
        get { return this["EmailsBodyElectionRosterPrimary"] as String; }
        set { if (value == null) this["EmailsBodyElectionRosterPrimary"] = DBNull.Value; else this["EmailsBodyElectionRosterPrimary"] = value; }
      }

      public String EmailsSubjectElectionCompletion
      {
        get { return this["EmailsSubjectElectionCompletion"] as String; }
        set { if (value == null) this["EmailsSubjectElectionCompletion"] = DBNull.Value; else this["EmailsSubjectElectionCompletion"] = value; }
      }

      public String EmailsBodyElectionCompletion
      {
        get { return this["EmailsBodyElectionCompletion"] as String; }
        set { if (value == null) this["EmailsBodyElectionCompletion"] = DBNull.Value; else this["EmailsBodyElectionCompletion"] = value; }
      }

      public String EmailsSubjectPartiesLogin
      {
        get { return this["EmailsSubjectPartiesLogin"] as String; }
        set { if (value == null) this["EmailsSubjectPartiesLogin"] = DBNull.Value; else this["EmailsSubjectPartiesLogin"] = value; }
      }

      public String EmailsBodyPartiesLogin
      {
        get { return this["EmailsBodyPartiesLogin"] as String; }
        set { if (value == null) this["EmailsBodyPartiesLogin"] = DBNull.Value; else this["EmailsBodyPartiesLogin"] = value; }
      }

      public DateTime EmailsDateAllRosters
      {
        get { return (DateTime) this["EmailsDateAllRosters"]; }
        set { this["EmailsDateAllRosters"] = value; }
      }

      public Int32 EmailsSentAllRosters
      {
        get { return (Int32) this["EmailsSentAllRosters"]; }
        set { this["EmailsSentAllRosters"] = value; }
      }

      public DateTime EmailsDateAllCandidates
      {
        get { return (DateTime) this["EmailsDateAllCandidates"]; }
        set { this["EmailsDateAllCandidates"] = value; }
      }

      public Int32 EmailsSentAllCandidates
      {
        get { return (Int32) this["EmailsSentAllCandidates"]; }
        set { this["EmailsSentAllCandidates"] = value; }
      }

      public String IssuesAnchors
      {
        get { return this["IssuesAnchors"] as String; }
        set { if (value == null) this["IssuesAnchors"] = DBNull.Value; else this["IssuesAnchors"] = value; }
      }

      public DateTime CacheRemovedBallot
      {
        get { return (DateTime) this["CacheRemovedBallot"]; }
        set { this["CacheRemovedBallot"] = value; }
      }

      public DateTime CacheRemovedElected
      {
        get { return (DateTime) this["CacheRemovedElected"]; }
        set { this["CacheRemovedElected"] = value; }
      }

      public DateTime CacheRemovedIntro
      {
        get { return (DateTime) this["CacheRemovedIntro"]; }
        set { this["CacheRemovedIntro"] = value; }
      }

      public DateTime CacheRemovedPoliticianIssue
      {
        get { return (DateTime) this["CacheRemovedPoliticianIssue"]; }
        set { this["CacheRemovedPoliticianIssue"] = value; }
      }

      public DateTime CacheRemovedIssue
      {
        get { return (DateTime) this["CacheRemovedIssue"]; }
        set { this["CacheRemovedIssue"] = value; }
      }

      public DateTime CacheRemovedReferendum
      {
        get { return (DateTime) this["CacheRemovedReferendum"]; }
        set { this["CacheRemovedReferendum"] = value; }
      }

      public DateTime CacheRemovedElectionReport
      {
        get { return (DateTime) this["CacheRemovedElectionReport"]; }
        set { this["CacheRemovedElectionReport"] = value; }
      }

      public DateTime CacheRemovedOfficialsReport
      {
        get { return (DateTime) this["CacheRemovedOfficialsReport"]; }
        set { this["CacheRemovedOfficialsReport"] = value; }
      }

      public DateTime CacheRemovedArchive
      {
        get { return (DateTime) this["CacheRemovedArchive"]; }
        set { this["CacheRemovedArchive"] = value; }
      }

      public DateTime CacheRemovedGlobalNavbar
      {
        get { return (DateTime) this["CacheRemovedGlobalNavbar"]; }
        set { this["CacheRemovedGlobalNavbar"] = value; }
      }

      public DateTime CacheRemovedMisc
      {
        get { return (DateTime) this["CacheRemovedMisc"]; }
        set { this["CacheRemovedMisc"] = value; }
      }

      public DateTime CacheRemovedAll
      {
        get { return (DateTime) this["CacheRemovedAll"]; }
        set { this["CacheRemovedAll"] = value; }
      }

      public Boolean IsOmitAnchorGlobalElectionReport
      {
        get { return (Boolean) this["IsOmitAnchorGlobalElectionReport"]; }
        set { this["IsOmitAnchorGlobalElectionReport"] = value; }
      }

      public Boolean IsOmitAnchorGlobalElectedReport
      {
        get { return (Boolean) this["IsOmitAnchorGlobalElectedReport"]; }
        set { this["IsOmitAnchorGlobalElectedReport"] = value; }
      }

      public Boolean IsOmitNavbarFederal
      {
        get { return (Boolean) this["IsOmitNavbarFederal"]; }
        set { this["IsOmitNavbarFederal"] = value; }
      }

      public Boolean IsOmitNavbarState
      {
        get { return (Boolean) this["IsOmitNavbarState"]; }
        set { this["IsOmitNavbarState"] = value; }
      }

      public Boolean IsOmitAnchorsSampleBallot
      {
        get { return (Boolean) this["IsOmitAnchorsSampleBallot"]; }
        set { this["IsOmitAnchorsSampleBallot"] = value; }
      }

      public Boolean IsZipLookupUseDbTables
      {
        get { return (Boolean) this["IsZipLookupUseDbTables"]; }
        set { this["IsZipLookupUseDbTables"] = value; }
      }

      public Boolean IsMakeStreetAndAptNumberTables
      {
        get { return (Boolean) this["IsMakeStreetAndAptNumberTables"]; }
        set { this["IsMakeStreetAndAptNumberTables"] = value; }
      }

      public String LogAddressesTestedTableName
      {
        get { return this["LogAddressesTestedTableName"] as String; }
        set { if (value == null) this["LogAddressesTestedTableName"] = DBNull.Value; else this["LogAddressesTestedTableName"] = value; }
      }

      public String LogAddressesTestedStateCode
      {
        get { return this["LogAddressesTestedStateCode"] as String; }
        set { if (value == null) this["LogAddressesTestedStateCode"] = DBNull.Value; else this["LogAddressesTestedStateCode"] = value; }
      }

      public String LogAddressesTestedCityFirstChar
      {
        get { return this["LogAddressesTestedCityFirstChar"] as String; }
        set { if (value == null) this["LogAddressesTestedCityFirstChar"] = DBNull.Value; else this["LogAddressesTestedCityFirstChar"] = value; }
      }

      public String EmailsSubjectElectionRosterGeneral
      {
        get { return this["EmailsSubjectElectionRosterGeneral"] as String; }
        set { if (value == null) this["EmailsSubjectElectionRosterGeneral"] = DBNull.Value; else this["EmailsSubjectElectionRosterGeneral"] = value; }
      }

      public String EmailsBodyElectionRosterGeneral
      {
        get { return this["EmailsBodyElectionRosterGeneral"] as String; }
        set { if (value == null) this["EmailsBodyElectionRosterGeneral"] = DBNull.Value; else this["EmailsBodyElectionRosterGeneral"] = value; }
      }

      public String EmailsSubjectStateCandidates
      {
        get { return this["EmailsSubjectStateCandidates"] as String; }
        set { if (value == null) this["EmailsSubjectStateCandidates"] = DBNull.Value; else this["EmailsSubjectStateCandidates"] = value; }
      }

      public String EmailsBodyStateCandidates
      {
        get { return this["EmailsBodyStateCandidates"] as String; }
        set { if (value == null) this["EmailsBodyStateCandidates"] = DBNull.Value; else this["EmailsBodyStateCandidates"] = value; }
      }

      public String EmailsSubjectAllPrimaryRosters
      {
        get { return this["EmailsSubjectAllPrimaryRosters"] as String; }
        set { if (value == null) this["EmailsSubjectAllPrimaryRosters"] = DBNull.Value; else this["EmailsSubjectAllPrimaryRosters"] = value; }
      }

      public String EmailsBodyAllPrimaryRosters
      {
        get { return this["EmailsBodyAllPrimaryRosters"] as String; }
        set { if (value == null) this["EmailsBodyAllPrimaryRosters"] = DBNull.Value; else this["EmailsBodyAllPrimaryRosters"] = value; }
      }

      public DateTime EmailsDateAllPrimaryRosters
      {
        get { return (DateTime) this["EmailsDateAllPrimaryRosters"]; }
        set { this["EmailsDateAllPrimaryRosters"] = value; }
      }

      public Int32 EmailsSentAllPrimaryRosters
      {
        get { return (Int32) this["EmailsSentAllPrimaryRosters"]; }
        set { this["EmailsSentAllPrimaryRosters"] = value; }
      }

      public String EmailsSubjectThankYou
      {
        get { return this["EmailsSubjectThankYou"] as String; }
        set { if (value == null) this["EmailsSubjectThankYou"] = DBNull.Value; else this["EmailsSubjectThankYou"] = value; }
      }

      public String EmailsBodyThankYou
      {
        get { return this["EmailsBodyThankYou"] as String; }
        set { if (value == null) this["EmailsBodyThankYou"] = DBNull.Value; else this["EmailsBodyThankYou"] = value; }
      }

      public String EmailsSubjectYourLogin
      {
        get { return this["EmailsSubjectYourLogin"] as String; }
        set { if (value == null) this["EmailsSubjectYourLogin"] = DBNull.Value; else this["EmailsSubjectYourLogin"] = value; }
      }

      public String EmailsBodyYourLogin
      {
        get { return this["EmailsBodyYourLogin"] as String; }
        set { if (value == null) this["EmailsBodyYourLogin"] = DBNull.Value; else this["EmailsBodyYourLogin"] = value; }
      }

      public Boolean PresentGetFutureSampleBallotsDialog
      {
        get { return (Boolean) this["PresentGetFutureSampleBallotsDialog"]; }
        set { this["PresentGetFutureSampleBallotsDialog"] = value; }
      }

      public Int32 WeNeedYourHelpNagFrequency
      {
        get { return (Int32) this["WeNeedYourHelpNagFrequency"]; }
        set { this["WeNeedYourHelpNagFrequency"] = value; }
      }
    }

    [Serializable]
    public partial class MasterTable : TypedTableBase<MasterRow>
    {
      public MasterRow this[int index] { get { return (MasterRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(MasterRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new MasterTable(); }

      new public MasterRow NewRow() { return (MasterRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new MasterRow(rb); }

      protected override Type GetRowType()
      { return typeof(MasterRow); }

      public void RemoveRow(MasterRow row) { this.Rows.Remove(row); }

      public MasterRow NewRow(String id, Boolean isTestMode, Boolean isDebugMode, Boolean isCachePages, Boolean isMasterControlsVisible, Int32 pageCacheSeconds, String defaultBallotsReady, Boolean isUSPresOfficialsReportCurrent, String usPresElectionKeyOfficialsReportStatus, Boolean isUSSenateOfficialsReportCurrent, String usSenateElectionKeyOfficialsReportStatus, Boolean isUSHouseOfficialsReportCurrent, String usHouseElectionKeyOfficialsReportStatus, Boolean isElectionDeletionPermitted, String electedOfficialsLinksLine, String ballotCandidateLinksLine, String electedOfficialsAdminLinksLine, String ballotCandidateAdminLinksLine, String masterIssueLinksLine, String masterIssueReportsLinksLine, String stateAdminHomeLinks, String designCodeLinksLine, String organizationCodeLinksLine, String politicalPartyLinksLine, String boardOfElections50StateLinks, String report1, String report2, DateTime cacheRemoveElectionPagesIntro, Boolean isLog301And404Errors, DateTime bulkUpdateElectionsUpcomingUS, DateTime bulkUpdateElectionsUpcomingStates, DateTime bulkUpdateElectionsUpcomingCounties, DateTime bulkUpdateElectionsUpcomingLocals, DateTime bulkUpdateElectionsPreviousUS, DateTime bulkUpdateElectionsPreviousStates, DateTime bulkUpdateElectionsPreviousCounties, DateTime bulkUpdateElectionsPreviousLocals, DateTime bulkUpdateOfficialsUS, DateTime bulkUpdateOfficialsStates, DateTime bulkUpdateOfficialsCounties, DateTime bulkUpdateOfficialsLocals, Boolean isNewImageMethods, String emailsSubjectAllRosters, String emailsBodyAllRosters, String emailsSubjectAllCandidates, String emailsBodyAllCandidates, String emailsSubjectCandidatesLogin, String emailsBodyCandidatesLogin, String emailsSubjectElectionRosterPrimary, String emailsBodyElectionRosterPrimary, String emailsSubjectElectionCompletion, String emailsBodyElectionCompletion, String emailsSubjectPartiesLogin, String emailsBodyPartiesLogin, DateTime emailsDateAllRosters, Int32 emailsSentAllRosters, DateTime emailsDateAllCandidates, Int32 emailsSentAllCandidates, String issuesAnchors, DateTime cacheRemovedBallot, DateTime cacheRemovedElected, DateTime cacheRemovedIntro, DateTime cacheRemovedPoliticianIssue, DateTime cacheRemovedIssue, DateTime cacheRemovedReferendum, DateTime cacheRemovedElectionReport, DateTime cacheRemovedOfficialsReport, DateTime cacheRemovedArchive, DateTime cacheRemovedGlobalNavbar, DateTime cacheRemovedMisc, DateTime cacheRemovedAll, Boolean isOmitAnchorGlobalElectionReport, Boolean isOmitAnchorGlobalElectedReport, Boolean isOmitNavbarFederal, Boolean isOmitNavbarState, Boolean isOmitAnchorsSampleBallot, Boolean isZipLookupUseDbTables, Boolean isMakeStreetAndAptNumberTables, String logAddressesTestedTableName, String logAddressesTestedStateCode, String logAddressesTestedCityFirstChar, String emailsSubjectElectionRosterGeneral, String emailsBodyElectionRosterGeneral, String emailsSubjectStateCandidates, String emailsBodyStateCandidates, String emailsSubjectAllPrimaryRosters, String emailsBodyAllPrimaryRosters, DateTime emailsDateAllPrimaryRosters, Int32 emailsSentAllPrimaryRosters, String emailsSubjectThankYou, String emailsBodyThankYou, String emailsSubjectYourLogin, String emailsBodyYourLogin, Boolean presentGetFutureSampleBallotsDialog, Int32 weNeedYourHelpNagFrequency)
      {
        MasterRow row = NewRow();
        row.ID = id;
        row.IsTestMode = isTestMode;
        row.IsDebugMode = isDebugMode;
        row.IsCachePages = isCachePages;
        row.IsMasterControlsVisible = isMasterControlsVisible;
        row.PageCacheSeconds = pageCacheSeconds;
        row.DefaultBallotsReady = defaultBallotsReady;
        row.IsUSPresOfficialsReportCurrent = isUSPresOfficialsReportCurrent;
        row.USPresElectionKeyOfficialsReportStatus = usPresElectionKeyOfficialsReportStatus;
        row.IsUSSenateOfficialsReportCurrent = isUSSenateOfficialsReportCurrent;
        row.USSenateElectionKeyOfficialsReportStatus = usSenateElectionKeyOfficialsReportStatus;
        row.IsUSHouseOfficialsReportCurrent = isUSHouseOfficialsReportCurrent;
        row.USHouseElectionKeyOfficialsReportStatus = usHouseElectionKeyOfficialsReportStatus;
        row.IsElectionDeletionPermitted = isElectionDeletionPermitted;
        row.ElectedOfficialsLinksLine = electedOfficialsLinksLine;
        row.BallotCandidateLinksLine = ballotCandidateLinksLine;
        row.ElectedOfficialsAdminLinksLine = electedOfficialsAdminLinksLine;
        row.BallotCandidateAdminLinksLine = ballotCandidateAdminLinksLine;
        row.MasterIssueLinksLine = masterIssueLinksLine;
        row.MasterIssueReportsLinksLine = masterIssueReportsLinksLine;
        row.StateAdminHomeLinks = stateAdminHomeLinks;
        row.DesignCodeLinksLine = designCodeLinksLine;
        row.OrganizationCodeLinksLine = organizationCodeLinksLine;
        row.PoliticalPartyLinksLine = politicalPartyLinksLine;
        row.BoardOfElections50StateLinks = boardOfElections50StateLinks;
        row.Report1 = report1;
        row.Report2 = report2;
        row.CacheRemoveElectionPagesIntro = cacheRemoveElectionPagesIntro;
        row.IsLog301And404Errors = isLog301And404Errors;
        row.BulkUpdateElectionsUpcomingUS = bulkUpdateElectionsUpcomingUS;
        row.BulkUpdateElectionsUpcomingStates = bulkUpdateElectionsUpcomingStates;
        row.BulkUpdateElectionsUpcomingCounties = bulkUpdateElectionsUpcomingCounties;
        row.BulkUpdateElectionsUpcomingLocals = bulkUpdateElectionsUpcomingLocals;
        row.BulkUpdateElectionsPreviousUS = bulkUpdateElectionsPreviousUS;
        row.BulkUpdateElectionsPreviousStates = bulkUpdateElectionsPreviousStates;
        row.BulkUpdateElectionsPreviousCounties = bulkUpdateElectionsPreviousCounties;
        row.BulkUpdateElectionsPreviousLocals = bulkUpdateElectionsPreviousLocals;
        row.BulkUpdateOfficialsUS = bulkUpdateOfficialsUS;
        row.BulkUpdateOfficialsStates = bulkUpdateOfficialsStates;
        row.BulkUpdateOfficialsCounties = bulkUpdateOfficialsCounties;
        row.BulkUpdateOfficialsLocals = bulkUpdateOfficialsLocals;
        row.IsNewImageMethods = isNewImageMethods;
        row.EmailsSubjectAllRosters = emailsSubjectAllRosters;
        row.EmailsBodyAllRosters = emailsBodyAllRosters;
        row.EmailsSubjectAllCandidates = emailsSubjectAllCandidates;
        row.EmailsBodyAllCandidates = emailsBodyAllCandidates;
        row.EmailsSubjectCandidatesLogin = emailsSubjectCandidatesLogin;
        row.EmailsBodyCandidatesLogin = emailsBodyCandidatesLogin;
        row.EmailsSubjectElectionRosterPrimary = emailsSubjectElectionRosterPrimary;
        row.EmailsBodyElectionRosterPrimary = emailsBodyElectionRosterPrimary;
        row.EmailsSubjectElectionCompletion = emailsSubjectElectionCompletion;
        row.EmailsBodyElectionCompletion = emailsBodyElectionCompletion;
        row.EmailsSubjectPartiesLogin = emailsSubjectPartiesLogin;
        row.EmailsBodyPartiesLogin = emailsBodyPartiesLogin;
        row.EmailsDateAllRosters = emailsDateAllRosters;
        row.EmailsSentAllRosters = emailsSentAllRosters;
        row.EmailsDateAllCandidates = emailsDateAllCandidates;
        row.EmailsSentAllCandidates = emailsSentAllCandidates;
        row.IssuesAnchors = issuesAnchors;
        row.CacheRemovedBallot = cacheRemovedBallot;
        row.CacheRemovedElected = cacheRemovedElected;
        row.CacheRemovedIntro = cacheRemovedIntro;
        row.CacheRemovedPoliticianIssue = cacheRemovedPoliticianIssue;
        row.CacheRemovedIssue = cacheRemovedIssue;
        row.CacheRemovedReferendum = cacheRemovedReferendum;
        row.CacheRemovedElectionReport = cacheRemovedElectionReport;
        row.CacheRemovedOfficialsReport = cacheRemovedOfficialsReport;
        row.CacheRemovedArchive = cacheRemovedArchive;
        row.CacheRemovedGlobalNavbar = cacheRemovedGlobalNavbar;
        row.CacheRemovedMisc = cacheRemovedMisc;
        row.CacheRemovedAll = cacheRemovedAll;
        row.IsOmitAnchorGlobalElectionReport = isOmitAnchorGlobalElectionReport;
        row.IsOmitAnchorGlobalElectedReport = isOmitAnchorGlobalElectedReport;
        row.IsOmitNavbarFederal = isOmitNavbarFederal;
        row.IsOmitNavbarState = isOmitNavbarState;
        row.IsOmitAnchorsSampleBallot = isOmitAnchorsSampleBallot;
        row.IsZipLookupUseDbTables = isZipLookupUseDbTables;
        row.IsMakeStreetAndAptNumberTables = isMakeStreetAndAptNumberTables;
        row.LogAddressesTestedTableName = logAddressesTestedTableName;
        row.LogAddressesTestedStateCode = logAddressesTestedStateCode;
        row.LogAddressesTestedCityFirstChar = logAddressesTestedCityFirstChar;
        row.EmailsSubjectElectionRosterGeneral = emailsSubjectElectionRosterGeneral;
        row.EmailsBodyElectionRosterGeneral = emailsBodyElectionRosterGeneral;
        row.EmailsSubjectStateCandidates = emailsSubjectStateCandidates;
        row.EmailsBodyStateCandidates = emailsBodyStateCandidates;
        row.EmailsSubjectAllPrimaryRosters = emailsSubjectAllPrimaryRosters;
        row.EmailsBodyAllPrimaryRosters = emailsBodyAllPrimaryRosters;
        row.EmailsDateAllPrimaryRosters = emailsDateAllPrimaryRosters;
        row.EmailsSentAllPrimaryRosters = emailsSentAllPrimaryRosters;
        row.EmailsSubjectThankYou = emailsSubjectThankYou;
        row.EmailsBodyThankYou = emailsBodyThankYou;
        row.EmailsSubjectYourLogin = emailsSubjectYourLogin;
        row.EmailsBodyYourLogin = emailsBodyYourLogin;
        row.PresentGetFutureSampleBallotsDialog = presentGetFutureSampleBallotsDialog;
        row.WeNeedYourHelpNagFrequency = weNeedYourHelpNagFrequency;
        return row;
      }

      public void AddRow(String id, Boolean isTestMode, Boolean isDebugMode, Boolean isCachePages, Boolean isMasterControlsVisible, Int32 pageCacheSeconds, String defaultBallotsReady, Boolean isUSPresOfficialsReportCurrent, String usPresElectionKeyOfficialsReportStatus, Boolean isUSSenateOfficialsReportCurrent, String usSenateElectionKeyOfficialsReportStatus, Boolean isUSHouseOfficialsReportCurrent, String usHouseElectionKeyOfficialsReportStatus, Boolean isElectionDeletionPermitted, String electedOfficialsLinksLine, String ballotCandidateLinksLine, String electedOfficialsAdminLinksLine, String ballotCandidateAdminLinksLine, String masterIssueLinksLine, String masterIssueReportsLinksLine, String stateAdminHomeLinks, String designCodeLinksLine, String organizationCodeLinksLine, String politicalPartyLinksLine, String boardOfElections50StateLinks, String report1, String report2, DateTime cacheRemoveElectionPagesIntro, Boolean isLog301And404Errors, DateTime bulkUpdateElectionsUpcomingUS, DateTime bulkUpdateElectionsUpcomingStates, DateTime bulkUpdateElectionsUpcomingCounties, DateTime bulkUpdateElectionsUpcomingLocals, DateTime bulkUpdateElectionsPreviousUS, DateTime bulkUpdateElectionsPreviousStates, DateTime bulkUpdateElectionsPreviousCounties, DateTime bulkUpdateElectionsPreviousLocals, DateTime bulkUpdateOfficialsUS, DateTime bulkUpdateOfficialsStates, DateTime bulkUpdateOfficialsCounties, DateTime bulkUpdateOfficialsLocals, Boolean isNewImageMethods, String emailsSubjectAllRosters, String emailsBodyAllRosters, String emailsSubjectAllCandidates, String emailsBodyAllCandidates, String emailsSubjectCandidatesLogin, String emailsBodyCandidatesLogin, String emailsSubjectElectionRosterPrimary, String emailsBodyElectionRosterPrimary, String emailsSubjectElectionCompletion, String emailsBodyElectionCompletion, String emailsSubjectPartiesLogin, String emailsBodyPartiesLogin, DateTime emailsDateAllRosters, Int32 emailsSentAllRosters, DateTime emailsDateAllCandidates, Int32 emailsSentAllCandidates, String issuesAnchors, DateTime cacheRemovedBallot, DateTime cacheRemovedElected, DateTime cacheRemovedIntro, DateTime cacheRemovedPoliticianIssue, DateTime cacheRemovedIssue, DateTime cacheRemovedReferendum, DateTime cacheRemovedElectionReport, DateTime cacheRemovedOfficialsReport, DateTime cacheRemovedArchive, DateTime cacheRemovedGlobalNavbar, DateTime cacheRemovedMisc, DateTime cacheRemovedAll, Boolean isOmitAnchorGlobalElectionReport, Boolean isOmitAnchorGlobalElectedReport, Boolean isOmitNavbarFederal, Boolean isOmitNavbarState, Boolean isOmitAnchorsSampleBallot, Boolean isZipLookupUseDbTables, Boolean isMakeStreetAndAptNumberTables, String logAddressesTestedTableName, String logAddressesTestedStateCode, String logAddressesTestedCityFirstChar, String emailsSubjectElectionRosterGeneral, String emailsBodyElectionRosterGeneral, String emailsSubjectStateCandidates, String emailsBodyStateCandidates, String emailsSubjectAllPrimaryRosters, String emailsBodyAllPrimaryRosters, DateTime emailsDateAllPrimaryRosters, Int32 emailsSentAllPrimaryRosters, String emailsSubjectThankYou, String emailsBodyThankYou, String emailsSubjectYourLogin, String emailsBodyYourLogin, Boolean presentGetFutureSampleBallotsDialog, Int32 weNeedYourHelpNagFrequency)
      {
        MasterRow row = NewRow(id, isTestMode, isDebugMode, isCachePages, isMasterControlsVisible, pageCacheSeconds, defaultBallotsReady, isUSPresOfficialsReportCurrent, usPresElectionKeyOfficialsReportStatus, isUSSenateOfficialsReportCurrent, usSenateElectionKeyOfficialsReportStatus, isUSHouseOfficialsReportCurrent, usHouseElectionKeyOfficialsReportStatus, isElectionDeletionPermitted, electedOfficialsLinksLine, ballotCandidateLinksLine, electedOfficialsAdminLinksLine, ballotCandidateAdminLinksLine, masterIssueLinksLine, masterIssueReportsLinksLine, stateAdminHomeLinks, designCodeLinksLine, organizationCodeLinksLine, politicalPartyLinksLine, boardOfElections50StateLinks, report1, report2, cacheRemoveElectionPagesIntro, isLog301And404Errors, bulkUpdateElectionsUpcomingUS, bulkUpdateElectionsUpcomingStates, bulkUpdateElectionsUpcomingCounties, bulkUpdateElectionsUpcomingLocals, bulkUpdateElectionsPreviousUS, bulkUpdateElectionsPreviousStates, bulkUpdateElectionsPreviousCounties, bulkUpdateElectionsPreviousLocals, bulkUpdateOfficialsUS, bulkUpdateOfficialsStates, bulkUpdateOfficialsCounties, bulkUpdateOfficialsLocals, isNewImageMethods, emailsSubjectAllRosters, emailsBodyAllRosters, emailsSubjectAllCandidates, emailsBodyAllCandidates, emailsSubjectCandidatesLogin, emailsBodyCandidatesLogin, emailsSubjectElectionRosterPrimary, emailsBodyElectionRosterPrimary, emailsSubjectElectionCompletion, emailsBodyElectionCompletion, emailsSubjectPartiesLogin, emailsBodyPartiesLogin, emailsDateAllRosters, emailsSentAllRosters, emailsDateAllCandidates, emailsSentAllCandidates, issuesAnchors, cacheRemovedBallot, cacheRemovedElected, cacheRemovedIntro, cacheRemovedPoliticianIssue, cacheRemovedIssue, cacheRemovedReferendum, cacheRemovedElectionReport, cacheRemovedOfficialsReport, cacheRemovedArchive, cacheRemovedGlobalNavbar, cacheRemovedMisc, cacheRemovedAll, isOmitAnchorGlobalElectionReport, isOmitAnchorGlobalElectedReport, isOmitNavbarFederal, isOmitNavbarState, isOmitAnchorsSampleBallot, isZipLookupUseDbTables, isMakeStreetAndAptNumberTables, logAddressesTestedTableName, logAddressesTestedStateCode, logAddressesTestedCityFirstChar, emailsSubjectElectionRosterGeneral, emailsBodyElectionRosterGeneral, emailsSubjectStateCandidates, emailsBodyStateCandidates, emailsSubjectAllPrimaryRosters, emailsBodyAllPrimaryRosters, emailsDateAllPrimaryRosters, emailsSentAllPrimaryRosters, emailsSubjectThankYou, emailsBodyThankYou, emailsSubjectYourLogin, emailsBodyYourLogin, presentGetFutureSampleBallotsDialog, weNeedYourHelpNagFrequency);
        AddRow(row);
      }

      public DataColumn IDColumn { get { return this.Columns["ID"]; } }

      public DataColumn IsTestModeColumn { get { return this.Columns["IsTestMode"]; } }

      public DataColumn IsDebugModeColumn { get { return this.Columns["IsDebugMode"]; } }

      public DataColumn IsCachePagesColumn { get { return this.Columns["IsCachePages"]; } }

      public DataColumn IsMasterControlsVisibleColumn { get { return this.Columns["IsMasterControlsVisible"]; } }

      public DataColumn PageCacheSecondsColumn { get { return this.Columns["PageCacheSeconds"]; } }

      public DataColumn DefaultBallotsReadyColumn { get { return this.Columns["DefaultBallotsReady"]; } }

      public DataColumn IsUSPresOfficialsReportCurrentColumn { get { return this.Columns["IsUSPresOfficialsReportCurrent"]; } }

      public DataColumn USPresElectionKeyOfficialsReportStatusColumn { get { return this.Columns["USPresElectionKeyOfficialsReportStatus"]; } }

      public DataColumn IsUSSenateOfficialsReportCurrentColumn { get { return this.Columns["IsUSSenateOfficialsReportCurrent"]; } }

      public DataColumn USSenateElectionKeyOfficialsReportStatusColumn { get { return this.Columns["USSenateElectionKeyOfficialsReportStatus"]; } }

      public DataColumn IsUSHouseOfficialsReportCurrentColumn { get { return this.Columns["IsUSHouseOfficialsReportCurrent"]; } }

      public DataColumn USHouseElectionKeyOfficialsReportStatusColumn { get { return this.Columns["USHouseElectionKeyOfficialsReportStatus"]; } }

      public DataColumn IsElectionDeletionPermittedColumn { get { return this.Columns["IsElectionDeletionPermitted"]; } }

      public DataColumn ElectedOfficialsLinksLineColumn { get { return this.Columns["ElectedOfficialsLinksLine"]; } }

      public DataColumn BallotCandidateLinksLineColumn { get { return this.Columns["BallotCandidateLinksLine"]; } }

      public DataColumn ElectedOfficialsAdminLinksLineColumn { get { return this.Columns["ElectedOfficialsAdminLinksLine"]; } }

      public DataColumn BallotCandidateAdminLinksLineColumn { get { return this.Columns["BallotCandidateAdminLinksLine"]; } }

      public DataColumn MasterIssueLinksLineColumn { get { return this.Columns["MasterIssueLinksLine"]; } }

      public DataColumn MasterIssueReportsLinksLineColumn { get { return this.Columns["MasterIssueReportsLinksLine"]; } }

      public DataColumn StateAdminHomeLinksColumn { get { return this.Columns["StateAdminHomeLinks"]; } }

      public DataColumn DesignCodeLinksLineColumn { get { return this.Columns["DesignCodeLinksLine"]; } }

      public DataColumn OrganizationCodeLinksLineColumn { get { return this.Columns["OrganizationCodeLinksLine"]; } }

      public DataColumn PoliticalPartyLinksLineColumn { get { return this.Columns["PoliticalPartyLinksLine"]; } }

      public DataColumn BoardOfElections50StateLinksColumn { get { return this.Columns["BoardOfElections50StateLinks"]; } }

      public DataColumn Report1Column { get { return this.Columns["Report1"]; } }

      public DataColumn Report2Column { get { return this.Columns["Report2"]; } }

      public DataColumn CacheRemoveElectionPagesIntroColumn { get { return this.Columns["CacheRemoveElectionPagesIntro"]; } }

      public DataColumn IsLog301And404ErrorsColumn { get { return this.Columns["IsLog301And404Errors"]; } }

      public DataColumn BulkUpdateElectionsUpcomingUSColumn { get { return this.Columns["BulkUpdateElectionsUpcomingUS"]; } }

      public DataColumn BulkUpdateElectionsUpcomingStatesColumn { get { return this.Columns["BulkUpdateElectionsUpcomingStates"]; } }

      public DataColumn BulkUpdateElectionsUpcomingCountiesColumn { get { return this.Columns["BulkUpdateElectionsUpcomingCounties"]; } }

      public DataColumn BulkUpdateElectionsUpcomingLocalsColumn { get { return this.Columns["BulkUpdateElectionsUpcomingLocals"]; } }

      public DataColumn BulkUpdateElectionsPreviousUSColumn { get { return this.Columns["BulkUpdateElectionsPreviousUS"]; } }

      public DataColumn BulkUpdateElectionsPreviousStatesColumn { get { return this.Columns["BulkUpdateElectionsPreviousStates"]; } }

      public DataColumn BulkUpdateElectionsPreviousCountiesColumn { get { return this.Columns["BulkUpdateElectionsPreviousCounties"]; } }

      public DataColumn BulkUpdateElectionsPreviousLocalsColumn { get { return this.Columns["BulkUpdateElectionsPreviousLocals"]; } }

      public DataColumn BulkUpdateOfficialsUSColumn { get { return this.Columns["BulkUpdateOfficialsUS"]; } }

      public DataColumn BulkUpdateOfficialsStatesColumn { get { return this.Columns["BulkUpdateOfficialsStates"]; } }

      public DataColumn BulkUpdateOfficialsCountiesColumn { get { return this.Columns["BulkUpdateOfficialsCounties"]; } }

      public DataColumn BulkUpdateOfficialsLocalsColumn { get { return this.Columns["BulkUpdateOfficialsLocals"]; } }

      public DataColumn IsNewImageMethodsColumn { get { return this.Columns["IsNewImageMethods"]; } }

      public DataColumn EmailsSubjectAllRostersColumn { get { return this.Columns["EmailsSubjectAllRosters"]; } }

      public DataColumn EmailsBodyAllRostersColumn { get { return this.Columns["EmailsBodyAllRosters"]; } }

      public DataColumn EmailsSubjectAllCandidatesColumn { get { return this.Columns["EmailsSubjectAllCandidates"]; } }

      public DataColumn EmailsBodyAllCandidatesColumn { get { return this.Columns["EmailsBodyAllCandidates"]; } }

      public DataColumn EmailsSubjectCandidatesLoginColumn { get { return this.Columns["EmailsSubjectCandidatesLogin"]; } }

      public DataColumn EmailsBodyCandidatesLoginColumn { get { return this.Columns["EmailsBodyCandidatesLogin"]; } }

      public DataColumn EmailsSubjectElectionRosterPrimaryColumn { get { return this.Columns["EmailsSubjectElectionRosterPrimary"]; } }

      public DataColumn EmailsBodyElectionRosterPrimaryColumn { get { return this.Columns["EmailsBodyElectionRosterPrimary"]; } }

      public DataColumn EmailsSubjectElectionCompletionColumn { get { return this.Columns["EmailsSubjectElectionCompletion"]; } }

      public DataColumn EmailsBodyElectionCompletionColumn { get { return this.Columns["EmailsBodyElectionCompletion"]; } }

      public DataColumn EmailsSubjectPartiesLoginColumn { get { return this.Columns["EmailsSubjectPartiesLogin"]; } }

      public DataColumn EmailsBodyPartiesLoginColumn { get { return this.Columns["EmailsBodyPartiesLogin"]; } }

      public DataColumn EmailsDateAllRostersColumn { get { return this.Columns["EmailsDateAllRosters"]; } }

      public DataColumn EmailsSentAllRostersColumn { get { return this.Columns["EmailsSentAllRosters"]; } }

      public DataColumn EmailsDateAllCandidatesColumn { get { return this.Columns["EmailsDateAllCandidates"]; } }

      public DataColumn EmailsSentAllCandidatesColumn { get { return this.Columns["EmailsSentAllCandidates"]; } }

      public DataColumn IssuesAnchorsColumn { get { return this.Columns["IssuesAnchors"]; } }

      public DataColumn CacheRemovedBallotColumn { get { return this.Columns["CacheRemovedBallot"]; } }

      public DataColumn CacheRemovedElectedColumn { get { return this.Columns["CacheRemovedElected"]; } }

      public DataColumn CacheRemovedIntroColumn { get { return this.Columns["CacheRemovedIntro"]; } }

      public DataColumn CacheRemovedPoliticianIssueColumn { get { return this.Columns["CacheRemovedPoliticianIssue"]; } }

      public DataColumn CacheRemovedIssueColumn { get { return this.Columns["CacheRemovedIssue"]; } }

      public DataColumn CacheRemovedReferendumColumn { get { return this.Columns["CacheRemovedReferendum"]; } }

      public DataColumn CacheRemovedElectionReportColumn { get { return this.Columns["CacheRemovedElectionReport"]; } }

      public DataColumn CacheRemovedOfficialsReportColumn { get { return this.Columns["CacheRemovedOfficialsReport"]; } }

      public DataColumn CacheRemovedArchiveColumn { get { return this.Columns["CacheRemovedArchive"]; } }

      public DataColumn CacheRemovedGlobalNavbarColumn { get { return this.Columns["CacheRemovedGlobalNavbar"]; } }

      public DataColumn CacheRemovedMiscColumn { get { return this.Columns["CacheRemovedMisc"]; } }

      public DataColumn CacheRemovedAllColumn { get { return this.Columns["CacheRemovedAll"]; } }

      public DataColumn IsOmitAnchorGlobalElectionReportColumn { get { return this.Columns["IsOmitAnchorGlobalElectionReport"]; } }

      public DataColumn IsOmitAnchorGlobalElectedReportColumn { get { return this.Columns["IsOmitAnchorGlobalElectedReport"]; } }

      public DataColumn IsOmitNavbarFederalColumn { get { return this.Columns["IsOmitNavbarFederal"]; } }

      public DataColumn IsOmitNavbarStateColumn { get { return this.Columns["IsOmitNavbarState"]; } }

      public DataColumn IsOmitAnchorsSampleBallotColumn { get { return this.Columns["IsOmitAnchorsSampleBallot"]; } }

      public DataColumn IsZipLookupUseDbTablesColumn { get { return this.Columns["IsZipLookupUseDbTables"]; } }

      public DataColumn IsMakeStreetAndAptNumberTablesColumn { get { return this.Columns["IsMakeStreetAndAptNumberTables"]; } }

      public DataColumn LogAddressesTestedTableNameColumn { get { return this.Columns["LogAddressesTestedTableName"]; } }

      public DataColumn LogAddressesTestedStateCodeColumn { get { return this.Columns["LogAddressesTestedStateCode"]; } }

      public DataColumn LogAddressesTestedCityFirstCharColumn { get { return this.Columns["LogAddressesTestedCityFirstChar"]; } }

      public DataColumn EmailsSubjectElectionRosterGeneralColumn { get { return this.Columns["EmailsSubjectElectionRosterGeneral"]; } }

      public DataColumn EmailsBodyElectionRosterGeneralColumn { get { return this.Columns["EmailsBodyElectionRosterGeneral"]; } }

      public DataColumn EmailsSubjectStateCandidatesColumn { get { return this.Columns["EmailsSubjectStateCandidates"]; } }

      public DataColumn EmailsBodyStateCandidatesColumn { get { return this.Columns["EmailsBodyStateCandidates"]; } }

      public DataColumn EmailsSubjectAllPrimaryRostersColumn { get { return this.Columns["EmailsSubjectAllPrimaryRosters"]; } }

      public DataColumn EmailsBodyAllPrimaryRostersColumn { get { return this.Columns["EmailsBodyAllPrimaryRosters"]; } }

      public DataColumn EmailsDateAllPrimaryRostersColumn { get { return this.Columns["EmailsDateAllPrimaryRosters"]; } }

      public DataColumn EmailsSentAllPrimaryRostersColumn { get { return this.Columns["EmailsSentAllPrimaryRosters"]; } }

      public DataColumn EmailsSubjectThankYouColumn { get { return this.Columns["EmailsSubjectThankYou"]; } }

      public DataColumn EmailsBodyThankYouColumn { get { return this.Columns["EmailsBodyThankYou"]; } }

      public DataColumn EmailsSubjectYourLoginColumn { get { return this.Columns["EmailsSubjectYourLogin"]; } }

      public DataColumn EmailsBodyYourLoginColumn { get { return this.Columns["EmailsBodyYourLogin"]; } }

      public DataColumn PresentGetFutureSampleBallotsDialogColumn { get { return this.Columns["PresentGetFutureSampleBallotsDialog"]; } }

      public DataColumn WeNeedYourHelpNagFrequencyColumn { get { return this.Columns["WeNeedYourHelpNagFrequency"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ID", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTestMode", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsDebugMode", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsCachePages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsMasterControlsVisible", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageCacheSeconds", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DefaultBallotsReady", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsUSPresOfficialsReportCurrent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("USPresElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsUSSenateOfficialsReportCurrent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("USSenateElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsUSHouseOfficialsReportCurrent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("USHouseElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsElectionDeletionPermitted", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectedOfficialsLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotCandidateLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectedOfficialsAdminLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotCandidateAdminLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MasterIssueLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MasterIssueReportsLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateAdminHomeLinks", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DesignCodeLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrganizationCodeLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticalPartyLinksLine", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BoardOfElections50StateLinks", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Report1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Report2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemoveElectionPagesIntro", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsLog301And404Errors", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsUpcomingUS", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsUpcomingStates", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsUpcomingCounties", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsUpcomingLocals", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsPreviousUS", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsPreviousStates", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsPreviousCounties", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateElectionsPreviousLocals", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateOfficialsUS", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateOfficialsStates", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateOfficialsCounties", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BulkUpdateOfficialsLocals", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsNewImageMethods", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectAllRosters", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyAllRosters", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectAllCandidates", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyAllCandidates", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectCandidatesLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyCandidatesLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectElectionRosterPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyElectionRosterPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectElectionCompletion", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyElectionCompletion", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectPartiesLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyPartiesLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateAllRosters", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentAllRosters", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateAllCandidates", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentAllCandidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssuesAnchors", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedBallot", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedElected", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedIntro", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedPoliticianIssue", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedIssue", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedReferendum", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedElectionReport", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedOfficialsReport", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedArchive", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedGlobalNavbar", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedMisc", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CacheRemovedAll", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOmitAnchorGlobalElectionReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOmitAnchorGlobalElectedReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOmitNavbarFederal", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOmitNavbarState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOmitAnchorsSampleBallot", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsZipLookupUseDbTables", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsMakeStreetAndAptNumberTables", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LogAddressesTestedTableName", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LogAddressesTestedStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LogAddressesTestedCityFirstChar", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectElectionRosterGeneral", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyElectionRosterGeneral", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectStateCandidates", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyStateCandidates", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectAllPrimaryRosters", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyAllPrimaryRosters", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateAllPrimaryRosters", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentAllPrimaryRosters", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectThankYou", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyThankYou", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSubjectYourLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsBodyYourLogin", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PresentGetFutureSampleBallotsDialog", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WeNeedYourHelpNagFrequency", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public MasterTable() : this(ColumnSet.All) { }

      public MasterTable(ColumnSet columnSet)
      {
        this.TableName = "Master";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected MasterTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Master
    {
      public const string TableName = "Master";

      public enum Column { ID, IsTestMode, IsDebugMode, IsCachePages, IsMasterControlsVisible, PageCacheSeconds, DefaultBallotsReady, IsUSPresOfficialsReportCurrent, USPresElectionKeyOfficialsReportStatus, IsUSSenateOfficialsReportCurrent, USSenateElectionKeyOfficialsReportStatus, IsUSHouseOfficialsReportCurrent, USHouseElectionKeyOfficialsReportStatus, IsElectionDeletionPermitted, ElectedOfficialsLinksLine, BallotCandidateLinksLine, ElectedOfficialsAdminLinksLine, BallotCandidateAdminLinksLine, MasterIssueLinksLine, MasterIssueReportsLinksLine, StateAdminHomeLinks, DesignCodeLinksLine, OrganizationCodeLinksLine, PoliticalPartyLinksLine, BoardOfElections50StateLinks, Report1, Report2, CacheRemoveElectionPagesIntro, IsLog301And404Errors, BulkUpdateElectionsUpcomingUS, BulkUpdateElectionsUpcomingStates, BulkUpdateElectionsUpcomingCounties, BulkUpdateElectionsUpcomingLocals, BulkUpdateElectionsPreviousUS, BulkUpdateElectionsPreviousStates, BulkUpdateElectionsPreviousCounties, BulkUpdateElectionsPreviousLocals, BulkUpdateOfficialsUS, BulkUpdateOfficialsStates, BulkUpdateOfficialsCounties, BulkUpdateOfficialsLocals, IsNewImageMethods, EmailsSubjectAllRosters, EmailsBodyAllRosters, EmailsSubjectAllCandidates, EmailsBodyAllCandidates, EmailsSubjectCandidatesLogin, EmailsBodyCandidatesLogin, EmailsSubjectElectionRosterPrimary, EmailsBodyElectionRosterPrimary, EmailsSubjectElectionCompletion, EmailsBodyElectionCompletion, EmailsSubjectPartiesLogin, EmailsBodyPartiesLogin, EmailsDateAllRosters, EmailsSentAllRosters, EmailsDateAllCandidates, EmailsSentAllCandidates, IssuesAnchors, CacheRemovedBallot, CacheRemovedElected, CacheRemovedIntro, CacheRemovedPoliticianIssue, CacheRemovedIssue, CacheRemovedReferendum, CacheRemovedElectionReport, CacheRemovedOfficialsReport, CacheRemovedArchive, CacheRemovedGlobalNavbar, CacheRemovedMisc, CacheRemovedAll, IsOmitAnchorGlobalElectionReport, IsOmitAnchorGlobalElectedReport, IsOmitNavbarFederal, IsOmitNavbarState, IsOmitAnchorsSampleBallot, IsZipLookupUseDbTables, IsMakeStreetAndAptNumberTables, LogAddressesTestedTableName, LogAddressesTestedStateCode, LogAddressesTestedCityFirstChar, EmailsSubjectElectionRosterGeneral, EmailsBodyElectionRosterGeneral, EmailsSubjectStateCandidates, EmailsBodyStateCandidates, EmailsSubjectAllPrimaryRosters, EmailsBodyAllPrimaryRosters, EmailsDateAllPrimaryRosters, EmailsSentAllPrimaryRosters, EmailsSubjectThankYou, EmailsBodyThankYou, EmailsSubjectYourLogin, EmailsBodyYourLogin, PresentGetFutureSampleBallotsDialog, WeNeedYourHelpNagFrequency }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ID, "ID" },
        { Column.IsTestMode, "IsTestMode" },
        { Column.IsDebugMode, "IsDebugMode" },
        { Column.IsCachePages, "IsCachePages" },
        { Column.IsMasterControlsVisible, "IsMasterControlsVisible" },
        { Column.PageCacheSeconds, "PageCacheSeconds" },
        { Column.DefaultBallotsReady, "DefaultBallotsReady" },
        { Column.IsUSPresOfficialsReportCurrent, "IsUSPresOfficialsReportCurrent" },
        { Column.USPresElectionKeyOfficialsReportStatus, "USPresElectionKeyOfficialsReportStatus" },
        { Column.IsUSSenateOfficialsReportCurrent, "IsUSSenateOfficialsReportCurrent" },
        { Column.USSenateElectionKeyOfficialsReportStatus, "USSenateElectionKeyOfficialsReportStatus" },
        { Column.IsUSHouseOfficialsReportCurrent, "IsUSHouseOfficialsReportCurrent" },
        { Column.USHouseElectionKeyOfficialsReportStatus, "USHouseElectionKeyOfficialsReportStatus" },
        { Column.IsElectionDeletionPermitted, "IsElectionDeletionPermitted" },
        { Column.ElectedOfficialsLinksLine, "ElectedOfficialsLinksLine" },
        { Column.BallotCandidateLinksLine, "BallotCandidateLinksLine" },
        { Column.ElectedOfficialsAdminLinksLine, "ElectedOfficialsAdminLinksLine" },
        { Column.BallotCandidateAdminLinksLine, "BallotCandidateAdminLinksLine" },
        { Column.MasterIssueLinksLine, "MasterIssueLinksLine" },
        { Column.MasterIssueReportsLinksLine, "MasterIssueReportsLinksLine" },
        { Column.StateAdminHomeLinks, "StateAdminHomeLinks" },
        { Column.DesignCodeLinksLine, "DesignCodeLinksLine" },
        { Column.OrganizationCodeLinksLine, "OrganizationCodeLinksLine" },
        { Column.PoliticalPartyLinksLine, "PoliticalPartyLinksLine" },
        { Column.BoardOfElections50StateLinks, "BoardOfElections50StateLinks" },
        { Column.Report1, "Report1" },
        { Column.Report2, "Report2" },
        { Column.CacheRemoveElectionPagesIntro, "CacheRemoveElectionPagesIntro" },
        { Column.IsLog301And404Errors, "IsLog301And404Errors" },
        { Column.BulkUpdateElectionsUpcomingUS, "BulkUpdateElectionsUpcomingUS" },
        { Column.BulkUpdateElectionsUpcomingStates, "BulkUpdateElectionsUpcomingStates" },
        { Column.BulkUpdateElectionsUpcomingCounties, "BulkUpdateElectionsUpcomingCounties" },
        { Column.BulkUpdateElectionsUpcomingLocals, "BulkUpdateElectionsUpcomingLocals" },
        { Column.BulkUpdateElectionsPreviousUS, "BulkUpdateElectionsPreviousUS" },
        { Column.BulkUpdateElectionsPreviousStates, "BulkUpdateElectionsPreviousStates" },
        { Column.BulkUpdateElectionsPreviousCounties, "BulkUpdateElectionsPreviousCounties" },
        { Column.BulkUpdateElectionsPreviousLocals, "BulkUpdateElectionsPreviousLocals" },
        { Column.BulkUpdateOfficialsUS, "BulkUpdateOfficialsUS" },
        { Column.BulkUpdateOfficialsStates, "BulkUpdateOfficialsStates" },
        { Column.BulkUpdateOfficialsCounties, "BulkUpdateOfficialsCounties" },
        { Column.BulkUpdateOfficialsLocals, "BulkUpdateOfficialsLocals" },
        { Column.IsNewImageMethods, "IsNewImageMethods" },
        { Column.EmailsSubjectAllRosters, "EmailsSubjectAllRosters" },
        { Column.EmailsBodyAllRosters, "EmailsBodyAllRosters" },
        { Column.EmailsSubjectAllCandidates, "EmailsSubjectAllCandidates" },
        { Column.EmailsBodyAllCandidates, "EmailsBodyAllCandidates" },
        { Column.EmailsSubjectCandidatesLogin, "EmailsSubjectCandidatesLogin" },
        { Column.EmailsBodyCandidatesLogin, "EmailsBodyCandidatesLogin" },
        { Column.EmailsSubjectElectionRosterPrimary, "EmailsSubjectElectionRosterPrimary" },
        { Column.EmailsBodyElectionRosterPrimary, "EmailsBodyElectionRosterPrimary" },
        { Column.EmailsSubjectElectionCompletion, "EmailsSubjectElectionCompletion" },
        { Column.EmailsBodyElectionCompletion, "EmailsBodyElectionCompletion" },
        { Column.EmailsSubjectPartiesLogin, "EmailsSubjectPartiesLogin" },
        { Column.EmailsBodyPartiesLogin, "EmailsBodyPartiesLogin" },
        { Column.EmailsDateAllRosters, "EmailsDateAllRosters" },
        { Column.EmailsSentAllRosters, "EmailsSentAllRosters" },
        { Column.EmailsDateAllCandidates, "EmailsDateAllCandidates" },
        { Column.EmailsSentAllCandidates, "EmailsSentAllCandidates" },
        { Column.IssuesAnchors, "IssuesAnchors" },
        { Column.CacheRemovedBallot, "CacheRemovedBallot" },
        { Column.CacheRemovedElected, "CacheRemovedElected" },
        { Column.CacheRemovedIntro, "CacheRemovedIntro" },
        { Column.CacheRemovedPoliticianIssue, "CacheRemovedPoliticianIssue" },
        { Column.CacheRemovedIssue, "CacheRemovedIssue" },
        { Column.CacheRemovedReferendum, "CacheRemovedReferendum" },
        { Column.CacheRemovedElectionReport, "CacheRemovedElectionReport" },
        { Column.CacheRemovedOfficialsReport, "CacheRemovedOfficialsReport" },
        { Column.CacheRemovedArchive, "CacheRemovedArchive" },
        { Column.CacheRemovedGlobalNavbar, "CacheRemovedGlobalNavbar" },
        { Column.CacheRemovedMisc, "CacheRemovedMisc" },
        { Column.CacheRemovedAll, "CacheRemovedAll" },
        { Column.IsOmitAnchorGlobalElectionReport, "IsOmitAnchorGlobalElectionReport" },
        { Column.IsOmitAnchorGlobalElectedReport, "IsOmitAnchorGlobalElectedReport" },
        { Column.IsOmitNavbarFederal, "IsOmitNavbarFederal" },
        { Column.IsOmitNavbarState, "IsOmitNavbarState" },
        { Column.IsOmitAnchorsSampleBallot, "IsOmitAnchorsSampleBallot" },
        { Column.IsZipLookupUseDbTables, "IsZipLookupUseDbTables" },
        { Column.IsMakeStreetAndAptNumberTables, "IsMakeStreetAndAptNumberTables" },
        { Column.LogAddressesTestedTableName, "LogAddressesTestedTableName" },
        { Column.LogAddressesTestedStateCode, "LogAddressesTestedStateCode" },
        { Column.LogAddressesTestedCityFirstChar, "LogAddressesTestedCityFirstChar" },
        { Column.EmailsSubjectElectionRosterGeneral, "EmailsSubjectElectionRosterGeneral" },
        { Column.EmailsBodyElectionRosterGeneral, "EmailsBodyElectionRosterGeneral" },
        { Column.EmailsSubjectStateCandidates, "EmailsSubjectStateCandidates" },
        { Column.EmailsBodyStateCandidates, "EmailsBodyStateCandidates" },
        { Column.EmailsSubjectAllPrimaryRosters, "EmailsSubjectAllPrimaryRosters" },
        { Column.EmailsBodyAllPrimaryRosters, "EmailsBodyAllPrimaryRosters" },
        { Column.EmailsDateAllPrimaryRosters, "EmailsDateAllPrimaryRosters" },
        { Column.EmailsSentAllPrimaryRosters, "EmailsSentAllPrimaryRosters" },
        { Column.EmailsSubjectThankYou, "EmailsSubjectThankYou" },
        { Column.EmailsBodyThankYou, "EmailsBodyThankYou" },
        { Column.EmailsSubjectYourLogin, "EmailsSubjectYourLogin" },
        { Column.EmailsBodyYourLogin, "EmailsBodyYourLogin" },
        { Column.PresentGetFutureSampleBallotsDialog, "PresentGetFutureSampleBallotsDialog" },
        { Column.WeNeedYourHelpNagFrequency, "WeNeedYourHelpNagFrequency" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ID,IsTestMode,IsDebugMode,IsCachePages,IsMasterControlsVisible,PageCacheSeconds,DefaultBallotsReady,IsUSPresOfficialsReportCurrent,USPresElectionKeyOfficialsReportStatus,IsUSSenateOfficialsReportCurrent,USSenateElectionKeyOfficialsReportStatus,IsUSHouseOfficialsReportCurrent,USHouseElectionKeyOfficialsReportStatus,IsElectionDeletionPermitted,ElectedOfficialsLinksLine,BallotCandidateLinksLine,ElectedOfficialsAdminLinksLine,BallotCandidateAdminLinksLine,MasterIssueLinksLine,MasterIssueReportsLinksLine,StateAdminHomeLinks,DesignCodeLinksLine,OrganizationCodeLinksLine,PoliticalPartyLinksLine,BoardOfElections50StateLinks,Report1,Report2,CacheRemoveElectionPagesIntro,IsLog301And404Errors,BulkUpdateElectionsUpcomingUS,BulkUpdateElectionsUpcomingStates,BulkUpdateElectionsUpcomingCounties,BulkUpdateElectionsUpcomingLocals,BulkUpdateElectionsPreviousUS,BulkUpdateElectionsPreviousStates,BulkUpdateElectionsPreviousCounties,BulkUpdateElectionsPreviousLocals,BulkUpdateOfficialsUS,BulkUpdateOfficialsStates,BulkUpdateOfficialsCounties,BulkUpdateOfficialsLocals,IsNewImageMethods,EmailsSubjectAllRosters,EmailsBodyAllRosters,EmailsSubjectAllCandidates,EmailsBodyAllCandidates,EmailsSubjectCandidatesLogin,EmailsBodyCandidatesLogin,EmailsSubjectElectionRosterPrimary,EmailsBodyElectionRosterPrimary,EmailsSubjectElectionCompletion,EmailsBodyElectionCompletion,EmailsSubjectPartiesLogin,EmailsBodyPartiesLogin,EmailsDateAllRosters,EmailsSentAllRosters,EmailsDateAllCandidates,EmailsSentAllCandidates,IssuesAnchors,CacheRemovedBallot,CacheRemovedElected,CacheRemovedIntro,CacheRemovedPoliticianIssue,CacheRemovedIssue,CacheRemovedReferendum,CacheRemovedElectionReport,CacheRemovedOfficialsReport,CacheRemovedArchive,CacheRemovedGlobalNavbar,CacheRemovedMisc,CacheRemovedAll,IsOmitAnchorGlobalElectionReport,IsOmitAnchorGlobalElectedReport,IsOmitNavbarFederal,IsOmitNavbarState,IsOmitAnchorsSampleBallot,IsZipLookupUseDbTables,IsMakeStreetAndAptNumberTables,LogAddressesTestedTableName,LogAddressesTestedStateCode,LogAddressesTestedCityFirstChar,EmailsSubjectElectionRosterGeneral,EmailsBodyElectionRosterGeneral,EmailsSubjectStateCandidates,EmailsBodyStateCandidates,EmailsSubjectAllPrimaryRosters,EmailsBodyAllPrimaryRosters,EmailsDateAllPrimaryRosters,EmailsSentAllPrimaryRosters,EmailsSubjectThankYou,EmailsBodyThankYou,EmailsSubjectYourLogin,EmailsBodyYourLogin,PresentGetFutureSampleBallotsDialog,WeNeedYourHelpNagFrequency FROM Master";
        }
      }

      public static MasterTable FillTable(DbCommand command)
      {
        return FillTable(command, MasterTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static MasterTable FillTable(DbCommand command, MasterTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          MasterTable table = new MasterTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IDColumnName { get { return "ID"; } }

      public static string IsTestModeColumnName { get { return "IsTestMode"; } }

      public static string IsDebugModeColumnName { get { return "IsDebugMode"; } }

      public static string IsCachePagesColumnName { get { return "IsCachePages"; } }

      public static string IsMasterControlsVisibleColumnName { get { return "IsMasterControlsVisible"; } }

      public static string PageCacheSecondsColumnName { get { return "PageCacheSeconds"; } }

      public static string DefaultBallotsReadyColumnName { get { return "DefaultBallotsReady"; } }

      public static string IsUSPresOfficialsReportCurrentColumnName { get { return "IsUSPresOfficialsReportCurrent"; } }

      public static string USPresElectionKeyOfficialsReportStatusColumnName { get { return "USPresElectionKeyOfficialsReportStatus"; } }

      public static string IsUSSenateOfficialsReportCurrentColumnName { get { return "IsUSSenateOfficialsReportCurrent"; } }

      public static string USSenateElectionKeyOfficialsReportStatusColumnName { get { return "USSenateElectionKeyOfficialsReportStatus"; } }

      public static string IsUSHouseOfficialsReportCurrentColumnName { get { return "IsUSHouseOfficialsReportCurrent"; } }

      public static string USHouseElectionKeyOfficialsReportStatusColumnName { get { return "USHouseElectionKeyOfficialsReportStatus"; } }

      public static string IsElectionDeletionPermittedColumnName { get { return "IsElectionDeletionPermitted"; } }

      public static string ElectedOfficialsLinksLineColumnName { get { return "ElectedOfficialsLinksLine"; } }

      public static string BallotCandidateLinksLineColumnName { get { return "BallotCandidateLinksLine"; } }

      public static string ElectedOfficialsAdminLinksLineColumnName { get { return "ElectedOfficialsAdminLinksLine"; } }

      public static string BallotCandidateAdminLinksLineColumnName { get { return "BallotCandidateAdminLinksLine"; } }

      public static string MasterIssueLinksLineColumnName { get { return "MasterIssueLinksLine"; } }

      public static string MasterIssueReportsLinksLineColumnName { get { return "MasterIssueReportsLinksLine"; } }

      public static string StateAdminHomeLinksColumnName { get { return "StateAdminHomeLinks"; } }

      public static string DesignCodeLinksLineColumnName { get { return "DesignCodeLinksLine"; } }

      public static string OrganizationCodeLinksLineColumnName { get { return "OrganizationCodeLinksLine"; } }

      public static string PoliticalPartyLinksLineColumnName { get { return "PoliticalPartyLinksLine"; } }

      public static string BoardOfElections50StateLinksColumnName { get { return "BoardOfElections50StateLinks"; } }

      public static string Report1ColumnName { get { return "Report1"; } }

      public static string Report2ColumnName { get { return "Report2"; } }

      public static string CacheRemoveElectionPagesIntroColumnName { get { return "CacheRemoveElectionPagesIntro"; } }

      public static string IsLog301And404ErrorsColumnName { get { return "IsLog301And404Errors"; } }

      public static string BulkUpdateElectionsUpcomingUSColumnName { get { return "BulkUpdateElectionsUpcomingUS"; } }

      public static string BulkUpdateElectionsUpcomingStatesColumnName { get { return "BulkUpdateElectionsUpcomingStates"; } }

      public static string BulkUpdateElectionsUpcomingCountiesColumnName { get { return "BulkUpdateElectionsUpcomingCounties"; } }

      public static string BulkUpdateElectionsUpcomingLocalsColumnName { get { return "BulkUpdateElectionsUpcomingLocals"; } }

      public static string BulkUpdateElectionsPreviousUSColumnName { get { return "BulkUpdateElectionsPreviousUS"; } }

      public static string BulkUpdateElectionsPreviousStatesColumnName { get { return "BulkUpdateElectionsPreviousStates"; } }

      public static string BulkUpdateElectionsPreviousCountiesColumnName { get { return "BulkUpdateElectionsPreviousCounties"; } }

      public static string BulkUpdateElectionsPreviousLocalsColumnName { get { return "BulkUpdateElectionsPreviousLocals"; } }

      public static string BulkUpdateOfficialsUSColumnName { get { return "BulkUpdateOfficialsUS"; } }

      public static string BulkUpdateOfficialsStatesColumnName { get { return "BulkUpdateOfficialsStates"; } }

      public static string BulkUpdateOfficialsCountiesColumnName { get { return "BulkUpdateOfficialsCounties"; } }

      public static string BulkUpdateOfficialsLocalsColumnName { get { return "BulkUpdateOfficialsLocals"; } }

      public static string IsNewImageMethodsColumnName { get { return "IsNewImageMethods"; } }

      public static string EmailsSubjectAllRostersColumnName { get { return "EmailsSubjectAllRosters"; } }

      public static string EmailsBodyAllRostersColumnName { get { return "EmailsBodyAllRosters"; } }

      public static string EmailsSubjectAllCandidatesColumnName { get { return "EmailsSubjectAllCandidates"; } }

      public static string EmailsBodyAllCandidatesColumnName { get { return "EmailsBodyAllCandidates"; } }

      public static string EmailsSubjectCandidatesLoginColumnName { get { return "EmailsSubjectCandidatesLogin"; } }

      public static string EmailsBodyCandidatesLoginColumnName { get { return "EmailsBodyCandidatesLogin"; } }

      public static string EmailsSubjectElectionRosterPrimaryColumnName { get { return "EmailsSubjectElectionRosterPrimary"; } }

      public static string EmailsBodyElectionRosterPrimaryColumnName { get { return "EmailsBodyElectionRosterPrimary"; } }

      public static string EmailsSubjectElectionCompletionColumnName { get { return "EmailsSubjectElectionCompletion"; } }

      public static string EmailsBodyElectionCompletionColumnName { get { return "EmailsBodyElectionCompletion"; } }

      public static string EmailsSubjectPartiesLoginColumnName { get { return "EmailsSubjectPartiesLogin"; } }

      public static string EmailsBodyPartiesLoginColumnName { get { return "EmailsBodyPartiesLogin"; } }

      public static string EmailsDateAllRostersColumnName { get { return "EmailsDateAllRosters"; } }

      public static string EmailsSentAllRostersColumnName { get { return "EmailsSentAllRosters"; } }

      public static string EmailsDateAllCandidatesColumnName { get { return "EmailsDateAllCandidates"; } }

      public static string EmailsSentAllCandidatesColumnName { get { return "EmailsSentAllCandidates"; } }

      public static string IssuesAnchorsColumnName { get { return "IssuesAnchors"; } }

      public static string CacheRemovedBallotColumnName { get { return "CacheRemovedBallot"; } }

      public static string CacheRemovedElectedColumnName { get { return "CacheRemovedElected"; } }

      public static string CacheRemovedIntroColumnName { get { return "CacheRemovedIntro"; } }

      public static string CacheRemovedPoliticianIssueColumnName { get { return "CacheRemovedPoliticianIssue"; } }

      public static string CacheRemovedIssueColumnName { get { return "CacheRemovedIssue"; } }

      public static string CacheRemovedReferendumColumnName { get { return "CacheRemovedReferendum"; } }

      public static string CacheRemovedElectionReportColumnName { get { return "CacheRemovedElectionReport"; } }

      public static string CacheRemovedOfficialsReportColumnName { get { return "CacheRemovedOfficialsReport"; } }

      public static string CacheRemovedArchiveColumnName { get { return "CacheRemovedArchive"; } }

      public static string CacheRemovedGlobalNavbarColumnName { get { return "CacheRemovedGlobalNavbar"; } }

      public static string CacheRemovedMiscColumnName { get { return "CacheRemovedMisc"; } }

      public static string CacheRemovedAllColumnName { get { return "CacheRemovedAll"; } }

      public static string IsOmitAnchorGlobalElectionReportColumnName { get { return "IsOmitAnchorGlobalElectionReport"; } }

      public static string IsOmitAnchorGlobalElectedReportColumnName { get { return "IsOmitAnchorGlobalElectedReport"; } }

      public static string IsOmitNavbarFederalColumnName { get { return "IsOmitNavbarFederal"; } }

      public static string IsOmitNavbarStateColumnName { get { return "IsOmitNavbarState"; } }

      public static string IsOmitAnchorsSampleBallotColumnName { get { return "IsOmitAnchorsSampleBallot"; } }

      public static string IsZipLookupUseDbTablesColumnName { get { return "IsZipLookupUseDbTables"; } }

      public static string IsMakeStreetAndAptNumberTablesColumnName { get { return "IsMakeStreetAndAptNumberTables"; } }

      public static string LogAddressesTestedTableNameColumnName { get { return "LogAddressesTestedTableName"; } }

      public static string LogAddressesTestedStateCodeColumnName { get { return "LogAddressesTestedStateCode"; } }

      public static string LogAddressesTestedCityFirstCharColumnName { get { return "LogAddressesTestedCityFirstChar"; } }

      public static string EmailsSubjectElectionRosterGeneralColumnName { get { return "EmailsSubjectElectionRosterGeneral"; } }

      public static string EmailsBodyElectionRosterGeneralColumnName { get { return "EmailsBodyElectionRosterGeneral"; } }

      public static string EmailsSubjectStateCandidatesColumnName { get { return "EmailsSubjectStateCandidates"; } }

      public static string EmailsBodyStateCandidatesColumnName { get { return "EmailsBodyStateCandidates"; } }

      public static string EmailsSubjectAllPrimaryRostersColumnName { get { return "EmailsSubjectAllPrimaryRosters"; } }

      public static string EmailsBodyAllPrimaryRostersColumnName { get { return "EmailsBodyAllPrimaryRosters"; } }

      public static string EmailsDateAllPrimaryRostersColumnName { get { return "EmailsDateAllPrimaryRosters"; } }

      public static string EmailsSentAllPrimaryRostersColumnName { get { return "EmailsSentAllPrimaryRosters"; } }

      public static string EmailsSubjectThankYouColumnName { get { return "EmailsSubjectThankYou"; } }

      public static string EmailsBodyThankYouColumnName { get { return "EmailsBodyThankYou"; } }

      public static string EmailsSubjectYourLoginColumnName { get { return "EmailsSubjectYourLogin"; } }

      public static string EmailsBodyYourLoginColumnName { get { return "EmailsBodyYourLogin"; } }

      public static string PresentGetFutureSampleBallotsDialogColumnName { get { return "PresentGetFutureSampleBallotsDialog"; } }

      public static string WeNeedYourHelpNagFrequencyColumnName { get { return "WeNeedYourHelpNagFrequency"; } }

      public static int IDMaxLength { get { return 6; } }

      public static int DefaultBallotsReadyMaxLength { get { return 1; } }

      public static int USPresElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static int USSenateElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static int USHouseElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static int ElectedOfficialsLinksLineMaxLength { get { return int.MaxValue; } }

      public static int BallotCandidateLinksLineMaxLength { get { return int.MaxValue; } }

      public static int ElectedOfficialsAdminLinksLineMaxLength { get { return int.MaxValue; } }

      public static int BallotCandidateAdminLinksLineMaxLength { get { return int.MaxValue; } }

      public static int MasterIssueLinksLineMaxLength { get { return int.MaxValue; } }

      public static int MasterIssueReportsLinksLineMaxLength { get { return int.MaxValue; } }

      public static int StateAdminHomeLinksMaxLength { get { return int.MaxValue; } }

      public static int DesignCodeLinksLineMaxLength { get { return int.MaxValue; } }

      public static int OrganizationCodeLinksLineMaxLength { get { return int.MaxValue; } }

      public static int PoliticalPartyLinksLineMaxLength { get { return int.MaxValue; } }

      public static int BoardOfElections50StateLinksMaxLength { get { return int.MaxValue; } }

      public static int Report1MaxLength { get { return int.MaxValue; } }

      public static int Report2MaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectAllRostersMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyAllRostersMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectAllCandidatesMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyAllCandidatesMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectCandidatesLoginMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyCandidatesLoginMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectElectionRosterPrimaryMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyElectionRosterPrimaryMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectElectionCompletionMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyElectionCompletionMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectPartiesLoginMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyPartiesLoginMaxLength { get { return int.MaxValue; } }

      public static int IssuesAnchorsMaxLength { get { return int.MaxValue; } }

      public static int LogAddressesTestedTableNameMaxLength { get { return 50; } }

      public static int LogAddressesTestedStateCodeMaxLength { get { return 2; } }

      public static int LogAddressesTestedCityFirstCharMaxLength { get { return 1; } }

      public static int EmailsSubjectElectionRosterGeneralMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyElectionRosterGeneralMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectStateCandidatesMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyStateCandidatesMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectAllPrimaryRostersMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyAllPrimaryRostersMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectThankYouMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyThankYouMaxLength { get { return int.MaxValue; } }

      public static int EmailsSubjectYourLoginMaxLength { get { return int.MaxValue; } }

      public static int EmailsBodyYourLoginMaxLength { get { return int.MaxValue; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetID(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ID FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsTestMode()
      {
        return _GetIsTestMode(null);
      }

      public static Boolean GetIsTestMode(Boolean defaultValue)
      {
        return _GetIsTestMode(defaultValue).Value;
      }

      private static Boolean? _GetIsTestMode(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsTestMode FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsDebugMode()
      {
        return _GetIsDebugMode(null);
      }

      public static Boolean GetIsDebugMode(Boolean defaultValue)
      {
        return _GetIsDebugMode(defaultValue).Value;
      }

      private static Boolean? _GetIsDebugMode(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsDebugMode FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsCachePages()
      {
        return _GetIsCachePages(null);
      }

      public static Boolean GetIsCachePages(Boolean defaultValue)
      {
        return _GetIsCachePages(defaultValue).Value;
      }

      private static Boolean? _GetIsCachePages(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsCachePages FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsMasterControlsVisible()
      {
        return _GetIsMasterControlsVisible(null);
      }

      public static Boolean GetIsMasterControlsVisible(Boolean defaultValue)
      {
        return _GetIsMasterControlsVisible(defaultValue).Value;
      }

      private static Boolean? _GetIsMasterControlsVisible(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsMasterControlsVisible FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetPageCacheSeconds()
      {
        return _GetPageCacheSeconds(null);
      }

      public static Int32 GetPageCacheSeconds(Int32 defaultValue)
      {
        return _GetPageCacheSeconds(defaultValue).Value;
      }

      private static Int32? _GetPageCacheSeconds(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PageCacheSeconds FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetDefaultBallotsReady(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DefaultBallotsReady FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsUSPresOfficialsReportCurrent()
      {
        return _GetIsUSPresOfficialsReportCurrent(null);
      }

      public static Boolean GetIsUSPresOfficialsReportCurrent(Boolean defaultValue)
      {
        return _GetIsUSPresOfficialsReportCurrent(defaultValue).Value;
      }

      private static Boolean? _GetIsUSPresOfficialsReportCurrent(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUSPresOfficialsReportCurrent FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUSPresElectionKeyOfficialsReportStatus(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT USPresElectionKeyOfficialsReportStatus FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsUSSenateOfficialsReportCurrent()
      {
        return _GetIsUSSenateOfficialsReportCurrent(null);
      }

      public static Boolean GetIsUSSenateOfficialsReportCurrent(Boolean defaultValue)
      {
        return _GetIsUSSenateOfficialsReportCurrent(defaultValue).Value;
      }

      private static Boolean? _GetIsUSSenateOfficialsReportCurrent(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUSSenateOfficialsReportCurrent FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUSSenateElectionKeyOfficialsReportStatus(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT USSenateElectionKeyOfficialsReportStatus FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsUSHouseOfficialsReportCurrent()
      {
        return _GetIsUSHouseOfficialsReportCurrent(null);
      }

      public static Boolean GetIsUSHouseOfficialsReportCurrent(Boolean defaultValue)
      {
        return _GetIsUSHouseOfficialsReportCurrent(defaultValue).Value;
      }

      private static Boolean? _GetIsUSHouseOfficialsReportCurrent(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUSHouseOfficialsReportCurrent FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUSHouseElectionKeyOfficialsReportStatus(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT USHouseElectionKeyOfficialsReportStatus FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsElectionDeletionPermitted()
      {
        return _GetIsElectionDeletionPermitted(null);
      }

      public static Boolean GetIsElectionDeletionPermitted(Boolean defaultValue)
      {
        return _GetIsElectionDeletionPermitted(defaultValue).Value;
      }

      private static Boolean? _GetIsElectionDeletionPermitted(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsElectionDeletionPermitted FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetElectedOfficialsLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectedOfficialsLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotCandidateLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotCandidateLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectedOfficialsAdminLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectedOfficialsAdminLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotCandidateAdminLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotCandidateAdminLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMasterIssueLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MasterIssueLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMasterIssueReportsLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MasterIssueReportsLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAdminHomeLinks(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateAdminHomeLinks FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDesignCodeLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DesignCodeLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOrganizationCodeLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OrganizationCodeLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticalPartyLinksLine(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticalPartyLinksLine FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBoardOfElections50StateLinks(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BoardOfElections50StateLinks FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReport1(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Report1 FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReport2(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Report2 FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetCacheRemoveElectionPagesIntro()
      {
        return _GetCacheRemoveElectionPagesIntro(null);
      }

      public static DateTime GetCacheRemoveElectionPagesIntro(DateTime defaultValue)
      {
        return _GetCacheRemoveElectionPagesIntro(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemoveElectionPagesIntro(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemoveElectionPagesIntro FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsLog301And404Errors()
      {
        return _GetIsLog301And404Errors(null);
      }

      public static Boolean GetIsLog301And404Errors(Boolean defaultValue)
      {
        return _GetIsLog301And404Errors(defaultValue).Value;
      }

      private static Boolean? _GetIsLog301And404Errors(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsLog301And404Errors FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetBulkUpdateElectionsUpcomingUS()
      {
        return _GetBulkUpdateElectionsUpcomingUS(null);
      }

      public static DateTime GetBulkUpdateElectionsUpcomingUS(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsUpcomingUS(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsUpcomingUS(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsUpcomingUS FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsUpcomingStates()
      {
        return _GetBulkUpdateElectionsUpcomingStates(null);
      }

      public static DateTime GetBulkUpdateElectionsUpcomingStates(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsUpcomingStates(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsUpcomingStates(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsUpcomingStates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsUpcomingCounties()
      {
        return _GetBulkUpdateElectionsUpcomingCounties(null);
      }

      public static DateTime GetBulkUpdateElectionsUpcomingCounties(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsUpcomingCounties(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsUpcomingCounties(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsUpcomingCounties FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsUpcomingLocals()
      {
        return _GetBulkUpdateElectionsUpcomingLocals(null);
      }

      public static DateTime GetBulkUpdateElectionsUpcomingLocals(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsUpcomingLocals(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsUpcomingLocals(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsUpcomingLocals FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsPreviousUS()
      {
        return _GetBulkUpdateElectionsPreviousUS(null);
      }

      public static DateTime GetBulkUpdateElectionsPreviousUS(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsPreviousUS(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsPreviousUS(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsPreviousUS FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsPreviousStates()
      {
        return _GetBulkUpdateElectionsPreviousStates(null);
      }

      public static DateTime GetBulkUpdateElectionsPreviousStates(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsPreviousStates(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsPreviousStates(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsPreviousStates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsPreviousCounties()
      {
        return _GetBulkUpdateElectionsPreviousCounties(null);
      }

      public static DateTime GetBulkUpdateElectionsPreviousCounties(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsPreviousCounties(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsPreviousCounties(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsPreviousCounties FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateElectionsPreviousLocals()
      {
        return _GetBulkUpdateElectionsPreviousLocals(null);
      }

      public static DateTime GetBulkUpdateElectionsPreviousLocals(DateTime defaultValue)
      {
        return _GetBulkUpdateElectionsPreviousLocals(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateElectionsPreviousLocals(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateElectionsPreviousLocals FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateOfficialsUS()
      {
        return _GetBulkUpdateOfficialsUS(null);
      }

      public static DateTime GetBulkUpdateOfficialsUS(DateTime defaultValue)
      {
        return _GetBulkUpdateOfficialsUS(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateOfficialsUS(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateOfficialsUS FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateOfficialsStates()
      {
        return _GetBulkUpdateOfficialsStates(null);
      }

      public static DateTime GetBulkUpdateOfficialsStates(DateTime defaultValue)
      {
        return _GetBulkUpdateOfficialsStates(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateOfficialsStates(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateOfficialsStates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateOfficialsCounties()
      {
        return _GetBulkUpdateOfficialsCounties(null);
      }

      public static DateTime GetBulkUpdateOfficialsCounties(DateTime defaultValue)
      {
        return _GetBulkUpdateOfficialsCounties(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateOfficialsCounties(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateOfficialsCounties FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetBulkUpdateOfficialsLocals()
      {
        return _GetBulkUpdateOfficialsLocals(null);
      }

      public static DateTime GetBulkUpdateOfficialsLocals(DateTime defaultValue)
      {
        return _GetBulkUpdateOfficialsLocals(defaultValue).Value;
      }

      private static DateTime? _GetBulkUpdateOfficialsLocals(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT BulkUpdateOfficialsLocals FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsNewImageMethods()
      {
        return _GetIsNewImageMethods(null);
      }

      public static Boolean GetIsNewImageMethods(Boolean defaultValue)
      {
        return _GetIsNewImageMethods(defaultValue).Value;
      }

      private static Boolean? _GetIsNewImageMethods(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsNewImageMethods FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetEmailsSubjectAllRosters(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectAllRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyAllRosters(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyAllRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectAllCandidates(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectAllCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyAllCandidates(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyAllCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectCandidatesLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectCandidatesLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyCandidatesLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyCandidatesLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectElectionRosterPrimary(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectElectionRosterPrimary FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyElectionRosterPrimary(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyElectionRosterPrimary FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectElectionCompletion(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectElectionCompletion FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyElectionCompletion(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyElectionCompletion FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectPartiesLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectPartiesLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyPartiesLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyPartiesLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetEmailsDateAllRosters()
      {
        return _GetEmailsDateAllRosters(null);
      }

      public static DateTime GetEmailsDateAllRosters(DateTime defaultValue)
      {
        return _GetEmailsDateAllRosters(defaultValue).Value;
      }

      private static DateTime? _GetEmailsDateAllRosters(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateAllRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentAllRosters()
      {
        return _GetEmailsSentAllRosters(null);
      }

      public static Int32 GetEmailsSentAllRosters(Int32 defaultValue)
      {
        return _GetEmailsSentAllRosters(defaultValue).Value;
      }

      private static Int32? _GetEmailsSentAllRosters(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentAllRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateAllCandidates()
      {
        return _GetEmailsDateAllCandidates(null);
      }

      public static DateTime GetEmailsDateAllCandidates(DateTime defaultValue)
      {
        return _GetEmailsDateAllCandidates(defaultValue).Value;
      }

      private static DateTime? _GetEmailsDateAllCandidates(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateAllCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentAllCandidates()
      {
        return _GetEmailsSentAllCandidates(null);
      }

      public static Int32 GetEmailsSentAllCandidates(Int32 defaultValue)
      {
        return _GetEmailsSentAllCandidates(defaultValue).Value;
      }

      private static Int32? _GetEmailsSentAllCandidates(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentAllCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetIssuesAnchors(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssuesAnchors FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetCacheRemovedBallot()
      {
        return _GetCacheRemovedBallot(null);
      }

      public static DateTime GetCacheRemovedBallot(DateTime defaultValue)
      {
        return _GetCacheRemovedBallot(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedBallot(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedBallot FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedElected()
      {
        return _GetCacheRemovedElected(null);
      }

      public static DateTime GetCacheRemovedElected(DateTime defaultValue)
      {
        return _GetCacheRemovedElected(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedElected(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedElected FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedIntro()
      {
        return _GetCacheRemovedIntro(null);
      }

      public static DateTime GetCacheRemovedIntro(DateTime defaultValue)
      {
        return _GetCacheRemovedIntro(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedIntro(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedIntro FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedPoliticianIssue()
      {
        return _GetCacheRemovedPoliticianIssue(null);
      }

      public static DateTime GetCacheRemovedPoliticianIssue(DateTime defaultValue)
      {
        return _GetCacheRemovedPoliticianIssue(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedPoliticianIssue(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedPoliticianIssue FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedIssue()
      {
        return _GetCacheRemovedIssue(null);
      }

      public static DateTime GetCacheRemovedIssue(DateTime defaultValue)
      {
        return _GetCacheRemovedIssue(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedIssue(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedIssue FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedReferendum()
      {
        return _GetCacheRemovedReferendum(null);
      }

      public static DateTime GetCacheRemovedReferendum(DateTime defaultValue)
      {
        return _GetCacheRemovedReferendum(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedReferendum(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedReferendum FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedElectionReport()
      {
        return _GetCacheRemovedElectionReport(null);
      }

      public static DateTime GetCacheRemovedElectionReport(DateTime defaultValue)
      {
        return _GetCacheRemovedElectionReport(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedElectionReport(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedElectionReport FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedOfficialsReport()
      {
        return _GetCacheRemovedOfficialsReport(null);
      }

      public static DateTime GetCacheRemovedOfficialsReport(DateTime defaultValue)
      {
        return _GetCacheRemovedOfficialsReport(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedOfficialsReport(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedOfficialsReport FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedArchive()
      {
        return _GetCacheRemovedArchive(null);
      }

      public static DateTime GetCacheRemovedArchive(DateTime defaultValue)
      {
        return _GetCacheRemovedArchive(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedArchive(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedArchive FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedGlobalNavbar()
      {
        return _GetCacheRemovedGlobalNavbar(null);
      }

      public static DateTime GetCacheRemovedGlobalNavbar(DateTime defaultValue)
      {
        return _GetCacheRemovedGlobalNavbar(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedGlobalNavbar(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedGlobalNavbar FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedMisc()
      {
        return _GetCacheRemovedMisc(null);
      }

      public static DateTime GetCacheRemovedMisc(DateTime defaultValue)
      {
        return _GetCacheRemovedMisc(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedMisc(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedMisc FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCacheRemovedAll()
      {
        return _GetCacheRemovedAll(null);
      }

      public static DateTime GetCacheRemovedAll(DateTime defaultValue)
      {
        return _GetCacheRemovedAll(defaultValue).Value;
      }

      private static DateTime? _GetCacheRemovedAll(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CacheRemovedAll FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsOmitAnchorGlobalElectionReport()
      {
        return _GetIsOmitAnchorGlobalElectionReport(null);
      }

      public static Boolean GetIsOmitAnchorGlobalElectionReport(Boolean defaultValue)
      {
        return _GetIsOmitAnchorGlobalElectionReport(defaultValue).Value;
      }

      private static Boolean? _GetIsOmitAnchorGlobalElectionReport(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOmitAnchorGlobalElectionReport FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOmitAnchorGlobalElectedReport()
      {
        return _GetIsOmitAnchorGlobalElectedReport(null);
      }

      public static Boolean GetIsOmitAnchorGlobalElectedReport(Boolean defaultValue)
      {
        return _GetIsOmitAnchorGlobalElectedReport(defaultValue).Value;
      }

      private static Boolean? _GetIsOmitAnchorGlobalElectedReport(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOmitAnchorGlobalElectedReport FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOmitNavbarFederal()
      {
        return _GetIsOmitNavbarFederal(null);
      }

      public static Boolean GetIsOmitNavbarFederal(Boolean defaultValue)
      {
        return _GetIsOmitNavbarFederal(defaultValue).Value;
      }

      private static Boolean? _GetIsOmitNavbarFederal(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOmitNavbarFederal FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOmitNavbarState()
      {
        return _GetIsOmitNavbarState(null);
      }

      public static Boolean GetIsOmitNavbarState(Boolean defaultValue)
      {
        return _GetIsOmitNavbarState(defaultValue).Value;
      }

      private static Boolean? _GetIsOmitNavbarState(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOmitNavbarState FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOmitAnchorsSampleBallot()
      {
        return _GetIsOmitAnchorsSampleBallot(null);
      }

      public static Boolean GetIsOmitAnchorsSampleBallot(Boolean defaultValue)
      {
        return _GetIsOmitAnchorsSampleBallot(defaultValue).Value;
      }

      private static Boolean? _GetIsOmitAnchorsSampleBallot(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOmitAnchorsSampleBallot FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsZipLookupUseDbTables()
      {
        return _GetIsZipLookupUseDbTables(null);
      }

      public static Boolean GetIsZipLookupUseDbTables(Boolean defaultValue)
      {
        return _GetIsZipLookupUseDbTables(defaultValue).Value;
      }

      private static Boolean? _GetIsZipLookupUseDbTables(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsZipLookupUseDbTables FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsMakeStreetAndAptNumberTables()
      {
        return _GetIsMakeStreetAndAptNumberTables(null);
      }

      public static Boolean GetIsMakeStreetAndAptNumberTables(Boolean defaultValue)
      {
        return _GetIsMakeStreetAndAptNumberTables(defaultValue).Value;
      }

      private static Boolean? _GetIsMakeStreetAndAptNumberTables(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsMakeStreetAndAptNumberTables FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetLogAddressesTestedTableName(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LogAddressesTestedTableName FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLogAddressesTestedStateCode(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LogAddressesTestedStateCode FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLogAddressesTestedCityFirstChar(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LogAddressesTestedCityFirstChar FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectElectionRosterGeneral(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectElectionRosterGeneral FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyElectionRosterGeneral(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyElectionRosterGeneral FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectStateCandidates(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectStateCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyStateCandidates(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyStateCandidates FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectAllPrimaryRosters(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectAllPrimaryRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyAllPrimaryRosters(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyAllPrimaryRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetEmailsDateAllPrimaryRosters()
      {
        return _GetEmailsDateAllPrimaryRosters(null);
      }

      public static DateTime GetEmailsDateAllPrimaryRosters(DateTime defaultValue)
      {
        return _GetEmailsDateAllPrimaryRosters(defaultValue).Value;
      }

      private static DateTime? _GetEmailsDateAllPrimaryRosters(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateAllPrimaryRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentAllPrimaryRosters()
      {
        return _GetEmailsSentAllPrimaryRosters(null);
      }

      public static Int32 GetEmailsSentAllPrimaryRosters(Int32 defaultValue)
      {
        return _GetEmailsSentAllPrimaryRosters(defaultValue).Value;
      }

      private static Int32? _GetEmailsSentAllPrimaryRosters(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentAllPrimaryRosters FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetEmailsSubjectThankYou(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectThankYou FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyThankYou(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyThankYou FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsSubjectYourLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsSubjectYourLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailsBodyYourLogin(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailsBodyYourLogin FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetPresentGetFutureSampleBallotsDialog()
      {
        return _GetPresentGetFutureSampleBallotsDialog(null);
      }

      public static Boolean GetPresentGetFutureSampleBallotsDialog(Boolean defaultValue)
      {
        return _GetPresentGetFutureSampleBallotsDialog(defaultValue).Value;
      }

      private static Boolean? _GetPresentGetFutureSampleBallotsDialog(Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresentGetFutureSampleBallotsDialog FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetWeNeedYourHelpNagFrequency()
      {
        return _GetWeNeedYourHelpNagFrequency(null);
      }

      public static Int32 GetWeNeedYourHelpNagFrequency(Int32 defaultValue)
      {
        return _GetWeNeedYourHelpNagFrequency(defaultValue).Value;
      }

      private static Int32? _GetWeNeedYourHelpNagFrequency(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WeNeedYourHelpNagFrequency FROM Master";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM Master";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateID(String newValue)
      {
        string cmdText = "UPDATE Master SET ID=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsTestMode(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsTestMode=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDebugMode(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsDebugMode=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsCachePages(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsCachePages=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsMasterControlsVisible(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsMasterControlsVisible=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageCacheSeconds(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET PageCacheSeconds=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDefaultBallotsReady(String newValue)
      {
        string cmdText = "UPDATE Master SET DefaultBallotsReady=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUSPresOfficialsReportCurrent(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsUSPresOfficialsReportCurrent=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUSPresElectionKeyOfficialsReportStatus(String newValue)
      {
        string cmdText = "UPDATE Master SET USPresElectionKeyOfficialsReportStatus=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUSSenateOfficialsReportCurrent(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsUSSenateOfficialsReportCurrent=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUSSenateElectionKeyOfficialsReportStatus(String newValue)
      {
        string cmdText = "UPDATE Master SET USSenateElectionKeyOfficialsReportStatus=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUSHouseOfficialsReportCurrent(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsUSHouseOfficialsReportCurrent=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUSHouseElectionKeyOfficialsReportStatus(String newValue)
      {
        string cmdText = "UPDATE Master SET USHouseElectionKeyOfficialsReportStatus=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsElectionDeletionPermitted(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsElectionDeletionPermitted=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectedOfficialsLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET ElectedOfficialsLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotCandidateLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET BallotCandidateLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectedOfficialsAdminLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET ElectedOfficialsAdminLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotCandidateAdminLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET BallotCandidateAdminLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMasterIssueLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET MasterIssueLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMasterIssueReportsLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET MasterIssueReportsLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAdminHomeLinks(String newValue)
      {
        string cmdText = "UPDATE Master SET StateAdminHomeLinks=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDesignCodeLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET DesignCodeLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrganizationCodeLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET OrganizationCodeLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticalPartyLinksLine(String newValue)
      {
        string cmdText = "UPDATE Master SET PoliticalPartyLinksLine=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBoardOfElections50StateLinks(String newValue)
      {
        string cmdText = "UPDATE Master SET BoardOfElections50StateLinks=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReport1(String newValue)
      {
        string cmdText = "UPDATE Master SET Report1=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReport2(String newValue)
      {
        string cmdText = "UPDATE Master SET Report2=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemoveElectionPagesIntro(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemoveElectionPagesIntro=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsLog301And404Errors(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsLog301And404Errors=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsUpcomingUS(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsUpcomingUS=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsUpcomingStates(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsUpcomingStates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsUpcomingCounties(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsUpcomingCounties=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsUpcomingLocals(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsUpcomingLocals=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsPreviousUS(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsPreviousUS=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsPreviousStates(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsPreviousStates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsPreviousCounties(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsPreviousCounties=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateElectionsPreviousLocals(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateElectionsPreviousLocals=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateOfficialsUS(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateOfficialsUS=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateOfficialsStates(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateOfficialsStates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateOfficialsCounties(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateOfficialsCounties=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBulkUpdateOfficialsLocals(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET BulkUpdateOfficialsLocals=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNewImageMethods(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsNewImageMethods=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectAllRosters(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectAllRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyAllRosters(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyAllRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectAllCandidates(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectAllCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyAllCandidates(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyAllCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectCandidatesLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectCandidatesLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyCandidatesLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyCandidatesLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectElectionRosterPrimary(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectElectionRosterPrimary=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyElectionRosterPrimary(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyElectionRosterPrimary=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectElectionCompletion(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectElectionCompletion=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyElectionCompletion(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyElectionCompletion=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectPartiesLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectPartiesLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyPartiesLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyPartiesLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateAllRosters(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET EmailsDateAllRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentAllRosters(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSentAllRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateAllCandidates(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET EmailsDateAllCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentAllCandidates(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSentAllCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssuesAnchors(String newValue)
      {
        string cmdText = "UPDATE Master SET IssuesAnchors=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedBallot(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedBallot=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedElected(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedElected=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedIntro(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedIntro=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedPoliticianIssue(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedPoliticianIssue=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedIssue(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedIssue=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedReferendum(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedReferendum=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedElectionReport(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedElectionReport=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedOfficialsReport(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedOfficialsReport=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedArchive(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedArchive=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedGlobalNavbar(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedGlobalNavbar=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedMisc(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedMisc=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCacheRemovedAll(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET CacheRemovedAll=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOmitAnchorGlobalElectionReport(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsOmitAnchorGlobalElectionReport=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOmitAnchorGlobalElectedReport(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsOmitAnchorGlobalElectedReport=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOmitNavbarFederal(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsOmitNavbarFederal=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOmitNavbarState(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsOmitNavbarState=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOmitAnchorsSampleBallot(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsOmitAnchorsSampleBallot=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsZipLookupUseDbTables(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsZipLookupUseDbTables=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsMakeStreetAndAptNumberTables(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET IsMakeStreetAndAptNumberTables=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogAddressesTestedTableName(String newValue)
      {
        string cmdText = "UPDATE Master SET LogAddressesTestedTableName=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogAddressesTestedStateCode(String newValue)
      {
        string cmdText = "UPDATE Master SET LogAddressesTestedStateCode=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogAddressesTestedCityFirstChar(String newValue)
      {
        string cmdText = "UPDATE Master SET LogAddressesTestedCityFirstChar=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectElectionRosterGeneral(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectElectionRosterGeneral=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyElectionRosterGeneral(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyElectionRosterGeneral=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectStateCandidates(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectStateCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyStateCandidates(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyStateCandidates=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectAllPrimaryRosters(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectAllPrimaryRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyAllPrimaryRosters(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyAllPrimaryRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateAllPrimaryRosters(DateTime newValue)
      {
        string cmdText = "UPDATE Master SET EmailsDateAllPrimaryRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentAllPrimaryRosters(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSentAllPrimaryRosters=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectThankYou(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectThankYou=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyThankYou(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyThankYou=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSubjectYourLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsSubjectYourLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsBodyYourLogin(String newValue)
      {
        string cmdText = "UPDATE Master SET EmailsBodyYourLogin=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresentGetFutureSampleBallotsDialog(Boolean newValue)
      {
        string cmdText = "UPDATE Master SET PresentGetFutureSampleBallotsDialog=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWeNeedYourHelpNagFrequency(Int32 newValue)
      {
        string cmdText = "UPDATE Master SET WeNeedYourHelpNagFrequency=@newValue";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE Master SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(MasterTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case MasterTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Master()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Master

    #region vote.MasterDesign

    public partial class MasterDesignRow : DataRow
    {
      internal MasterDesignRow(DataRowBuilder rb) : base(rb) {}

      public String ID
      {
        get { return this["ID"] as String; }
        set { if (value == null) this["ID"] = DBNull.Value; else this["ID"] = value; }
      }

      public Boolean IsTextFirstFooterAllPages
      {
        get { return (Boolean) this["IsTextFirstFooterAllPages"]; }
        set { this["IsTextFirstFooterAllPages"] = value; }
      }

      public String FirstFooterAllPages
      {
        get { return this["FirstFooterAllPages"] as String; }
        set { if (value == null) this["FirstFooterAllPages"] = DBNull.Value; else this["FirstFooterAllPages"] = value; }
      }

      public Boolean IsTextSecondFooterAllPages
      {
        get { return (Boolean) this["IsTextSecondFooterAllPages"]; }
        set { this["IsTextSecondFooterAllPages"] = value; }
      }

      public String SecondFooterAllPages
      {
        get { return this["SecondFooterAllPages"] as String; }
        set { if (value == null) this["SecondFooterAllPages"] = DBNull.Value; else this["SecondFooterAllPages"] = value; }
      }

      public String EmailUsLineAllPages
      {
        get { return this["EmailUsLineAllPages"] as String; }
        set { if (value == null) this["EmailUsLineAllPages"] = DBNull.Value; else this["EmailUsLineAllPages"] = value; }
      }

      public String EmailUsAddressAllPages
      {
        get { return this["EmailUsAddressAllPages"] as String; }
        set { if (value == null) this["EmailUsAddressAllPages"] = DBNull.Value; else this["EmailUsAddressAllPages"] = value; }
      }

      public String TitleTagDefaultPageAllStatesDomain
      {
        get { return this["TitleTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["TitleTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["TitleTagDefaultPageAllStatesDomain"] = value; }
      }

      public String MetaDescriptionTagDefaultPageAllStatesDomain
      {
        get { return this["MetaDescriptionTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["MetaDescriptionTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["MetaDescriptionTagDefaultPageAllStatesDomain"] = value; }
      }

      public String MetaKeywordsTagDefaultPageAllStatesDomain
      {
        get { return this["MetaKeywordsTagDefaultPageAllStatesDomain"] as String; }
        set { if (value == null) this["MetaKeywordsTagDefaultPageAllStatesDomain"] = DBNull.Value; else this["MetaKeywordsTagDefaultPageAllStatesDomain"] = value; }
      }

      public Boolean IsTextMainContentDefaultPageAllStatesDomainBeforeSelection
      {
        get { return (Boolean) this["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"]; }
        set { this["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public String MainContentDefaultPageAllStatesDomainBeforeSelection
      {
        get { return this["MainContentDefaultPageAllStatesDomainBeforeSelection"] as String; }
        set { if (value == null) this["MainContentDefaultPageAllStatesDomainBeforeSelection"] = DBNull.Value; else this["MainContentDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public Boolean IsTextMainContentDefaultPageAllStatesDomainAfterSelection
      {
        get { return (Boolean) this["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"]; }
        set { this["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String MainContentDefaultPageAllStatesDomainAfterSelection
      {
        get { return this["MainContentDefaultPageAllStatesDomainAfterSelection"] as String; }
        set { if (value == null) this["MainContentDefaultPageAllStatesDomainAfterSelection"] = DBNull.Value; else this["MainContentDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"]; }
        set { this["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public String InstructionsDefaultPageAllStatesDomainBeforeSelection
      {
        get { return this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] as String; }
        set { if (value == null) this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] = DBNull.Value; else this["InstructionsDefaultPageAllStatesDomainBeforeSelection"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageAllStatesDomainAfterSelection
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"]; }
        set { this["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String InstructionsDefaultPageAllStatesDomainAfterSelection
      {
        get { return this["InstructionsDefaultPageAllStatesDomainAfterSelection"] as String; }
        set { if (value == null) this["InstructionsDefaultPageAllStatesDomainAfterSelection"] = DBNull.Value; else this["InstructionsDefaultPageAllStatesDomainAfterSelection"] = value; }
      }

      public String TitleTagDefaultPageSingleStateDomain
      {
        get { return this["TitleTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["TitleTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["TitleTagDefaultPageSingleStateDomain"] = value; }
      }

      public String MetaDescriptionTagDefaultPageSingleStateDomain
      {
        get { return this["MetaDescriptionTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["MetaDescriptionTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["MetaDescriptionTagDefaultPageSingleStateDomain"] = value; }
      }

      public String MetaKeywordsTagDefaultPageSingleStateDomain
      {
        get { return this["MetaKeywordsTagDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["MetaKeywordsTagDefaultPageSingleStateDomain"] = DBNull.Value; else this["MetaKeywordsTagDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsTextInstructionsDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsTextInstructionsDefaultPageSingleStateDomain"]; }
        set { this["IsTextInstructionsDefaultPageSingleStateDomain"] = value; }
      }

      public String InstructionsDefaultPageSingleStateDomain
      {
        get { return this["InstructionsDefaultPageSingleStateDomain"] as String; }
        set { if (value == null) this["InstructionsDefaultPageSingleStateDomain"] = DBNull.Value; else this["InstructionsDefaultPageSingleStateDomain"] = value; }
      }

      public Boolean IsTextInstructionsUpcomingElectionBallotPage
      {
        get { return (Boolean) this["IsTextInstructionsUpcomingElectionBallotPage"]; }
        set { this["IsTextInstructionsUpcomingElectionBallotPage"] = value; }
      }

      public String InstructionsUpcomingElectionBallotPage
      {
        get { return this["InstructionsUpcomingElectionBallotPage"] as String; }
        set { if (value == null) this["InstructionsUpcomingElectionBallotPage"] = DBNull.Value; else this["InstructionsUpcomingElectionBallotPage"] = value; }
      }

      public Boolean IsTextInstructionsPreviousElectionBallotPage
      {
        get { return (Boolean) this["IsTextInstructionsPreviousElectionBallotPage"]; }
        set { this["IsTextInstructionsPreviousElectionBallotPage"] = value; }
      }

      public String InstructionsPreviousElectionBallotPage
      {
        get { return this["InstructionsPreviousElectionBallotPage"] as String; }
        set { if (value == null) this["InstructionsPreviousElectionBallotPage"] = DBNull.Value; else this["InstructionsPreviousElectionBallotPage"] = value; }
      }

      public Boolean IsTextInstructionsElectedPage
      {
        get { return (Boolean) this["IsTextInstructionsElectedPage"]; }
        set { this["IsTextInstructionsElectedPage"] = value; }
      }

      public String InstructionsElectedPage
      {
        get { return this["InstructionsElectedPage"] as String; }
        set { if (value == null) this["InstructionsElectedPage"] = DBNull.Value; else this["InstructionsElectedPage"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSPres
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSPres"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSPres"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSPres
      {
        get { return this["InstructionsElectedOfficialsPageUSPres"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSPres"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSPres"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSSenate
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSSenate"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSSenate"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSSenate
      {
        get { return this["InstructionsElectedOfficialsPageUSSenate"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSSenate"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSSenate"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageUSHouse
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageUSHouse"]; }
        set { this["IsTextInstructionsElectedOfficialsPageUSHouse"] = value; }
      }

      public String InstructionsElectedOfficialsPageUSHouse
      {
        get { return this["InstructionsElectedOfficialsPageUSHouse"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageUSHouse"] = DBNull.Value; else this["InstructionsElectedOfficialsPageUSHouse"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageState
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageState"]; }
        set { this["IsTextInstructionsElectedOfficialsPageState"] = value; }
      }

      public String InstructionsElectedOfficialsPageState
      {
        get { return this["InstructionsElectedOfficialsPageState"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageState"] = DBNull.Value; else this["InstructionsElectedOfficialsPageState"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageCounty
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageCounty"]; }
        set { this["IsTextInstructionsElectedOfficialsPageCounty"] = value; }
      }

      public String InstructionsElectedOfficialsPageCounty
      {
        get { return this["InstructionsElectedOfficialsPageCounty"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageCounty"] = DBNull.Value; else this["InstructionsElectedOfficialsPageCounty"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageLocal
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageLocal"]; }
        set { this["IsTextInstructionsElectedOfficialsPageLocal"] = value; }
      }

      public String InstructionsElectedOfficialsPageLocal
      {
        get { return this["InstructionsElectedOfficialsPageLocal"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageLocal"] = DBNull.Value; else this["InstructionsElectedOfficialsPageLocal"] = value; }
      }

      public Boolean IsTextInstructionsIssuePage
      {
        get { return (Boolean) this["IsTextInstructionsIssuePage"]; }
        set { this["IsTextInstructionsIssuePage"] = value; }
      }

      public String InstructionsIssuePage
      {
        get { return this["InstructionsIssuePage"] as String; }
        set { if (value == null) this["InstructionsIssuePage"] = DBNull.Value; else this["InstructionsIssuePage"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListAnswers
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListAnswers"]; }
        set { this["IsTextInstructionsIssuePageIssueListAnswers"] = value; }
      }

      public String InstructionsIssuePageIssueListAnswers
      {
        get { return this["InstructionsIssuePageIssueListAnswers"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListAnswers"] = DBNull.Value; else this["InstructionsIssuePageIssueListAnswers"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListNoAnswers
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListNoAnswers"]; }
        set { this["IsTextInstructionsIssuePageIssueListNoAnswers"] = value; }
      }

      public String InstructionsIssuePageIssueListNoAnswers
      {
        get { return this["InstructionsIssuePageIssueListNoAnswers"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListNoAnswers"] = DBNull.Value; else this["InstructionsIssuePageIssueListNoAnswers"] = value; }
      }

      public Boolean IsTextInstructionsIssuePageIssueListReport
      {
        get { return (Boolean) this["IsTextInstructionsIssuePageIssueListReport"]; }
        set { this["IsTextInstructionsIssuePageIssueListReport"] = value; }
      }

      public String InstructionsIssuePageIssueListReport
      {
        get { return this["InstructionsIssuePageIssueListReport"] as String; }
        set { if (value == null) this["InstructionsIssuePageIssueListReport"] = DBNull.Value; else this["InstructionsIssuePageIssueListReport"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListAnswers
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListAnswers"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListAnswers"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListAnswers
      {
        get { return this["InstructionsPoliticianIssuePageIssueListAnswers"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListAnswers"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListAnswers"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListNoAnswers
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListNoAnswers
      {
        get { return this["InstructionsPoliticianIssuePageIssueListNoAnswers"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListNoAnswers"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListNoAnswers"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePageIssueListReport
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePageIssueListReport"]; }
        set { this["IsTextInstructionsPoliticianIssuePageIssueListReport"] = value; }
      }

      public String InstructionsPoliticianIssuePageIssueListReport
      {
        get { return this["InstructionsPoliticianIssuePageIssueListReport"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePageIssueListReport"] = DBNull.Value; else this["InstructionsPoliticianIssuePageIssueListReport"] = value; }
      }

      public Boolean IsTextInstructionsPoliticianIssuePage
      {
        get { return (Boolean) this["IsTextInstructionsPoliticianIssuePage"]; }
        set { this["IsTextInstructionsPoliticianIssuePage"] = value; }
      }

      public String InstructionsPoliticianIssuePage
      {
        get { return this["InstructionsPoliticianIssuePage"] as String; }
        set { if (value == null) this["InstructionsPoliticianIssuePage"] = DBNull.Value; else this["InstructionsPoliticianIssuePage"] = value; }
      }

      public Boolean IsTextInstructionsIntroPage
      {
        get { return (Boolean) this["IsTextInstructionsIntroPage"]; }
        set { this["IsTextInstructionsIntroPage"] = value; }
      }

      public String InstructionsIntroPage
      {
        get { return this["InstructionsIntroPage"] as String; }
        set { if (value == null) this["InstructionsIntroPage"] = DBNull.Value; else this["InstructionsIntroPage"] = value; }
      }

      public Boolean IsTextContentAboutUsPage
      {
        get { return (Boolean) this["IsTextContentAboutUsPage"]; }
        set { this["IsTextContentAboutUsPage"] = value; }
      }

      public String ContentAboutUsPage
      {
        get { return this["ContentAboutUsPage"] as String; }
        set { if (value == null) this["ContentAboutUsPage"] = DBNull.Value; else this["ContentAboutUsPage"] = value; }
      }

      public Boolean IsTextContentCandidatesPage
      {
        get { return (Boolean) this["IsTextContentCandidatesPage"]; }
        set { this["IsTextContentCandidatesPage"] = value; }
      }

      public String ContentCandidatesPage
      {
        get { return this["ContentCandidatesPage"] as String; }
        set { if (value == null) this["ContentCandidatesPage"] = DBNull.Value; else this["ContentCandidatesPage"] = value; }
      }

      public Boolean IsTextContentContactUsPage
      {
        get { return (Boolean) this["IsTextContentContactUsPage"]; }
        set { this["IsTextContentContactUsPage"] = value; }
      }

      public String ContentContactUsPage
      {
        get { return this["ContentContactUsPage"] as String; }
        set { if (value == null) this["ContentContactUsPage"] = DBNull.Value; else this["ContentContactUsPage"] = value; }
      }

      public Boolean IsTextContentInternsPage
      {
        get { return (Boolean) this["IsTextContentInternsPage"]; }
        set { this["IsTextContentInternsPage"] = value; }
      }

      public String ContentInternsPage
      {
        get { return this["ContentInternsPage"] as String; }
        set { if (value == null) this["ContentInternsPage"] = DBNull.Value; else this["ContentInternsPage"] = value; }
      }

      public Boolean IsTextContentPartiesPage
      {
        get { return (Boolean) this["IsTextContentPartiesPage"]; }
        set { this["IsTextContentPartiesPage"] = value; }
      }

      public String ContentPartiesPage
      {
        get { return this["ContentPartiesPage"] as String; }
        set { if (value == null) this["ContentPartiesPage"] = DBNull.Value; else this["ContentPartiesPage"] = value; }
      }

      public Boolean IsTextContentVotersPage
      {
        get { return (Boolean) this["IsTextContentVotersPage"]; }
        set { this["IsTextContentVotersPage"] = value; }
      }

      public String ContentVotersPage
      {
        get { return this["ContentVotersPage"] as String; }
        set { if (value == null) this["ContentVotersPage"] = DBNull.Value; else this["ContentVotersPage"] = value; }
      }

      public Boolean IsTextInstructionsArchivesPage
      {
        get { return (Boolean) this["IsTextInstructionsArchivesPage"]; }
        set { this["IsTextInstructionsArchivesPage"] = value; }
      }

      public String InstructionsArchivesPage
      {
        get { return this["InstructionsArchivesPage"] as String; }
        set { if (value == null) this["InstructionsArchivesPage"] = DBNull.Value; else this["InstructionsArchivesPage"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSPresPrimary
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSPresPrimary"]; }
        set { this["IsTextInstructionsElectionPageUSPresPrimary"] = value; }
      }

      public String InstructionsElectionPageUSPresPrimary
      {
        get { return this["InstructionsElectionPageUSPresPrimary"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSPresPrimary"] = DBNull.Value; else this["InstructionsElectionPageUSPresPrimary"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSPres
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSPres"]; }
        set { this["IsTextInstructionsElectionPageUSPres"] = value; }
      }

      public String InstructionsElectionPageUSPres
      {
        get { return this["InstructionsElectionPageUSPres"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSPres"] = DBNull.Value; else this["InstructionsElectionPageUSPres"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSSenate
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSSenate"]; }
        set { this["IsTextInstructionsElectionPageUSSenate"] = value; }
      }

      public String InstructionsElectionPageUSSenate
      {
        get { return this["InstructionsElectionPageUSSenate"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSSenate"] = DBNull.Value; else this["InstructionsElectionPageUSSenate"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageUSHouse
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageUSHouse"]; }
        set { this["IsTextInstructionsElectionPageUSHouse"] = value; }
      }

      public String InstructionsElectionPageUSHouse
      {
        get { return this["InstructionsElectionPageUSHouse"] as String; }
        set { if (value == null) this["InstructionsElectionPageUSHouse"] = DBNull.Value; else this["InstructionsElectionPageUSHouse"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageState
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageState"]; }
        set { this["IsTextInstructionsElectionPageState"] = value; }
      }

      public String InstructionsElectionPageState
      {
        get { return this["InstructionsElectionPageState"] as String; }
        set { if (value == null) this["InstructionsElectionPageState"] = DBNull.Value; else this["InstructionsElectionPageState"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageCounty
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageCounty"]; }
        set { this["IsTextInstructionsElectionPageCounty"] = value; }
      }

      public String InstructionsElectionPageCounty
      {
        get { return this["InstructionsElectionPageCounty"] as String; }
        set { if (value == null) this["InstructionsElectionPageCounty"] = DBNull.Value; else this["InstructionsElectionPageCounty"] = value; }
      }

      public Boolean IsTextInstructionsElectionPageLocal
      {
        get { return (Boolean) this["IsTextInstructionsElectionPageLocal"]; }
        set { this["IsTextInstructionsElectionPageLocal"] = value; }
      }

      public String InstructionsElectionPageLocal
      {
        get { return this["InstructionsElectionPageLocal"] as String; }
        set { if (value == null) this["InstructionsElectionPageLocal"] = DBNull.Value; else this["InstructionsElectionPageLocal"] = value; }
      }

      public Boolean IsTextMainContentDefaultPageSingleStateDomain
      {
        get { return (Boolean) this["IsTextMainContentDefaultPageSingleStateDomain"]; }
        set { this["IsTextMainContentDefaultPageSingleStateDomain"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionNone
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionNone"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionNone"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionNone"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionGeneral
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionGeneral"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionGeneral"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionGeneral"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionOffYear
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionOffYear"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionOffYear"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionOffYear"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionSpecial
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionSpecial"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionSpecial"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionSpecial"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainElectionPrimary
      {
        get { return this["MainContentDefaultPageSingleStateDomainElectionPrimary"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainElectionPrimary"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainElectionPrimary"] = value; }
      }

      public String MainContentDefaultPageSingleStateDomainContestsFederalStatewide
      {
        get { return this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] as String; }
        set { if (value == null) this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] = DBNull.Value; else this["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"] = value; }
      }

      public Boolean IsTextInstructionsElectedOfficialsPageGovernors
      {
        get { return (Boolean) this["IsTextInstructionsElectedOfficialsPageGovernors"]; }
        set { this["IsTextInstructionsElectedOfficialsPageGovernors"] = value; }
      }

      public String InstructionsElectedOfficialsPageGovernors
      {
        get { return this["InstructionsElectedOfficialsPageGovernors"] as String; }
        set { if (value == null) this["InstructionsElectedOfficialsPageGovernors"] = DBNull.Value; else this["InstructionsElectedOfficialsPageGovernors"] = value; }
      }
    }

    [Serializable]
    public partial class MasterDesignTable : TypedTableBase<MasterDesignRow>
    {
      public MasterDesignRow this[int index] { get { return (MasterDesignRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(MasterDesignRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new MasterDesignTable(); }

      new public MasterDesignRow NewRow() { return (MasterDesignRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new MasterDesignRow(rb); }

      protected override Type GetRowType()
      { return typeof(MasterDesignRow); }

      public void RemoveRow(MasterDesignRow row) { this.Rows.Remove(row); }

      public MasterDesignRow NewRow(String id, Boolean isTextFirstFooterAllPages, String firstFooterAllPages, Boolean isTextSecondFooterAllPages, String secondFooterAllPages, String emailUsLineAllPages, String emailUsAddressAllPages, String titleTagDefaultPageAllStatesDomain, String metaDescriptionTagDefaultPageAllStatesDomain, String metaKeywordsTagDefaultPageAllStatesDomain, Boolean isTextMainContentDefaultPageAllStatesDomainBeforeSelection, String mainContentDefaultPageAllStatesDomainBeforeSelection, Boolean isTextMainContentDefaultPageAllStatesDomainAfterSelection, String mainContentDefaultPageAllStatesDomainAfterSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, String instructionsDefaultPageAllStatesDomainBeforeSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainAfterSelection, String instructionsDefaultPageAllStatesDomainAfterSelection, String titleTagDefaultPageSingleStateDomain, String metaDescriptionTagDefaultPageSingleStateDomain, String metaKeywordsTagDefaultPageSingleStateDomain, Boolean isTextInstructionsDefaultPageSingleStateDomain, String instructionsDefaultPageSingleStateDomain, Boolean isTextInstructionsUpcomingElectionBallotPage, String instructionsUpcomingElectionBallotPage, Boolean isTextInstructionsPreviousElectionBallotPage, String instructionsPreviousElectionBallotPage, Boolean isTextInstructionsElectedPage, String instructionsElectedPage, Boolean isTextInstructionsElectedOfficialsPageUSPres, String instructionsElectedOfficialsPageUSPres, Boolean isTextInstructionsElectedOfficialsPageUSSenate, String instructionsElectedOfficialsPageUSSenate, Boolean isTextInstructionsElectedOfficialsPageUSHouse, String instructionsElectedOfficialsPageUSHouse, Boolean isTextInstructionsElectedOfficialsPageState, String instructionsElectedOfficialsPageState, Boolean isTextInstructionsElectedOfficialsPageCounty, String instructionsElectedOfficialsPageCounty, Boolean isTextInstructionsElectedOfficialsPageLocal, String instructionsElectedOfficialsPageLocal, Boolean isTextInstructionsIssuePage, String instructionsIssuePage, Boolean isTextInstructionsIssuePageIssueListAnswers, String instructionsIssuePageIssueListAnswers, Boolean isTextInstructionsIssuePageIssueListNoAnswers, String instructionsIssuePageIssueListNoAnswers, Boolean isTextInstructionsIssuePageIssueListReport, String instructionsIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePageIssueListAnswers, String instructionsPoliticianIssuePageIssueListAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListNoAnswers, String instructionsPoliticianIssuePageIssueListNoAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListReport, String instructionsPoliticianIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePage, String instructionsPoliticianIssuePage, Boolean isTextInstructionsIntroPage, String instructionsIntroPage, Boolean isTextContentAboutUsPage, String contentAboutUsPage, Boolean isTextContentCandidatesPage, String contentCandidatesPage, Boolean isTextContentContactUsPage, String contentContactUsPage, Boolean isTextContentInternsPage, String contentInternsPage, Boolean isTextContentPartiesPage, String contentPartiesPage, Boolean isTextContentVotersPage, String contentVotersPage, Boolean isTextInstructionsArchivesPage, String instructionsArchivesPage, Boolean isTextInstructionsElectionPageUSPresPrimary, String instructionsElectionPageUSPresPrimary, Boolean isTextInstructionsElectionPageUSPres, String instructionsElectionPageUSPres, Boolean isTextInstructionsElectionPageUSSenate, String instructionsElectionPageUSSenate, Boolean isTextInstructionsElectionPageUSHouse, String instructionsElectionPageUSHouse, Boolean isTextInstructionsElectionPageState, String instructionsElectionPageState, Boolean isTextInstructionsElectionPageCounty, String instructionsElectionPageCounty, Boolean isTextInstructionsElectionPageLocal, String instructionsElectionPageLocal, Boolean isTextMainContentDefaultPageSingleStateDomain, String mainContentDefaultPageSingleStateDomainElectionNone, String mainContentDefaultPageSingleStateDomainElectionGeneral, String mainContentDefaultPageSingleStateDomainElectionOffYear, String mainContentDefaultPageSingleStateDomainElectionSpecial, String mainContentDefaultPageSingleStateDomainElectionPrimary, String mainContentDefaultPageSingleStateDomainContestsFederalStatewide, Boolean isTextInstructionsElectedOfficialsPageGovernors, String instructionsElectedOfficialsPageGovernors)
      {
        MasterDesignRow row = NewRow();
        row.ID = id;
        row.IsTextFirstFooterAllPages = isTextFirstFooterAllPages;
        row.FirstFooterAllPages = firstFooterAllPages;
        row.IsTextSecondFooterAllPages = isTextSecondFooterAllPages;
        row.SecondFooterAllPages = secondFooterAllPages;
        row.EmailUsLineAllPages = emailUsLineAllPages;
        row.EmailUsAddressAllPages = emailUsAddressAllPages;
        row.TitleTagDefaultPageAllStatesDomain = titleTagDefaultPageAllStatesDomain;
        row.MetaDescriptionTagDefaultPageAllStatesDomain = metaDescriptionTagDefaultPageAllStatesDomain;
        row.MetaKeywordsTagDefaultPageAllStatesDomain = metaKeywordsTagDefaultPageAllStatesDomain;
        row.IsTextMainContentDefaultPageAllStatesDomainBeforeSelection = isTextMainContentDefaultPageAllStatesDomainBeforeSelection;
        row.MainContentDefaultPageAllStatesDomainBeforeSelection = mainContentDefaultPageAllStatesDomainBeforeSelection;
        row.IsTextMainContentDefaultPageAllStatesDomainAfterSelection = isTextMainContentDefaultPageAllStatesDomainAfterSelection;
        row.MainContentDefaultPageAllStatesDomainAfterSelection = mainContentDefaultPageAllStatesDomainAfterSelection;
        row.IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection = isTextInstructionsDefaultPageAllStatesDomainBeforeSelection;
        row.InstructionsDefaultPageAllStatesDomainBeforeSelection = instructionsDefaultPageAllStatesDomainBeforeSelection;
        row.IsTextInstructionsDefaultPageAllStatesDomainAfterSelection = isTextInstructionsDefaultPageAllStatesDomainAfterSelection;
        row.InstructionsDefaultPageAllStatesDomainAfterSelection = instructionsDefaultPageAllStatesDomainAfterSelection;
        row.TitleTagDefaultPageSingleStateDomain = titleTagDefaultPageSingleStateDomain;
        row.MetaDescriptionTagDefaultPageSingleStateDomain = metaDescriptionTagDefaultPageSingleStateDomain;
        row.MetaKeywordsTagDefaultPageSingleStateDomain = metaKeywordsTagDefaultPageSingleStateDomain;
        row.IsTextInstructionsDefaultPageSingleStateDomain = isTextInstructionsDefaultPageSingleStateDomain;
        row.InstructionsDefaultPageSingleStateDomain = instructionsDefaultPageSingleStateDomain;
        row.IsTextInstructionsUpcomingElectionBallotPage = isTextInstructionsUpcomingElectionBallotPage;
        row.InstructionsUpcomingElectionBallotPage = instructionsUpcomingElectionBallotPage;
        row.IsTextInstructionsPreviousElectionBallotPage = isTextInstructionsPreviousElectionBallotPage;
        row.InstructionsPreviousElectionBallotPage = instructionsPreviousElectionBallotPage;
        row.IsTextInstructionsElectedPage = isTextInstructionsElectedPage;
        row.InstructionsElectedPage = instructionsElectedPage;
        row.IsTextInstructionsElectedOfficialsPageUSPres = isTextInstructionsElectedOfficialsPageUSPres;
        row.InstructionsElectedOfficialsPageUSPres = instructionsElectedOfficialsPageUSPres;
        row.IsTextInstructionsElectedOfficialsPageUSSenate = isTextInstructionsElectedOfficialsPageUSSenate;
        row.InstructionsElectedOfficialsPageUSSenate = instructionsElectedOfficialsPageUSSenate;
        row.IsTextInstructionsElectedOfficialsPageUSHouse = isTextInstructionsElectedOfficialsPageUSHouse;
        row.InstructionsElectedOfficialsPageUSHouse = instructionsElectedOfficialsPageUSHouse;
        row.IsTextInstructionsElectedOfficialsPageState = isTextInstructionsElectedOfficialsPageState;
        row.InstructionsElectedOfficialsPageState = instructionsElectedOfficialsPageState;
        row.IsTextInstructionsElectedOfficialsPageCounty = isTextInstructionsElectedOfficialsPageCounty;
        row.InstructionsElectedOfficialsPageCounty = instructionsElectedOfficialsPageCounty;
        row.IsTextInstructionsElectedOfficialsPageLocal = isTextInstructionsElectedOfficialsPageLocal;
        row.InstructionsElectedOfficialsPageLocal = instructionsElectedOfficialsPageLocal;
        row.IsTextInstructionsIssuePage = isTextInstructionsIssuePage;
        row.InstructionsIssuePage = instructionsIssuePage;
        row.IsTextInstructionsIssuePageIssueListAnswers = isTextInstructionsIssuePageIssueListAnswers;
        row.InstructionsIssuePageIssueListAnswers = instructionsIssuePageIssueListAnswers;
        row.IsTextInstructionsIssuePageIssueListNoAnswers = isTextInstructionsIssuePageIssueListNoAnswers;
        row.InstructionsIssuePageIssueListNoAnswers = instructionsIssuePageIssueListNoAnswers;
        row.IsTextInstructionsIssuePageIssueListReport = isTextInstructionsIssuePageIssueListReport;
        row.InstructionsIssuePageIssueListReport = instructionsIssuePageIssueListReport;
        row.IsTextInstructionsPoliticianIssuePageIssueListAnswers = isTextInstructionsPoliticianIssuePageIssueListAnswers;
        row.InstructionsPoliticianIssuePageIssueListAnswers = instructionsPoliticianIssuePageIssueListAnswers;
        row.IsTextInstructionsPoliticianIssuePageIssueListNoAnswers = isTextInstructionsPoliticianIssuePageIssueListNoAnswers;
        row.InstructionsPoliticianIssuePageIssueListNoAnswers = instructionsPoliticianIssuePageIssueListNoAnswers;
        row.IsTextInstructionsPoliticianIssuePageIssueListReport = isTextInstructionsPoliticianIssuePageIssueListReport;
        row.InstructionsPoliticianIssuePageIssueListReport = instructionsPoliticianIssuePageIssueListReport;
        row.IsTextInstructionsPoliticianIssuePage = isTextInstructionsPoliticianIssuePage;
        row.InstructionsPoliticianIssuePage = instructionsPoliticianIssuePage;
        row.IsTextInstructionsIntroPage = isTextInstructionsIntroPage;
        row.InstructionsIntroPage = instructionsIntroPage;
        row.IsTextContentAboutUsPage = isTextContentAboutUsPage;
        row.ContentAboutUsPage = contentAboutUsPage;
        row.IsTextContentCandidatesPage = isTextContentCandidatesPage;
        row.ContentCandidatesPage = contentCandidatesPage;
        row.IsTextContentContactUsPage = isTextContentContactUsPage;
        row.ContentContactUsPage = contentContactUsPage;
        row.IsTextContentInternsPage = isTextContentInternsPage;
        row.ContentInternsPage = contentInternsPage;
        row.IsTextContentPartiesPage = isTextContentPartiesPage;
        row.ContentPartiesPage = contentPartiesPage;
        row.IsTextContentVotersPage = isTextContentVotersPage;
        row.ContentVotersPage = contentVotersPage;
        row.IsTextInstructionsArchivesPage = isTextInstructionsArchivesPage;
        row.InstructionsArchivesPage = instructionsArchivesPage;
        row.IsTextInstructionsElectionPageUSPresPrimary = isTextInstructionsElectionPageUSPresPrimary;
        row.InstructionsElectionPageUSPresPrimary = instructionsElectionPageUSPresPrimary;
        row.IsTextInstructionsElectionPageUSPres = isTextInstructionsElectionPageUSPres;
        row.InstructionsElectionPageUSPres = instructionsElectionPageUSPres;
        row.IsTextInstructionsElectionPageUSSenate = isTextInstructionsElectionPageUSSenate;
        row.InstructionsElectionPageUSSenate = instructionsElectionPageUSSenate;
        row.IsTextInstructionsElectionPageUSHouse = isTextInstructionsElectionPageUSHouse;
        row.InstructionsElectionPageUSHouse = instructionsElectionPageUSHouse;
        row.IsTextInstructionsElectionPageState = isTextInstructionsElectionPageState;
        row.InstructionsElectionPageState = instructionsElectionPageState;
        row.IsTextInstructionsElectionPageCounty = isTextInstructionsElectionPageCounty;
        row.InstructionsElectionPageCounty = instructionsElectionPageCounty;
        row.IsTextInstructionsElectionPageLocal = isTextInstructionsElectionPageLocal;
        row.InstructionsElectionPageLocal = instructionsElectionPageLocal;
        row.IsTextMainContentDefaultPageSingleStateDomain = isTextMainContentDefaultPageSingleStateDomain;
        row.MainContentDefaultPageSingleStateDomainElectionNone = mainContentDefaultPageSingleStateDomainElectionNone;
        row.MainContentDefaultPageSingleStateDomainElectionGeneral = mainContentDefaultPageSingleStateDomainElectionGeneral;
        row.MainContentDefaultPageSingleStateDomainElectionOffYear = mainContentDefaultPageSingleStateDomainElectionOffYear;
        row.MainContentDefaultPageSingleStateDomainElectionSpecial = mainContentDefaultPageSingleStateDomainElectionSpecial;
        row.MainContentDefaultPageSingleStateDomainElectionPrimary = mainContentDefaultPageSingleStateDomainElectionPrimary;
        row.MainContentDefaultPageSingleStateDomainContestsFederalStatewide = mainContentDefaultPageSingleStateDomainContestsFederalStatewide;
        row.IsTextInstructionsElectedOfficialsPageGovernors = isTextInstructionsElectedOfficialsPageGovernors;
        row.InstructionsElectedOfficialsPageGovernors = instructionsElectedOfficialsPageGovernors;
        return row;
      }

      public void AddRow(String id, Boolean isTextFirstFooterAllPages, String firstFooterAllPages, Boolean isTextSecondFooterAllPages, String secondFooterAllPages, String emailUsLineAllPages, String emailUsAddressAllPages, String titleTagDefaultPageAllStatesDomain, String metaDescriptionTagDefaultPageAllStatesDomain, String metaKeywordsTagDefaultPageAllStatesDomain, Boolean isTextMainContentDefaultPageAllStatesDomainBeforeSelection, String mainContentDefaultPageAllStatesDomainBeforeSelection, Boolean isTextMainContentDefaultPageAllStatesDomainAfterSelection, String mainContentDefaultPageAllStatesDomainAfterSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, String instructionsDefaultPageAllStatesDomainBeforeSelection, Boolean isTextInstructionsDefaultPageAllStatesDomainAfterSelection, String instructionsDefaultPageAllStatesDomainAfterSelection, String titleTagDefaultPageSingleStateDomain, String metaDescriptionTagDefaultPageSingleStateDomain, String metaKeywordsTagDefaultPageSingleStateDomain, Boolean isTextInstructionsDefaultPageSingleStateDomain, String instructionsDefaultPageSingleStateDomain, Boolean isTextInstructionsUpcomingElectionBallotPage, String instructionsUpcomingElectionBallotPage, Boolean isTextInstructionsPreviousElectionBallotPage, String instructionsPreviousElectionBallotPage, Boolean isTextInstructionsElectedPage, String instructionsElectedPage, Boolean isTextInstructionsElectedOfficialsPageUSPres, String instructionsElectedOfficialsPageUSPres, Boolean isTextInstructionsElectedOfficialsPageUSSenate, String instructionsElectedOfficialsPageUSSenate, Boolean isTextInstructionsElectedOfficialsPageUSHouse, String instructionsElectedOfficialsPageUSHouse, Boolean isTextInstructionsElectedOfficialsPageState, String instructionsElectedOfficialsPageState, Boolean isTextInstructionsElectedOfficialsPageCounty, String instructionsElectedOfficialsPageCounty, Boolean isTextInstructionsElectedOfficialsPageLocal, String instructionsElectedOfficialsPageLocal, Boolean isTextInstructionsIssuePage, String instructionsIssuePage, Boolean isTextInstructionsIssuePageIssueListAnswers, String instructionsIssuePageIssueListAnswers, Boolean isTextInstructionsIssuePageIssueListNoAnswers, String instructionsIssuePageIssueListNoAnswers, Boolean isTextInstructionsIssuePageIssueListReport, String instructionsIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePageIssueListAnswers, String instructionsPoliticianIssuePageIssueListAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListNoAnswers, String instructionsPoliticianIssuePageIssueListNoAnswers, Boolean isTextInstructionsPoliticianIssuePageIssueListReport, String instructionsPoliticianIssuePageIssueListReport, Boolean isTextInstructionsPoliticianIssuePage, String instructionsPoliticianIssuePage, Boolean isTextInstructionsIntroPage, String instructionsIntroPage, Boolean isTextContentAboutUsPage, String contentAboutUsPage, Boolean isTextContentCandidatesPage, String contentCandidatesPage, Boolean isTextContentContactUsPage, String contentContactUsPage, Boolean isTextContentInternsPage, String contentInternsPage, Boolean isTextContentPartiesPage, String contentPartiesPage, Boolean isTextContentVotersPage, String contentVotersPage, Boolean isTextInstructionsArchivesPage, String instructionsArchivesPage, Boolean isTextInstructionsElectionPageUSPresPrimary, String instructionsElectionPageUSPresPrimary, Boolean isTextInstructionsElectionPageUSPres, String instructionsElectionPageUSPres, Boolean isTextInstructionsElectionPageUSSenate, String instructionsElectionPageUSSenate, Boolean isTextInstructionsElectionPageUSHouse, String instructionsElectionPageUSHouse, Boolean isTextInstructionsElectionPageState, String instructionsElectionPageState, Boolean isTextInstructionsElectionPageCounty, String instructionsElectionPageCounty, Boolean isTextInstructionsElectionPageLocal, String instructionsElectionPageLocal, Boolean isTextMainContentDefaultPageSingleStateDomain, String mainContentDefaultPageSingleStateDomainElectionNone, String mainContentDefaultPageSingleStateDomainElectionGeneral, String mainContentDefaultPageSingleStateDomainElectionOffYear, String mainContentDefaultPageSingleStateDomainElectionSpecial, String mainContentDefaultPageSingleStateDomainElectionPrimary, String mainContentDefaultPageSingleStateDomainContestsFederalStatewide, Boolean isTextInstructionsElectedOfficialsPageGovernors, String instructionsElectedOfficialsPageGovernors)
      {
        MasterDesignRow row = NewRow(id, isTextFirstFooterAllPages, firstFooterAllPages, isTextSecondFooterAllPages, secondFooterAllPages, emailUsLineAllPages, emailUsAddressAllPages, titleTagDefaultPageAllStatesDomain, metaDescriptionTagDefaultPageAllStatesDomain, metaKeywordsTagDefaultPageAllStatesDomain, isTextMainContentDefaultPageAllStatesDomainBeforeSelection, mainContentDefaultPageAllStatesDomainBeforeSelection, isTextMainContentDefaultPageAllStatesDomainAfterSelection, mainContentDefaultPageAllStatesDomainAfterSelection, isTextInstructionsDefaultPageAllStatesDomainBeforeSelection, instructionsDefaultPageAllStatesDomainBeforeSelection, isTextInstructionsDefaultPageAllStatesDomainAfterSelection, instructionsDefaultPageAllStatesDomainAfterSelection, titleTagDefaultPageSingleStateDomain, metaDescriptionTagDefaultPageSingleStateDomain, metaKeywordsTagDefaultPageSingleStateDomain, isTextInstructionsDefaultPageSingleStateDomain, instructionsDefaultPageSingleStateDomain, isTextInstructionsUpcomingElectionBallotPage, instructionsUpcomingElectionBallotPage, isTextInstructionsPreviousElectionBallotPage, instructionsPreviousElectionBallotPage, isTextInstructionsElectedPage, instructionsElectedPage, isTextInstructionsElectedOfficialsPageUSPres, instructionsElectedOfficialsPageUSPres, isTextInstructionsElectedOfficialsPageUSSenate, instructionsElectedOfficialsPageUSSenate, isTextInstructionsElectedOfficialsPageUSHouse, instructionsElectedOfficialsPageUSHouse, isTextInstructionsElectedOfficialsPageState, instructionsElectedOfficialsPageState, isTextInstructionsElectedOfficialsPageCounty, instructionsElectedOfficialsPageCounty, isTextInstructionsElectedOfficialsPageLocal, instructionsElectedOfficialsPageLocal, isTextInstructionsIssuePage, instructionsIssuePage, isTextInstructionsIssuePageIssueListAnswers, instructionsIssuePageIssueListAnswers, isTextInstructionsIssuePageIssueListNoAnswers, instructionsIssuePageIssueListNoAnswers, isTextInstructionsIssuePageIssueListReport, instructionsIssuePageIssueListReport, isTextInstructionsPoliticianIssuePageIssueListAnswers, instructionsPoliticianIssuePageIssueListAnswers, isTextInstructionsPoliticianIssuePageIssueListNoAnswers, instructionsPoliticianIssuePageIssueListNoAnswers, isTextInstructionsPoliticianIssuePageIssueListReport, instructionsPoliticianIssuePageIssueListReport, isTextInstructionsPoliticianIssuePage, instructionsPoliticianIssuePage, isTextInstructionsIntroPage, instructionsIntroPage, isTextContentAboutUsPage, contentAboutUsPage, isTextContentCandidatesPage, contentCandidatesPage, isTextContentContactUsPage, contentContactUsPage, isTextContentInternsPage, contentInternsPage, isTextContentPartiesPage, contentPartiesPage, isTextContentVotersPage, contentVotersPage, isTextInstructionsArchivesPage, instructionsArchivesPage, isTextInstructionsElectionPageUSPresPrimary, instructionsElectionPageUSPresPrimary, isTextInstructionsElectionPageUSPres, instructionsElectionPageUSPres, isTextInstructionsElectionPageUSSenate, instructionsElectionPageUSSenate, isTextInstructionsElectionPageUSHouse, instructionsElectionPageUSHouse, isTextInstructionsElectionPageState, instructionsElectionPageState, isTextInstructionsElectionPageCounty, instructionsElectionPageCounty, isTextInstructionsElectionPageLocal, instructionsElectionPageLocal, isTextMainContentDefaultPageSingleStateDomain, mainContentDefaultPageSingleStateDomainElectionNone, mainContentDefaultPageSingleStateDomainElectionGeneral, mainContentDefaultPageSingleStateDomainElectionOffYear, mainContentDefaultPageSingleStateDomainElectionSpecial, mainContentDefaultPageSingleStateDomainElectionPrimary, mainContentDefaultPageSingleStateDomainContestsFederalStatewide, isTextInstructionsElectedOfficialsPageGovernors, instructionsElectedOfficialsPageGovernors);
        AddRow(row);
      }

      public DataColumn IDColumn { get { return this.Columns["ID"]; } }

      public DataColumn IsTextFirstFooterAllPagesColumn { get { return this.Columns["IsTextFirstFooterAllPages"]; } }

      public DataColumn FirstFooterAllPagesColumn { get { return this.Columns["FirstFooterAllPages"]; } }

      public DataColumn IsTextSecondFooterAllPagesColumn { get { return this.Columns["IsTextSecondFooterAllPages"]; } }

      public DataColumn SecondFooterAllPagesColumn { get { return this.Columns["SecondFooterAllPages"]; } }

      public DataColumn EmailUsLineAllPagesColumn { get { return this.Columns["EmailUsLineAllPages"]; } }

      public DataColumn EmailUsAddressAllPagesColumn { get { return this.Columns["EmailUsAddressAllPages"]; } }

      public DataColumn TitleTagDefaultPageAllStatesDomainColumn { get { return this.Columns["TitleTagDefaultPageAllStatesDomain"]; } }

      public DataColumn MetaDescriptionTagDefaultPageAllStatesDomainColumn { get { return this.Columns["MetaDescriptionTagDefaultPageAllStatesDomain"]; } }

      public DataColumn MetaKeywordsTagDefaultPageAllStatesDomainColumn { get { return this.Columns["MetaKeywordsTagDefaultPageAllStatesDomain"]; } }

      public DataColumn IsTextMainContentDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn MainContentDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["MainContentDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn IsTextMainContentDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["IsTextMainContentDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn MainContentDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["MainContentDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn IsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn InstructionsDefaultPageAllStatesDomainBeforeSelectionColumn { get { return this.Columns["InstructionsDefaultPageAllStatesDomainBeforeSelection"]; } }

      public DataColumn IsTextInstructionsDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn InstructionsDefaultPageAllStatesDomainAfterSelectionColumn { get { return this.Columns["InstructionsDefaultPageAllStatesDomainAfterSelection"]; } }

      public DataColumn TitleTagDefaultPageSingleStateDomainColumn { get { return this.Columns["TitleTagDefaultPageSingleStateDomain"]; } }

      public DataColumn MetaDescriptionTagDefaultPageSingleStateDomainColumn { get { return this.Columns["MetaDescriptionTagDefaultPageSingleStateDomain"]; } }

      public DataColumn MetaKeywordsTagDefaultPageSingleStateDomainColumn { get { return this.Columns["MetaKeywordsTagDefaultPageSingleStateDomain"]; } }

      public DataColumn IsTextInstructionsDefaultPageSingleStateDomainColumn { get { return this.Columns["IsTextInstructionsDefaultPageSingleStateDomain"]; } }

      public DataColumn InstructionsDefaultPageSingleStateDomainColumn { get { return this.Columns["InstructionsDefaultPageSingleStateDomain"]; } }

      public DataColumn IsTextInstructionsUpcomingElectionBallotPageColumn { get { return this.Columns["IsTextInstructionsUpcomingElectionBallotPage"]; } }

      public DataColumn InstructionsUpcomingElectionBallotPageColumn { get { return this.Columns["InstructionsUpcomingElectionBallotPage"]; } }

      public DataColumn IsTextInstructionsPreviousElectionBallotPageColumn { get { return this.Columns["IsTextInstructionsPreviousElectionBallotPage"]; } }

      public DataColumn InstructionsPreviousElectionBallotPageColumn { get { return this.Columns["InstructionsPreviousElectionBallotPage"]; } }

      public DataColumn IsTextInstructionsElectedPageColumn { get { return this.Columns["IsTextInstructionsElectedPage"]; } }

      public DataColumn InstructionsElectedPageColumn { get { return this.Columns["InstructionsElectedPage"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSPresColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSPres"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSPresColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSPres"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSSenateColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSSenate"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSSenateColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSSenate"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageUSHouseColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageUSHouse"]; } }

      public DataColumn InstructionsElectedOfficialsPageUSHouseColumn { get { return this.Columns["InstructionsElectedOfficialsPageUSHouse"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageStateColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageState"]; } }

      public DataColumn InstructionsElectedOfficialsPageStateColumn { get { return this.Columns["InstructionsElectedOfficialsPageState"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageCountyColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageCounty"]; } }

      public DataColumn InstructionsElectedOfficialsPageCountyColumn { get { return this.Columns["InstructionsElectedOfficialsPageCounty"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageLocalColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageLocal"]; } }

      public DataColumn InstructionsElectedOfficialsPageLocalColumn { get { return this.Columns["InstructionsElectedOfficialsPageLocal"]; } }

      public DataColumn IsTextInstructionsIssuePageColumn { get { return this.Columns["IsTextInstructionsIssuePage"]; } }

      public DataColumn InstructionsIssuePageColumn { get { return this.Columns["InstructionsIssuePage"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListAnswersColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListAnswers"]; } }

      public DataColumn InstructionsIssuePageIssueListAnswersColumn { get { return this.Columns["InstructionsIssuePageIssueListAnswers"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListNoAnswersColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListNoAnswers"]; } }

      public DataColumn InstructionsIssuePageIssueListNoAnswersColumn { get { return this.Columns["InstructionsIssuePageIssueListNoAnswers"]; } }

      public DataColumn IsTextInstructionsIssuePageIssueListReportColumn { get { return this.Columns["IsTextInstructionsIssuePageIssueListReport"]; } }

      public DataColumn InstructionsIssuePageIssueListReportColumn { get { return this.Columns["InstructionsIssuePageIssueListReport"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListAnswersColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListAnswers"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListAnswersColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListAnswers"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListNoAnswersColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListNoAnswersColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListNoAnswers"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageIssueListReportColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePageIssueListReport"]; } }

      public DataColumn InstructionsPoliticianIssuePageIssueListReportColumn { get { return this.Columns["InstructionsPoliticianIssuePageIssueListReport"]; } }

      public DataColumn IsTextInstructionsPoliticianIssuePageColumn { get { return this.Columns["IsTextInstructionsPoliticianIssuePage"]; } }

      public DataColumn InstructionsPoliticianIssuePageColumn { get { return this.Columns["InstructionsPoliticianIssuePage"]; } }

      public DataColumn IsTextInstructionsIntroPageColumn { get { return this.Columns["IsTextInstructionsIntroPage"]; } }

      public DataColumn InstructionsIntroPageColumn { get { return this.Columns["InstructionsIntroPage"]; } }

      public DataColumn IsTextContentAboutUsPageColumn { get { return this.Columns["IsTextContentAboutUsPage"]; } }

      public DataColumn ContentAboutUsPageColumn { get { return this.Columns["ContentAboutUsPage"]; } }

      public DataColumn IsTextContentCandidatesPageColumn { get { return this.Columns["IsTextContentCandidatesPage"]; } }

      public DataColumn ContentCandidatesPageColumn { get { return this.Columns["ContentCandidatesPage"]; } }

      public DataColumn IsTextContentContactUsPageColumn { get { return this.Columns["IsTextContentContactUsPage"]; } }

      public DataColumn ContentContactUsPageColumn { get { return this.Columns["ContentContactUsPage"]; } }

      public DataColumn IsTextContentInternsPageColumn { get { return this.Columns["IsTextContentInternsPage"]; } }

      public DataColumn ContentInternsPageColumn { get { return this.Columns["ContentInternsPage"]; } }

      public DataColumn IsTextContentPartiesPageColumn { get { return this.Columns["IsTextContentPartiesPage"]; } }

      public DataColumn ContentPartiesPageColumn { get { return this.Columns["ContentPartiesPage"]; } }

      public DataColumn IsTextContentVotersPageColumn { get { return this.Columns["IsTextContentVotersPage"]; } }

      public DataColumn ContentVotersPageColumn { get { return this.Columns["ContentVotersPage"]; } }

      public DataColumn IsTextInstructionsArchivesPageColumn { get { return this.Columns["IsTextInstructionsArchivesPage"]; } }

      public DataColumn InstructionsArchivesPageColumn { get { return this.Columns["InstructionsArchivesPage"]; } }

      public DataColumn IsTextInstructionsElectionPageUSPresPrimaryColumn { get { return this.Columns["IsTextInstructionsElectionPageUSPresPrimary"]; } }

      public DataColumn InstructionsElectionPageUSPresPrimaryColumn { get { return this.Columns["InstructionsElectionPageUSPresPrimary"]; } }

      public DataColumn IsTextInstructionsElectionPageUSPresColumn { get { return this.Columns["IsTextInstructionsElectionPageUSPres"]; } }

      public DataColumn InstructionsElectionPageUSPresColumn { get { return this.Columns["InstructionsElectionPageUSPres"]; } }

      public DataColumn IsTextInstructionsElectionPageUSSenateColumn { get { return this.Columns["IsTextInstructionsElectionPageUSSenate"]; } }

      public DataColumn InstructionsElectionPageUSSenateColumn { get { return this.Columns["InstructionsElectionPageUSSenate"]; } }

      public DataColumn IsTextInstructionsElectionPageUSHouseColumn { get { return this.Columns["IsTextInstructionsElectionPageUSHouse"]; } }

      public DataColumn InstructionsElectionPageUSHouseColumn { get { return this.Columns["InstructionsElectionPageUSHouse"]; } }

      public DataColumn IsTextInstructionsElectionPageStateColumn { get { return this.Columns["IsTextInstructionsElectionPageState"]; } }

      public DataColumn InstructionsElectionPageStateColumn { get { return this.Columns["InstructionsElectionPageState"]; } }

      public DataColumn IsTextInstructionsElectionPageCountyColumn { get { return this.Columns["IsTextInstructionsElectionPageCounty"]; } }

      public DataColumn InstructionsElectionPageCountyColumn { get { return this.Columns["InstructionsElectionPageCounty"]; } }

      public DataColumn IsTextInstructionsElectionPageLocalColumn { get { return this.Columns["IsTextInstructionsElectionPageLocal"]; } }

      public DataColumn InstructionsElectionPageLocalColumn { get { return this.Columns["InstructionsElectionPageLocal"]; } }

      public DataColumn IsTextMainContentDefaultPageSingleStateDomainColumn { get { return this.Columns["IsTextMainContentDefaultPageSingleStateDomain"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionNoneColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionNone"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionGeneralColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionGeneral"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionOffYearColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionOffYear"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionSpecialColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionSpecial"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainElectionPrimaryColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainElectionPrimary"]; } }

      public DataColumn MainContentDefaultPageSingleStateDomainContestsFederalStatewideColumn { get { return this.Columns["MainContentDefaultPageSingleStateDomainContestsFederalStatewide"]; } }

      public DataColumn IsTextInstructionsElectedOfficialsPageGovernorsColumn { get { return this.Columns["IsTextInstructionsElectedOfficialsPageGovernors"]; } }

      public DataColumn InstructionsElectedOfficialsPageGovernorsColumn { get { return this.Columns["InstructionsElectedOfficialsPageGovernors"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ID", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextFirstFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstFooterAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextSecondFooterAllPages", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SecondFooterAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailUsLineAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailUsAddressAllPages", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TitleTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaDescriptionTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaKeywordsTagDefaultPageAllStatesDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextMainContentDefaultPageAllStatesDomainBeforeSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageAllStatesDomainBeforeSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextMainContentDefaultPageAllStatesDomainAfterSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageAllStatesDomainAfterSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageAllStatesDomainBeforeSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageAllStatesDomainAfterSelection", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageAllStatesDomainAfterSelection", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TitleTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaDescriptionTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaKeywordsTagDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsDefaultPageSingleStateDomain", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsUpcomingElectionBallotPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsUpcomingElectionBallotPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPreviousElectionBallotPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPreviousElectionBallotPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSPres", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSPres", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSSenate", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSSenate", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageUSHouse", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageUSHouse", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageState", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageCounty", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageCounty", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageLocal", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageLocal", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListNoAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListNoAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIssuePageIssueListReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIssuePageIssueListReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListNoAnswers", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListNoAnswers", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePageIssueListReport", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePageIssueListReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsPoliticianIssuePage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsPoliticianIssuePage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsIntroPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsIntroPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentAboutUsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentAboutUsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentCandidatesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentCandidatesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentContactUsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentContactUsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentInternsPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentInternsPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentPartiesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentPartiesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextContentVotersPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContentVotersPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsArchivesPage", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsArchivesPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSPresPrimary", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSPresPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSPres", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSPres", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSSenate", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSSenate", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageUSHouse", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageUSHouse", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageState", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageCounty", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageCounty", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectionPageLocal", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectionPageLocal", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextMainContentDefaultPageSingleStateDomain", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionNone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionGeneral", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionOffYear", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionSpecial", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainElectionPrimary", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MainContentDefaultPageSingleStateDomainContestsFederalStatewide", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsTextInstructionsElectedOfficialsPageGovernors", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("InstructionsElectedOfficialsPageGovernors", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public MasterDesignTable() : this(ColumnSet.All) { }

      public MasterDesignTable(ColumnSet columnSet)
      {
        this.TableName = "MasterDesign";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected MasterDesignTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class MasterDesign
    {
      public const string TableName = "MasterDesign";

      public enum Column { ID, IsTextFirstFooterAllPages, FirstFooterAllPages, IsTextSecondFooterAllPages, SecondFooterAllPages, EmailUsLineAllPages, EmailUsAddressAllPages, TitleTagDefaultPageAllStatesDomain, MetaDescriptionTagDefaultPageAllStatesDomain, MetaKeywordsTagDefaultPageAllStatesDomain, IsTextMainContentDefaultPageAllStatesDomainBeforeSelection, MainContentDefaultPageAllStatesDomainBeforeSelection, IsTextMainContentDefaultPageAllStatesDomainAfterSelection, MainContentDefaultPageAllStatesDomainAfterSelection, IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection, InstructionsDefaultPageAllStatesDomainBeforeSelection, IsTextInstructionsDefaultPageAllStatesDomainAfterSelection, InstructionsDefaultPageAllStatesDomainAfterSelection, TitleTagDefaultPageSingleStateDomain, MetaDescriptionTagDefaultPageSingleStateDomain, MetaKeywordsTagDefaultPageSingleStateDomain, IsTextInstructionsDefaultPageSingleStateDomain, InstructionsDefaultPageSingleStateDomain, IsTextInstructionsUpcomingElectionBallotPage, InstructionsUpcomingElectionBallotPage, IsTextInstructionsPreviousElectionBallotPage, InstructionsPreviousElectionBallotPage, IsTextInstructionsElectedPage, InstructionsElectedPage, IsTextInstructionsElectedOfficialsPageUSPres, InstructionsElectedOfficialsPageUSPres, IsTextInstructionsElectedOfficialsPageUSSenate, InstructionsElectedOfficialsPageUSSenate, IsTextInstructionsElectedOfficialsPageUSHouse, InstructionsElectedOfficialsPageUSHouse, IsTextInstructionsElectedOfficialsPageState, InstructionsElectedOfficialsPageState, IsTextInstructionsElectedOfficialsPageCounty, InstructionsElectedOfficialsPageCounty, IsTextInstructionsElectedOfficialsPageLocal, InstructionsElectedOfficialsPageLocal, IsTextInstructionsIssuePage, InstructionsIssuePage, IsTextInstructionsIssuePageIssueListAnswers, InstructionsIssuePageIssueListAnswers, IsTextInstructionsIssuePageIssueListNoAnswers, InstructionsIssuePageIssueListNoAnswers, IsTextInstructionsIssuePageIssueListReport, InstructionsIssuePageIssueListReport, IsTextInstructionsPoliticianIssuePageIssueListAnswers, InstructionsPoliticianIssuePageIssueListAnswers, IsTextInstructionsPoliticianIssuePageIssueListNoAnswers, InstructionsPoliticianIssuePageIssueListNoAnswers, IsTextInstructionsPoliticianIssuePageIssueListReport, InstructionsPoliticianIssuePageIssueListReport, IsTextInstructionsPoliticianIssuePage, InstructionsPoliticianIssuePage, IsTextInstructionsIntroPage, InstructionsIntroPage, IsTextContentAboutUsPage, ContentAboutUsPage, IsTextContentCandidatesPage, ContentCandidatesPage, IsTextContentContactUsPage, ContentContactUsPage, IsTextContentInternsPage, ContentInternsPage, IsTextContentPartiesPage, ContentPartiesPage, IsTextContentVotersPage, ContentVotersPage, IsTextInstructionsArchivesPage, InstructionsArchivesPage, IsTextInstructionsElectionPageUSPresPrimary, InstructionsElectionPageUSPresPrimary, IsTextInstructionsElectionPageUSPres, InstructionsElectionPageUSPres, IsTextInstructionsElectionPageUSSenate, InstructionsElectionPageUSSenate, IsTextInstructionsElectionPageUSHouse, InstructionsElectionPageUSHouse, IsTextInstructionsElectionPageState, InstructionsElectionPageState, IsTextInstructionsElectionPageCounty, InstructionsElectionPageCounty, IsTextInstructionsElectionPageLocal, InstructionsElectionPageLocal, IsTextMainContentDefaultPageSingleStateDomain, MainContentDefaultPageSingleStateDomainElectionNone, MainContentDefaultPageSingleStateDomainElectionGeneral, MainContentDefaultPageSingleStateDomainElectionOffYear, MainContentDefaultPageSingleStateDomainElectionSpecial, MainContentDefaultPageSingleStateDomainElectionPrimary, MainContentDefaultPageSingleStateDomainContestsFederalStatewide, IsTextInstructionsElectedOfficialsPageGovernors, InstructionsElectedOfficialsPageGovernors }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ID, "ID" },
        { Column.IsTextFirstFooterAllPages, "IsTextFirstFooterAllPages" },
        { Column.FirstFooterAllPages, "FirstFooterAllPages" },
        { Column.IsTextSecondFooterAllPages, "IsTextSecondFooterAllPages" },
        { Column.SecondFooterAllPages, "SecondFooterAllPages" },
        { Column.EmailUsLineAllPages, "EmailUsLineAllPages" },
        { Column.EmailUsAddressAllPages, "EmailUsAddressAllPages" },
        { Column.TitleTagDefaultPageAllStatesDomain, "TitleTagDefaultPageAllStatesDomain" },
        { Column.MetaDescriptionTagDefaultPageAllStatesDomain, "MetaDescriptionTagDefaultPageAllStatesDomain" },
        { Column.MetaKeywordsTagDefaultPageAllStatesDomain, "MetaKeywordsTagDefaultPageAllStatesDomain" },
        { Column.IsTextMainContentDefaultPageAllStatesDomainBeforeSelection, "IsTextMainContentDefaultPageAllStatesDomainBeforeSelection" },
        { Column.MainContentDefaultPageAllStatesDomainBeforeSelection, "MainContentDefaultPageAllStatesDomainBeforeSelection" },
        { Column.IsTextMainContentDefaultPageAllStatesDomainAfterSelection, "IsTextMainContentDefaultPageAllStatesDomainAfterSelection" },
        { Column.MainContentDefaultPageAllStatesDomainAfterSelection, "MainContentDefaultPageAllStatesDomainAfterSelection" },
        { Column.IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection, "IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection" },
        { Column.InstructionsDefaultPageAllStatesDomainBeforeSelection, "InstructionsDefaultPageAllStatesDomainBeforeSelection" },
        { Column.IsTextInstructionsDefaultPageAllStatesDomainAfterSelection, "IsTextInstructionsDefaultPageAllStatesDomainAfterSelection" },
        { Column.InstructionsDefaultPageAllStatesDomainAfterSelection, "InstructionsDefaultPageAllStatesDomainAfterSelection" },
        { Column.TitleTagDefaultPageSingleStateDomain, "TitleTagDefaultPageSingleStateDomain" },
        { Column.MetaDescriptionTagDefaultPageSingleStateDomain, "MetaDescriptionTagDefaultPageSingleStateDomain" },
        { Column.MetaKeywordsTagDefaultPageSingleStateDomain, "MetaKeywordsTagDefaultPageSingleStateDomain" },
        { Column.IsTextInstructionsDefaultPageSingleStateDomain, "IsTextInstructionsDefaultPageSingleStateDomain" },
        { Column.InstructionsDefaultPageSingleStateDomain, "InstructionsDefaultPageSingleStateDomain" },
        { Column.IsTextInstructionsUpcomingElectionBallotPage, "IsTextInstructionsUpcomingElectionBallotPage" },
        { Column.InstructionsUpcomingElectionBallotPage, "InstructionsUpcomingElectionBallotPage" },
        { Column.IsTextInstructionsPreviousElectionBallotPage, "IsTextInstructionsPreviousElectionBallotPage" },
        { Column.InstructionsPreviousElectionBallotPage, "InstructionsPreviousElectionBallotPage" },
        { Column.IsTextInstructionsElectedPage, "IsTextInstructionsElectedPage" },
        { Column.InstructionsElectedPage, "InstructionsElectedPage" },
        { Column.IsTextInstructionsElectedOfficialsPageUSPres, "IsTextInstructionsElectedOfficialsPageUSPres" },
        { Column.InstructionsElectedOfficialsPageUSPres, "InstructionsElectedOfficialsPageUSPres" },
        { Column.IsTextInstructionsElectedOfficialsPageUSSenate, "IsTextInstructionsElectedOfficialsPageUSSenate" },
        { Column.InstructionsElectedOfficialsPageUSSenate, "InstructionsElectedOfficialsPageUSSenate" },
        { Column.IsTextInstructionsElectedOfficialsPageUSHouse, "IsTextInstructionsElectedOfficialsPageUSHouse" },
        { Column.InstructionsElectedOfficialsPageUSHouse, "InstructionsElectedOfficialsPageUSHouse" },
        { Column.IsTextInstructionsElectedOfficialsPageState, "IsTextInstructionsElectedOfficialsPageState" },
        { Column.InstructionsElectedOfficialsPageState, "InstructionsElectedOfficialsPageState" },
        { Column.IsTextInstructionsElectedOfficialsPageCounty, "IsTextInstructionsElectedOfficialsPageCounty" },
        { Column.InstructionsElectedOfficialsPageCounty, "InstructionsElectedOfficialsPageCounty" },
        { Column.IsTextInstructionsElectedOfficialsPageLocal, "IsTextInstructionsElectedOfficialsPageLocal" },
        { Column.InstructionsElectedOfficialsPageLocal, "InstructionsElectedOfficialsPageLocal" },
        { Column.IsTextInstructionsIssuePage, "IsTextInstructionsIssuePage" },
        { Column.InstructionsIssuePage, "InstructionsIssuePage" },
        { Column.IsTextInstructionsIssuePageIssueListAnswers, "IsTextInstructionsIssuePageIssueListAnswers" },
        { Column.InstructionsIssuePageIssueListAnswers, "InstructionsIssuePageIssueListAnswers" },
        { Column.IsTextInstructionsIssuePageIssueListNoAnswers, "IsTextInstructionsIssuePageIssueListNoAnswers" },
        { Column.InstructionsIssuePageIssueListNoAnswers, "InstructionsIssuePageIssueListNoAnswers" },
        { Column.IsTextInstructionsIssuePageIssueListReport, "IsTextInstructionsIssuePageIssueListReport" },
        { Column.InstructionsIssuePageIssueListReport, "InstructionsIssuePageIssueListReport" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListAnswers, "IsTextInstructionsPoliticianIssuePageIssueListAnswers" },
        { Column.InstructionsPoliticianIssuePageIssueListAnswers, "InstructionsPoliticianIssuePageIssueListAnswers" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListNoAnswers, "IsTextInstructionsPoliticianIssuePageIssueListNoAnswers" },
        { Column.InstructionsPoliticianIssuePageIssueListNoAnswers, "InstructionsPoliticianIssuePageIssueListNoAnswers" },
        { Column.IsTextInstructionsPoliticianIssuePageIssueListReport, "IsTextInstructionsPoliticianIssuePageIssueListReport" },
        { Column.InstructionsPoliticianIssuePageIssueListReport, "InstructionsPoliticianIssuePageIssueListReport" },
        { Column.IsTextInstructionsPoliticianIssuePage, "IsTextInstructionsPoliticianIssuePage" },
        { Column.InstructionsPoliticianIssuePage, "InstructionsPoliticianIssuePage" },
        { Column.IsTextInstructionsIntroPage, "IsTextInstructionsIntroPage" },
        { Column.InstructionsIntroPage, "InstructionsIntroPage" },
        { Column.IsTextContentAboutUsPage, "IsTextContentAboutUsPage" },
        { Column.ContentAboutUsPage, "ContentAboutUsPage" },
        { Column.IsTextContentCandidatesPage, "IsTextContentCandidatesPage" },
        { Column.ContentCandidatesPage, "ContentCandidatesPage" },
        { Column.IsTextContentContactUsPage, "IsTextContentContactUsPage" },
        { Column.ContentContactUsPage, "ContentContactUsPage" },
        { Column.IsTextContentInternsPage, "IsTextContentInternsPage" },
        { Column.ContentInternsPage, "ContentInternsPage" },
        { Column.IsTextContentPartiesPage, "IsTextContentPartiesPage" },
        { Column.ContentPartiesPage, "ContentPartiesPage" },
        { Column.IsTextContentVotersPage, "IsTextContentVotersPage" },
        { Column.ContentVotersPage, "ContentVotersPage" },
        { Column.IsTextInstructionsArchivesPage, "IsTextInstructionsArchivesPage" },
        { Column.InstructionsArchivesPage, "InstructionsArchivesPage" },
        { Column.IsTextInstructionsElectionPageUSPresPrimary, "IsTextInstructionsElectionPageUSPresPrimary" },
        { Column.InstructionsElectionPageUSPresPrimary, "InstructionsElectionPageUSPresPrimary" },
        { Column.IsTextInstructionsElectionPageUSPres, "IsTextInstructionsElectionPageUSPres" },
        { Column.InstructionsElectionPageUSPres, "InstructionsElectionPageUSPres" },
        { Column.IsTextInstructionsElectionPageUSSenate, "IsTextInstructionsElectionPageUSSenate" },
        { Column.InstructionsElectionPageUSSenate, "InstructionsElectionPageUSSenate" },
        { Column.IsTextInstructionsElectionPageUSHouse, "IsTextInstructionsElectionPageUSHouse" },
        { Column.InstructionsElectionPageUSHouse, "InstructionsElectionPageUSHouse" },
        { Column.IsTextInstructionsElectionPageState, "IsTextInstructionsElectionPageState" },
        { Column.InstructionsElectionPageState, "InstructionsElectionPageState" },
        { Column.IsTextInstructionsElectionPageCounty, "IsTextInstructionsElectionPageCounty" },
        { Column.InstructionsElectionPageCounty, "InstructionsElectionPageCounty" },
        { Column.IsTextInstructionsElectionPageLocal, "IsTextInstructionsElectionPageLocal" },
        { Column.InstructionsElectionPageLocal, "InstructionsElectionPageLocal" },
        { Column.IsTextMainContentDefaultPageSingleStateDomain, "IsTextMainContentDefaultPageSingleStateDomain" },
        { Column.MainContentDefaultPageSingleStateDomainElectionNone, "MainContentDefaultPageSingleStateDomainElectionNone" },
        { Column.MainContentDefaultPageSingleStateDomainElectionGeneral, "MainContentDefaultPageSingleStateDomainElectionGeneral" },
        { Column.MainContentDefaultPageSingleStateDomainElectionOffYear, "MainContentDefaultPageSingleStateDomainElectionOffYear" },
        { Column.MainContentDefaultPageSingleStateDomainElectionSpecial, "MainContentDefaultPageSingleStateDomainElectionSpecial" },
        { Column.MainContentDefaultPageSingleStateDomainElectionPrimary, "MainContentDefaultPageSingleStateDomainElectionPrimary" },
        { Column.MainContentDefaultPageSingleStateDomainContestsFederalStatewide, "MainContentDefaultPageSingleStateDomainContestsFederalStatewide" },
        { Column.IsTextInstructionsElectedOfficialsPageGovernors, "IsTextInstructionsElectedOfficialsPageGovernors" },
        { Column.InstructionsElectedOfficialsPageGovernors, "InstructionsElectedOfficialsPageGovernors" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM MasterDesign";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ID,IsTextFirstFooterAllPages,FirstFooterAllPages,IsTextSecondFooterAllPages,SecondFooterAllPages,EmailUsLineAllPages,EmailUsAddressAllPages,TitleTagDefaultPageAllStatesDomain,MetaDescriptionTagDefaultPageAllStatesDomain,MetaKeywordsTagDefaultPageAllStatesDomain,IsTextMainContentDefaultPageAllStatesDomainBeforeSelection,MainContentDefaultPageAllStatesDomainBeforeSelection,IsTextMainContentDefaultPageAllStatesDomainAfterSelection,MainContentDefaultPageAllStatesDomainAfterSelection,IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection,InstructionsDefaultPageAllStatesDomainBeforeSelection,IsTextInstructionsDefaultPageAllStatesDomainAfterSelection,InstructionsDefaultPageAllStatesDomainAfterSelection,TitleTagDefaultPageSingleStateDomain,MetaDescriptionTagDefaultPageSingleStateDomain,MetaKeywordsTagDefaultPageSingleStateDomain,IsTextInstructionsDefaultPageSingleStateDomain,InstructionsDefaultPageSingleStateDomain,IsTextInstructionsUpcomingElectionBallotPage,InstructionsUpcomingElectionBallotPage,IsTextInstructionsPreviousElectionBallotPage,InstructionsPreviousElectionBallotPage,IsTextInstructionsElectedPage,InstructionsElectedPage,IsTextInstructionsElectedOfficialsPageUSPres,InstructionsElectedOfficialsPageUSPres,IsTextInstructionsElectedOfficialsPageUSSenate,InstructionsElectedOfficialsPageUSSenate,IsTextInstructionsElectedOfficialsPageUSHouse,InstructionsElectedOfficialsPageUSHouse,IsTextInstructionsElectedOfficialsPageState,InstructionsElectedOfficialsPageState,IsTextInstructionsElectedOfficialsPageCounty,InstructionsElectedOfficialsPageCounty,IsTextInstructionsElectedOfficialsPageLocal,InstructionsElectedOfficialsPageLocal,IsTextInstructionsIssuePage,InstructionsIssuePage,IsTextInstructionsIssuePageIssueListAnswers,InstructionsIssuePageIssueListAnswers,IsTextInstructionsIssuePageIssueListNoAnswers,InstructionsIssuePageIssueListNoAnswers,IsTextInstructionsIssuePageIssueListReport,InstructionsIssuePageIssueListReport,IsTextInstructionsPoliticianIssuePageIssueListAnswers,InstructionsPoliticianIssuePageIssueListAnswers,IsTextInstructionsPoliticianIssuePageIssueListNoAnswers,InstructionsPoliticianIssuePageIssueListNoAnswers,IsTextInstructionsPoliticianIssuePageIssueListReport,InstructionsPoliticianIssuePageIssueListReport,IsTextInstructionsPoliticianIssuePage,InstructionsPoliticianIssuePage,IsTextInstructionsIntroPage,InstructionsIntroPage,IsTextContentAboutUsPage,ContentAboutUsPage,IsTextContentCandidatesPage,ContentCandidatesPage,IsTextContentContactUsPage,ContentContactUsPage,IsTextContentInternsPage,ContentInternsPage,IsTextContentPartiesPage,ContentPartiesPage,IsTextContentVotersPage,ContentVotersPage,IsTextInstructionsArchivesPage,InstructionsArchivesPage,IsTextInstructionsElectionPageUSPresPrimary,InstructionsElectionPageUSPresPrimary,IsTextInstructionsElectionPageUSPres,InstructionsElectionPageUSPres,IsTextInstructionsElectionPageUSSenate,InstructionsElectionPageUSSenate,IsTextInstructionsElectionPageUSHouse,InstructionsElectionPageUSHouse,IsTextInstructionsElectionPageState,InstructionsElectionPageState,IsTextInstructionsElectionPageCounty,InstructionsElectionPageCounty,IsTextInstructionsElectionPageLocal,InstructionsElectionPageLocal,IsTextMainContentDefaultPageSingleStateDomain,MainContentDefaultPageSingleStateDomainElectionNone,MainContentDefaultPageSingleStateDomainElectionGeneral,MainContentDefaultPageSingleStateDomainElectionOffYear,MainContentDefaultPageSingleStateDomainElectionSpecial,MainContentDefaultPageSingleStateDomainElectionPrimary,MainContentDefaultPageSingleStateDomainContestsFederalStatewide,IsTextInstructionsElectedOfficialsPageGovernors,InstructionsElectedOfficialsPageGovernors FROM MasterDesign";
        }
      }

      public static MasterDesignTable FillTable(DbCommand command)
      {
        return FillTable(command, MasterDesignTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static MasterDesignTable FillTable(DbCommand command, MasterDesignTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          MasterDesignTable table = new MasterDesignTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IDColumnName { get { return "ID"; } }

      public static string IsTextFirstFooterAllPagesColumnName { get { return "IsTextFirstFooterAllPages"; } }

      public static string FirstFooterAllPagesColumnName { get { return "FirstFooterAllPages"; } }

      public static string IsTextSecondFooterAllPagesColumnName { get { return "IsTextSecondFooterAllPages"; } }

      public static string SecondFooterAllPagesColumnName { get { return "SecondFooterAllPages"; } }

      public static string EmailUsLineAllPagesColumnName { get { return "EmailUsLineAllPages"; } }

      public static string EmailUsAddressAllPagesColumnName { get { return "EmailUsAddressAllPages"; } }

      public static string TitleTagDefaultPageAllStatesDomainColumnName { get { return "TitleTagDefaultPageAllStatesDomain"; } }

      public static string MetaDescriptionTagDefaultPageAllStatesDomainColumnName { get { return "MetaDescriptionTagDefaultPageAllStatesDomain"; } }

      public static string MetaKeywordsTagDefaultPageAllStatesDomainColumnName { get { return "MetaKeywordsTagDefaultPageAllStatesDomain"; } }

      public static string IsTextMainContentDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "IsTextMainContentDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string MainContentDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "MainContentDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string IsTextMainContentDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "IsTextMainContentDefaultPageAllStatesDomainAfterSelection"; } }

      public static string MainContentDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "MainContentDefaultPageAllStatesDomainAfterSelection"; } }

      public static string IsTextInstructionsDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "IsTextInstructionsDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string InstructionsDefaultPageAllStatesDomainBeforeSelectionColumnName { get { return "InstructionsDefaultPageAllStatesDomainBeforeSelection"; } }

      public static string IsTextInstructionsDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "IsTextInstructionsDefaultPageAllStatesDomainAfterSelection"; } }

      public static string InstructionsDefaultPageAllStatesDomainAfterSelectionColumnName { get { return "InstructionsDefaultPageAllStatesDomainAfterSelection"; } }

      public static string TitleTagDefaultPageSingleStateDomainColumnName { get { return "TitleTagDefaultPageSingleStateDomain"; } }

      public static string MetaDescriptionTagDefaultPageSingleStateDomainColumnName { get { return "MetaDescriptionTagDefaultPageSingleStateDomain"; } }

      public static string MetaKeywordsTagDefaultPageSingleStateDomainColumnName { get { return "MetaKeywordsTagDefaultPageSingleStateDomain"; } }

      public static string IsTextInstructionsDefaultPageSingleStateDomainColumnName { get { return "IsTextInstructionsDefaultPageSingleStateDomain"; } }

      public static string InstructionsDefaultPageSingleStateDomainColumnName { get { return "InstructionsDefaultPageSingleStateDomain"; } }

      public static string IsTextInstructionsUpcomingElectionBallotPageColumnName { get { return "IsTextInstructionsUpcomingElectionBallotPage"; } }

      public static string InstructionsUpcomingElectionBallotPageColumnName { get { return "InstructionsUpcomingElectionBallotPage"; } }

      public static string IsTextInstructionsPreviousElectionBallotPageColumnName { get { return "IsTextInstructionsPreviousElectionBallotPage"; } }

      public static string InstructionsPreviousElectionBallotPageColumnName { get { return "InstructionsPreviousElectionBallotPage"; } }

      public static string IsTextInstructionsElectedPageColumnName { get { return "IsTextInstructionsElectedPage"; } }

      public static string InstructionsElectedPageColumnName { get { return "InstructionsElectedPage"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSPresColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSPres"; } }

      public static string InstructionsElectedOfficialsPageUSPresColumnName { get { return "InstructionsElectedOfficialsPageUSPres"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSSenateColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSSenate"; } }

      public static string InstructionsElectedOfficialsPageUSSenateColumnName { get { return "InstructionsElectedOfficialsPageUSSenate"; } }

      public static string IsTextInstructionsElectedOfficialsPageUSHouseColumnName { get { return "IsTextInstructionsElectedOfficialsPageUSHouse"; } }

      public static string InstructionsElectedOfficialsPageUSHouseColumnName { get { return "InstructionsElectedOfficialsPageUSHouse"; } }

      public static string IsTextInstructionsElectedOfficialsPageStateColumnName { get { return "IsTextInstructionsElectedOfficialsPageState"; } }

      public static string InstructionsElectedOfficialsPageStateColumnName { get { return "InstructionsElectedOfficialsPageState"; } }

      public static string IsTextInstructionsElectedOfficialsPageCountyColumnName { get { return "IsTextInstructionsElectedOfficialsPageCounty"; } }

      public static string InstructionsElectedOfficialsPageCountyColumnName { get { return "InstructionsElectedOfficialsPageCounty"; } }

      public static string IsTextInstructionsElectedOfficialsPageLocalColumnName { get { return "IsTextInstructionsElectedOfficialsPageLocal"; } }

      public static string InstructionsElectedOfficialsPageLocalColumnName { get { return "InstructionsElectedOfficialsPageLocal"; } }

      public static string IsTextInstructionsIssuePageColumnName { get { return "IsTextInstructionsIssuePage"; } }

      public static string InstructionsIssuePageColumnName { get { return "InstructionsIssuePage"; } }

      public static string IsTextInstructionsIssuePageIssueListAnswersColumnName { get { return "IsTextInstructionsIssuePageIssueListAnswers"; } }

      public static string InstructionsIssuePageIssueListAnswersColumnName { get { return "InstructionsIssuePageIssueListAnswers"; } }

      public static string IsTextInstructionsIssuePageIssueListNoAnswersColumnName { get { return "IsTextInstructionsIssuePageIssueListNoAnswers"; } }

      public static string InstructionsIssuePageIssueListNoAnswersColumnName { get { return "InstructionsIssuePageIssueListNoAnswers"; } }

      public static string IsTextInstructionsIssuePageIssueListReportColumnName { get { return "IsTextInstructionsIssuePageIssueListReport"; } }

      public static string InstructionsIssuePageIssueListReportColumnName { get { return "InstructionsIssuePageIssueListReport"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListAnswersColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListAnswers"; } }

      public static string InstructionsPoliticianIssuePageIssueListAnswersColumnName { get { return "InstructionsPoliticianIssuePageIssueListAnswers"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListNoAnswersColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListNoAnswers"; } }

      public static string InstructionsPoliticianIssuePageIssueListNoAnswersColumnName { get { return "InstructionsPoliticianIssuePageIssueListNoAnswers"; } }

      public static string IsTextInstructionsPoliticianIssuePageIssueListReportColumnName { get { return "IsTextInstructionsPoliticianIssuePageIssueListReport"; } }

      public static string InstructionsPoliticianIssuePageIssueListReportColumnName { get { return "InstructionsPoliticianIssuePageIssueListReport"; } }

      public static string IsTextInstructionsPoliticianIssuePageColumnName { get { return "IsTextInstructionsPoliticianIssuePage"; } }

      public static string InstructionsPoliticianIssuePageColumnName { get { return "InstructionsPoliticianIssuePage"; } }

      public static string IsTextInstructionsIntroPageColumnName { get { return "IsTextInstructionsIntroPage"; } }

      public static string InstructionsIntroPageColumnName { get { return "InstructionsIntroPage"; } }

      public static string IsTextContentAboutUsPageColumnName { get { return "IsTextContentAboutUsPage"; } }

      public static string ContentAboutUsPageColumnName { get { return "ContentAboutUsPage"; } }

      public static string IsTextContentCandidatesPageColumnName { get { return "IsTextContentCandidatesPage"; } }

      public static string ContentCandidatesPageColumnName { get { return "ContentCandidatesPage"; } }

      public static string IsTextContentContactUsPageColumnName { get { return "IsTextContentContactUsPage"; } }

      public static string ContentContactUsPageColumnName { get { return "ContentContactUsPage"; } }

      public static string IsTextContentInternsPageColumnName { get { return "IsTextContentInternsPage"; } }

      public static string ContentInternsPageColumnName { get { return "ContentInternsPage"; } }

      public static string IsTextContentPartiesPageColumnName { get { return "IsTextContentPartiesPage"; } }

      public static string ContentPartiesPageColumnName { get { return "ContentPartiesPage"; } }

      public static string IsTextContentVotersPageColumnName { get { return "IsTextContentVotersPage"; } }

      public static string ContentVotersPageColumnName { get { return "ContentVotersPage"; } }

      public static string IsTextInstructionsArchivesPageColumnName { get { return "IsTextInstructionsArchivesPage"; } }

      public static string InstructionsArchivesPageColumnName { get { return "InstructionsArchivesPage"; } }

      public static string IsTextInstructionsElectionPageUSPresPrimaryColumnName { get { return "IsTextInstructionsElectionPageUSPresPrimary"; } }

      public static string InstructionsElectionPageUSPresPrimaryColumnName { get { return "InstructionsElectionPageUSPresPrimary"; } }

      public static string IsTextInstructionsElectionPageUSPresColumnName { get { return "IsTextInstructionsElectionPageUSPres"; } }

      public static string InstructionsElectionPageUSPresColumnName { get { return "InstructionsElectionPageUSPres"; } }

      public static string IsTextInstructionsElectionPageUSSenateColumnName { get { return "IsTextInstructionsElectionPageUSSenate"; } }

      public static string InstructionsElectionPageUSSenateColumnName { get { return "InstructionsElectionPageUSSenate"; } }

      public static string IsTextInstructionsElectionPageUSHouseColumnName { get { return "IsTextInstructionsElectionPageUSHouse"; } }

      public static string InstructionsElectionPageUSHouseColumnName { get { return "InstructionsElectionPageUSHouse"; } }

      public static string IsTextInstructionsElectionPageStateColumnName { get { return "IsTextInstructionsElectionPageState"; } }

      public static string InstructionsElectionPageStateColumnName { get { return "InstructionsElectionPageState"; } }

      public static string IsTextInstructionsElectionPageCountyColumnName { get { return "IsTextInstructionsElectionPageCounty"; } }

      public static string InstructionsElectionPageCountyColumnName { get { return "InstructionsElectionPageCounty"; } }

      public static string IsTextInstructionsElectionPageLocalColumnName { get { return "IsTextInstructionsElectionPageLocal"; } }

      public static string InstructionsElectionPageLocalColumnName { get { return "InstructionsElectionPageLocal"; } }

      public static string IsTextMainContentDefaultPageSingleStateDomainColumnName { get { return "IsTextMainContentDefaultPageSingleStateDomain"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionNoneColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionNone"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionGeneralColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionGeneral"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionOffYearColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionOffYear"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionSpecialColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionSpecial"; } }

      public static string MainContentDefaultPageSingleStateDomainElectionPrimaryColumnName { get { return "MainContentDefaultPageSingleStateDomainElectionPrimary"; } }

      public static string MainContentDefaultPageSingleStateDomainContestsFederalStatewideColumnName { get { return "MainContentDefaultPageSingleStateDomainContestsFederalStatewide"; } }

      public static string IsTextInstructionsElectedOfficialsPageGovernorsColumnName { get { return "IsTextInstructionsElectedOfficialsPageGovernors"; } }

      public static string InstructionsElectedOfficialsPageGovernorsColumnName { get { return "InstructionsElectedOfficialsPageGovernors"; } }

      public static int IDMaxLength { get { return 6; } }

      public static int FirstFooterAllPagesMaxLength { get { return int.MaxValue; } }

      public static int SecondFooterAllPagesMaxLength { get { return int.MaxValue; } }

      public static int EmailUsLineAllPagesMaxLength { get { return int.MaxValue; } }

      public static int EmailUsAddressAllPagesMaxLength { get { return int.MaxValue; } }

      public static int TitleTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaDescriptionTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaKeywordsTagDefaultPageAllStatesDomainMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageAllStatesDomainBeforeSelectionMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageAllStatesDomainAfterSelectionMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageAllStatesDomainBeforeSelectionMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageAllStatesDomainAfterSelectionMaxLength { get { return int.MaxValue; } }

      public static int TitleTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaDescriptionTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int MetaKeywordsTagDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int InstructionsDefaultPageSingleStateDomainMaxLength { get { return int.MaxValue; } }

      public static int InstructionsUpcomingElectionBallotPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPreviousElectionBallotPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSPresMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSSenateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageUSHouseMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageStateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageCountyMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageLocalMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListNoAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIssuePageIssueListReportMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListNoAnswersMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageIssueListReportMaxLength { get { return int.MaxValue; } }

      public static int InstructionsPoliticianIssuePageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsIntroPageMaxLength { get { return int.MaxValue; } }

      public static int ContentAboutUsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentCandidatesPageMaxLength { get { return int.MaxValue; } }

      public static int ContentContactUsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentInternsPageMaxLength { get { return int.MaxValue; } }

      public static int ContentPartiesPageMaxLength { get { return int.MaxValue; } }

      public static int ContentVotersPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsArchivesPageMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSPresPrimaryMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSPresMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSSenateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageUSHouseMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageStateMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageCountyMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectionPageLocalMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionNoneMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionGeneralMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionOffYearMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionSpecialMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainElectionPrimaryMaxLength { get { return int.MaxValue; } }

      public static int MainContentDefaultPageSingleStateDomainContestsFederalStatewideMaxLength { get { return int.MaxValue; } }

      public static int InstructionsElectedOfficialsPageGovernorsMaxLength { get { return int.MaxValue; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM MasterDesign";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM MasterDesign";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static string GetSelectCommandText(MasterDesignTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case MasterDesignTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static MasterDesign()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.MasterDesign

    #region vote.Offices

    public partial class OfficesRow : DataRow
    {
      internal OfficesRow(DataRowBuilder rb) : base(rb) {}

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public String DistrictCodeAlpha
      {
        get { return this["DistrictCodeAlpha"] as String; }
        set { if (value == null) this["DistrictCodeAlpha"] = DBNull.Value; else this["DistrictCodeAlpha"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 AlternateOfficeLevel
      {
        get { return (Int32) this["AlternateOfficeLevel"]; }
        set { this["AlternateOfficeLevel"] = value; }
      }

      public Int32 OfficeOrderWithinLevel
      {
        get { return (Int32) this["OfficeOrderWithinLevel"]; }
        set { this["OfficeOrderWithinLevel"] = value; }
      }

      public Boolean IsRunningMateOffice
      {
        get { return (Boolean) this["IsRunningMateOffice"]; }
        set { this["IsRunningMateOffice"] = value; }
      }

      public Boolean IsOnlyForPrimaries
      {
        get { return (Boolean) this["IsOnlyForPrimaries"]; }
        set { this["IsOnlyForPrimaries"] = value; }
      }

      public Int32 Incumbents
      {
        get { return (Int32) this["Incumbents"]; }
        set { this["Incumbents"] = value; }
      }

      public String VoteInstructions
      {
        get { return this["VoteInstructions"] as String; }
        set { if (value == null) this["VoteInstructions"] = DBNull.Value; else this["VoteInstructions"] = value; }
      }

      public String VoteForWording
      {
        get { return this["VoteForWording"] as String; }
        set { if (value == null) this["VoteForWording"] = DBNull.Value; else this["VoteForWording"] = value; }
      }

      public String WriteInInstructions
      {
        get { return this["WriteInInstructions"] as String; }
        set { if (value == null) this["WriteInInstructions"] = DBNull.Value; else this["WriteInInstructions"] = value; }
      }

      public String WriteInWording
      {
        get { return this["WriteInWording"] as String; }
        set { if (value == null) this["WriteInWording"] = DBNull.Value; else this["WriteInWording"] = value; }
      }

      public Int32 WriteInLines
      {
        get { return (Int32) this["WriteInLines"]; }
        set { this["WriteInLines"] = value; }
      }

      public Boolean IsVacant
      {
        get { return (Boolean) this["IsVacant"]; }
        set { this["IsVacant"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public Boolean IsOfficeTagForDeletion
      {
        get { return (Boolean) this["IsOfficeTagForDeletion"]; }
        set { this["IsOfficeTagForDeletion"] = value; }
      }

      public Boolean IsSpecialOffice
      {
        get { return (Boolean) this["IsSpecialOffice"]; }
        set { this["IsSpecialOffice"] = value; }
      }

      public Boolean IsInactive
      {
        get { return (Boolean) this["IsInactive"]; }
        set { this["IsInactive"] = value; }
      }

      public Int32 ElectionPositions
      {
        get { return (Int32) this["ElectionPositions"]; }
        set { this["ElectionPositions"] = value; }
      }

      public Int32 PrimaryPositions
      {
        get { return (Int32) this["PrimaryPositions"]; }
        set { this["PrimaryPositions"] = value; }
      }

      public Int32 PrimaryRunoffPositions
      {
        get { return (Int32) this["PrimaryRunoffPositions"]; }
        set { this["PrimaryRunoffPositions"] = value; }
      }

      public Int32 GeneralRunoffPositions
      {
        get { return (Int32) this["GeneralRunoffPositions"]; }
        set { this["GeneralRunoffPositions"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesTable : TypedTableBase<OfficesRow>
    {
      public OfficesRow this[int index] { get { return (OfficesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesTable(); }

      new public OfficesRow NewRow() { return (OfficesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesRow); }

      public void RemoveRow(OfficesRow row) { this.Rows.Remove(row); }

      public OfficesRow NewRow(String officeKey, String stateCode, String countyCode, String localCode, String districtCode, String districtCodeAlpha, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions)
      {
        OfficesRow row = NewRow();
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.DistrictCodeAlpha = districtCodeAlpha;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.OfficeLevel = officeLevel;
        row.AlternateOfficeLevel = alternateOfficeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.IsRunningMateOffice = isRunningMateOffice;
        row.IsOnlyForPrimaries = isOnlyForPrimaries;
        row.Incumbents = incumbents;
        row.VoteInstructions = voteInstructions;
        row.VoteForWording = voteForWording;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        row.IsVacant = isVacant;
        row.DataLastUpdated = dataLastUpdated;
        row.IsOfficeTagForDeletion = isOfficeTagForDeletion;
        row.IsSpecialOffice = isSpecialOffice;
        row.IsInactive = isInactive;
        row.ElectionPositions = electionPositions;
        row.PrimaryPositions = primaryPositions;
        row.PrimaryRunoffPositions = primaryRunoffPositions;
        row.GeneralRunoffPositions = generalRunoffPositions;
        return row;
      }

      public void AddRow(String officeKey, String stateCode, String countyCode, String localCode, String districtCode, String districtCodeAlpha, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions)
      {
        OfficesRow row = NewRow(officeKey, stateCode, countyCode, localCode, districtCode, districtCodeAlpha, officeLine1, officeLine2, officeLevel, alternateOfficeLevel, officeOrderWithinLevel, isRunningMateOffice, isOnlyForPrimaries, incumbents, voteInstructions, voteForWording, writeInInstructions, writeInWording, writeInLines, isVacant, dataLastUpdated, isOfficeTagForDeletion, isSpecialOffice, isInactive, electionPositions, primaryPositions, primaryRunoffPositions, generalRunoffPositions);
        AddRow(row);
      }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DistrictCodeAlphaColumn { get { return this.Columns["DistrictCodeAlpha"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn AlternateOfficeLevelColumn { get { return this.Columns["AlternateOfficeLevel"]; } }

      public DataColumn OfficeOrderWithinLevelColumn { get { return this.Columns["OfficeOrderWithinLevel"]; } }

      public DataColumn IsRunningMateOfficeColumn { get { return this.Columns["IsRunningMateOffice"]; } }

      public DataColumn IsOnlyForPrimariesColumn { get { return this.Columns["IsOnlyForPrimaries"]; } }

      public DataColumn IncumbentsColumn { get { return this.Columns["Incumbents"]; } }

      public DataColumn VoteInstructionsColumn { get { return this.Columns["VoteInstructions"]; } }

      public DataColumn VoteForWordingColumn { get { return this.Columns["VoteForWording"]; } }

      public DataColumn WriteInInstructionsColumn { get { return this.Columns["WriteInInstructions"]; } }

      public DataColumn WriteInWordingColumn { get { return this.Columns["WriteInWording"]; } }

      public DataColumn WriteInLinesColumn { get { return this.Columns["WriteInLines"]; } }

      public DataColumn IsVacantColumn { get { return this.Columns["IsVacant"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn IsOfficeTagForDeletionColumn { get { return this.Columns["IsOfficeTagForDeletion"]; } }

      public DataColumn IsSpecialOfficeColumn { get { return this.Columns["IsSpecialOffice"]; } }

      public DataColumn IsInactiveColumn { get { return this.Columns["IsInactive"]; } }

      public DataColumn ElectionPositionsColumn { get { return this.Columns["ElectionPositions"]; } }

      public DataColumn PrimaryPositionsColumn { get { return this.Columns["PrimaryPositions"]; } }

      public DataColumn PrimaryRunoffPositionsColumn { get { return this.Columns["PrimaryRunoffPositions"]; } }

      public DataColumn GeneralRunoffPositionsColumn { get { return this.Columns["GeneralRunoffPositions"]; } }

      public enum ColumnSet { All, Cache, AlternateOfficeLevelUpdate, KeyInfo, GeneralElection, Positions }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCodeAlpha", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlternateOfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeOrderWithinLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOnlyForPrimaries", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteForWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInLines", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVacant", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOfficeTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSpecialOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInactive", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GeneralRunoffPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVacant", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAlternateOfficeLevelUpdateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlternateOfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitKeyInfoColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitGeneralElectionColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPositionsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionPositions", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficesTable() : this(ColumnSet.All) { }

      public OfficesTable(ColumnSet columnSet)
      {
        this.TableName = "Offices";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.AlternateOfficeLevelUpdate:
            InitAlternateOfficeLevelUpdateColumns();
            break;

          case ColumnSet.KeyInfo:
            InitKeyInfoColumns();
            break;

          case ColumnSet.GeneralElection:
            InitGeneralElectionColumns();
            break;

          case ColumnSet.Positions:
            InitPositionsColumns();
            break;
        }
      }

      protected OfficesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Offices
    {
      public const string TableName = "Offices";

      public enum Column { OfficeKey, StateCode, CountyCode, LocalCode, DistrictCode, DistrictCodeAlpha, OfficeLine1, OfficeLine2, OfficeLevel, AlternateOfficeLevel, OfficeOrderWithinLevel, IsRunningMateOffice, IsOnlyForPrimaries, Incumbents, VoteInstructions, VoteForWording, WriteInInstructions, WriteInWording, WriteInLines, IsVacant, DataLastUpdated, IsOfficeTagForDeletion, IsSpecialOffice, IsInactive, ElectionPositions, PrimaryPositions, PrimaryRunoffPositions, GeneralRunoffPositions }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DistrictCodeAlpha, "DistrictCodeAlpha" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.AlternateOfficeLevel, "AlternateOfficeLevel" },
        { Column.OfficeOrderWithinLevel, "OfficeOrderWithinLevel" },
        { Column.IsRunningMateOffice, "IsRunningMateOffice" },
        { Column.IsOnlyForPrimaries, "IsOnlyForPrimaries" },
        { Column.Incumbents, "Incumbents" },
        { Column.VoteInstructions, "VoteInstructions" },
        { Column.VoteForWording, "VoteForWording" },
        { Column.WriteInInstructions, "WriteInInstructions" },
        { Column.WriteInWording, "WriteInWording" },
        { Column.WriteInLines, "WriteInLines" },
        { Column.IsVacant, "IsVacant" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.IsOfficeTagForDeletion, "IsOfficeTagForDeletion" },
        { Column.IsSpecialOffice, "IsSpecialOffice" },
        { Column.IsInactive, "IsInactive" },
        { Column.ElectionPositions, "ElectionPositions" },
        { Column.PrimaryPositions, "PrimaryPositions" },
        { Column.PrimaryRunoffPositions, "PrimaryRunoffPositions" },
        { Column.GeneralRunoffPositions, "GeneralRunoffPositions" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String officeKey, String stateCode, String countyCode, String localCode, String districtCode, String districtCodeAlpha, String officeLine1, String officeLine2, Int32 officeLevel, Int32 alternateOfficeLevel, Int32 officeOrderWithinLevel, Boolean isRunningMateOffice, Boolean isOnlyForPrimaries, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, Boolean isVacant, DateTime dataLastUpdated, Boolean isOfficeTagForDeletion, Boolean isSpecialOffice, Boolean isInactive, Int32 electionPositions, Int32 primaryPositions, Int32 primaryRunoffPositions, Int32 generalRunoffPositions, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Offices (OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,DistrictCodeAlpha,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions) VALUES (@OfficeKey,@StateCode,@CountyCode,@LocalCode,@DistrictCode,@DistrictCodeAlpha,@OfficeLine1,@OfficeLine2,@OfficeLevel,@AlternateOfficeLevel,@OfficeOrderWithinLevel,@IsRunningMateOffice,@IsOnlyForPrimaries,@Incumbents,@VoteInstructions,@VoteForWording,@WriteInInstructions,@WriteInWording,@WriteInLines,@IsVacant,@DataLastUpdated,@IsOfficeTagForDeletion,@IsSpecialOffice,@IsInactive,@ElectionPositions,@PrimaryPositions,@PrimaryRunoffPositions,@GeneralRunoffPositions)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCodeAlpha", districtCodeAlpha);
        VoteDb.AddCommandParameter(cmd, "OfficeLine1", officeLine1);
        VoteDb.AddCommandParameter(cmd, "OfficeLine2", officeLine2);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "AlternateOfficeLevel", alternateOfficeLevel);
        VoteDb.AddCommandParameter(cmd, "OfficeOrderWithinLevel", officeOrderWithinLevel);
        VoteDb.AddCommandParameter(cmd, "IsRunningMateOffice", isRunningMateOffice);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "Incumbents", incumbents);
        VoteDb.AddCommandParameter(cmd, "VoteInstructions", voteInstructions);
        VoteDb.AddCommandParameter(cmd, "VoteForWording", voteForWording);
        VoteDb.AddCommandParameter(cmd, "WriteInInstructions", writeInInstructions);
        VoteDb.AddCommandParameter(cmd, "WriteInWording", writeInWording);
        VoteDb.AddCommandParameter(cmd, "WriteInLines", writeInLines);
        VoteDb.AddCommandParameter(cmd, "IsVacant", isVacant);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "IsOfficeTagForDeletion", isOfficeTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsSpecialOffice", isSpecialOffice);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "ElectionPositions", electionPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryPositions", primaryPositions);
        VoteDb.AddCommandParameter(cmd, "PrimaryRunoffPositions", primaryRunoffPositions);
        VoteDb.AddCommandParameter(cmd, "GeneralRunoffPositions", generalRunoffPositions);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,DistrictCodeAlpha,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices";
        }
      }

      public static OfficesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,DistrictCodeAlpha,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static OfficesTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesTable FillTable(DbCommand command, OfficesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesTable table = new OfficesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DistrictCodeAlphaColumnName { get { return "DistrictCodeAlpha"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string AlternateOfficeLevelColumnName { get { return "AlternateOfficeLevel"; } }

      public static string OfficeOrderWithinLevelColumnName { get { return "OfficeOrderWithinLevel"; } }

      public static string IsRunningMateOfficeColumnName { get { return "IsRunningMateOffice"; } }

      public static string IsOnlyForPrimariesColumnName { get { return "IsOnlyForPrimaries"; } }

      public static string IncumbentsColumnName { get { return "Incumbents"; } }

      public static string VoteInstructionsColumnName { get { return "VoteInstructions"; } }

      public static string VoteForWordingColumnName { get { return "VoteForWording"; } }

      public static string WriteInInstructionsColumnName { get { return "WriteInInstructions"; } }

      public static string WriteInWordingColumnName { get { return "WriteInWording"; } }

      public static string WriteInLinesColumnName { get { return "WriteInLines"; } }

      public static string IsVacantColumnName { get { return "IsVacant"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string IsOfficeTagForDeletionColumnName { get { return "IsOfficeTagForDeletion"; } }

      public static string IsSpecialOfficeColumnName { get { return "IsSpecialOffice"; } }

      public static string IsInactiveColumnName { get { return "IsInactive"; } }

      public static string ElectionPositionsColumnName { get { return "ElectionPositions"; } }

      public static string PrimaryPositionsColumnName { get { return "PrimaryPositions"; } }

      public static string PrimaryRunoffPositionsColumnName { get { return "PrimaryRunoffPositions"; } }

      public static string GeneralRunoffPositionsColumnName { get { return "GeneralRunoffPositions"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int DistrictCodeAlphaMaxLength { get { return 4; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int VoteInstructionsMaxLength { get { return int.MaxValue; } }

      public static int VoteForWordingMaxLength { get { return int.MaxValue; } }

      public static int WriteInInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInWordingMaxLength { get { return int.MaxValue; } }

      public static bool OfficeKeyExists(String officeKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetOfficeKeyByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKey(String officeKey, String defaultValue = null)
      {
        return GetOfficeKeyByOfficeKey(officeKey, defaultValue);
      }

      public static String GetStateCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String officeKey, String defaultValue = null)
      {
        return GetStateCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetCountyCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String officeKey, String defaultValue = null)
      {
        return GetCountyCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetLocalCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCode(String officeKey, String defaultValue = null)
      {
        return GetLocalCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetDistrictCodeByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCode(String officeKey, String defaultValue = null)
      {
        return GetDistrictCodeByOfficeKey(officeKey, defaultValue);
      }

      public static String GetDistrictCodeAlphaByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCodeAlpha FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCodeAlpha(String officeKey, String defaultValue = null)
      {
        return GetDistrictCodeAlphaByOfficeKey(officeKey, defaultValue);
      }

      public static String GetOfficeLine1ByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine1 FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine1(String officeKey, String defaultValue = null)
      {
        return GetOfficeLine1ByOfficeKey(officeKey, defaultValue);
      }

      public static String GetOfficeLine2ByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine2 FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine2(String officeKey, String defaultValue = null)
      {
        return GetOfficeLine2ByOfficeKey(officeKey, defaultValue);
      }

      public static Int32? GetOfficeLevelByOfficeKey(String officeKey)
      {
        return _GetOfficeLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetOfficeLevel(String officeKey)
      {
        return GetOfficeLevelByOfficeKey(officeKey);
      }

      public static Int32 GetOfficeLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetOfficeLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetOfficeLevel(String officeKey, Int32 defaultValue)
      {
        return GetOfficeLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetOfficeLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetAlternateOfficeLevelByOfficeKey(String officeKey)
      {
        return _GetAlternateOfficeLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetAlternateOfficeLevel(String officeKey)
      {
        return GetAlternateOfficeLevelByOfficeKey(officeKey);
      }

      public static Int32 GetAlternateOfficeLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetAlternateOfficeLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetAlternateOfficeLevel(String officeKey, Int32 defaultValue)
      {
        return GetAlternateOfficeLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetAlternateOfficeLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT AlternateOfficeLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetOfficeOrderWithinLevelByOfficeKey(String officeKey)
      {
        return _GetOfficeOrderWithinLevelByOfficeKey(officeKey, null);
      }

      public static Int32? GetOfficeOrderWithinLevel(String officeKey)
      {
        return GetOfficeOrderWithinLevelByOfficeKey(officeKey);
      }

      public static Int32 GetOfficeOrderWithinLevelByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetOfficeOrderWithinLevelByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetOfficeOrderWithinLevel(String officeKey, Int32 defaultValue)
      {
        return GetOfficeOrderWithinLevelByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetOfficeOrderWithinLevelByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeOrderWithinLevel FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsRunningMateOfficeByOfficeKey(String officeKey)
      {
        return _GetIsRunningMateOfficeByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsRunningMateOffice(String officeKey)
      {
        return GetIsRunningMateOfficeByOfficeKey(officeKey);
      }

      public static Boolean GetIsRunningMateOfficeByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsRunningMateOfficeByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsRunningMateOffice(String officeKey, Boolean defaultValue)
      {
        return GetIsRunningMateOfficeByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsRunningMateOfficeByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsRunningMateOffice FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsOnlyForPrimariesByOfficeKey(String officeKey)
      {
        return _GetIsOnlyForPrimariesByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsOnlyForPrimaries(String officeKey)
      {
        return GetIsOnlyForPrimariesByOfficeKey(officeKey);
      }

      public static Boolean GetIsOnlyForPrimariesByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsOnlyForPrimariesByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsOnlyForPrimaries(String officeKey, Boolean defaultValue)
      {
        return GetIsOnlyForPrimariesByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsOnlyForPrimariesByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOnlyForPrimaries FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIncumbentsByOfficeKey(String officeKey)
      {
        return _GetIncumbentsByOfficeKey(officeKey, null);
      }

      public static Int32? GetIncumbents(String officeKey)
      {
        return GetIncumbentsByOfficeKey(officeKey);
      }

      public static Int32 GetIncumbentsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetIncumbentsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetIncumbents(String officeKey, Int32 defaultValue)
      {
        return GetIncumbentsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetIncumbentsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Incumbents FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetVoteInstructionsByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteInstructions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteInstructions(String officeKey, String defaultValue = null)
      {
        return GetVoteInstructionsByOfficeKey(officeKey, defaultValue);
      }

      public static String GetVoteForWordingByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteForWording FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteForWording(String officeKey, String defaultValue = null)
      {
        return GetVoteForWordingByOfficeKey(officeKey, defaultValue);
      }

      public static String GetWriteInInstructionsByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInInstructions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInInstructions(String officeKey, String defaultValue = null)
      {
        return GetWriteInInstructionsByOfficeKey(officeKey, defaultValue);
      }

      public static String GetWriteInWordingByOfficeKey(String officeKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInWording FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInWording(String officeKey, String defaultValue = null)
      {
        return GetWriteInWordingByOfficeKey(officeKey, defaultValue);
      }

      public static Int32? GetWriteInLinesByOfficeKey(String officeKey)
      {
        return _GetWriteInLinesByOfficeKey(officeKey, null);
      }

      public static Int32? GetWriteInLines(String officeKey)
      {
        return GetWriteInLinesByOfficeKey(officeKey);
      }

      public static Int32 GetWriteInLinesByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetWriteInLinesByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetWriteInLines(String officeKey, Int32 defaultValue)
      {
        return GetWriteInLinesByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetWriteInLinesByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WriteInLines FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsVacantByOfficeKey(String officeKey)
      {
        return _GetIsVacantByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsVacant(String officeKey)
      {
        return GetIsVacantByOfficeKey(officeKey);
      }

      public static Boolean GetIsVacantByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsVacantByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsVacant(String officeKey, Boolean defaultValue)
      {
        return GetIsVacantByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsVacantByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVacant FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDataLastUpdatedByOfficeKey(String officeKey)
      {
        return _GetDataLastUpdatedByOfficeKey(officeKey, null);
      }

      public static DateTime? GetDataLastUpdated(String officeKey)
      {
        return GetDataLastUpdatedByOfficeKey(officeKey);
      }

      public static DateTime GetDataLastUpdatedByOfficeKey(String officeKey, DateTime defaultValue)
      {
        return _GetDataLastUpdatedByOfficeKey(officeKey, defaultValue).Value;
      }

      public static DateTime GetDataLastUpdated(String officeKey, DateTime defaultValue)
      {
        return GetDataLastUpdatedByOfficeKey(officeKey, defaultValue);
      }

      private static DateTime? _GetDataLastUpdatedByOfficeKey(String officeKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsOfficeTagForDeletionByOfficeKey(String officeKey)
      {
        return _GetIsOfficeTagForDeletionByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsOfficeTagForDeletion(String officeKey)
      {
        return GetIsOfficeTagForDeletionByOfficeKey(officeKey);
      }

      public static Boolean GetIsOfficeTagForDeletionByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsOfficeTagForDeletionByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsOfficeTagForDeletion(String officeKey, Boolean defaultValue)
      {
        return GetIsOfficeTagForDeletionByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsOfficeTagForDeletionByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOfficeTagForDeletion FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsSpecialOfficeByOfficeKey(String officeKey)
      {
        return _GetIsSpecialOfficeByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsSpecialOffice(String officeKey)
      {
        return GetIsSpecialOfficeByOfficeKey(officeKey);
      }

      public static Boolean GetIsSpecialOfficeByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsSpecialOfficeByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsSpecialOffice(String officeKey, Boolean defaultValue)
      {
        return GetIsSpecialOfficeByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsSpecialOfficeByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSpecialOffice FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsInactiveByOfficeKey(String officeKey)
      {
        return _GetIsInactiveByOfficeKey(officeKey, null);
      }

      public static Boolean? GetIsInactive(String officeKey)
      {
        return GetIsInactiveByOfficeKey(officeKey);
      }

      public static Boolean GetIsInactiveByOfficeKey(String officeKey, Boolean defaultValue)
      {
        return _GetIsInactiveByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Boolean GetIsInactive(String officeKey, Boolean defaultValue)
      {
        return GetIsInactiveByOfficeKey(officeKey, defaultValue);
      }

      private static Boolean? _GetIsInactiveByOfficeKey(String officeKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsInactive FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetElectionPositionsByOfficeKey(String officeKey)
      {
        return _GetElectionPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetElectionPositions(String officeKey)
      {
        return GetElectionPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetElectionPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetElectionPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetElectionPositions(String officeKey, Int32 defaultValue)
      {
        return GetElectionPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetElectionPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ElectionPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryPositionsByOfficeKey(String officeKey)
      {
        return _GetPrimaryPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetPrimaryPositions(String officeKey)
      {
        return GetPrimaryPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetPrimaryPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetPrimaryPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetPrimaryPositions(String officeKey, Int32 defaultValue)
      {
        return GetPrimaryPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetPrimaryPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPrimaryRunoffPositionsByOfficeKey(String officeKey)
      {
        return _GetPrimaryRunoffPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetPrimaryRunoffPositions(String officeKey)
      {
        return GetPrimaryRunoffPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetPrimaryRunoffPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetPrimaryRunoffPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetPrimaryRunoffPositions(String officeKey, Int32 defaultValue)
      {
        return GetPrimaryRunoffPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetPrimaryRunoffPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetGeneralRunoffPositionsByOfficeKey(String officeKey)
      {
        return _GetGeneralRunoffPositionsByOfficeKey(officeKey, null);
      }

      public static Int32? GetGeneralRunoffPositions(String officeKey)
      {
        return GetGeneralRunoffPositionsByOfficeKey(officeKey);
      }

      public static Int32 GetGeneralRunoffPositionsByOfficeKey(String officeKey, Int32 defaultValue)
      {
        return _GetGeneralRunoffPositionsByOfficeKey(officeKey, defaultValue).Value;
      }

      public static Int32 GetGeneralRunoffPositions(String officeKey, Int32 defaultValue)
      {
        return GetGeneralRunoffPositionsByOfficeKey(officeKey, defaultValue);
      }

      private static Int32? _GetGeneralRunoffPositionsByOfficeKey(String officeKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT GeneralRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String officeKey)
      {
        return GetColumnByOfficeKey(_column, officeKey);
      }

      public static OfficesTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,DistrictCodeAlpha,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static OfficesTable GetData(String officeKey, int commandTimeout = -1)
      {
        return GetDataByOfficeKey(officeKey, commandTimeout);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String officeKey)
      {
        return UpdateOfficeKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String officeKey)
      {
        return UpdateStateCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String officeKey)
      {
        return UpdateCountyCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateLocalCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCode(String newValue, String officeKey)
      {
        return UpdateLocalCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCode(String newValue, String officeKey)
      {
        return UpdateDistrictCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDistrictCodeAlphaByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET DistrictCodeAlpha=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeAlpha(String newValue, String officeKey)
      {
        return UpdateDistrictCodeAlphaByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLine1ByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1(String newValue, String officeKey)
      {
        return UpdateOfficeLine1ByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLine2ByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2(String newValue, String officeKey)
      {
        return UpdateOfficeLine2ByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevel(Int32 newValue, String officeKey)
      {
        return UpdateOfficeLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateAlternateOfficeLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevel(Int32 newValue, String officeKey)
      {
        return UpdateAlternateOfficeLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateOfficeOrderWithinLevelByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevel(Int32 newValue, String officeKey)
      {
        return UpdateOfficeOrderWithinLevelByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsRunningMateOfficeByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOffice(Boolean newValue, String officeKey)
      {
        return UpdateIsRunningMateOfficeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsOnlyForPrimariesByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimaries(Boolean newValue, String officeKey)
      {
        return UpdateIsOnlyForPrimariesByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIncumbentsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbents(Int32 newValue, String officeKey)
      {
        return UpdateIncumbentsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateVoteInstructionsByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructions(String newValue, String officeKey)
      {
        return UpdateVoteInstructionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateVoteForWordingByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET VoteForWording=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteForWording(String newValue, String officeKey)
      {
        return UpdateVoteForWordingByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInInstructionsByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructions(String newValue, String officeKey)
      {
        return UpdateWriteInInstructionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInWordingByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWording(String newValue, String officeKey)
      {
        return UpdateWriteInWordingByOfficeKey(newValue, officeKey);
      }

      public static int UpdateWriteInLinesByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLines(Int32 newValue, String officeKey)
      {
        return UpdateWriteInLinesByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsVacantByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacant(Boolean newValue, String officeKey)
      {
        return UpdateIsVacantByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String officeKey)
      {
        return UpdateDataLastUpdatedByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsOfficeTagForDeletionByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletion(Boolean newValue, String officeKey)
      {
        return UpdateIsOfficeTagForDeletionByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsSpecialOfficeByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOffice(Boolean newValue, String officeKey)
      {
        return UpdateIsSpecialOfficeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateIsInactiveByOfficeKey(Boolean newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactive(Boolean newValue, String officeKey)
      {
        return UpdateIsInactiveByOfficeKey(newValue, officeKey);
      }

      public static int UpdateElectionPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositions(Int32 newValue, String officeKey)
      {
        return UpdateElectionPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePrimaryPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositions(Int32 newValue, String officeKey)
      {
        return UpdatePrimaryPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePrimaryRunoffPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositions(Int32 newValue, String officeKey)
      {
        return UpdatePrimaryRunoffPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateGeneralRunoffPositionsByOfficeKey(Int32 newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositions(Int32 newValue, String officeKey)
      {
        return UpdateGeneralRunoffPositionsByOfficeKey(newValue, officeKey);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String officeKey)
      {
         return UpdateColumnByOfficeKey(_column, newValue, officeKey);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeOfficeLevelDistrictCode(Column _column, String stateCode, Int32 officeLevel, String districtCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesTable GetDataByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,DistrictCodeAlpha,OfficeLine1,OfficeLine2,OfficeLevel,AlternateOfficeLevel,OfficeOrderWithinLevel,IsRunningMateOffice,IsOnlyForPrimaries,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,IsVacant,DataLastUpdated,IsOfficeTagForDeletion,IsSpecialOffice,IsInactive,ElectionPositions,PrimaryPositions,PrimaryRunoffPositions,GeneralRunoffPositions FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        return FillTable(cmd, OfficesTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeKey=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET StateCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET CountyCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET LocalCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET DistrictCode=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeAlphaByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET DistrictCodeAlpha=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine1=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLine2=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlternateOfficeLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET AlternateOfficeLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET OfficeOrderWithinLevel=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsRunningMateOffice=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOnlyForPrimariesByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsOnlyForPrimaries=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET Incumbents=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET VoteInstructions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteForWordingByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET VoteForWording=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInInstructions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByStateCodeOfficeLevelDistrictCode(String newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInWording=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET WriteInLines=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVacantByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsVacant=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateCodeOfficeLevelDistrictCode(DateTime newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET DataLastUpdated=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsOfficeTagForDeletionByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsOfficeTagForDeletion=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSpecialOfficeByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsSpecialOffice=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsInactiveByStateCodeOfficeLevelDistrictCode(Boolean newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET IsInactive=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET ElectionPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRunoffPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET PrimaryRunoffPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGeneralRunoffPositionsByStateCodeOfficeLevelDistrictCode(Int32 newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET GeneralRunoffPositions=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeOfficeLevelDistrictCode(Column _column, object newValue, String stateCode, Int32 officeLevel, String districtCode)
      {
        string cmdText = "UPDATE Offices SET {0}=@newValue WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeOfficeLevelDistrictCode(String stateCode, Int32 officeLevel, String districtCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Offices WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND DistrictCode=@DistrictCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,Incumbents,IsVacant FROM Offices";
        }
      }

      public static OfficesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,Incumbents,IsVacant FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheData(String officeKey, int commandTimeout = -1)
      {
        return GetCacheDataByOfficeKey(officeKey, commandTimeout);
      }

      public static OfficesTable GetCacheDataByIsInactiveIsOnlyForPrimariesOfficeLevel(Boolean isInactive, Boolean isOnlyForPrimaries, Int32 officeLevel, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE IsInactive=@IsInactive AND IsOnlyForPrimaries=@IsOnlyForPrimaries AND OfficeLevel=@OfficeLevel";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static OfficesTable GetCacheDataByIsInactiveIsOnlyForPrimariesOfficeLevelStateCode(Boolean isInactive, Boolean isOnlyForPrimaries, Int32 officeLevel, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,OfficeLine1,OfficeLine2,OfficeLevel,IsRunningMateOffice,Incumbents,IsVacant FROM Offices WHERE IsInactive=@IsInactive AND IsOnlyForPrimaries=@IsOnlyForPrimaries AND OfficeLevel=@OfficeLevel AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IsInactive", isInactive);
        VoteDb.AddCommandParameter(cmd, "IsOnlyForPrimaries", isOnlyForPrimaries);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, OfficesTable.ColumnSet.Cache);
      }

      public static string SelectAlternateOfficeLevelUpdateCommandText
      {
        get
        {
          return "SELECT OfficeKey,OfficeLevel,AlternateOfficeLevel FROM Offices";
        }
      }

      public static OfficesTable GetAllAlternateOfficeLevelUpdateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,OfficeLevel,AlternateOfficeLevel FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.AlternateOfficeLevelUpdate);
      }

      public static string SelectKeyInfoCommandText
      {
        get
        {
          return "SELECT OfficeKey,CountyCode,LocalCode FROM Offices";
        }
      }

      public static OfficesTable GetAllKeyInfoData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,CountyCode,LocalCode FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.KeyInfo);
      }

      public static OfficesTable GetKeyInfoDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,CountyCode,LocalCode FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.KeyInfo);
      }

      public static OfficesTable GetKeyInfoData(String officeKey, int commandTimeout = -1)
      {
        return GetKeyInfoDataByOfficeKey(officeKey, commandTimeout);
      }

      public static string SelectGeneralElectionCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,DistrictCode,OfficeLevel FROM Offices";
        }
      }

      public static OfficesTable GetAllGeneralElectionData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,StateCode,DistrictCode,OfficeLevel FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.GeneralElection);
      }

      public static string SelectPositionsCommandText
      {
        get
        {
          return "SELECT Incumbents,ElectionPositions FROM Offices";
        }
      }

      public static OfficesTable GetAllPositionsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Incumbents,ElectionPositions FROM Offices";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesTable.ColumnSet.Positions);
      }

      public static OfficesTable GetPositionsDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Incumbents,ElectionPositions FROM Offices WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesTable.ColumnSet.Positions);
      }

      public static string GetSelectCommandText(OfficesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesTable.ColumnSet.All:
            return SelectAllCommandText;

          case OfficesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case OfficesTable.ColumnSet.AlternateOfficeLevelUpdate:
            return SelectAlternateOfficeLevelUpdateCommandText;

          case OfficesTable.ColumnSet.KeyInfo:
            return SelectKeyInfoCommandText;

          case OfficesTable.ColumnSet.GeneralElection:
            return SelectGeneralElectionCommandText;

          case OfficesTable.ColumnSet.Positions:
            return SelectPositionsCommandText;

          default:
            return null;
        }
      }

      static Offices()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Offices

    #region vote.OfficesAdminReportView

    public partial class OfficesAdminReportViewRow : DataRow
    {
      internal OfficesAdminReportViewRow(DataRowBuilder rb) : base(rb) {}

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public Boolean IsInactive
      {
        get { return (Boolean) this["IsInactive"]; }
        set { this["IsInactive"] = value; }
      }

      public Int32 Incumbents
      {
        get { return (Int32) this["Incumbents"]; }
        set { this["Incumbents"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 OfficeOrderWithinLevel
      {
        get { return (Int32) this["OfficeOrderWithinLevel"]; }
        set { this["OfficeOrderWithinLevel"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public String VoteInstructions
      {
        get { return this["VoteInstructions"] as String; }
        set { if (value == null) this["VoteInstructions"] = DBNull.Value; else this["VoteInstructions"] = value; }
      }

      public String VoteForWording
      {
        get { return this["VoteForWording"] as String; }
        set { if (value == null) this["VoteForWording"] = DBNull.Value; else this["VoteForWording"] = value; }
      }

      public String WriteInInstructions
      {
        get { return this["WriteInInstructions"] as String; }
        set { if (value == null) this["WriteInInstructions"] = DBNull.Value; else this["WriteInInstructions"] = value; }
      }

      public String WriteInWording
      {
        get { return this["WriteInWording"] as String; }
        set { if (value == null) this["WriteInWording"] = DBNull.Value; else this["WriteInWording"] = value; }
      }

      public Int32 WriteInLines
      {
        get { return (Int32) this["WriteInLines"]; }
        set { this["WriteInLines"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesAdminReportViewTable : TypedTableBase<OfficesAdminReportViewRow>
    {
      public OfficesAdminReportViewRow this[int index] { get { return (OfficesAdminReportViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesAdminReportViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesAdminReportViewTable(); }

      new public OfficesAdminReportViewRow NewRow() { return (OfficesAdminReportViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesAdminReportViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesAdminReportViewRow); }

      public void RemoveRow(OfficesAdminReportViewRow row) { this.Rows.Remove(row); }

      public OfficesAdminReportViewRow NewRow(String officeKey, String stateCode, String countyCode, String localCode, String districtCode, Boolean isInactive, Int32 incumbents, Int32 officeLevel, Int32 officeOrderWithinLevel, String officeLine1, String officeLine2, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, String localDistrict)
      {
        OfficesAdminReportViewRow row = NewRow();
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.IsInactive = isInactive;
        row.Incumbents = incumbents;
        row.OfficeLevel = officeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.VoteInstructions = voteInstructions;
        row.VoteForWording = voteForWording;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        row.LocalDistrict = localDistrict;
        return row;
      }

      public void AddRow(String officeKey, String stateCode, String countyCode, String localCode, String districtCode, Boolean isInactive, Int32 incumbents, Int32 officeLevel, Int32 officeOrderWithinLevel, String officeLine1, String officeLine2, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, String localDistrict)
      {
        OfficesAdminReportViewRow row = NewRow(officeKey, stateCode, countyCode, localCode, districtCode, isInactive, incumbents, officeLevel, officeOrderWithinLevel, officeLine1, officeLine2, voteInstructions, voteForWording, writeInInstructions, writeInWording, writeInLines, localDistrict);
        AddRow(row);
      }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn IsInactiveColumn { get { return this.Columns["IsInactive"]; } }

      public DataColumn IncumbentsColumn { get { return this.Columns["Incumbents"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn OfficeOrderWithinLevelColumn { get { return this.Columns["OfficeOrderWithinLevel"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn VoteInstructionsColumn { get { return this.Columns["VoteInstructions"]; } }

      public DataColumn VoteForWordingColumn { get { return this.Columns["VoteForWording"]; } }

      public DataColumn WriteInInstructionsColumn { get { return this.Columns["WriteInInstructions"]; } }

      public DataColumn WriteInWordingColumn { get { return this.Columns["WriteInWording"]; } }

      public DataColumn WriteInLinesColumn { get { return this.Columns["WriteInLines"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsInactive", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeOrderWithinLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteForWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInLines", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
      }

      public OfficesAdminReportViewTable() : this(ColumnSet.All) { }

      public OfficesAdminReportViewTable(ColumnSet columnSet)
      {
        this.TableName = "OfficesAdminReportView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OfficesAdminReportViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficesAdminReportView
    {
      public const string TableName = "OfficesAdminReportView";

      public enum Column { OfficeKey, StateCode, CountyCode, LocalCode, DistrictCode, IsInactive, Incumbents, OfficeLevel, OfficeOrderWithinLevel, OfficeLine1, OfficeLine2, VoteInstructions, VoteForWording, WriteInInstructions, WriteInWording, WriteInLines, LocalDistrict }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.IsInactive, "IsInactive" },
        { Column.Incumbents, "Incumbents" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.OfficeOrderWithinLevel, "OfficeOrderWithinLevel" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.VoteInstructions, "VoteInstructions" },
        { Column.VoteForWording, "VoteForWording" },
        { Column.WriteInInstructions, "WriteInInstructions" },
        { Column.WriteInWording, "WriteInWording" },
        { Column.WriteInLines, "WriteInLines" },
        { Column.LocalDistrict, "LocalDistrict" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesAdminReportView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeKey,StateCode,CountyCode,LocalCode,DistrictCode,IsInactive,Incumbents,OfficeLevel,OfficeOrderWithinLevel,OfficeLine1,OfficeLine2,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines,LocalDistrict FROM OfficesAdminReportView";
        }
      }

      public static OfficesAdminReportViewTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesAdminReportViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesAdminReportViewTable FillTable(DbCommand command, OfficesAdminReportViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesAdminReportViewTable table = new OfficesAdminReportViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string IsInactiveColumnName { get { return "IsInactive"; } }

      public static string IncumbentsColumnName { get { return "Incumbents"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string OfficeOrderWithinLevelColumnName { get { return "OfficeOrderWithinLevel"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string VoteInstructionsColumnName { get { return "VoteInstructions"; } }

      public static string VoteForWordingColumnName { get { return "VoteForWording"; } }

      public static string WriteInInstructionsColumnName { get { return "WriteInInstructions"; } }

      public static string WriteInWordingColumnName { get { return "WriteInWording"; } }

      public static string WriteInLinesColumnName { get { return "WriteInLines"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int VoteInstructionsMaxLength { get { return int.MaxValue; } }

      public static int VoteForWordingMaxLength { get { return int.MaxValue; } }

      public static int WriteInInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInWordingMaxLength { get { return int.MaxValue; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static string GetSelectCommandText(OfficesAdminReportViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesAdminReportViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OfficesAdminReportView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficesAdminReportView

    #region vote.OfficesAllIdentified

    public partial class OfficesAllIdentifiedRow : DataRow
    {
      internal OfficesAllIdentifiedRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Boolean IsOfficesAllIdentified
      {
        get { return (Boolean) this["IsOfficesAllIdentified"]; }
        set { this["IsOfficesAllIdentified"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesAllIdentifiedTable : TypedTableBase<OfficesAllIdentifiedRow>
    {
      public OfficesAllIdentifiedRow this[int index] { get { return (OfficesAllIdentifiedRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesAllIdentifiedRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesAllIdentifiedTable(); }

      new public OfficesAllIdentifiedRow NewRow() { return (OfficesAllIdentifiedRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesAllIdentifiedRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesAllIdentifiedRow); }

      public void RemoveRow(OfficesAllIdentifiedRow row) { this.Rows.Remove(row); }

      public OfficesAllIdentifiedRow NewRow(String stateCode, String countyCode, String localCode, Int32 officeLevel, Boolean isOfficesAllIdentified)
      {
        OfficesAllIdentifiedRow row = NewRow();
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeLevel = officeLevel;
        row.IsOfficesAllIdentified = isOfficesAllIdentified;
        return row;
      }

      public void AddRow(String stateCode, String countyCode, String localCode, Int32 officeLevel, Boolean isOfficesAllIdentified)
      {
        OfficesAllIdentifiedRow row = NewRow(stateCode, countyCode, localCode, officeLevel, isOfficesAllIdentified);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn IsOfficesAllIdentifiedColumn { get { return this.Columns["IsOfficesAllIdentified"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsOfficesAllIdentified", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficesAllIdentifiedTable() : this(ColumnSet.All) { }

      public OfficesAllIdentifiedTable(ColumnSet columnSet)
      {
        this.TableName = "OfficesAllIdentified";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected OfficesAllIdentifiedTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficesAllIdentified
    {
      public const string TableName = "OfficesAllIdentified";

      public enum Column { StateCode, CountyCode, LocalCode, OfficeLevel, IsOfficesAllIdentified }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.IsOfficesAllIdentified, "IsOfficesAllIdentified" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesAllIdentified";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String stateCode, String countyCode, String localCode, Int32 officeLevel, Boolean isOfficesAllIdentified, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OfficesAllIdentified (StateCode,CountyCode,LocalCode,OfficeLevel,IsOfficesAllIdentified) VALUES (@StateCode,@CountyCode,@LocalCode,@OfficeLevel,@IsOfficesAllIdentified)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "IsOfficesAllIdentified", isOfficesAllIdentified);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,CountyCode,LocalCode,OfficeLevel,IsOfficesAllIdentified FROM OfficesAllIdentified";
        }
      }

      public static OfficesAllIdentifiedTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesAllIdentifiedTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesAllIdentifiedTable FillTable(DbCommand command, OfficesAllIdentifiedTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesAllIdentifiedTable table = new OfficesAllIdentifiedTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string IsOfficesAllIdentifiedColumnName { get { return "IsOfficesAllIdentified"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static bool StateCodeOfficeLevelCountyCodeLocalCodeExists(String stateCode, Int32 officeLevel, String countyCode, String localCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsOfficesAllIdentifiedByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode)
      {
        return _GetIsOfficesAllIdentifiedByStateCodeOfficeLevelCountyCodeLocalCode(stateCode, officeLevel, countyCode, localCode, null);
      }

      public static Boolean GetIsOfficesAllIdentifiedByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode, Boolean defaultValue)
      {
        return _GetIsOfficesAllIdentifiedByStateCodeOfficeLevelCountyCodeLocalCode(stateCode, officeLevel, countyCode, localCode, defaultValue).Value;
      }

      private static Boolean? _GetIsOfficesAllIdentifiedByStateCodeOfficeLevelCountyCodeLocalCode(String stateCode, Int32 officeLevel, String countyCode, String localCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsOfficesAllIdentified FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByStateCodeOfficeLevelCountyCodeLocalCode(Column _column, String stateCode, Int32 officeLevel, String countyCode, String localCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesAllIdentified WHERE StateCode=@StateCode AND OfficeLevel=@OfficeLevel AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static string GetSelectCommandText(OfficesAllIdentifiedTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesAllIdentifiedTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static OfficesAllIdentified()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficesAllIdentified

    #region vote.OfficesOfficials

    public partial class OfficesOfficialsRow : DataRow
    {
      internal OfficesOfficialsRow(DataRowBuilder rb) : base(rb) {}

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String RunningMateKey
      {
        get { return this["RunningMateKey"] as String; }
        set { if (value == null) this["RunningMateKey"] = DBNull.Value; else this["RunningMateKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class OfficesOfficialsTable : TypedTableBase<OfficesOfficialsRow>
    {
      public OfficesOfficialsRow this[int index] { get { return (OfficesOfficialsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OfficesOfficialsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OfficesOfficialsTable(); }

      new public OfficesOfficialsRow NewRow() { return (OfficesOfficialsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OfficesOfficialsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OfficesOfficialsRow); }

      public void RemoveRow(OfficesOfficialsRow row) { this.Rows.Remove(row); }

      public OfficesOfficialsRow NewRow(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        OfficesOfficialsRow row = NewRow();
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.RunningMateKey = runningMateKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DistrictCode = districtCode;
        row.DataLastUpdated = dataLastUpdated;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName)
      {
        OfficesOfficialsRow row = NewRow(officeKey, politicianKey, runningMateKey, stateCode, countyCode, localCode, districtCode, dataLastUpdated, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn RunningMateKeyColumn { get { return this.Columns["RunningMateKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All, OfficeKey, PoliticianKeys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunningMateKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitOfficeKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPoliticianKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OfficesOfficialsTable() : this(ColumnSet.All) { }

      public OfficesOfficialsTable(ColumnSet columnSet)
      {
        this.TableName = "OfficesOfficials";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.OfficeKey:
            InitOfficeKeyColumns();
            break;

          case ColumnSet.PoliticianKeys:
            InitPoliticianKeysColumns();
            break;
        }
      }

      protected OfficesOfficialsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class OfficesOfficials
    {
      public const string TableName = "OfficesOfficials";

      public enum Column { OfficeKey, PoliticianKey, RunningMateKey, StateCode, CountyCode, LocalCode, DistrictCode, DataLastUpdated, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.RunningMateKey, "RunningMateKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String officeKey, String politicianKey, String runningMateKey, String stateCode, String countyCode, String localCode, String districtCode, DateTime dataLastUpdated, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO OfficesOfficials (OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName) VALUES (@OfficeKey,@PoliticianKey,@RunningMateKey,@StateCode,@CountyCode,@LocalCode,@DistrictCode,@DataLastUpdated,@UserSecurity,@UserName)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "RunningMateKey", runningMateKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static OfficesOfficialsTable FillTable(DbCommand command)
      {
        return FillTable(command, OfficesOfficialsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OfficesOfficialsTable FillTable(DbCommand command, OfficesOfficialsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OfficesOfficialsTable table = new OfficesOfficialsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(OfficesOfficialsTable table, OfficesOfficialsTable.ColumnSet columnSet = OfficesOfficialsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string RunningMateKeyColumnName { get { return "RunningMateKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int RunningMateKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int UserSecurityMaxLength { get { return 12; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int CountByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByOfficeKey(Column _column, String officeKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String officeKey)
      {
        return GetColumnByOfficeKey(_column, officeKey);
      }

      public static OfficesOfficialsTable GetDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static OfficesOfficialsTable GetData(String officeKey, int commandTimeout = -1)
      {
        return GetDataByOfficeKey(officeKey, commandTimeout);
      }

      public static int UpdateOfficeKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKey(String newValue, String officeKey)
      {
        return UpdateOfficeKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdatePoliticianKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String officeKey)
      {
        return UpdatePoliticianKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateRunningMateKeyByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKey(String newValue, String officeKey)
      {
        return UpdateRunningMateKeyByOfficeKey(newValue, officeKey);
      }

      public static int UpdateStateCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String officeKey)
      {
        return UpdateStateCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateCountyCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String officeKey)
      {
        return UpdateCountyCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateLocalCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCode(String newValue, String officeKey)
      {
        return UpdateLocalCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDistrictCodeByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCode(String newValue, String officeKey)
      {
        return UpdateDistrictCodeByOfficeKey(newValue, officeKey);
      }

      public static int UpdateDataLastUpdatedByOfficeKey(DateTime newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String officeKey)
      {
        return UpdateDataLastUpdatedByOfficeKey(newValue, officeKey);
      }

      public static int UpdateUserSecurityByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurity(String newValue, String officeKey)
      {
        return UpdateUserSecurityByOfficeKey(newValue, officeKey);
      }

      public static int UpdateUserNameByOfficeKey(String newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserName(String newValue, String officeKey)
      {
        return UpdateUserNameByOfficeKey(newValue, officeKey);
      }

      public static int UpdateColumnByOfficeKey(Column _column, object newValue, String officeKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE OfficeKey=@OfficeKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String officeKey)
      {
         return UpdateColumnByOfficeKey(_column, newValue, officeKey);
      }

      public static int DeleteByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool OfficeKeyPoliticianKeyExists(String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByOfficeKeyPoliticianKey(Column _column, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByOfficeKeyPoliticianKey(String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByOfficeKeyPoliticianKey(DateTime newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByOfficeKeyPoliticianKey(String newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByOfficeKeyPoliticianKey(Column _column, object newValue, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByOfficeKeyPoliticianKey(String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static OfficesOfficialsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey,PoliticianKey,RunningMateKey,StateCode,CountyCode,LocalCode,DistrictCode,DataLastUpdated,UserSecurity,UserName FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.All);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunningMateKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET RunningMateKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET LocalCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DistrictCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE OfficesOfficials SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM OfficesOfficials WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectOfficeKeyCommandText
      {
        get
        {
          return "SELECT OfficeKey FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllOfficeKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OfficeKey FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.OfficeKey);
      }

      public static void UpdateOfficeKey(OfficesOfficialsTable table)
      {
        UpdateOfficeKey(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateOfficeKey(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.OfficeKey, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectPoliticianKeysCommandText
      {
        get
        {
          return "SELECT PoliticianKey FROM OfficesOfficials";
        }
      }

      public static OfficesOfficialsTable GetAllPoliticianKeysData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey FROM OfficesOfficials";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.PoliticianKeys);
      }

      public static void UpdatePoliticianKeys(OfficesOfficialsTable table)
      {
        UpdatePoliticianKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdatePoliticianKeys(OfficesOfficialsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, OfficesOfficialsTable.ColumnSet.PoliticianKeys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static OfficesOfficialsTable GetPoliticianKeysDataByOfficeKey(String officeKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey FROM OfficesOfficials WHERE OfficeKey=@OfficeKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return FillTable(cmd, OfficesOfficialsTable.ColumnSet.PoliticianKeys);
      }

      public static OfficesOfficialsTable GetPoliticianKeysData(String officeKey, int commandTimeout = -1)
      {
        return GetPoliticianKeysDataByOfficeKey(officeKey, commandTimeout);
      }

      public static string GetSelectCommandText(OfficesOfficialsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OfficesOfficialsTable.ColumnSet.All:
            return SelectAllCommandText;

          case OfficesOfficialsTable.ColumnSet.OfficeKey:
            return SelectOfficeKeyCommandText;

          case OfficesOfficialsTable.ColumnSet.PoliticianKeys:
            return SelectPoliticianKeysCommandText;

          default:
            return null;
        }
      }

      static OfficesOfficials()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.OfficesOfficials

    #region vote.Organizations

    public partial class OrganizationsRow : DataRow
    {
      internal OrganizationsRow(DataRowBuilder rb) : base(rb) {}

      public String OrganizationCode
      {
        get { return this["OrganizationCode"] as String; }
        set { if (value == null) this["OrganizationCode"] = DBNull.Value; else this["OrganizationCode"] = value; }
      }

      public String Organization
      {
        get { return this["Organization"] as String; }
        set { if (value == null) this["Organization"] = DBNull.Value; else this["Organization"] = value; }
      }

      public String OrganizationUrl
      {
        get { return this["OrganizationURL"] as String; }
        set { if (value == null) this["OrganizationURL"] = DBNull.Value; else this["OrganizationURL"] = value; }
      }

      public String OrganizationEmail
      {
        get { return this["OrganizationEmail"] as String; }
        set { if (value == null) this["OrganizationEmail"] = DBNull.Value; else this["OrganizationEmail"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String ContactPhone
      {
        get { return this["ContactPhone"] as String; }
        set { if (value == null) this["ContactPhone"] = DBNull.Value; else this["ContactPhone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltContactEmail
      {
        get { return this["AltContactEMail"] as String; }
        set { if (value == null) this["AltContactEMail"] = DBNull.Value; else this["AltContactEMail"] = value; }
      }

      public String AltContactPhone
      {
        get { return this["AltContactPhone"] as String; }
        set { if (value == null) this["AltContactPhone"] = DBNull.Value; else this["AltContactPhone"] = value; }
      }

      public String Note
      {
        get { return this["Note"] as String; }
        set { if (value == null) this["Note"] = DBNull.Value; else this["Note"] = value; }
      }
    }

    [Serializable]
    public partial class OrganizationsTable : TypedTableBase<OrganizationsRow>
    {
      public OrganizationsRow this[int index] { get { return (OrganizationsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(OrganizationsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new OrganizationsTable(); }

      new public OrganizationsRow NewRow() { return (OrganizationsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new OrganizationsRow(rb); }

      protected override Type GetRowType()
      { return typeof(OrganizationsRow); }

      public void RemoveRow(OrganizationsRow row) { this.Rows.Remove(row); }

      public OrganizationsRow NewRow(String organizationCode, String organization, String organizationUrl, String organizationEmail, String addressLine1, String addressLine2, String cityStateZip, String contact, String contactTitle, String contactEmail, String contactPhone, String altContact, String altContactTitle, String altContactEmail, String altContactPhone, String note)
      {
        OrganizationsRow row = NewRow();
        row.OrganizationCode = organizationCode;
        row.Organization = organization;
        row.OrganizationUrl = organizationUrl;
        row.OrganizationEmail = organizationEmail;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.ContactPhone = contactPhone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltContactEmail = altContactEmail;
        row.AltContactPhone = altContactPhone;
        row.Note = note;
        return row;
      }

      public void AddRow(String organizationCode, String organization, String organizationUrl, String organizationEmail, String addressLine1, String addressLine2, String cityStateZip, String contact, String contactTitle, String contactEmail, String contactPhone, String altContact, String altContactTitle, String altContactEmail, String altContactPhone, String note)
      {
        OrganizationsRow row = NewRow(organizationCode, organization, organizationUrl, organizationEmail, addressLine1, addressLine2, cityStateZip, contact, contactTitle, contactEmail, contactPhone, altContact, altContactTitle, altContactEmail, altContactPhone, note);
        AddRow(row);
      }

      public DataColumn OrganizationCodeColumn { get { return this.Columns["OrganizationCode"]; } }

      public DataColumn OrganizationColumn { get { return this.Columns["Organization"]; } }

      public DataColumn OrganizationUrlColumn { get { return this.Columns["OrganizationURL"]; } }

      public DataColumn OrganizationEmailColumn { get { return this.Columns["OrganizationEmail"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn ContactPhoneColumn { get { return this.Columns["ContactPhone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltContactEmailColumn { get { return this.Columns["AltContactEMail"]; } }

      public DataColumn AltContactPhoneColumn { get { return this.Columns["AltContactPhone"]; } }

      public DataColumn NoteColumn { get { return this.Columns["Note"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("OrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Organization", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrganizationURL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrganizationEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactEMail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Note", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Organization", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrganizationURL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrganizationEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public OrganizationsTable() : this(ColumnSet.All) { }

      public OrganizationsTable(ColumnSet columnSet)
      {
        this.TableName = "Organizations";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected OrganizationsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Organizations
    {
      public const string TableName = "Organizations";

      public enum Column { OrganizationCode, Organization, OrganizationUrl, OrganizationEmail, AddressLine1, AddressLine2, CityStateZip, Contact, ContactTitle, ContactEmail, ContactPhone, AltContact, AltContactTitle, AltContactEmail, AltContactPhone, Note }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.OrganizationCode, "OrganizationCode" },
        { Column.Organization, "Organization" },
        { Column.OrganizationUrl, "OrganizationURL" },
        { Column.OrganizationEmail, "OrganizationEmail" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.ContactPhone, "ContactPhone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltContactEmail, "AltContactEMail" },
        { Column.AltContactPhone, "AltContactPhone" },
        { Column.Note, "Note" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT OrganizationCode,Organization,OrganizationURL,OrganizationEmail,AddressLine1,AddressLine2,CityStateZip,Contact,ContactTitle,ContactEmail,ContactPhone,AltContact,AltContactTitle,AltContactEMail,AltContactPhone,Note FROM Organizations";
        }
      }

      public static OrganizationsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT OrganizationCode,Organization,OrganizationURL,OrganizationEmail,AddressLine1,AddressLine2,CityStateZip,Contact,ContactTitle,ContactEmail,ContactPhone,AltContact,AltContactTitle,AltContactEMail,AltContactPhone,Note FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationsTable.ColumnSet.All);
      }

      public static OrganizationsTable FillTable(DbCommand command)
      {
        return FillTable(command, OrganizationsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static OrganizationsTable FillTable(DbCommand command, OrganizationsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          OrganizationsTable table = new OrganizationsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string OrganizationCodeColumnName { get { return "OrganizationCode"; } }

      public static string OrganizationColumnName { get { return "Organization"; } }

      public static string OrganizationUrlColumnName { get { return "OrganizationURL"; } }

      public static string OrganizationEmailColumnName { get { return "OrganizationEmail"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string ContactPhoneColumnName { get { return "ContactPhone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltContactEmailColumnName { get { return "AltContactEMail"; } }

      public static string AltContactPhoneColumnName { get { return "AltContactPhone"; } }

      public static string NoteColumnName { get { return "Note"; } }

      public static int OrganizationCodeMaxLength { get { return 50; } }

      public static int OrganizationMaxLength { get { return int.MaxValue; } }

      public static int OrganizationUrlMaxLength { get { return int.MaxValue; } }

      public static int OrganizationEmailMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int ContactPhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltContactEmailMaxLength { get { return int.MaxValue; } }

      public static int AltContactPhoneMaxLength { get { return int.MaxValue; } }

      public static int NoteMaxLength { get { return int.MaxValue; } }

      public static bool OrganizationCodeExists(String organizationCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Organizations WHERE OrganizationCode=@OrganizationCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrganizationCode", organizationCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByOrganizationCode(Column _column, String organizationCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Organizations WHERE OrganizationCode=@OrganizationCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "OrganizationCode", organizationCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String organizationCode)
      {
        return GetColumnByOrganizationCode(_column, organizationCode);
      }

      public static OrganizationsTable GetDataByOrganizationCode(String organizationCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT OrganizationCode,Organization,OrganizationURL,OrganizationEmail,AddressLine1,AddressLine2,CityStateZip,Contact,ContactTitle,ContactEmail,ContactPhone,AltContact,AltContactTitle,AltContactEMail,AltContactPhone,Note FROM Organizations WHERE OrganizationCode=@OrganizationCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrganizationCode", organizationCode);
        return FillTable(cmd, OrganizationsTable.ColumnSet.All);
      }

      public static OrganizationsTable GetData(String organizationCode, int commandTimeout = -1)
      {
        return GetDataByOrganizationCode(organizationCode, commandTimeout);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT Organization,OrganizationURL,OrganizationEmail FROM Organizations";
        }
      }

      public static OrganizationsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Organization,OrganizationURL,OrganizationEmail FROM Organizations";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, OrganizationsTable.ColumnSet.Cache);
      }

      public static OrganizationsTable GetCacheDataByOrganizationCode(String organizationCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Organization,OrganizationURL,OrganizationEmail FROM Organizations WHERE OrganizationCode=@OrganizationCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "OrganizationCode", organizationCode);
        return FillTable(cmd, OrganizationsTable.ColumnSet.Cache);
      }

      public static OrganizationsTable GetCacheData(String organizationCode, int commandTimeout = -1)
      {
        return GetCacheDataByOrganizationCode(organizationCode, commandTimeout);
      }

      public static string GetSelectCommandText(OrganizationsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case OrganizationsTable.ColumnSet.All:
            return SelectAllCommandText;

          case OrganizationsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Organizations()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Organizations

    #region vote.Parties

    public partial class PartiesRow : DataRow
    {
      internal PartiesRow(DataRowBuilder rb) : base(rb) {}

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Int32 PartyOrder
      {
        get { return (Int32) this["PartyOrder"]; }
        set { this["PartyOrder"] = value; }
      }

      public String PartyName
      {
        get { return this["PartyName"] as String; }
        set { if (value == null) this["PartyName"] = DBNull.Value; else this["PartyName"] = value; }
      }

      public String PartyUrl
      {
        get { return this["PartyURL"] as String; }
        set { if (value == null) this["PartyURL"] = DBNull.Value; else this["PartyURL"] = value; }
      }

      public String PartyAddressLine1
      {
        get { return this["PartyAddressLine1"] as String; }
        set { if (value == null) this["PartyAddressLine1"] = DBNull.Value; else this["PartyAddressLine1"] = value; }
      }

      public String PartyAddressLine2
      {
        get { return this["PartyAddressLine2"] as String; }
        set { if (value == null) this["PartyAddressLine2"] = DBNull.Value; else this["PartyAddressLine2"] = value; }
      }

      public String PartyCityStateZip
      {
        get { return this["PartyCityStateZip"] as String; }
        set { if (value == null) this["PartyCityStateZip"] = DBNull.Value; else this["PartyCityStateZip"] = value; }
      }

      public Boolean IsPartyMajor
      {
        get { return (Boolean) this["IsPartyMajor"]; }
        set { this["IsPartyMajor"] = value; }
      }
    }

    [Serializable]
    public partial class PartiesTable : TypedTableBase<PartiesRow>
    {
      public PartiesRow this[int index] { get { return (PartiesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PartiesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PartiesTable(); }

      new public PartiesRow NewRow() { return (PartiesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PartiesRow(rb); }

      protected override Type GetRowType()
      { return typeof(PartiesRow); }

      public void RemoveRow(PartiesRow row) { this.Rows.Remove(row); }

      public PartiesRow NewRow(String partyKey, String partyCode, String stateCode, Int32 partyOrder, String partyName, String partyUrl, String partyAddressLine1, String partyAddressLine2, String partyCityStateZip, Boolean isPartyMajor)
      {
        PartiesRow row = NewRow();
        row.PartyKey = partyKey;
        row.PartyCode = partyCode;
        row.StateCode = stateCode;
        row.PartyOrder = partyOrder;
        row.PartyName = partyName;
        row.PartyUrl = partyUrl;
        row.PartyAddressLine1 = partyAddressLine1;
        row.PartyAddressLine2 = partyAddressLine2;
        row.PartyCityStateZip = partyCityStateZip;
        row.IsPartyMajor = isPartyMajor;
        return row;
      }

      public void AddRow(String partyKey, String partyCode, String stateCode, Int32 partyOrder, String partyName, String partyUrl, String partyAddressLine1, String partyAddressLine2, String partyCityStateZip, Boolean isPartyMajor)
      {
        PartiesRow row = NewRow(partyKey, partyCode, stateCode, partyOrder, partyName, partyUrl, partyAddressLine1, partyAddressLine2, partyCityStateZip, isPartyMajor);
        AddRow(row);
      }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn PartyOrderColumn { get { return this.Columns["PartyOrder"]; } }

      public DataColumn PartyNameColumn { get { return this.Columns["PartyName"]; } }

      public DataColumn PartyUrlColumn { get { return this.Columns["PartyURL"]; } }

      public DataColumn PartyAddressLine1Column { get { return this.Columns["PartyAddressLine1"]; } }

      public DataColumn PartyAddressLine2Column { get { return this.Columns["PartyAddressLine2"]; } }

      public DataColumn PartyCityStateZipColumn { get { return this.Columns["PartyCityStateZip"]; } }

      public DataColumn IsPartyMajorColumn { get { return this.Columns["IsPartyMajor"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyURL", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyAddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyAddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPartyMajor", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyURL", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPartyMajor", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PartiesTable() : this(ColumnSet.All) { }

      public PartiesTable(ColumnSet columnSet)
      {
        this.TableName = "Parties";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected PartiesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Parties
    {
      public const string TableName = "Parties";

      public enum Column { PartyKey, PartyCode, StateCode, PartyOrder, PartyName, PartyUrl, PartyAddressLine1, PartyAddressLine2, PartyCityStateZip, IsPartyMajor }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PartyKey, "PartyKey" },
        { Column.PartyCode, "PartyCode" },
        { Column.StateCode, "StateCode" },
        { Column.PartyOrder, "PartyOrder" },
        { Column.PartyName, "PartyName" },
        { Column.PartyUrl, "PartyURL" },
        { Column.PartyAddressLine1, "PartyAddressLine1" },
        { Column.PartyAddressLine2, "PartyAddressLine2" },
        { Column.PartyCityStateZip, "PartyCityStateZip" },
        { Column.IsPartyMajor, "IsPartyMajor" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties";
        }
      }

      public static PartiesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static PartiesTable FillTable(DbCommand command)
      {
        return FillTable(command, PartiesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PartiesTable FillTable(DbCommand command, PartiesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PartiesTable table = new PartiesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string PartyOrderColumnName { get { return "PartyOrder"; } }

      public static string PartyNameColumnName { get { return "PartyName"; } }

      public static string PartyUrlColumnName { get { return "PartyURL"; } }

      public static string PartyAddressLine1ColumnName { get { return "PartyAddressLine1"; } }

      public static string PartyAddressLine2ColumnName { get { return "PartyAddressLine2"; } }

      public static string PartyCityStateZipColumnName { get { return "PartyCityStateZip"; } }

      public static string IsPartyMajorColumnName { get { return "IsPartyMajor"; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int PartyNameMaxLength { get { return 200; } }

      public static int PartyUrlMaxLength { get { return 50; } }

      public static int PartyAddressLine1MaxLength { get { return int.MaxValue; } }

      public static int PartyAddressLine2MaxLength { get { return int.MaxValue; } }

      public static int PartyCityStateZipMaxLength { get { return int.MaxValue; } }

      public static bool PartyKeyExists(String partyKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyKeyByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String partyKey, String defaultValue = null)
      {
        return GetPartyKeyByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyCodeByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCode FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCode(String partyKey, String defaultValue = null)
      {
        return GetPartyCodeByPartyKey(partyKey, defaultValue);
      }

      public static String GetStateCodeByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String partyKey, String defaultValue = null)
      {
        return GetStateCodeByPartyKey(partyKey, defaultValue);
      }

      public static Int32? GetPartyOrderByPartyKey(String partyKey)
      {
        return _GetPartyOrderByPartyKey(partyKey, null);
      }

      public static Int32? GetPartyOrder(String partyKey)
      {
        return GetPartyOrderByPartyKey(partyKey);
      }

      public static Int32 GetPartyOrderByPartyKey(String partyKey, Int32 defaultValue)
      {
        return _GetPartyOrderByPartyKey(partyKey, defaultValue).Value;
      }

      public static Int32 GetPartyOrder(String partyKey, Int32 defaultValue)
      {
        return GetPartyOrderByPartyKey(partyKey, defaultValue);
      }

      private static Int32? _GetPartyOrderByPartyKey(String partyKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PartyOrder FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPartyNameByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyName FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyName(String partyKey, String defaultValue = null)
      {
        return GetPartyNameByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyUrlByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyURL FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyUrl(String partyKey, String defaultValue = null)
      {
        return GetPartyUrlByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyAddressLine1ByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyAddressLine1 FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyAddressLine1(String partyKey, String defaultValue = null)
      {
        return GetPartyAddressLine1ByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyAddressLine2ByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyAddressLine2 FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyAddressLine2(String partyKey, String defaultValue = null)
      {
        return GetPartyAddressLine2ByPartyKey(partyKey, defaultValue);
      }

      public static String GetPartyCityStateZipByPartyKey(String partyKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyCityStateZip FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyCityStateZip(String partyKey, String defaultValue = null)
      {
        return GetPartyCityStateZipByPartyKey(partyKey, defaultValue);
      }

      public static Boolean? GetIsPartyMajorByPartyKey(String partyKey)
      {
        return _GetIsPartyMajorByPartyKey(partyKey, null);
      }

      public static Boolean? GetIsPartyMajor(String partyKey)
      {
        return GetIsPartyMajorByPartyKey(partyKey);
      }

      public static Boolean GetIsPartyMajorByPartyKey(String partyKey, Boolean defaultValue)
      {
        return _GetIsPartyMajorByPartyKey(partyKey, defaultValue).Value;
      }

      public static Boolean GetIsPartyMajor(String partyKey, Boolean defaultValue)
      {
        return GetIsPartyMajorByPartyKey(partyKey, defaultValue);
      }

      private static Boolean? _GetIsPartyMajorByPartyKey(String partyKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByPartyKey(Column _column, String partyKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Parties WHERE PartyKey=@PartyKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String partyKey)
      {
        return GetColumnByPartyKey(_column, partyKey);
      }

      public static PartiesTable GetDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static PartiesTable GetData(String partyKey, int commandTimeout = -1)
      {
        return GetDataByPartyKey(partyKey, commandTimeout);
      }

      public static int CountByStateCode(String stateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Parties WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Parties WHERE StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyOrder,PartyName,PartyURL,PartyAddressLine1,PartyAddressLine2,PartyCityStateZip,IsPartyMajor FROM Parties WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PartiesTable.ColumnSet.All);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties";
        }
      }

      public static PartiesTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheData(String partyKey, int commandTimeout = -1)
      {
        return GetCacheDataByPartyKey(partyKey, commandTimeout);
      }

      public static PartiesTable GetCacheDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByStateCodePartyCode(String stateCode, String partyCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode AND PartyCode=@PartyCode ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "PartyCode", partyCode);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static PartiesTable GetCacheDataByStateCodeIsPartyMajor(String stateCode, Boolean isPartyMajor, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyKey,PartyCode,StateCode,PartyName,PartyURL,IsPartyMajor FROM Parties WHERE StateCode=@StateCode AND IsPartyMajor=@IsPartyMajor ORDER BY PartyOrder";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "IsPartyMajor", isPartyMajor);
        return FillTable(cmd, PartiesTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(PartiesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PartiesTable.ColumnSet.All:
            return SelectAllCommandText;

          case PartiesTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static Parties()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Parties

    #region vote.PartiesEmails

    public partial class PartiesEmailsRow : DataRow
    {
      internal PartiesEmailsRow(DataRowBuilder rb) : base(rb) {}

      public String PartyEmail
      {
        get { return this["PartyEmail"] as String; }
        set { if (value == null) this["PartyEmail"] = DBNull.Value; else this["PartyEmail"] = value; }
      }

      public String PartyPassword
      {
        get { return this["PartyPassword"] as String; }
        set { if (value == null) this["PartyPassword"] = DBNull.Value; else this["PartyPassword"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyContactFirstName
      {
        get { return this["PartyContactFName"] as String; }
        set { if (value == null) this["PartyContactFName"] = DBNull.Value; else this["PartyContactFName"] = value; }
      }

      public String PartyContactLastName
      {
        get { return this["PartyContactLName"] as String; }
        set { if (value == null) this["PartyContactLName"] = DBNull.Value; else this["PartyContactLName"] = value; }
      }

      public String PartyContactPhone
      {
        get { return this["PartyContactPhone"] as String; }
        set { if (value == null) this["PartyContactPhone"] = DBNull.Value; else this["PartyContactPhone"] = value; }
      }

      public String PartyContactTitle
      {
        get { return this["PartyContactTitle"] as String; }
        set { if (value == null) this["PartyContactTitle"] = DBNull.Value; else this["PartyContactTitle"] = value; }
      }

      public Boolean IsVolunteer
      {
        get { return (Boolean) this["IsVolunteer"]; }
        set { this["IsVolunteer"] = value; }
      }
    }

    [Serializable]
    public partial class PartiesEmailsTable : TypedTableBase<PartiesEmailsRow>
    {
      public PartiesEmailsRow this[int index] { get { return (PartiesEmailsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PartiesEmailsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PartiesEmailsTable(); }

      new public PartiesEmailsRow NewRow() { return (PartiesEmailsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PartiesEmailsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PartiesEmailsRow); }

      public void RemoveRow(PartiesEmailsRow row) { this.Rows.Remove(row); }

      public PartiesEmailsRow NewRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer)
      {
        PartiesEmailsRow row = NewRow();
        row.PartyEmail = partyEmail;
        row.PartyPassword = partyPassword;
        row.PartyKey = partyKey;
        row.PartyContactFirstName = partyContactFirstName;
        row.PartyContactLastName = partyContactLastName;
        row.PartyContactPhone = partyContactPhone;
        row.PartyContactTitle = partyContactTitle;
        row.IsVolunteer = isVolunteer;
        return row;
      }

      public void AddRow(String partyEmail, String partyPassword, String partyKey, String partyContactFirstName, String partyContactLastName, String partyContactPhone, String partyContactTitle, Boolean isVolunteer)
      {
        PartiesEmailsRow row = NewRow(partyEmail, partyPassword, partyKey, partyContactFirstName, partyContactLastName, partyContactPhone, partyContactTitle, isVolunteer);
        AddRow(row);
      }

      public DataColumn PartyEmailColumn { get { return this.Columns["PartyEmail"]; } }

      public DataColumn PartyPasswordColumn { get { return this.Columns["PartyPassword"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyContactFirstNameColumn { get { return this.Columns["PartyContactFName"]; } }

      public DataColumn PartyContactLastNameColumn { get { return this.Columns["PartyContactLName"]; } }

      public DataColumn PartyContactPhoneColumn { get { return this.Columns["PartyContactPhone"]; } }

      public DataColumn PartyContactTitleColumn { get { return this.Columns["PartyContactTitle"]; } }

      public DataColumn IsVolunteerColumn { get { return this.Columns["IsVolunteer"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PartyEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyPassword", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactFName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactLName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsVolunteer", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PartiesEmailsTable() : this(ColumnSet.All) { }

      public PartiesEmailsTable(ColumnSet columnSet)
      {
        this.TableName = "PartiesEmails";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PartiesEmailsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PartiesEmails
    {
      public const string TableName = "PartiesEmails";

      public enum Column { PartyEmail, PartyPassword, PartyKey, PartyContactFirstName, PartyContactLastName, PartyContactPhone, PartyContactTitle, IsVolunteer }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PartyEmail, "PartyEmail" },
        { Column.PartyPassword, "PartyPassword" },
        { Column.PartyKey, "PartyKey" },
        { Column.PartyContactFirstName, "PartyContactFName" },
        { Column.PartyContactLastName, "PartyContactLName" },
        { Column.PartyContactPhone, "PartyContactPhone" },
        { Column.PartyContactTitle, "PartyContactTitle" },
        { Column.IsVolunteer, "IsVolunteer" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer FROM PartiesEmails";
        }
      }

      public static PartiesEmailsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer FROM PartiesEmails";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static PartiesEmailsTable FillTable(DbCommand command)
      {
        return FillTable(command, PartiesEmailsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PartiesEmailsTable FillTable(DbCommand command, PartiesEmailsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PartiesEmailsTable table = new PartiesEmailsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PartyEmailColumnName { get { return "PartyEmail"; } }

      public static string PartyPasswordColumnName { get { return "PartyPassword"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyContactFirstNameColumnName { get { return "PartyContactFName"; } }

      public static string PartyContactLastNameColumnName { get { return "PartyContactLName"; } }

      public static string PartyContactPhoneColumnName { get { return "PartyContactPhone"; } }

      public static string PartyContactTitleColumnName { get { return "PartyContactTitle"; } }

      public static string IsVolunteerColumnName { get { return "IsVolunteer"; } }

      public static int PartyEmailMaxLength { get { return 200; } }

      public static int PartyPasswordMaxLength { get { return 50; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyContactFirstNameMaxLength { get { return int.MaxValue; } }

      public static int PartyContactLastNameMaxLength { get { return int.MaxValue; } }

      public static int PartyContactPhoneMaxLength { get { return int.MaxValue; } }

      public static int PartyContactTitleMaxLength { get { return int.MaxValue; } }

      public static bool PartyEmailIsVolunteerExists(String partyEmail, Boolean isVolunteer)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyEmailByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyEmail FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyPasswordByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyPassword FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactFirstNameByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactFName FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactLastNameByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactLName FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactPhoneByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactPhone FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactTitleByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactTitle FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPartyEmailIsVolunteer(Column _column, String partyEmail, Boolean isVolunteer)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesEmailsTable GetDataByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static int UpdatePartyEmailByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPasswordByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstNameByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastNameByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhoneByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitleByPartyEmailIsVolunteer(String newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteerByPartyEmailIsVolunteer(Boolean newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPartyEmailIsVolunteer(Column _column, object newValue, String partyEmail, Boolean isVolunteer)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPartyEmailIsVolunteer(String partyEmail, Boolean isVolunteer, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyEmail=@PartyEmail AND IsVolunteer=@IsVolunteer";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "IsVolunteer", isVolunteer);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool PartyEmailExists(String partyEmail)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPartyEmailByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyEmail FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyEmail(String partyEmail, String defaultValue = null)
      {
        return GetPartyEmailByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyPasswordByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyPassword FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyPassword(String partyEmail, String defaultValue = null)
      {
        return GetPartyPasswordByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyKeyByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String partyEmail, String defaultValue = null)
      {
        return GetPartyKeyByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactFirstNameByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactFName FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactFirstName(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactFirstNameByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactLastNameByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactLName FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactLastName(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactLastNameByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactPhoneByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactPhone FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactPhone(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactPhoneByPartyEmail(partyEmail, defaultValue);
      }

      public static String GetPartyContactTitleByPartyEmail(String partyEmail, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyContactTitle FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyContactTitle(String partyEmail, String defaultValue = null)
      {
        return GetPartyContactTitleByPartyEmail(partyEmail, defaultValue);
      }

      public static Boolean? GetIsVolunteerByPartyEmail(String partyEmail)
      {
        return _GetIsVolunteerByPartyEmail(partyEmail, null);
      }

      public static Boolean? GetIsVolunteer(String partyEmail)
      {
        return GetIsVolunteerByPartyEmail(partyEmail);
      }

      public static Boolean GetIsVolunteerByPartyEmail(String partyEmail, Boolean defaultValue)
      {
        return _GetIsVolunteerByPartyEmail(partyEmail, defaultValue).Value;
      }

      public static Boolean GetIsVolunteer(String partyEmail, Boolean defaultValue)
      {
        return GetIsVolunteerByPartyEmail(partyEmail, defaultValue);
      }

      private static Boolean? _GetIsVolunteerByPartyEmail(String partyEmail, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsVolunteer FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByPartyEmail(Column _column, String partyEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String partyEmail)
      {
        return GetColumnByPartyEmail(_column, partyEmail);
      }

      public static PartiesEmailsTable GetDataByPartyEmail(String partyEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static PartiesEmailsTable GetData(String partyEmail, int commandTimeout = -1)
      {
        return GetDataByPartyEmail(partyEmail, commandTimeout);
      }

      public static int UpdatePartyEmailByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyEmail(String newValue, String partyEmail)
      {
        return UpdatePartyEmailByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyPasswordByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPassword(String newValue, String partyEmail)
      {
        return UpdatePartyPasswordByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyKeyByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKey(String newValue, String partyEmail)
      {
        return UpdatePartyKeyByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactFirstNameByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstName(String newValue, String partyEmail)
      {
        return UpdatePartyContactFirstNameByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactLastNameByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastName(String newValue, String partyEmail)
      {
        return UpdatePartyContactLastNameByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactPhoneByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhone(String newValue, String partyEmail)
      {
        return UpdatePartyContactPhoneByPartyEmail(newValue, partyEmail);
      }

      public static int UpdatePartyContactTitleByPartyEmail(String newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitle(String newValue, String partyEmail)
      {
        return UpdatePartyContactTitleByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateIsVolunteerByPartyEmail(Boolean newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteer(Boolean newValue, String partyEmail)
      {
        return UpdateIsVolunteerByPartyEmail(newValue, partyEmail);
      }

      public static int UpdateColumnByPartyEmail(Column _column, object newValue, String partyEmail)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyEmail=@PartyEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String partyEmail)
      {
         return UpdateColumnByPartyEmail(_column, newValue, partyEmail);
      }

      public static int DeleteByPartyEmail(String partyEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyEmail=@PartyEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyEmail", partyEmail);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPartyKey(String partyKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPartyKey(Column _column, String partyKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PartiesEmails WHERE PartyKey=@PartyKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PartiesEmailsTable GetDataByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PartyEmail,PartyPassword,PartyKey,PartyContactFName,PartyContactLName,PartyContactPhone,PartyContactTitle,IsVolunteer FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return FillTable(cmd, PartiesEmailsTable.ColumnSet.All);
      }

      public static int UpdatePartyEmailByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyEmail=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyPasswordByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyPassword=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyKey=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactFirstNameByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactFName=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactLastNameByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactLName=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactPhoneByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactPhone=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyContactTitleByPartyKey(String newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET PartyContactTitle=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsVolunteerByPartyKey(Boolean newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET IsVolunteer=@newValue WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPartyKey(Column _column, object newValue, String partyKey)
      {
        string cmdText = "UPDATE PartiesEmails SET {0}=@newValue WHERE PartyKey=@PartyKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPartyKey(String partyKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PartiesEmails WHERE PartyKey=@PartyKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PartiesEmailsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PartiesEmailsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PartiesEmails()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PartiesEmails

    #region vote.Politicians

    public partial class PoliticiansRow : DataRow
    {
      internal PoliticiansRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public String PasswordHint
      {
        get { return this["PasswordHint"] as String; }
        set { if (value == null) this["PasswordHint"] = DBNull.Value; else this["PasswordHint"] = value; }
      }

      public String TemporaryOfficeKey
      {
        get { return this["TemporaryOfficeKey"] as String; }
        set { if (value == null) this["TemporaryOfficeKey"] = DBNull.Value; else this["TemporaryOfficeKey"] = value; }
      }

      public String LiveOfficeKey
      {
        get { return this["LiveOfficeKey"] as String; }
        set { if (value == null) this["LiveOfficeKey"] = DBNull.Value; else this["LiveOfficeKey"] = value; }
      }

      public String LiveOfficeStatus
      {
        get { return this["LiveOfficeStatus"] as String; }
        set { if (value == null) this["LiveOfficeStatus"] = DBNull.Value; else this["LiveOfficeStatus"] = value; }
      }

      public String LiveElectionKey
      {
        get { return this["LiveElectionKey"] as String; }
        set { if (value == null) this["LiveElectionKey"] = DBNull.Value; else this["LiveElectionKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String FirstName
      {
        get { return this["FName"] as String; }
        set { if (value == null) this["FName"] = DBNull.Value; else this["FName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MName"] as String; }
        set { if (value == null) this["MName"] = DBNull.Value; else this["MName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LName"] as String; }
        set { if (value == null) this["LName"] = DBNull.Value; else this["LName"] = value; }
      }

      public String AlphaName
      {
        get { return this["AlphaName"] as String; }
        set { if (value == null) this["AlphaName"] = DBNull.Value; else this["AlphaName"] = value; }
      }

      public String VowelStrippedName
      {
        get { return this["VowelStrippedName"] as String; }
        set { if (value == null) this["VowelStrippedName"] = DBNull.Value; else this["VowelStrippedName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public String AddOn
      {
        get { return this["AddOn"] as String; }
        set { if (value == null) this["AddOn"] = DBNull.Value; else this["AddOn"] = value; }
      }

      public String EmailVoteUSA
      {
        get { return this["EmailAddrVoteUSA"] as String; }
        set { if (value == null) this["EmailAddrVoteUSA"] = DBNull.Value; else this["EmailAddrVoteUSA"] = value; }
      }

      public String Email
      {
        get { return this["EmailAddr"] as String; }
        set { if (value == null) this["EmailAddr"] = DBNull.Value; else this["EmailAddr"] = value; }
      }

      public String StateEmail
      {
        get { return this["StateEmailAddr"] as String; }
        set { if (value == null) this["StateEmailAddr"] = DBNull.Value; else this["StateEmailAddr"] = value; }
      }

      public String LastEmailCode
      {
        get { return this["LastEmailCode"] as String; }
        set { if (value == null) this["LastEmailCode"] = DBNull.Value; else this["LastEmailCode"] = value; }
      }

      public String WebAddress
      {
        get { return this["WebAddr"] as String; }
        set { if (value == null) this["WebAddr"] = DBNull.Value; else this["WebAddr"] = value; }
      }

      public String StateWebAddress
      {
        get { return this["StateWebAddr"] as String; }
        set { if (value == null) this["StateWebAddr"] = DBNull.Value; else this["StateWebAddr"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String StatePhone
      {
        get { return this["StatePhone"] as String; }
        set { if (value == null) this["StatePhone"] = DBNull.Value; else this["StatePhone"] = value; }
      }

      public String Gender
      {
        get { return this["Gender"] as String; }
        set { if (value == null) this["Gender"] = DBNull.Value; else this["Gender"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String Address
      {
        get { return this["Address"] as String; }
        set { if (value == null) this["Address"] = DBNull.Value; else this["Address"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String StateAddress
      {
        get { return this["StateAddress"] as String; }
        set { if (value == null) this["StateAddress"] = DBNull.Value; else this["StateAddress"] = value; }
      }

      public String StateCityStateZip
      {
        get { return this["StateCityStateZip"] as String; }
        set { if (value == null) this["StateCityStateZip"] = DBNull.Value; else this["StateCityStateZip"] = value; }
      }

      public String CampaignName
      {
        get { return this["CampaignName"] as String; }
        set { if (value == null) this["CampaignName"] = DBNull.Value; else this["CampaignName"] = value; }
      }

      public String CampaignAddress
      {
        get { return this["CampaignAddr"] as String; }
        set { if (value == null) this["CampaignAddr"] = DBNull.Value; else this["CampaignAddr"] = value; }
      }

      public String CampaignCityStateZip
      {
        get { return this["CampaignCityStateZip"] as String; }
        set { if (value == null) this["CampaignCityStateZip"] = DBNull.Value; else this["CampaignCityStateZip"] = value; }
      }

      public String CampaignPhone
      {
        get { return this["CampaignPhone"] as String; }
        set { if (value == null) this["CampaignPhone"] = DBNull.Value; else this["CampaignPhone"] = value; }
      }

      public String CampaignEmail
      {
        get { return this["CampaignEmail"] as String; }
        set { if (value == null) this["CampaignEmail"] = DBNull.Value; else this["CampaignEmail"] = value; }
      }

      public String StateData
      {
        get { return this["StateData"] as String; }
        set { if (value == null) this["StateData"] = DBNull.Value; else this["StateData"] = value; }
      }

      public DateTime IntroLetterSent
      {
        get { return (DateTime) this["IntroLetterSent"]; }
        set { this["IntroLetterSent"] = value; }
      }

      public Boolean IsNotRespondedEmailSent
      {
        get { return (Boolean) this["IsNotRespondedEmailSent"]; }
        set { this["IsNotRespondedEmailSent"] = value; }
      }

      public DateTime DataLastUpdated
      {
        get { return (DateTime) this["DataLastUpdated"]; }
        set { this["DataLastUpdated"] = value; }
      }

      public Int32 DataUpdatedCount
      {
        get { return (Int32) this["DataUpdatedCount"]; }
        set { this["DataUpdatedCount"] = value; }
      }

      public DateTime DatePictureUploaded
      {
        get { return (DateTime) this["DatePictureUploaded"]; }
        set { this["DatePictureUploaded"] = value; }
      }

      public Int32 Answers
      {
        get { return (Int32) this["Answers"]; }
        set { this["Answers"] = value; }
      }

      public DateTime DateOfBirth
      {
        get { return (DateTime) this["DateOfBirth"]; }
        set { this["DateOfBirth"] = value; }
      }

      public String FacebookWebAddress
      {
        get { return this["FacebookWebAddress"] as String; }
        set { if (value == null) this["FacebookWebAddress"] = DBNull.Value; else this["FacebookWebAddress"] = value; }
      }

      public String WikipediaWebAddress
      {
        get { return this["WikipediaWebAddress"] as String; }
        set { if (value == null) this["WikipediaWebAddress"] = DBNull.Value; else this["WikipediaWebAddress"] = value; }
      }

      public String YouTubeWebAddress
      {
        get { return this["YouTubeWebAddress"] as String; }
        set { if (value == null) this["YouTubeWebAddress"] = DBNull.Value; else this["YouTubeWebAddress"] = value; }
      }

      public String FlickrWebAddress
      {
        get { return this["FlickrWebAddress"] as String; }
        set { if (value == null) this["FlickrWebAddress"] = DBNull.Value; else this["FlickrWebAddress"] = value; }
      }

      public String TwitterWebAddress
      {
        get { return this["TwitterWebAddress"] as String; }
        set { if (value == null) this["TwitterWebAddress"] = DBNull.Value; else this["TwitterWebAddress"] = value; }
      }

      public String RSSFeedWebAddress
      {
        get { return this["RSSFeedWebAddress"] as String; }
        set { if (value == null) this["RSSFeedWebAddress"] = DBNull.Value; else this["RSSFeedWebAddress"] = value; }
      }

      public String VimeoWebAddress
      {
        get { return this["VimeoWebAddress"] as String; }
        set { if (value == null) this["VimeoWebAddress"] = DBNull.Value; else this["VimeoWebAddress"] = value; }
      }

      public String GooglePlusWebAddress
      {
        get { return this["GooglePlusWebAddress"] as String; }
        set { if (value == null) this["GooglePlusWebAddress"] = DBNull.Value; else this["GooglePlusWebAddress"] = value; }
      }

      public String LinkedInWebAddress
      {
        get { return this["LinkedInWebAddress"] as String; }
        set { if (value == null) this["LinkedInWebAddress"] = DBNull.Value; else this["LinkedInWebAddress"] = value; }
      }

      public String PinterestWebAddress
      {
        get { return this["PinterestWebAddress"] as String; }
        set { if (value == null) this["PinterestWebAddress"] = DBNull.Value; else this["PinterestWebAddress"] = value; }
      }

      public String BloggerWebAddress
      {
        get { return this["BloggerWebAddress"] as String; }
        set { if (value == null) this["BloggerWebAddress"] = DBNull.Value; else this["BloggerWebAddress"] = value; }
      }

      public String WebstagramWebAddress
      {
        get { return this["WebstagramWebAddress"] as String; }
        set { if (value == null) this["WebstagramWebAddress"] = DBNull.Value; else this["WebstagramWebAddress"] = value; }
      }

      public String BallotPediaWebAddress
      {
        get { return this["BallotPediaWebAddress"] as String; }
        set { if (value == null) this["BallotPediaWebAddress"] = DBNull.Value; else this["BallotPediaWebAddress"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansTable : TypedTableBase<PoliticiansRow>
    {
      public PoliticiansRow this[int index] { get { return (PoliticiansRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansTable(); }

      new public PoliticiansRow NewRow() { return (PoliticiansRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansRow); }

      public void RemoveRow(PoliticiansRow row) { this.Rows.Remove(row); }

      public PoliticiansRow NewRow(String politicianKey, String password, String passwordHint, String temporaryOfficeKey, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, String stateData, DateTime introLetterSent, Boolean isNotRespondedEmailSent, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, Int32 answers, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress)
      {
        PoliticiansRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.Password = password;
        row.PasswordHint = passwordHint;
        row.TemporaryOfficeKey = temporaryOfficeKey;
        row.LiveOfficeKey = liveOfficeKey;
        row.LiveOfficeStatus = liveOfficeStatus;
        row.LiveElectionKey = liveElectionKey;
        row.StateCode = stateCode;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.AlphaName = alphaName;
        row.VowelStrippedName = vowelStrippedName;
        row.Suffix = suffix;
        row.AddOn = addOn;
        row.EmailVoteUSA = emailVoteUSA;
        row.Email = email;
        row.StateEmail = stateEmail;
        row.LastEmailCode = lastEmailCode;
        row.WebAddress = webAddress;
        row.StateWebAddress = stateWebAddress;
        row.Phone = phone;
        row.StatePhone = statePhone;
        row.Gender = gender;
        row.PartyKey = partyKey;
        row.Address = address;
        row.CityStateZip = cityStateZip;
        row.StateAddress = stateAddress;
        row.StateCityStateZip = stateCityStateZip;
        row.CampaignName = campaignName;
        row.CampaignAddress = campaignAddress;
        row.CampaignCityStateZip = campaignCityStateZip;
        row.CampaignPhone = campaignPhone;
        row.CampaignEmail = campaignEmail;
        row.StateData = stateData;
        row.IntroLetterSent = introLetterSent;
        row.IsNotRespondedEmailSent = isNotRespondedEmailSent;
        row.DataLastUpdated = dataLastUpdated;
        row.DataUpdatedCount = dataUpdatedCount;
        row.DatePictureUploaded = datePictureUploaded;
        row.Answers = answers;
        row.DateOfBirth = dateOfBirth;
        row.FacebookWebAddress = facebookWebAddress;
        row.WikipediaWebAddress = wikipediaWebAddress;
        row.YouTubeWebAddress = youTubeWebAddress;
        row.FlickrWebAddress = flickrWebAddress;
        row.TwitterWebAddress = twitterWebAddress;
        row.RSSFeedWebAddress = RSSFeedWebAddress;
        row.VimeoWebAddress = vimeoWebAddress;
        row.GooglePlusWebAddress = googlePlusWebAddress;
        row.LinkedInWebAddress = linkedInWebAddress;
        row.PinterestWebAddress = pinterestWebAddress;
        row.BloggerWebAddress = bloggerWebAddress;
        row.WebstagramWebAddress = webstagramWebAddress;
        row.BallotPediaWebAddress = ballotPediaWebAddress;
        return row;
      }

      public void AddRow(String politicianKey, String password, String passwordHint, String temporaryOfficeKey, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, String stateData, DateTime introLetterSent, Boolean isNotRespondedEmailSent, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, Int32 answers, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress)
      {
        PoliticiansRow row = NewRow(politicianKey, password, passwordHint, temporaryOfficeKey, liveOfficeKey, liveOfficeStatus, liveElectionKey, stateCode, firstName, middleName, nickname, lastName, alphaName, vowelStrippedName, suffix, addOn, emailVoteUSA, email, stateEmail, lastEmailCode, webAddress, stateWebAddress, phone, statePhone, gender, partyKey, address, cityStateZip, stateAddress, stateCityStateZip, campaignName, campaignAddress, campaignCityStateZip, campaignPhone, campaignEmail, stateData, introLetterSent, isNotRespondedEmailSent, dataLastUpdated, dataUpdatedCount, datePictureUploaded, answers, dateOfBirth, facebookWebAddress, wikipediaWebAddress, youTubeWebAddress, flickrWebAddress, twitterWebAddress, RSSFeedWebAddress, vimeoWebAddress, googlePlusWebAddress, linkedInWebAddress, pinterestWebAddress, bloggerWebAddress, webstagramWebAddress, ballotPediaWebAddress);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn PasswordHintColumn { get { return this.Columns["PasswordHint"]; } }

      public DataColumn TemporaryOfficeKeyColumn { get { return this.Columns["TemporaryOfficeKey"]; } }

      public DataColumn LiveOfficeKeyColumn { get { return this.Columns["LiveOfficeKey"]; } }

      public DataColumn LiveOfficeStatusColumn { get { return this.Columns["LiveOfficeStatus"]; } }

      public DataColumn LiveElectionKeyColumn { get { return this.Columns["LiveElectionKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LName"]; } }

      public DataColumn AlphaNameColumn { get { return this.Columns["AlphaName"]; } }

      public DataColumn VowelStrippedNameColumn { get { return this.Columns["VowelStrippedName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn AddOnColumn { get { return this.Columns["AddOn"]; } }

      public DataColumn EmailVoteUSAColumn { get { return this.Columns["EmailAddrVoteUSA"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EmailAddr"]; } }

      public DataColumn StateEmailColumn { get { return this.Columns["StateEmailAddr"]; } }

      public DataColumn LastEmailCodeColumn { get { return this.Columns["LastEmailCode"]; } }

      public DataColumn WebAddressColumn { get { return this.Columns["WebAddr"]; } }

      public DataColumn StateWebAddressColumn { get { return this.Columns["StateWebAddr"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn StatePhoneColumn { get { return this.Columns["StatePhone"]; } }

      public DataColumn GenderColumn { get { return this.Columns["Gender"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn AddressColumn { get { return this.Columns["Address"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn StateAddressColumn { get { return this.Columns["StateAddress"]; } }

      public DataColumn StateCityStateZipColumn { get { return this.Columns["StateCityStateZip"]; } }

      public DataColumn CampaignNameColumn { get { return this.Columns["CampaignName"]; } }

      public DataColumn CampaignAddressColumn { get { return this.Columns["CampaignAddr"]; } }

      public DataColumn CampaignCityStateZipColumn { get { return this.Columns["CampaignCityStateZip"]; } }

      public DataColumn CampaignPhoneColumn { get { return this.Columns["CampaignPhone"]; } }

      public DataColumn CampaignEmailColumn { get { return this.Columns["CampaignEmail"]; } }

      public DataColumn StateDataColumn { get { return this.Columns["StateData"]; } }

      public DataColumn IntroLetterSentColumn { get { return this.Columns["IntroLetterSent"]; } }

      public DataColumn IsNotRespondedEmailSentColumn { get { return this.Columns["IsNotRespondedEmailSent"]; } }

      public DataColumn DataLastUpdatedColumn { get { return this.Columns["DataLastUpdated"]; } }

      public DataColumn DataUpdatedCountColumn { get { return this.Columns["DataUpdatedCount"]; } }

      public DataColumn DatePictureUploadedColumn { get { return this.Columns["DatePictureUploaded"]; } }

      public DataColumn AnswersColumn { get { return this.Columns["Answers"]; } }

      public DataColumn DateOfBirthColumn { get { return this.Columns["DateOfBirth"]; } }

      public DataColumn FacebookWebAddressColumn { get { return this.Columns["FacebookWebAddress"]; } }

      public DataColumn WikipediaWebAddressColumn { get { return this.Columns["WikipediaWebAddress"]; } }

      public DataColumn YouTubeWebAddressColumn { get { return this.Columns["YouTubeWebAddress"]; } }

      public DataColumn FlickrWebAddressColumn { get { return this.Columns["FlickrWebAddress"]; } }

      public DataColumn TwitterWebAddressColumn { get { return this.Columns["TwitterWebAddress"]; } }

      public DataColumn RSSFeedWebAddressColumn { get { return this.Columns["RSSFeedWebAddress"]; } }

      public DataColumn VimeoWebAddressColumn { get { return this.Columns["VimeoWebAddress"]; } }

      public DataColumn GooglePlusWebAddressColumn { get { return this.Columns["GooglePlusWebAddress"]; } }

      public DataColumn LinkedInWebAddressColumn { get { return this.Columns["LinkedInWebAddress"]; } }

      public DataColumn PinterestWebAddressColumn { get { return this.Columns["PinterestWebAddress"]; } }

      public DataColumn BloggerWebAddressColumn { get { return this.Columns["BloggerWebAddress"]; } }

      public DataColumn WebstagramWebAddressColumn { get { return this.Columns["WebstagramWebAddress"]; } }

      public DataColumn BallotPediaWebAddressColumn { get { return this.Columns["BallotPediaWebAddress"]; } }

      public enum ColumnSet { All, Names, Cache, Addresses, Phones, Emails, WebAddresses, DuplicateNames, LiveOffice, SearchKeyUpdate }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Password", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PasswordHint", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TemporaryOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlphaName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VowelStrippedName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddrVoteUSA", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastEmailCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Gender", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CampaignEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateData", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IntroLetterSent", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsNotRespondedEmailSent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataUpdatedCount", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DatePictureUploaded", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Answers", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateOfBirth", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WikipediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FlickrWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TwitterWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RSSFeedWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VimeoWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GooglePlusWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LinkedInWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PinterestWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BloggerWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebstagramWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotPediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitNamesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TemporaryOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateOfBirth", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FacebookWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WikipediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FlickrWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TwitterWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RSSFeedWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VimeoWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GooglePlusWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LinkedInWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PinterestWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BloggerWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebstagramWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotPediaWebAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAddressesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPhonesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailsColumns()
      {
        DataColumn _column;
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitWebAddressesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDuplicateNamesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TemporaryOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailAddr", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddr", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Address", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitLiveOfficeColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitSearchKeyUpdateColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AlphaName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VowelStrippedName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PoliticiansTable() : this(ColumnSet.All) { }

      public PoliticiansTable(ColumnSet columnSet)
      {
        this.TableName = "Politicians";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Names:
            InitNamesColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Addresses:
            InitAddressesColumns();
            break;

          case ColumnSet.Phones:
            InitPhonesColumns();
            break;

          case ColumnSet.Emails:
            InitEmailsColumns();
            break;

          case ColumnSet.WebAddresses:
            InitWebAddressesColumns();
            break;

          case ColumnSet.DuplicateNames:
            InitDuplicateNamesColumns();
            break;

          case ColumnSet.LiveOffice:
            InitLiveOfficeColumns();
            break;

          case ColumnSet.SearchKeyUpdate:
            InitSearchKeyUpdateColumns();
            break;
        }
      }

      protected PoliticiansTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Politicians
    {
      public const string TableName = "Politicians";

      public enum Column { PoliticianKey, Password, PasswordHint, TemporaryOfficeKey, LiveOfficeKey, LiveOfficeStatus, LiveElectionKey, StateCode, FirstName, MiddleName, Nickname, LastName, AlphaName, VowelStrippedName, Suffix, AddOn, EmailVoteUSA, Email, StateEmail, LastEmailCode, WebAddress, StateWebAddress, Phone, StatePhone, Gender, PartyKey, Address, CityStateZip, StateAddress, StateCityStateZip, CampaignName, CampaignAddress, CampaignCityStateZip, CampaignPhone, CampaignEmail, StateData, IntroLetterSent, IsNotRespondedEmailSent, DataLastUpdated, DataUpdatedCount, DatePictureUploaded, Answers, DateOfBirth, FacebookWebAddress, WikipediaWebAddress, YouTubeWebAddress, FlickrWebAddress, TwitterWebAddress, RSSFeedWebAddress, VimeoWebAddress, GooglePlusWebAddress, LinkedInWebAddress, PinterestWebAddress, BloggerWebAddress, WebstagramWebAddress, BallotPediaWebAddress }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Password, "Password" },
        { Column.PasswordHint, "PasswordHint" },
        { Column.TemporaryOfficeKey, "TemporaryOfficeKey" },
        { Column.LiveOfficeKey, "LiveOfficeKey" },
        { Column.LiveOfficeStatus, "LiveOfficeStatus" },
        { Column.LiveElectionKey, "LiveElectionKey" },
        { Column.StateCode, "StateCode" },
        { Column.FirstName, "FName" },
        { Column.MiddleName, "MName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LName" },
        { Column.AlphaName, "AlphaName" },
        { Column.VowelStrippedName, "VowelStrippedName" },
        { Column.Suffix, "Suffix" },
        { Column.AddOn, "AddOn" },
        { Column.EmailVoteUSA, "EmailAddrVoteUSA" },
        { Column.Email, "EmailAddr" },
        { Column.StateEmail, "StateEmailAddr" },
        { Column.LastEmailCode, "LastEmailCode" },
        { Column.WebAddress, "WebAddr" },
        { Column.StateWebAddress, "StateWebAddr" },
        { Column.Phone, "Phone" },
        { Column.StatePhone, "StatePhone" },
        { Column.Gender, "Gender" },
        { Column.PartyKey, "PartyKey" },
        { Column.Address, "Address" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.StateAddress, "StateAddress" },
        { Column.StateCityStateZip, "StateCityStateZip" },
        { Column.CampaignName, "CampaignName" },
        { Column.CampaignAddress, "CampaignAddr" },
        { Column.CampaignCityStateZip, "CampaignCityStateZip" },
        { Column.CampaignPhone, "CampaignPhone" },
        { Column.CampaignEmail, "CampaignEmail" },
        { Column.StateData, "StateData" },
        { Column.IntroLetterSent, "IntroLetterSent" },
        { Column.IsNotRespondedEmailSent, "IsNotRespondedEmailSent" },
        { Column.DataLastUpdated, "DataLastUpdated" },
        { Column.DataUpdatedCount, "DataUpdatedCount" },
        { Column.DatePictureUploaded, "DatePictureUploaded" },
        { Column.Answers, "Answers" },
        { Column.DateOfBirth, "DateOfBirth" },
        { Column.FacebookWebAddress, "FacebookWebAddress" },
        { Column.WikipediaWebAddress, "WikipediaWebAddress" },
        { Column.YouTubeWebAddress, "YouTubeWebAddress" },
        { Column.FlickrWebAddress, "FlickrWebAddress" },
        { Column.TwitterWebAddress, "TwitterWebAddress" },
        { Column.RSSFeedWebAddress, "RSSFeedWebAddress" },
        { Column.VimeoWebAddress, "VimeoWebAddress" },
        { Column.GooglePlusWebAddress, "GooglePlusWebAddress" },
        { Column.LinkedInWebAddress, "LinkedInWebAddress" },
        { Column.PinterestWebAddress, "PinterestWebAddress" },
        { Column.BloggerWebAddress, "BloggerWebAddress" },
        { Column.WebstagramWebAddress, "WebstagramWebAddress" },
        { Column.BallotPediaWebAddress, "BallotPediaWebAddress" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, String password, String passwordHint, String temporaryOfficeKey, String liveOfficeKey, String liveOfficeStatus, String liveElectionKey, String stateCode, String firstName, String middleName, String nickname, String lastName, String alphaName, String vowelStrippedName, String suffix, String addOn, String emailVoteUSA, String email, String stateEmail, String lastEmailCode, String webAddress, String stateWebAddress, String phone, String statePhone, String gender, String partyKey, String address, String cityStateZip, String stateAddress, String stateCityStateZip, String campaignName, String campaignAddress, String campaignCityStateZip, String campaignPhone, String campaignEmail, String stateData, DateTime introLetterSent, Boolean isNotRespondedEmailSent, DateTime dataLastUpdated, Int32 dataUpdatedCount, DateTime datePictureUploaded, Int32 answers, DateTime dateOfBirth, String facebookWebAddress, String wikipediaWebAddress, String youTubeWebAddress, String flickrWebAddress, String twitterWebAddress, String RSSFeedWebAddress, String vimeoWebAddress, String googlePlusWebAddress, String linkedInWebAddress, String pinterestWebAddress, String bloggerWebAddress, String webstagramWebAddress, String ballotPediaWebAddress, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Politicians (PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress) VALUES (@PoliticianKey,@Password,@PasswordHint,@TemporaryOfficeKey,@LiveOfficeKey,@LiveOfficeStatus,@LiveElectionKey,@StateCode,@FirstName,@MiddleName,@Nickname,@LastName,@AlphaName,@VowelStrippedName,@Suffix,@AddOn,@EmailVoteUSA,@Email,@StateEmail,@LastEmailCode,@WebAddress,@StateWebAddress,@Phone,@StatePhone,@Gender,@PartyKey,@Address,@CityStateZip,@StateAddress,@StateCityStateZip,@CampaignName,@CampaignAddress,@CampaignCityStateZip,@CampaignPhone,@CampaignEmail,@StateData,@IntroLetterSent,@IsNotRespondedEmailSent,@DataLastUpdated,@DataUpdatedCount,@DatePictureUploaded,@Answers,@DateOfBirth,@FacebookWebAddress,@WikipediaWebAddress,@YouTubeWebAddress,@FlickrWebAddress,@TwitterWebAddress,@RSSFeedWebAddress,@VimeoWebAddress,@GooglePlusWebAddress,@LinkedInWebAddress,@PinterestWebAddress,@BloggerWebAddress,@WebstagramWebAddress,@BallotPediaWebAddress)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "Password", password);
        VoteDb.AddCommandParameter(cmd, "PasswordHint", passwordHint);
        VoteDb.AddCommandParameter(cmd, "TemporaryOfficeKey", temporaryOfficeKey);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeKey", liveOfficeKey);
        VoteDb.AddCommandParameter(cmd, "LiveOfficeStatus", liveOfficeStatus);
        VoteDb.AddCommandParameter(cmd, "LiveElectionKey", liveElectionKey);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "AlphaName", alphaName);
        VoteDb.AddCommandParameter(cmd, "VowelStrippedName", vowelStrippedName);
        VoteDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteDb.AddCommandParameter(cmd, "AddOn", addOn);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "LastEmailCode", lastEmailCode);
        VoteDb.AddCommandParameter(cmd, "WebAddress", webAddress);
        VoteDb.AddCommandParameter(cmd, "StateWebAddress", stateWebAddress);
        VoteDb.AddCommandParameter(cmd, "Phone", phone);
        VoteDb.AddCommandParameter(cmd, "StatePhone", statePhone);
        VoteDb.AddCommandParameter(cmd, "Gender", gender);
        VoteDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteDb.AddCommandParameter(cmd, "Address", address);
        VoteDb.AddCommandParameter(cmd, "CityStateZip", cityStateZip);
        VoteDb.AddCommandParameter(cmd, "StateAddress", stateAddress);
        VoteDb.AddCommandParameter(cmd, "StateCityStateZip", stateCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignName", campaignName);
        VoteDb.AddCommandParameter(cmd, "CampaignAddress", campaignAddress);
        VoteDb.AddCommandParameter(cmd, "CampaignCityStateZip", campaignCityStateZip);
        VoteDb.AddCommandParameter(cmd, "CampaignPhone", campaignPhone);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "StateData", stateData);
        VoteDb.AddCommandParameter(cmd, "IntroLetterSent", introLetterSent);
        VoteDb.AddCommandParameter(cmd, "IsNotRespondedEmailSent", isNotRespondedEmailSent);
        VoteDb.AddCommandParameter(cmd, "DataLastUpdated", dataLastUpdated);
        VoteDb.AddCommandParameter(cmd, "DataUpdatedCount", dataUpdatedCount);
        VoteDb.AddCommandParameter(cmd, "DatePictureUploaded", datePictureUploaded);
        VoteDb.AddCommandParameter(cmd, "Answers", answers);
        VoteDb.AddCommandParameter(cmd, "DateOfBirth", dateOfBirth);
        VoteDb.AddCommandParameter(cmd, "FacebookWebAddress", facebookWebAddress);
        VoteDb.AddCommandParameter(cmd, "WikipediaWebAddress", wikipediaWebAddress);
        VoteDb.AddCommandParameter(cmd, "YouTubeWebAddress", youTubeWebAddress);
        VoteDb.AddCommandParameter(cmd, "FlickrWebAddress", flickrWebAddress);
        VoteDb.AddCommandParameter(cmd, "TwitterWebAddress", twitterWebAddress);
        VoteDb.AddCommandParameter(cmd, "RSSFeedWebAddress", RSSFeedWebAddress);
        VoteDb.AddCommandParameter(cmd, "VimeoWebAddress", vimeoWebAddress);
        VoteDb.AddCommandParameter(cmd, "GooglePlusWebAddress", googlePlusWebAddress);
        VoteDb.AddCommandParameter(cmd, "LinkedInWebAddress", linkedInWebAddress);
        VoteDb.AddCommandParameter(cmd, "PinterestWebAddress", pinterestWebAddress);
        VoteDb.AddCommandParameter(cmd, "BloggerWebAddress", bloggerWebAddress);
        VoteDb.AddCommandParameter(cmd, "WebstagramWebAddress", webstagramWebAddress);
        VoteDb.AddCommandParameter(cmd, "BallotPediaWebAddress", ballotPediaWebAddress);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static PoliticiansTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansTable FillTable(DbCommand command, PoliticiansTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansTable table = new PoliticiansTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansTable table, PoliticiansTable.ColumnSet columnSet = PoliticiansTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string PasswordHintColumnName { get { return "PasswordHint"; } }

      public static string TemporaryOfficeKeyColumnName { get { return "TemporaryOfficeKey"; } }

      public static string LiveOfficeKeyColumnName { get { return "LiveOfficeKey"; } }

      public static string LiveOfficeStatusColumnName { get { return "LiveOfficeStatus"; } }

      public static string LiveElectionKeyColumnName { get { return "LiveElectionKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string FirstNameColumnName { get { return "FName"; } }

      public static string MiddleNameColumnName { get { return "MName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LName"; } }

      public static string AlphaNameColumnName { get { return "AlphaName"; } }

      public static string VowelStrippedNameColumnName { get { return "VowelStrippedName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string AddOnColumnName { get { return "AddOn"; } }

      public static string EmailVoteUSAColumnName { get { return "EmailAddrVoteUSA"; } }

      public static string EmailColumnName { get { return "EmailAddr"; } }

      public static string StateEmailColumnName { get { return "StateEmailAddr"; } }

      public static string LastEmailCodeColumnName { get { return "LastEmailCode"; } }

      public static string WebAddressColumnName { get { return "WebAddr"; } }

      public static string StateWebAddressColumnName { get { return "StateWebAddr"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string StatePhoneColumnName { get { return "StatePhone"; } }

      public static string GenderColumnName { get { return "Gender"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string AddressColumnName { get { return "Address"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string StateAddressColumnName { get { return "StateAddress"; } }

      public static string StateCityStateZipColumnName { get { return "StateCityStateZip"; } }

      public static string CampaignNameColumnName { get { return "CampaignName"; } }

      public static string CampaignAddressColumnName { get { return "CampaignAddr"; } }

      public static string CampaignCityStateZipColumnName { get { return "CampaignCityStateZip"; } }

      public static string CampaignPhoneColumnName { get { return "CampaignPhone"; } }

      public static string CampaignEmailColumnName { get { return "CampaignEmail"; } }

      public static string StateDataColumnName { get { return "StateData"; } }

      public static string IntroLetterSentColumnName { get { return "IntroLetterSent"; } }

      public static string IsNotRespondedEmailSentColumnName { get { return "IsNotRespondedEmailSent"; } }

      public static string DataLastUpdatedColumnName { get { return "DataLastUpdated"; } }

      public static string DataUpdatedCountColumnName { get { return "DataUpdatedCount"; } }

      public static string DatePictureUploadedColumnName { get { return "DatePictureUploaded"; } }

      public static string AnswersColumnName { get { return "Answers"; } }

      public static string DateOfBirthColumnName { get { return "DateOfBirth"; } }

      public static string FacebookWebAddressColumnName { get { return "FacebookWebAddress"; } }

      public static string WikipediaWebAddressColumnName { get { return "WikipediaWebAddress"; } }

      public static string YouTubeWebAddressColumnName { get { return "YouTubeWebAddress"; } }

      public static string FlickrWebAddressColumnName { get { return "FlickrWebAddress"; } }

      public static string TwitterWebAddressColumnName { get { return "TwitterWebAddress"; } }

      public static string RSSFeedWebAddressColumnName { get { return "RSSFeedWebAddress"; } }

      public static string VimeoWebAddressColumnName { get { return "VimeoWebAddress"; } }

      public static string GooglePlusWebAddressColumnName { get { return "GooglePlusWebAddress"; } }

      public static string LinkedInWebAddressColumnName { get { return "LinkedInWebAddress"; } }

      public static string PinterestWebAddressColumnName { get { return "PinterestWebAddress"; } }

      public static string BloggerWebAddressColumnName { get { return "BloggerWebAddress"; } }

      public static string WebstagramWebAddressColumnName { get { return "WebstagramWebAddress"; } }

      public static string BallotPediaWebAddressColumnName { get { return "BallotPediaWebAddress"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int PasswordMaxLength { get { return 50; } }

      public static int PasswordHintMaxLength { get { return 50; } }

      public static int TemporaryOfficeKeyMaxLength { get { return 150; } }

      public static int LiveOfficeKeyMaxLength { get { return 150; } }

      public static int LiveOfficeStatusMaxLength { get { return 50; } }

      public static int LiveElectionKeyMaxLength { get { return 18; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int FirstNameMaxLength { get { return 100; } }

      public static int MiddleNameMaxLength { get { return 100; } }

      public static int NicknameMaxLength { get { return 100; } }

      public static int LastNameMaxLength { get { return 100; } }

      public static int AlphaNameMaxLength { get { return 100; } }

      public static int VowelStrippedNameMaxLength { get { return 100; } }

      public static int SuffixMaxLength { get { return 20; } }

      public static int AddOnMaxLength { get { return 20; } }

      public static int EmailVoteUSAMaxLength { get { return 200; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int StateEmailMaxLength { get { return 200; } }

      public static int LastEmailCodeMaxLength { get { return 10; } }

      public static int WebAddressMaxLength { get { return int.MaxValue; } }

      public static int StateWebAddressMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int StatePhoneMaxLength { get { return int.MaxValue; } }

      public static int GenderMaxLength { get { return 1; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int AddressMaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int StateAddressMaxLength { get { return int.MaxValue; } }

      public static int StateCityStateZipMaxLength { get { return int.MaxValue; } }

      public static int CampaignNameMaxLength { get { return int.MaxValue; } }

      public static int CampaignAddressMaxLength { get { return int.MaxValue; } }

      public static int CampaignCityStateZipMaxLength { get { return int.MaxValue; } }

      public static int CampaignPhoneMaxLength { get { return int.MaxValue; } }

      public static int CampaignEmailMaxLength { get { return 200; } }

      public static int StateDataMaxLength { get { return 1; } }

      public static int FacebookWebAddressMaxLength { get { return int.MaxValue; } }

      public static int WikipediaWebAddressMaxLength { get { return int.MaxValue; } }

      public static int YouTubeWebAddressMaxLength { get { return int.MaxValue; } }

      public static int FlickrWebAddressMaxLength { get { return int.MaxValue; } }

      public static int TwitterWebAddressMaxLength { get { return int.MaxValue; } }

      public static int RSSFeedWebAddressMaxLength { get { return int.MaxValue; } }

      public static int VimeoWebAddressMaxLength { get { return int.MaxValue; } }

      public static int GooglePlusWebAddressMaxLength { get { return int.MaxValue; } }

      public static int LinkedInWebAddressMaxLength { get { return int.MaxValue; } }

      public static int PinterestWebAddressMaxLength { get { return int.MaxValue; } }

      public static int BloggerWebAddressMaxLength { get { return int.MaxValue; } }

      public static int WebstagramWebAddressMaxLength { get { return int.MaxValue; } }

      public static int BallotPediaWebAddressMaxLength { get { return int.MaxValue; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPasswordByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Password FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPassword(String politicianKey, String defaultValue = null)
      {
        return GetPasswordByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPasswordHintByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PasswordHint FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordHint(String politicianKey, String defaultValue = null)
      {
        return GetPasswordHintByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetTemporaryOfficeKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TemporaryOfficeKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTemporaryOfficeKey(String politicianKey, String defaultValue = null)
      {
        return GetTemporaryOfficeKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveOfficeKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeKey(String politicianKey, String defaultValue = null)
      {
        return GetLiveOfficeKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveOfficeStatusByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveOfficeStatus FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveOfficeStatus(String politicianKey, String defaultValue = null)
      {
        return GetLiveOfficeStatusByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLiveElectionKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LiveElectionKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLiveElectionKey(String politicianKey, String defaultValue = null)
      {
        return GetLiveElectionKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateCodeByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String politicianKey, String defaultValue = null)
      {
        return GetStateCodeByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetFirstNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstName(String politicianKey, String defaultValue = null)
      {
        return GetFirstNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetMiddleNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMiddleName(String politicianKey, String defaultValue = null)
      {
        return GetMiddleNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetNicknameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Nickname FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNickname(String politicianKey, String defaultValue = null)
      {
        return GetNicknameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLastNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastName(String politicianKey, String defaultValue = null)
      {
        return GetLastNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAlphaNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AlphaName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAlphaName(String politicianKey, String defaultValue = null)
      {
        return GetAlphaNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetVowelStrippedNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VowelStrippedName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVowelStrippedName(String politicianKey, String defaultValue = null)
      {
        return GetVowelStrippedNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetSuffixByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Suffix FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSuffix(String politicianKey, String defaultValue = null)
      {
        return GetSuffixByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAddOnByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOn FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddOn(String politicianKey, String defaultValue = null)
      {
        return GetAddOnByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetEmailVoteUSAByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddrVoteUSA FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailVoteUSA(String politicianKey, String defaultValue = null)
      {
        return GetEmailVoteUSAByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String politicianKey, String defaultValue = null)
      {
        return GetEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateEmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateEmail(String politicianKey, String defaultValue = null)
      {
        return GetStateEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLastEmailCodeByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LastEmailCode FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastEmailCode(String politicianKey, String defaultValue = null)
      {
        return GetLastEmailCodeByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateWebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetStateWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String politicianKey, String defaultValue = null)
      {
        return GetPhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStatePhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StatePhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStatePhone(String politicianKey, String defaultValue = null)
      {
        return GetStatePhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetGenderByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Gender FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGender(String politicianKey, String defaultValue = null)
      {
        return GetGenderByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPartyKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKey(String politicianKey, String defaultValue = null)
      {
        return GetPartyKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Address FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress(String politicianKey, String defaultValue = null)
      {
        return GetAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAddress(String politicianKey, String defaultValue = null)
      {
        return GetStateAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetStateCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignNameByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignName(String politicianKey, String defaultValue = null)
      {
        return GetCampaignNameByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignAddress(String politicianKey, String defaultValue = null)
      {
        return GetCampaignAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignCityStateZipByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignCityStateZip(String politicianKey, String defaultValue = null)
      {
        return GetCampaignCityStateZipByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignPhoneByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignPhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignPhone(String politicianKey, String defaultValue = null)
      {
        return GetCampaignPhoneByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetCampaignEmailByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CampaignEmail FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCampaignEmail(String politicianKey, String defaultValue = null)
      {
        return GetCampaignEmailByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetStateDataByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateData FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateData(String politicianKey, String defaultValue = null)
      {
        return GetStateDataByPoliticianKey(politicianKey, defaultValue);
      }

      public static DateTime? GetIntroLetterSentByPoliticianKey(String politicianKey)
      {
        return _GetIntroLetterSentByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetIntroLetterSent(String politicianKey)
      {
        return GetIntroLetterSentByPoliticianKey(politicianKey);
      }

      public static DateTime GetIntroLetterSentByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetIntroLetterSentByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetIntroLetterSent(String politicianKey, DateTime defaultValue)
      {
        return GetIntroLetterSentByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetIntroLetterSentByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT IntroLetterSent FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetIsNotRespondedEmailSentByPoliticianKey(String politicianKey)
      {
        return _GetIsNotRespondedEmailSentByPoliticianKey(politicianKey, null);
      }

      public static Boolean? GetIsNotRespondedEmailSent(String politicianKey)
      {
        return GetIsNotRespondedEmailSentByPoliticianKey(politicianKey);
      }

      public static Boolean GetIsNotRespondedEmailSentByPoliticianKey(String politicianKey, Boolean defaultValue)
      {
        return _GetIsNotRespondedEmailSentByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Boolean GetIsNotRespondedEmailSent(String politicianKey, Boolean defaultValue)
      {
        return GetIsNotRespondedEmailSentByPoliticianKey(politicianKey, defaultValue);
      }

      private static Boolean? _GetIsNotRespondedEmailSentByPoliticianKey(String politicianKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsNotRespondedEmailSent FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static DateTime? GetDataLastUpdatedByPoliticianKey(String politicianKey)
      {
        return _GetDataLastUpdatedByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDataLastUpdated(String politicianKey)
      {
        return GetDataLastUpdatedByPoliticianKey(politicianKey);
      }

      public static DateTime GetDataLastUpdatedByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDataLastUpdatedByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDataLastUpdated(String politicianKey, DateTime defaultValue)
      {
        return GetDataLastUpdatedByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDataLastUpdatedByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataLastUpdated FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetDataUpdatedCountByPoliticianKey(String politicianKey)
      {
        return _GetDataUpdatedCountByPoliticianKey(politicianKey, null);
      }

      public static Int32? GetDataUpdatedCount(String politicianKey)
      {
        return GetDataUpdatedCountByPoliticianKey(politicianKey);
      }

      public static Int32 GetDataUpdatedCountByPoliticianKey(String politicianKey, Int32 defaultValue)
      {
        return _GetDataUpdatedCountByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Int32 GetDataUpdatedCount(String politicianKey, Int32 defaultValue)
      {
        return GetDataUpdatedCountByPoliticianKey(politicianKey, defaultValue);
      }

      private static Int32? _GetDataUpdatedCountByPoliticianKey(String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT DataUpdatedCount FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDatePictureUploadedByPoliticianKey(String politicianKey)
      {
        return _GetDatePictureUploadedByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDatePictureUploaded(String politicianKey)
      {
        return GetDatePictureUploadedByPoliticianKey(politicianKey);
      }

      public static DateTime GetDatePictureUploadedByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDatePictureUploadedByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDatePictureUploaded(String politicianKey, DateTime defaultValue)
      {
        return GetDatePictureUploadedByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDatePictureUploadedByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DatePictureUploaded FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetAnswersByPoliticianKey(String politicianKey)
      {
        return _GetAnswersByPoliticianKey(politicianKey, null);
      }

      public static Int32? GetAnswers(String politicianKey)
      {
        return GetAnswersByPoliticianKey(politicianKey);
      }

      public static Int32 GetAnswersByPoliticianKey(String politicianKey, Int32 defaultValue)
      {
        return _GetAnswersByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static Int32 GetAnswers(String politicianKey, Int32 defaultValue)
      {
        return GetAnswersByPoliticianKey(politicianKey, defaultValue);
      }

      private static Int32? _GetAnswersByPoliticianKey(String politicianKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Answers FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDateOfBirthByPoliticianKey(String politicianKey)
      {
        return _GetDateOfBirthByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetDateOfBirth(String politicianKey)
      {
        return GetDateOfBirthByPoliticianKey(politicianKey);
      }

      public static DateTime GetDateOfBirthByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetDateOfBirthByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetDateOfBirth(String politicianKey, DateTime defaultValue)
      {
        return GetDateOfBirthByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetDateOfBirthByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateOfBirth FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetFacebookWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FacebookWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacebookWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetFacebookWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWikipediaWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WikipediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWikipediaWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWikipediaWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetYouTubeWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetYouTubeWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetFlickrWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FlickrWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFlickrWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetFlickrWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetTwitterWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TwitterWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTwitterWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetTwitterWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetRSSFeedWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RSSFeedWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRSSFeedWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetRSSFeedWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetVimeoWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VimeoWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVimeoWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetVimeoWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetGooglePlusWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GooglePlusWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGooglePlusWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetGooglePlusWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetLinkedInWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LinkedInWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLinkedInWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetLinkedInWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetPinterestWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PinterestWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPinterestWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetPinterestWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetBloggerWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BloggerWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBloggerWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetBloggerWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetWebstagramWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WebstagramWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWebstagramWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetWebstagramWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static String GetBallotPediaWebAddressByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotPediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotPediaWebAddress(String politicianKey, String defaultValue = null)
      {
        return GetBallotPediaWebAddressByPoliticianKey(politicianKey, defaultValue);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static PoliticiansTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePasswordByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePassword(String newValue, String politicianKey)
      {
        return UpdatePasswordByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePasswordHintByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHint(String newValue, String politicianKey)
      {
        return UpdatePasswordHintByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateTemporaryOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET TemporaryOfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTemporaryOfficeKey(String newValue, String politicianKey)
      {
        return UpdateTemporaryOfficeKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKey(String newValue, String politicianKey)
      {
        return UpdateLiveOfficeKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveOfficeStatusByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatus(String newValue, String politicianKey)
      {
        return UpdateLiveOfficeStatusByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLiveElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKey(String newValue, String politicianKey)
      {
        return UpdateLiveElectionKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String politicianKey)
      {
        return UpdateStateCodeByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFirstNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstName(String newValue, String politicianKey)
      {
        return UpdateFirstNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateMiddleNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleName(String newValue, String politicianKey)
      {
        return UpdateMiddleNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateNicknameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNickname(String newValue, String politicianKey)
      {
        return UpdateNicknameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLastNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastName(String newValue, String politicianKey)
      {
        return UpdateLastNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAlphaNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaName(String newValue, String politicianKey)
      {
        return UpdateAlphaNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateVowelStrippedNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedName(String newValue, String politicianKey)
      {
        return UpdateVowelStrippedNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateSuffixByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffix(String newValue, String politicianKey)
      {
        return UpdateSuffixByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAddOnByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOn(String newValue, String politicianKey)
      {
        return UpdateAddOnByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateEmailVoteUSAByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSA(String newValue, String politicianKey)
      {
        return UpdateEmailVoteUSAByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String politicianKey)
      {
        return UpdateEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmail(String newValue, String politicianKey)
      {
        return UpdateStateEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLastEmailCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCode(String newValue, String politicianKey)
      {
        return UpdateLastEmailCodeByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddress(String newValue, String politicianKey)
      {
        return UpdateWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddress(String newValue, String politicianKey)
      {
        return UpdateStateWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String politicianKey)
      {
        return UpdatePhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStatePhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhone(String newValue, String politicianKey)
      {
        return UpdateStatePhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateGenderByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGender(String newValue, String politicianKey)
      {
        return UpdateGenderByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePartyKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKey(String newValue, String politicianKey)
      {
        return UpdatePartyKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress(String newValue, String politicianKey)
      {
        return UpdateAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String politicianKey)
      {
        return UpdateCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddress(String newValue, String politicianKey)
      {
        return UpdateStateAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZip(String newValue, String politicianKey)
      {
        return UpdateStateCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignName(String newValue, String politicianKey)
      {
        return UpdateCampaignNameByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddress(String newValue, String politicianKey)
      {
        return UpdateCampaignAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZip(String newValue, String politicianKey)
      {
        return UpdateCampaignCityStateZipByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignPhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhone(String newValue, String politicianKey)
      {
        return UpdateCampaignPhoneByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateCampaignEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmail(String newValue, String politicianKey)
      {
        return UpdateCampaignEmailByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateStateDataByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET StateData=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateData(String newValue, String politicianKey)
      {
        return UpdateStateDataByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateIntroLetterSentByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET IntroLetterSent=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIntroLetterSent(DateTime newValue, String politicianKey)
      {
        return UpdateIntroLetterSentByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateIsNotRespondedEmailSentByPoliticianKey(Boolean newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET IsNotRespondedEmailSent=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotRespondedEmailSent(Boolean newValue, String politicianKey)
      {
        return UpdateIsNotRespondedEmailSentByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDataLastUpdatedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdated(DateTime newValue, String politicianKey)
      {
        return UpdateDataLastUpdatedByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDataUpdatedCountByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCount(Int32 newValue, String politicianKey)
      {
        return UpdateDataUpdatedCountByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDatePictureUploadedByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploaded(DateTime newValue, String politicianKey)
      {
        return UpdateDatePictureUploadedByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateAnswersByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET Answers=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswers(Int32 newValue, String politicianKey)
      {
        return UpdateAnswersByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateDateOfBirthByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirth(DateTime newValue, String politicianKey)
      {
        return UpdateDateOfBirthByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFacebookWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddress(String newValue, String politicianKey)
      {
        return UpdateFacebookWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWikipediaWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddress(String newValue, String politicianKey)
      {
        return UpdateWikipediaWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateYouTubeWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddress(String newValue, String politicianKey)
      {
        return UpdateYouTubeWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateFlickrWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddress(String newValue, String politicianKey)
      {
        return UpdateFlickrWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateTwitterWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddress(String newValue, String politicianKey)
      {
        return UpdateTwitterWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateRSSFeedWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddress(String newValue, String politicianKey)
      {
        return UpdateRSSFeedWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateVimeoWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddress(String newValue, String politicianKey)
      {
        return UpdateVimeoWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateGooglePlusWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddress(String newValue, String politicianKey)
      {
        return UpdateGooglePlusWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateLinkedInWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddress(String newValue, String politicianKey)
      {
        return UpdateLinkedInWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdatePinterestWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddress(String newValue, String politicianKey)
      {
        return UpdatePinterestWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateBloggerWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddress(String newValue, String politicianKey)
      {
        return UpdateBloggerWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateWebstagramWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddress(String newValue, String politicianKey)
      {
        return UpdateWebstagramWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateBallotPediaWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddress(String newValue, String politicianKey)
      {
        return UpdateBallotPediaWebAddressByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE EmailAddr=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTemporaryOfficeKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET TemporaryOfficeKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateDataByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET StateData=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIntroLetterSentByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET IntroLetterSent=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotRespondedEmailSentByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET IsNotRespondedEmailSent=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET Answers=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE EmailAddr=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE EmailAddr=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateEmail(String stateEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateEmail(Column _column, String stateEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE StateEmailAddr=@StateEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByStateEmail(String stateEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTemporaryOfficeKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET TemporaryOfficeKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateDataByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET StateData=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIntroLetterSentByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET IntroLetterSent=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotRespondedEmailSentByStateEmail(Boolean newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET IsNotRespondedEmailSent=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByStateEmail(Int32 newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByStateEmail(Int32 newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET Answers=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByStateEmail(DateTime newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByStateEmail(String newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE StateEmailAddr=@StateEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateEmail(Column _column, object newValue, String stateEmail)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE StateEmailAddr=@StateEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmailVoteUSA(String emailVoteUSA, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmailVoteUSA(Column _column, String emailVoteUSA)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByEmailVoteUSA(String emailVoteUSA, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTemporaryOfficeKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET TemporaryOfficeKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateDataByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET StateData=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIntroLetterSentByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET IntroLetterSent=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotRespondedEmailSentByEmailVoteUSA(Boolean newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET IsNotRespondedEmailSent=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByEmailVoteUSA(Int32 newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByEmailVoteUSA(Int32 newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET Answers=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByEmailVoteUSA(DateTime newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByEmailVoteUSA(String newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmailVoteUSA(Column _column, object newValue, String emailVoteUSA)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE EmailAddrVoteUSA=@EmailVoteUSA";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "EmailVoteUSA", emailVoteUSA);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCampaignEmail(String campaignEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCampaignEmail(Column _column, String campaignEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static PoliticiansTable GetDataByCampaignEmail(String campaignEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Password,PasswordHint,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,StateCode,FName,MName,Nickname,LName,AlphaName,VowelStrippedName,Suffix,AddOn,EmailAddrVoteUSA,EmailAddr,StateEmailAddr,LastEmailCode,WebAddr,StateWebAddr,Phone,StatePhone,Gender,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,CampaignName,CampaignAddr,CampaignCityStateZip,CampaignPhone,CampaignEmail,StateData,IntroLetterSent,IsNotRespondedEmailSent,DataLastUpdated,DataUpdatedCount,DatePictureUploaded,Answers,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        return FillTable(cmd, PoliticiansTable.ColumnSet.All);
      }

      public static int UpdatePoliticianKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PoliticianKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Password=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordHintByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PasswordHint=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTemporaryOfficeKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET TemporaryOfficeKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveOfficeStatusByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveOfficeStatus=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLiveElectionKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LiveElectionKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCode=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET MName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Nickname=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAlphaNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET AlphaName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVowelStrippedNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET VowelStrippedName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Suffix=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOnByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET AddOn=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailVoteUSAByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddrVoteUSA=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET EmailAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateEmailAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastEmailCodeByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LastEmailCode=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WebAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateWebAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Phone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StatePhone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGenderByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Gender=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PartyKey=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Address=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateCityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignNameByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignName=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignAddr=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignCityStateZipByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignCityStateZip=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignPhoneByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignPhone=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCampaignEmailByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET CampaignEmail=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateDataByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET StateData=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIntroLetterSentByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET IntroLetterSent=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotRespondedEmailSentByCampaignEmail(Boolean newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET IsNotRespondedEmailSent=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataLastUpdatedByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DataLastUpdated=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataUpdatedCountByCampaignEmail(Int32 newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DataUpdatedCount=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDatePictureUploadedByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DatePictureUploaded=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswersByCampaignEmail(Int32 newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET Answers=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateOfBirthByCampaignEmail(DateTime newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET DateOfBirth=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacebookWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FacebookWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWikipediaWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WikipediaWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET YouTubeWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFlickrWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET FlickrWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTwitterWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET TwitterWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRSSFeedWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET RSSFeedWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVimeoWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET VimeoWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGooglePlusWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET GooglePlusWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLinkedInWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET LinkedInWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePinterestWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET PinterestWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBloggerWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET BloggerWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWebstagramWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET WebstagramWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotPediaWebAddressByCampaignEmail(String newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET BallotPediaWebAddress=@newValue WHERE CampaignEmail=@CampaignEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCampaignEmail(Column _column, object newValue, String campaignEmail)
      {
        string cmdText = "UPDATE Politicians SET {0}=@newValue WHERE CampaignEmail=@CampaignEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CampaignEmail", campaignEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectNamesCommandText
      {
        get
        {
          return "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllNamesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static void UpdateNames(PoliticiansTable table)
      {
        UpdateNames(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateNames(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Names, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetNamesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static PoliticiansTable GetNamesData(String politicianKey, int commandTimeout = -1)
      {
        return GetNamesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static PoliticiansTable GetNamesDataByStateCodeLastName(String stateCode, String lastName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,FName,MName,Nickname,LName,Suffix,AddOn FROM Politicians WHERE StateCode=@StateCode AND LName=@LastName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Names);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PoliticianKey,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Cache);
      }

      public static void UpdateCache(PoliticiansTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetCacheDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,TemporaryOfficeKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey,FName,MName,Nickname,LName,Suffix,AddOn,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip,DateOfBirth,FacebookWebAddress,WikipediaWebAddress,YouTubeWebAddress,FlickrWebAddress,TwitterWebAddress,RSSFeedWebAddress,VimeoWebAddress,GooglePlusWebAddress,LinkedInWebAddress,PinterestWebAddress,BloggerWebAddress,WebstagramWebAddress,BallotPediaWebAddress FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Cache);
      }

      public static PoliticiansTable GetCacheData(String politicianKey, int commandTimeout = -1)
      {
        return GetCacheDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectAddressesCommandText
      {
        get
        {
          return "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllAddressesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Addresses);
      }

      public static void UpdateAddresses(PoliticiansTable table)
      {
        UpdateAddresses(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateAddresses(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Addresses, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetAddressesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Addresses);
      }

      public static PoliticiansTable GetAddressesData(String politicianKey, int commandTimeout = -1)
      {
        return GetAddressesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectPhonesCommandText
      {
        get
        {
          return "SELECT Phone,StatePhone FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllPhonesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Phone,StatePhone FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Phones);
      }

      public static void UpdatePhones(PoliticiansTable table)
      {
        UpdatePhones(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdatePhones(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Phones, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetPhonesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Phone,StatePhone FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Phones);
      }

      public static PoliticiansTable GetPhonesData(String politicianKey, int commandTimeout = -1)
      {
        return GetPhonesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectEmailsCommandText
      {
        get
        {
          return "SELECT EmailAddr,StateEmailAddr FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllEmailsData(int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailAddr,StateEmailAddr FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Emails);
      }

      public static void UpdateEmails(PoliticiansTable table)
      {
        UpdateEmails(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateEmails(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.Emails, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetEmailsDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT EmailAddr,StateEmailAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.Emails);
      }

      public static PoliticiansTable GetEmailsData(String politicianKey, int commandTimeout = -1)
      {
        return GetEmailsDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectWebAddressesCommandText
      {
        get
        {
          return "SELECT WebAddr,StateWebAddr FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllWebAddressesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddr,StateWebAddr FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.WebAddresses);
      }

      public static void UpdateWebAddresses(PoliticiansTable table)
      {
        UpdateWebAddresses(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateWebAddresses(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.WebAddresses, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetWebAddressesDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddr,StateWebAddr FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.WebAddresses);
      }

      public static PoliticiansTable GetWebAddressesData(String politicianKey, int commandTimeout = -1)
      {
        return GetWebAddressesDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectDuplicateNamesCommandText
      {
        get
        {
          return "SELECT PoliticianKey,TemporaryOfficeKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllDuplicateNamesData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,TemporaryOfficeKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.DuplicateNames);
      }

      public static void UpdateDuplicateNames(PoliticiansTable table)
      {
        UpdateDuplicateNames(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDuplicateNames(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.DuplicateNames, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetDuplicateNamesDataByLastNameStateCode(String lastName, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,TemporaryOfficeKey,EmailAddr,StateEmailAddr,WebAddr,StateWebAddr,Phone,StatePhone,PartyKey,Address,CityStateZip,StateAddress,StateCityStateZip FROM Politicians WHERE LName=@LastName AND StateCode=@StateCode ORDER BY LName,FName,MName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, PoliticiansTable.ColumnSet.DuplicateNames);
      }

      public static string SelectLiveOfficeCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllLiveOfficeData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.LiveOffice);
      }

      public static void UpdateLiveOffice(PoliticiansTable table)
      {
        UpdateLiveOffice(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateLiveOffice(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.LiveOffice, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetLiveOfficeDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKey,LiveOfficeStatus,LiveElectionKey FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.LiveOffice);
      }

      public static PoliticiansTable GetLiveOfficeData(String politicianKey, int commandTimeout = -1)
      {
        return GetLiveOfficeDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string SelectSearchKeyUpdateCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians";
        }
      }

      public static PoliticiansTable GetAllSearchKeyUpdateData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansTable.ColumnSet.SearchKeyUpdate);
      }

      public static void UpdateSearchKeyUpdate(PoliticiansTable table)
      {
        UpdateSearchKeyUpdate(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateSearchKeyUpdate(PoliticiansTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansTable.ColumnSet.SearchKeyUpdate, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansTable GetSearchKeyUpdateDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LName,AlphaName,VowelStrippedName FROM Politicians WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansTable.ColumnSet.SearchKeyUpdate);
      }

      public static PoliticiansTable GetSearchKeyUpdateData(String politicianKey, int commandTimeout = -1)
      {
        return GetSearchKeyUpdateDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string GetSelectCommandText(PoliticiansTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansTable.ColumnSet.All:
            return SelectAllCommandText;

          case PoliticiansTable.ColumnSet.Names:
            return SelectNamesCommandText;

          case PoliticiansTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case PoliticiansTable.ColumnSet.Addresses:
            return SelectAddressesCommandText;

          case PoliticiansTable.ColumnSet.Phones:
            return SelectPhonesCommandText;

          case PoliticiansTable.ColumnSet.Emails:
            return SelectEmailsCommandText;

          case PoliticiansTable.ColumnSet.WebAddresses:
            return SelectWebAddressesCommandText;

          case PoliticiansTable.ColumnSet.DuplicateNames:
            return SelectDuplicateNamesCommandText;

          case PoliticiansTable.ColumnSet.LiveOffice:
            return SelectLiveOfficeCommandText;

          case PoliticiansTable.ColumnSet.SearchKeyUpdate:
            return SelectSearchKeyUpdateCommandText;

          default:
            return null;
        }
      }

      static Politicians()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Politicians

    #region vote.PoliticiansAdminReportView

    public partial class PoliticiansAdminReportViewRow : DataRow
    {
      internal PoliticiansAdminReportViewRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MiddleName"] as String; }
        set { if (value == null) this["MiddleName"] = DBNull.Value; else this["MiddleName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public String AddOn
      {
        get { return this["AddOn"] as String; }
        set { if (value == null) this["AddOn"] = DBNull.Value; else this["AddOn"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String OfficeStatus
      {
        get { return this["OfficeStatus"] as String; }
        set { if (value == null) this["OfficeStatus"] = DBNull.Value; else this["OfficeStatus"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String LocalDistrict
      {
        get { return this["LocalDistrict"] as String; }
        set { if (value == null) this["LocalDistrict"] = DBNull.Value; else this["LocalDistrict"] = value; }
      }

      public String PartyCode
      {
        get { return this["PartyCode"] as String; }
        set { if (value == null) this["PartyCode"] = DBNull.Value; else this["PartyCode"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansAdminReportViewTable : TypedTableBase<PoliticiansAdminReportViewRow>
    {
      public PoliticiansAdminReportViewRow this[int index] { get { return (PoliticiansAdminReportViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansAdminReportViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansAdminReportViewTable(); }

      new public PoliticiansAdminReportViewRow NewRow() { return (PoliticiansAdminReportViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansAdminReportViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansAdminReportViewRow); }

      public void RemoveRow(PoliticiansAdminReportViewRow row) { this.Rows.Remove(row); }

      public PoliticiansAdminReportViewRow NewRow(String politicianKey, String firstName, String middleName, String nickname, String lastName, String suffix, String addOn, String partyKey, String officeKey, String officeStatus, Int32 officeLevel, String officeLine1, String officeLine2, String districtCode, String stateCode, String countyCode, String localCode, String county, String localDistrict, String partyCode)
      {
        PoliticiansAdminReportViewRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.Suffix = suffix;
        row.AddOn = addOn;
        row.PartyKey = partyKey;
        row.OfficeKey = officeKey;
        row.OfficeStatus = officeStatus;
        row.OfficeLevel = officeLevel;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.DistrictCode = districtCode;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.County = county;
        row.LocalDistrict = localDistrict;
        row.PartyCode = partyCode;
        return row;
      }

      public void AddRow(String politicianKey, String firstName, String middleName, String nickname, String lastName, String suffix, String addOn, String partyKey, String officeKey, String officeStatus, Int32 officeLevel, String officeLine1, String officeLine2, String districtCode, String stateCode, String countyCode, String localCode, String county, String localDistrict, String partyCode)
      {
        PoliticiansAdminReportViewRow row = NewRow(politicianKey, firstName, middleName, nickname, lastName, suffix, addOn, partyKey, officeKey, officeStatus, officeLevel, officeLine1, officeLine2, districtCode, stateCode, countyCode, localCode, county, localDistrict, partyCode);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MiddleName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn AddOnColumn { get { return this.Columns["AddOn"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn OfficeStatusColumn { get { return this.Columns["OfficeStatus"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn LocalDistrictColumn { get { return this.Columns["LocalDistrict"]; } }

      public DataColumn PartyCodeColumn { get { return this.Columns["PartyCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MiddleName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOn", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeStatus", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalDistrict", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyCode", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
      }

      public PoliticiansAdminReportViewTable() : this(ColumnSet.All) { }

      public PoliticiansAdminReportViewTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansAdminReportView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansAdminReportViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansAdminReportView
    {
      public const string TableName = "PoliticiansAdminReportView";

      public enum Column { PoliticianKey, FirstName, MiddleName, Nickname, LastName, Suffix, AddOn, PartyKey, OfficeKey, OfficeStatus, OfficeLevel, OfficeLine1, OfficeLine2, DistrictCode, StateCode, CountyCode, LocalCode, County, LocalDistrict, PartyCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.FirstName, "FirstName" },
        { Column.MiddleName, "MiddleName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LastName" },
        { Column.Suffix, "Suffix" },
        { Column.AddOn, "AddOn" },
        { Column.PartyKey, "PartyKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.OfficeStatus, "OfficeStatus" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.County, "County" },
        { Column.LocalDistrict, "LocalDistrict" },
        { Column.PartyCode, "PartyCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansAdminReportView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,FirstName,MiddleName,Nickname,LastName,Suffix,AddOn,PartyKey,OfficeKey,OfficeStatus,OfficeLevel,OfficeLine1,OfficeLine2,DistrictCode,StateCode,CountyCode,LocalCode,County,LocalDistrict,PartyCode FROM PoliticiansAdminReportView";
        }
      }

      public static PoliticiansAdminReportViewTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansAdminReportViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansAdminReportViewTable FillTable(DbCommand command, PoliticiansAdminReportViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansAdminReportViewTable table = new PoliticiansAdminReportViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string MiddleNameColumnName { get { return "MiddleName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string AddOnColumnName { get { return "AddOn"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string OfficeStatusColumnName { get { return "OfficeStatus"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string LocalDistrictColumnName { get { return "LocalDistrict"; } }

      public static string PartyCodeColumnName { get { return "PartyCode"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int FirstNameMaxLength { get { return 100; } }

      public static int MiddleNameMaxLength { get { return 100; } }

      public static int NicknameMaxLength { get { return 100; } }

      public static int LastNameMaxLength { get { return 100; } }

      public static int SuffixMaxLength { get { return 20; } }

      public static int AddOnMaxLength { get { return 20; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int OfficeStatusMaxLength { get { return 50; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int DistrictCodeMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 100; } }

      public static int LocalDistrictMaxLength { get { return 100; } }

      public static int PartyCodeMaxLength { get { return 3; } }

      public static string GetSelectCommandText(PoliticiansAdminReportViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansAdminReportViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansAdminReportView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansAdminReportView

    #region vote.PoliticiansImagesBlobs

    public partial class PoliticiansImagesBlobsRow : DataRow
    {
      internal PoliticiansImagesBlobsRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] ProfileOriginal
      {
        get { return this["ProfileOriginal"] as Byte[]; }
        set { if (value == null) this["ProfileOriginal"] = DBNull.Value; else this["ProfileOriginal"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile300
      {
        get { return this["Profile300"] as Byte[]; }
        set { if (value == null) this["Profile300"] = DBNull.Value; else this["Profile300"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile200
      {
        get { return this["Profile200"] as Byte[]; }
        set { if (value == null) this["Profile200"] = DBNull.Value; else this["Profile200"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot100
      {
        get { return this["Headshot100"] as Byte[]; }
        set { if (value == null) this["Headshot100"] = DBNull.Value; else this["Headshot100"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot75
      {
        get { return this["Headshot75"] as Byte[]; }
        set { if (value == null) this["Headshot75"] = DBNull.Value; else this["Headshot75"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot50
      {
        get { return this["Headshot50"] as Byte[]; }
        set { if (value == null) this["Headshot50"] = DBNull.Value; else this["Headshot50"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot35
      {
        get { return this["Headshot35"] as Byte[]; }
        set { if (value == null) this["Headshot35"] = DBNull.Value; else this["Headshot35"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot25
      {
        get { return this["Headshot25"] as Byte[]; }
        set { if (value == null) this["Headshot25"] = DBNull.Value; else this["Headshot25"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot20
      {
        get { return this["Headshot20"] as Byte[]; }
        set { if (value == null) this["Headshot20"] = DBNull.Value; else this["Headshot20"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot15
      {
        get { return this["Headshot15"] as Byte[]; }
        set { if (value == null) this["Headshot15"] = DBNull.Value; else this["Headshot15"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesBlobsTable : TypedTableBase<PoliticiansImagesBlobsRow>
    {
      public PoliticiansImagesBlobsRow this[int index] { get { return (PoliticiansImagesBlobsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesBlobsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesBlobsTable(); }

      new public PoliticiansImagesBlobsRow NewRow() { return (PoliticiansImagesBlobsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesBlobsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesBlobsRow); }

      public void RemoveRow(PoliticiansImagesBlobsRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesBlobsRow NewRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginal = profileOriginal;
        row.Profile300 = profile300;
        row.Profile200 = profile200;
        row.Headshot100 = headshot100;
        row.Headshot75 = headshot75;
        row.Headshot50 = headshot50;
        row.Headshot35 = headshot35;
        row.Headshot25 = headshot25;
        row.Headshot20 = headshot20;
        row.Headshot15 = headshot15;
        return row;
      }

      public void AddRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow(politicianKey, profileOriginal, profile300, profile200, headshot100, headshot75, headshot50, headshot35, headshot25, headshot20, headshot15);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalColumn { get { return this.Columns["ProfileOriginal"]; } }

      public DataColumn Profile300Column { get { return this.Columns["Profile300"]; } }

      public DataColumn Profile200Column { get { return this.Columns["Profile200"]; } }

      public DataColumn Headshot100Column { get { return this.Columns["Headshot100"]; } }

      public DataColumn Headshot75Column { get { return this.Columns["Headshot75"]; } }

      public DataColumn Headshot50Column { get { return this.Columns["Headshot50"]; } }

      public DataColumn Headshot35Column { get { return this.Columns["Headshot35"]; } }

      public DataColumn Headshot25Column { get { return this.Columns["Headshot25"]; } }

      public DataColumn Headshot20Column { get { return this.Columns["Headshot20"]; } }

      public DataColumn Headshot15Column { get { return this.Columns["Headshot15"]; } }

      public enum ColumnSet { All, Cache }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginal", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile300", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile200", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot100", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot75", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot50", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot35", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot25", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot20", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot15", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Profile300", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile200", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot100", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot75", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot50", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot35", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot25", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot20", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot15", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      public PoliticiansImagesBlobsTable() : this(ColumnSet.All) { }

      public PoliticiansImagesBlobsTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesBlobs";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;
        }
      }

      protected PoliticiansImagesBlobsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesBlobs
    {
      public const string TableName = "PoliticiansImagesBlobs";

      public enum Column { PoliticianKey, ProfileOriginal, Profile300, Profile200, Headshot100, Headshot75, Headshot50, Headshot35, Headshot25, Headshot20, Headshot15 }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginal, "ProfileOriginal" },
        { Column.Profile300, "Profile300" },
        { Column.Profile200, "Profile200" },
        { Column.Headshot100, "Headshot100" },
        { Column.Headshot75, "Headshot75" },
        { Column.Headshot50, "Headshot50" },
        { Column.Headshot35, "Headshot35" },
        { Column.Headshot25, "Headshot25" },
        { Column.Headshot20, "Headshot20" },
        { Column.Headshot15, "Headshot15" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PoliticiansImagesBlobs (PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15) VALUES (@PoliticianKey,@ProfileOriginal,@Profile300,@Profile200,@Headshot100,@Headshot75,@Headshot50,@Headshot35,@Headshot25,@Headshot20,@Headshot15)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "ProfileOriginal", profileOriginal);
        VoteDb.AddCommandParameter(cmd, "Profile300", profile300);
        VoteDb.AddCommandParameter(cmd, "Profile200", profile200);
        VoteDb.AddCommandParameter(cmd, "Headshot100", headshot100);
        VoteDb.AddCommandParameter(cmd, "Headshot75", headshot75);
        VoteDb.AddCommandParameter(cmd, "Headshot50", headshot50);
        VoteDb.AddCommandParameter(cmd, "Headshot35", headshot35);
        VoteDb.AddCommandParameter(cmd, "Headshot25", headshot25);
        VoteDb.AddCommandParameter(cmd, "Headshot20", headshot20);
        VoteDb.AddCommandParameter(cmd, "Headshot15", headshot15);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        }
      }

      public static PoliticiansImagesBlobsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesBlobsTable FillTable(DbCommand command, PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesBlobsTable table = new PoliticiansImagesBlobsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, PoliticiansImagesBlobsTable.ColumnSet columnSet = PoliticiansImagesBlobsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalColumnName { get { return "ProfileOriginal"; } }

      public static string Profile300ColumnName { get { return "Profile300"; } }

      public static string Profile200ColumnName { get { return "Profile200"; } }

      public static string Headshot100ColumnName { get { return "Headshot100"; } }

      public static string Headshot75ColumnName { get { return "Headshot75"; } }

      public static string Headshot50ColumnName { get { return "Headshot50"; } }

      public static string Headshot35ColumnName { get { return "Headshot35"; } }

      public static string Headshot25ColumnName { get { return "Headshot25"; } }

      public static string Headshot20ColumnName { get { return "Headshot20"; } }

      public static string Headshot15ColumnName { get { return "Headshot15"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfileOriginalByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ProfileOriginal FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfileOriginal(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfileOriginalByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile300ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Profile300 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile300(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfile300ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile200ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Profile200 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile200(String politicianKey, Byte[] defaultValue = null)
      {
        return GetProfile200ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot100ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot100 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot100(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot100ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot75ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot75 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot75(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot75ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot50ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot50 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot50(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot50ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot35ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot35 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot35(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot35ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot25ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot25 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot25(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot25ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot20ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot20 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot20(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot20ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot15ByPoliticianKey(String politicianKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot15(String politicianKey, Byte[] defaultValue = null)
      {
        return GetHeadshot15ByPoliticianKey(politicianKey, defaultValue);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesBlobsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET ProfileOriginal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginal(Byte[] newValue, String politicianKey)
      {
        return UpdateProfileOriginalByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile300ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile300=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile300(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile300ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile200ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile200=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile200(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile200ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot100ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot100=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot100(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot100ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot75ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot75=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot75(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot75ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot50ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot50=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot50(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot50ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot35ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot35=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot35(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot35ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot25ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot25=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot25(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot25ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot20ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot20=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot20(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot20ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot15ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot15=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot15(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot15ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        }
      }

      public static PoliticiansImagesBlobsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(PoliticiansImagesBlobsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(PoliticiansImagesBlobsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static PoliticiansImagesBlobsTable GetCacheDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.Cache);
      }

      public static string GetSelectCommandText(PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesBlobsTable.ColumnSet.All:
            return SelectAllCommandText;

          case PoliticiansImagesBlobsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesBlobs()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansImagesBlobs

    #region vote.PoliticiansImagesData

    public partial class PoliticiansImagesDataRow : DataRow
    {
      internal PoliticiansImagesDataRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public DateTime ProfileOriginalDate
      {
        get { return (DateTime) this["ProfileOriginalDate"]; }
        set { this["ProfileOriginalDate"] = value; }
      }

      public DateTime HeadshotDate
      {
        get { return (DateTime) this["HeadshotDate"]; }
        set { this["HeadshotDate"] = value; }
      }

      public DateTime HeadshotResizeDate
      {
        get { return (DateTime) this["HeadshotResizeDate"]; }
        set { this["HeadshotResizeDate"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesDataTable : TypedTableBase<PoliticiansImagesDataRow>
    {
      public PoliticiansImagesDataRow this[int index] { get { return (PoliticiansImagesDataRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesDataRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesDataTable(); }

      new public PoliticiansImagesDataRow NewRow() { return (PoliticiansImagesDataRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesDataRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesDataRow); }

      public void RemoveRow(PoliticiansImagesDataRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesDataRow NewRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginalDate = profileOriginalDate;
        row.HeadshotDate = headshotDate;
        row.HeadshotResizeDate = headshotResizeDate;
        return row;
      }

      public void AddRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow(politicianKey, profileOriginalDate, headshotDate, headshotResizeDate);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalDateColumn { get { return this.Columns["ProfileOriginalDate"]; } }

      public DataColumn HeadshotDateColumn { get { return this.Columns["HeadshotDate"]; } }

      public DataColumn HeadshotResizeDateColumn { get { return this.Columns["HeadshotResizeDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotResizeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PoliticiansImagesDataTable() : this(ColumnSet.All) { }

      public PoliticiansImagesDataTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesData";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansImagesDataTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesData
    {
      public const string TableName = "PoliticiansImagesData";

      public enum Column { PoliticianKey, ProfileOriginalDate, HeadshotDate, HeadshotResizeDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginalDate, "ProfileOriginalDate" },
        { Column.HeadshotDate, "HeadshotDate" },
        { Column.HeadshotResizeDate, "HeadshotResizeDate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO PoliticiansImagesData (PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate) VALUES (@PoliticianKey,@ProfileOriginalDate,@HeadshotDate,@HeadshotResizeDate)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteDb.AddCommandParameter(cmd, "HeadshotDate", headshotDate);
        VoteDb.AddCommandParameter(cmd, "HeadshotResizeDate", headshotResizeDate);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        }
      }

      public static PoliticiansImagesDataTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesDataTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesDataTable FillTable(DbCommand command, PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesDataTable table = new PoliticiansImagesDataTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, PoliticiansImagesDataTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, PoliticiansImagesDataTable.ColumnSet columnSet = PoliticiansImagesDataTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalDateColumnName { get { return "ProfileOriginalDate"; } }

      public static string HeadshotDateColumnName { get { return "HeadshotDate"; } }

      public static string HeadshotResizeDateColumnName { get { return "HeadshotResizeDate"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue = null)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static DateTime? GetProfileOriginalDateByPoliticianKey(String politicianKey)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetProfileOriginalDate(String politicianKey)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetProfileOriginalDate(String politicianKey, DateTime defaultValue)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ProfileOriginalDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotDate(String politicianKey)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotResizeDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotResizeDate(String politicianKey)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotResizeDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesDataTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET ProfileOriginalDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDate(DateTime newValue, String politicianKey)
      {
        return UpdateProfileOriginalDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotResizeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotResizeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotResizeDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotResizeDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesDataTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesData()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansImagesData

    #region vote.PoliticiansLiveOfficeKeyView

    public partial class PoliticiansLiveOfficeKeyViewRow : DataRow
    {
      internal PoliticiansLiveOfficeKeyViewRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String LiveOfficeKeyAndStatus
      {
        get { return this["LiveOfficeKeyAndStatus"] as String; }
        set { if (value == null) this["LiveOfficeKeyAndStatus"] = DBNull.Value; else this["LiveOfficeKeyAndStatus"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansLiveOfficeKeyViewTable : TypedTableBase<PoliticiansLiveOfficeKeyViewRow>
    {
      public PoliticiansLiveOfficeKeyViewRow this[int index] { get { return (PoliticiansLiveOfficeKeyViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansLiveOfficeKeyViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansLiveOfficeKeyViewTable(); }

      new public PoliticiansLiveOfficeKeyViewRow NewRow() { return (PoliticiansLiveOfficeKeyViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansLiveOfficeKeyViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansLiveOfficeKeyViewRow); }

      public void RemoveRow(PoliticiansLiveOfficeKeyViewRow row) { this.Rows.Remove(row); }

      public PoliticiansLiveOfficeKeyViewRow NewRow(String politicianKey, String liveOfficeKeyAndStatus)
      {
        PoliticiansLiveOfficeKeyViewRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.LiveOfficeKeyAndStatus = liveOfficeKeyAndStatus;
        return row;
      }

      public void AddRow(String politicianKey, String liveOfficeKeyAndStatus)
      {
        PoliticiansLiveOfficeKeyViewRow row = NewRow(politicianKey, liveOfficeKeyAndStatus);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn LiveOfficeKeyAndStatusColumn { get { return this.Columns["LiveOfficeKeyAndStatus"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LiveOfficeKeyAndStatus", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
      }

      public PoliticiansLiveOfficeKeyViewTable() : this(ColumnSet.All) { }

      public PoliticiansLiveOfficeKeyViewTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansLiveOfficeKeyView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansLiveOfficeKeyViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansLiveOfficeKeyView
    {
      public const string TableName = "PoliticiansLiveOfficeKeyView";

      public enum Column { PoliticianKey, LiveOfficeKeyAndStatus }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.LiveOfficeKeyAndStatus, "LiveOfficeKeyAndStatus" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansLiveOfficeKeyView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView";
        }
      }

      public static PoliticiansLiveOfficeKeyViewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      public static PoliticiansLiveOfficeKeyViewTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansLiveOfficeKeyViewTable FillTable(DbCommand command, PoliticiansLiveOfficeKeyViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansLiveOfficeKeyViewTable table = new PoliticiansLiveOfficeKeyViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string LiveOfficeKeyAndStatusColumnName { get { return "LiveOfficeKeyAndStatus"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int LiveOfficeKeyAndStatusMaxLength { get { return 200; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansLiveOfficeKeyViewTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PoliticianKey,LiveOfficeKeyAndStatus FROM PoliticiansLiveOfficeKeyView WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansLiveOfficeKeyViewTable.ColumnSet.All);
      }

      public static PoliticiansLiveOfficeKeyViewTable GetData(String politicianKey, int commandTimeout = -1)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static string GetSelectCommandText(PoliticiansLiveOfficeKeyViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansLiveOfficeKeyViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansLiveOfficeKeyView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.PoliticiansLiveOfficeKeyView

    #region vote.Questions

    public partial class QuestionsRow : DataRow
    {
      internal QuestionsRow(DataRowBuilder rb) : base(rb) {}

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public Int32 QuestionOrder
      {
        get { return (Int32) this["QuestionOrder"]; }
        set { this["QuestionOrder"] = value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public Boolean IsQuestionOmit
      {
        get { return (Boolean) this["IsQuestionOmit"]; }
        set { this["IsQuestionOmit"] = value; }
      }
    }

    [Serializable]
    public partial class QuestionsTable : TypedTableBase<QuestionsRow>
    {
      public QuestionsRow this[int index] { get { return (QuestionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(QuestionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new QuestionsTable(); }

      new public QuestionsRow NewRow() { return (QuestionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new QuestionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(QuestionsRow); }

      public void RemoveRow(QuestionsRow row) { this.Rows.Remove(row); }

      public QuestionsRow NewRow(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit)
      {
        QuestionsRow row = NewRow();
        row.QuestionKey = questionKey;
        row.IssueKey = issueKey;
        row.QuestionOrder = questionOrder;
        row.Question = question;
        row.IsQuestionOmit = isQuestionOmit;
        return row;
      }

      public void AddRow(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit)
      {
        QuestionsRow row = NewRow(questionKey, issueKey, questionOrder, question, isQuestionOmit);
        AddRow(row);
      }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn QuestionOrderColumn { get { return this.Columns["QuestionOrder"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn IsQuestionOmitColumn { get { return this.Columns["IsQuestionOmit"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 24;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionOrder", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsQuestionOmit", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public QuestionsTable() : this(ColumnSet.All) { }

      public QuestionsTable(ColumnSet columnSet)
      {
        this.TableName = "Questions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected QuestionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Questions
    {
      public const string TableName = "Questions";

      public enum Column { QuestionKey, IssueKey, QuestionOrder, Question, IsQuestionOmit }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.QuestionKey, "QuestionKey" },
        { Column.IssueKey, "IssueKey" },
        { Column.QuestionOrder, "QuestionOrder" },
        { Column.Question, "Question" },
        { Column.IsQuestionOmit, "IsQuestionOmit" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String questionKey, String issueKey, Int32 questionOrder, String question, Boolean isQuestionOmit, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Questions (QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit) VALUES (@QuestionKey,@IssueKey,@QuestionOrder,@Question,@IsQuestionOmit)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "QuestionOrder", questionOrder);
        VoteDb.AddCommandParameter(cmd, "Question", question);
        VoteDb.AddCommandParameter(cmd, "IsQuestionOmit", isQuestionOmit);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions";
        }
      }

      public static QuestionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static QuestionsTable FillTable(DbCommand command)
      {
        return FillTable(command, QuestionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static QuestionsTable FillTable(DbCommand command, QuestionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          QuestionsTable table = new QuestionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(QuestionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, QuestionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(QuestionsTable table, QuestionsTable.ColumnSet columnSet = QuestionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string QuestionOrderColumnName { get { return "QuestionOrder"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string IsQuestionOmitColumnName { get { return "IsQuestionOmit"; } }

      public static int QuestionKeyMaxLength { get { return 30; } }

      public static int IssueKeyMaxLength { get { return 24; } }

      public static int QuestionMaxLength { get { return 150; } }

      public static bool QuestionKeyExists(String questionKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetQuestionKeyByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT QuestionKey FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetQuestionOrderByQuestionKey(String questionKey)
      {
        return _GetQuestionOrderByQuestionKey(questionKey, null);
      }

      public static Int32 GetQuestionOrderByQuestionKey(String questionKey, Int32 defaultValue)
      {
        return _GetQuestionOrderByQuestionKey(questionKey, defaultValue).Value;
      }

      private static Int32? _GetQuestionOrderByQuestionKey(String questionKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT QuestionOrder FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetQuestionByQuestionKey(String questionKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Question FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsQuestionOmitByQuestionKey(String questionKey)
      {
        return _GetIsQuestionOmitByQuestionKey(questionKey, null);
      }

      public static Boolean GetIsQuestionOmitByQuestionKey(String questionKey, Boolean defaultValue)
      {
        return _GetIsQuestionOmitByQuestionKey(questionKey, defaultValue).Value;
      }

      private static Boolean? _GetIsQuestionOmitByQuestionKey(String questionKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsQuestionOmit FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByQuestionKey(Column _column, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Questions WHERE QuestionKey=@QuestionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsTable GetDataByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static int UpdateQuestionKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET QuestionKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET IssueKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrderByQuestionKey(Int32 newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET QuestionOrder=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET Question=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsQuestionOmitByQuestionKey(Boolean newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET IsQuestionOmit=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionKey(Column _column, object newValue, String questionKey)
      {
        string cmdText = "UPDATE Questions SET {0}=@newValue WHERE QuestionKey=@QuestionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Questions WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIssueKey(String issueKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIssueKey(Column _column, String issueKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Questions WHERE IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static QuestionsTable GetDataByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT QuestionKey,IssueKey,QuestionOrder,Question,IsQuestionOmit FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return FillTable(cmd, QuestionsTable.ColumnSet.All);
      }

      public static int UpdateQuestionKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET QuestionKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET IssueKey=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionOrderByIssueKey(Int32 newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET QuestionOrder=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByIssueKey(String newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET Question=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsQuestionOmitByIssueKey(Boolean newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET IsQuestionOmit=@newValue WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIssueKey(Column _column, object newValue, String issueKey)
      {
        string cmdText = "UPDATE Questions SET {0}=@newValue WHERE IssueKey=@IssueKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIssueKey(String issueKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Questions WHERE IssueKey=@IssueKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(QuestionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case QuestionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Questions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Questions

    #region vote.Referendums

    public partial class ReferendumsRow : DataRow
    {
      internal ReferendumsRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String ReferendumKey
      {
        get { return this["ReferendumKey"] as String; }
        set { if (value == null) this["ReferendumKey"] = DBNull.Value; else this["ReferendumKey"] = value; }
      }

      public String ElectionKeyState
      {
        get { return this["ElectionKeyState"] as String; }
        set { if (value == null) this["ElectionKeyState"] = DBNull.Value; else this["ElectionKeyState"] = value; }
      }

      public String ElectionKeyCounty
      {
        get { return this["ElectionKeyCounty"] as String; }
        set { if (value == null) this["ElectionKeyCounty"] = DBNull.Value; else this["ElectionKeyCounty"] = value; }
      }

      public String ElectionKeyLocal
      {
        get { return this["ElectionKeyLocal"] as String; }
        set { if (value == null) this["ElectionKeyLocal"] = DBNull.Value; else this["ElectionKeyLocal"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public Int32 OrderOnBallot
      {
        get { return (Int32) this["OrderOnBallot"]; }
        set { this["OrderOnBallot"] = value; }
      }

      public String ReferendumTitle
      {
        get { return this["ReferendumTitle"] as String; }
        set { if (value == null) this["ReferendumTitle"] = DBNull.Value; else this["ReferendumTitle"] = value; }
      }

      public String ReferendumDescription
      {
        get { return this["ReferendumDesc"] as String; }
        set { if (value == null) this["ReferendumDesc"] = DBNull.Value; else this["ReferendumDesc"] = value; }
      }

      public String ReferendumDetail
      {
        get { return this["ReferendumDetail"] as String; }
        set { if (value == null) this["ReferendumDetail"] = DBNull.Value; else this["ReferendumDetail"] = value; }
      }

      public String ReferendumDetailUrl
      {
        get { return this["ReferendumDetailUrl"] as String; }
        set { if (value == null) this["ReferendumDetailUrl"] = DBNull.Value; else this["ReferendumDetailUrl"] = value; }
      }

      public String ReferendumFullText
      {
        get { return this["ReferendumFullText"] as String; }
        set { if (value == null) this["ReferendumFullText"] = DBNull.Value; else this["ReferendumFullText"] = value; }
      }

      public String ReferendumFullTextUrl
      {
        get { return this["ReferendumFullTextUrl"] as String; }
        set { if (value == null) this["ReferendumFullTextUrl"] = DBNull.Value; else this["ReferendumFullTextUrl"] = value; }
      }

      public Boolean IsReferendumTagForDeletion
      {
        get { return (Boolean) this["IsReferendumTagForDeletion"]; }
        set { this["IsReferendumTagForDeletion"] = value; }
      }

      public Boolean IsPassed
      {
        get { return (Boolean) this["IsPassed"]; }
        set { this["IsPassed"] = value; }
      }

      public Boolean IsResultRecorded
      {
        get { return (Boolean) this["IsResultRecorded"]; }
        set { this["IsResultRecorded"] = value; }
      }
    }

    [Serializable]
    public partial class ReferendumsTable : TypedTableBase<ReferendumsRow>
    {
      public ReferendumsRow this[int index] { get { return (ReferendumsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ReferendumsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ReferendumsTable(); }

      new public ReferendumsRow NewRow() { return (ReferendumsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ReferendumsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ReferendumsRow); }

      public void RemoveRow(ReferendumsRow row) { this.Rows.Remove(row); }

      public ReferendumsRow NewRow(String electionKey, String referendumKey, String electionKeyState, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow();
        row.ElectionKey = electionKey;
        row.ReferendumKey = referendumKey;
        row.ElectionKeyState = electionKeyState;
        row.ElectionKeyCounty = electionKeyCounty;
        row.ElectionKeyLocal = electionKeyLocal;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OrderOnBallot = orderOnBallot;
        row.ReferendumTitle = referendumTitle;
        row.ReferendumDescription = referendumDescription;
        row.ReferendumDetail = referendumDetail;
        row.ReferendumDetailUrl = referendumDetailUrl;
        row.ReferendumFullText = referendumFullText;
        row.ReferendumFullTextUrl = referendumFullTextUrl;
        row.IsReferendumTagForDeletion = isReferendumTagForDeletion;
        row.IsPassed = isPassed;
        row.IsResultRecorded = isResultRecorded;
        return row;
      }

      public void AddRow(String electionKey, String referendumKey, String electionKeyState, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded)
      {
        ReferendumsRow row = NewRow(electionKey, referendumKey, electionKeyState, electionKeyCounty, electionKeyLocal, stateCode, countyCode, localCode, orderOnBallot, referendumTitle, referendumDescription, referendumDetail, referendumDetailUrl, referendumFullText, referendumFullTextUrl, isReferendumTagForDeletion, isPassed, isResultRecorded);
        AddRow(row);
      }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn ReferendumKeyColumn { get { return this.Columns["ReferendumKey"]; } }

      public DataColumn ElectionKeyStateColumn { get { return this.Columns["ElectionKeyState"]; } }

      public DataColumn ElectionKeyCountyColumn { get { return this.Columns["ElectionKeyCounty"]; } }

      public DataColumn ElectionKeyLocalColumn { get { return this.Columns["ElectionKeyLocal"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn OrderOnBallotColumn { get { return this.Columns["OrderOnBallot"]; } }

      public DataColumn ReferendumTitleColumn { get { return this.Columns["ReferendumTitle"]; } }

      public DataColumn ReferendumDescriptionColumn { get { return this.Columns["ReferendumDesc"]; } }

      public DataColumn ReferendumDetailColumn { get { return this.Columns["ReferendumDetail"]; } }

      public DataColumn ReferendumDetailUrlColumn { get { return this.Columns["ReferendumDetailUrl"]; } }

      public DataColumn ReferendumFullTextColumn { get { return this.Columns["ReferendumFullText"]; } }

      public DataColumn ReferendumFullTextUrlColumn { get { return this.Columns["ReferendumFullTextUrl"]; } }

      public DataColumn IsReferendumTagForDeletionColumn { get { return this.Columns["IsReferendumTagForDeletion"]; } }

      public DataColumn IsPassedColumn { get { return this.Columns["IsPassed"]; } }

      public DataColumn IsResultRecordedColumn { get { return this.Columns["IsResultRecorded"]; } }

      public enum ColumnSet { All, Cache, Summary, List }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyState", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyCounty", typeof(String));
        _column.MaxLength = 15;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyLocal", typeof(String));
        _column.MaxLength = 17;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetailUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullText", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullTextUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsReferendumTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCacheColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDetailUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullText", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumFullTextUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitSummaryColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumDesc", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitListColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ReferendumKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReferendumTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsReferendumTagForDeletion", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsPassed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsResultRecorded", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ReferendumsTable() : this(ColumnSet.All) { }

      public ReferendumsTable(ColumnSet columnSet)
      {
        this.TableName = "Referendums";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cache:
            InitCacheColumns();
            break;

          case ColumnSet.Summary:
            InitSummaryColumns();
            break;

          case ColumnSet.List:
            InitListColumns();
            break;
        }
      }

      protected ReferendumsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Referendums
    {
      public const string TableName = "Referendums";

      public enum Column { ElectionKey, ReferendumKey, ElectionKeyState, ElectionKeyCounty, ElectionKeyLocal, StateCode, CountyCode, LocalCode, OrderOnBallot, ReferendumTitle, ReferendumDescription, ReferendumDetail, ReferendumDetailUrl, ReferendumFullText, ReferendumFullTextUrl, IsReferendumTagForDeletion, IsPassed, IsResultRecorded }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionKey, "ElectionKey" },
        { Column.ReferendumKey, "ReferendumKey" },
        { Column.ElectionKeyState, "ElectionKeyState" },
        { Column.ElectionKeyCounty, "ElectionKeyCounty" },
        { Column.ElectionKeyLocal, "ElectionKeyLocal" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.OrderOnBallot, "OrderOnBallot" },
        { Column.ReferendumTitle, "ReferendumTitle" },
        { Column.ReferendumDescription, "ReferendumDesc" },
        { Column.ReferendumDetail, "ReferendumDetail" },
        { Column.ReferendumDetailUrl, "ReferendumDetailUrl" },
        { Column.ReferendumFullText, "ReferendumFullText" },
        { Column.ReferendumFullTextUrl, "ReferendumFullTextUrl" },
        { Column.IsReferendumTagForDeletion, "IsReferendumTagForDeletion" },
        { Column.IsPassed, "IsPassed" },
        { Column.IsResultRecorded, "IsResultRecorded" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionKey, String referendumKey, String electionKeyState, String electionKeyCounty, String electionKeyLocal, String stateCode, String countyCode, String localCode, Int32 orderOnBallot, String referendumTitle, String referendumDescription, String referendumDetail, String referendumDetailUrl, String referendumFullText, String referendumFullTextUrl, Boolean isReferendumTagForDeletion, Boolean isPassed, Boolean isResultRecorded, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Referendums (ElectionKey,ReferendumKey,ElectionKeyState,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded) VALUES (@ElectionKey,@ReferendumKey,@ElectionKeyState,@ElectionKeyCounty,@ElectionKeyLocal,@StateCode,@CountyCode,@LocalCode,@OrderOnBallot,@ReferendumTitle,@ReferendumDescription,@ReferendumDetail,@ReferendumDetailUrl,@ReferendumFullText,@ReferendumFullTextUrl,@IsReferendumTagForDeletion,@IsPassed,@IsResultRecorded)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyState", electionKeyState);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyCounty", electionKeyCounty);
        VoteDb.AddCommandParameter(cmd, "ElectionKeyLocal", electionKeyLocal);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        VoteDb.AddCommandParameter(cmd, "ReferendumTitle", referendumTitle);
        VoteDb.AddCommandParameter(cmd, "ReferendumDescription", referendumDescription);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetail", referendumDetail);
        VoteDb.AddCommandParameter(cmd, "ReferendumDetailUrl", referendumDetailUrl);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullText", referendumFullText);
        VoteDb.AddCommandParameter(cmd, "ReferendumFullTextUrl", referendumFullTextUrl);
        VoteDb.AddCommandParameter(cmd, "IsReferendumTagForDeletion", isReferendumTagForDeletion);
        VoteDb.AddCommandParameter(cmd, "IsPassed", isPassed);
        VoteDb.AddCommandParameter(cmd, "IsResultRecorded", isResultRecorded);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionKey,ReferendumKey,ElectionKeyState,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ReferendumKey,ElectionKeyState,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static ReferendumsTable FillTable(DbCommand command)
      {
        return FillTable(command, ReferendumsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ReferendumsTable FillTable(DbCommand command, ReferendumsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          ReferendumsTable table = new ReferendumsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ReferendumsTable table, ReferendumsTable.ColumnSet columnSet = ReferendumsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string ReferendumKeyColumnName { get { return "ReferendumKey"; } }

      public static string ElectionKeyStateColumnName { get { return "ElectionKeyState"; } }

      public static string ElectionKeyCountyColumnName { get { return "ElectionKeyCounty"; } }

      public static string ElectionKeyLocalColumnName { get { return "ElectionKeyLocal"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string OrderOnBallotColumnName { get { return "OrderOnBallot"; } }

      public static string ReferendumTitleColumnName { get { return "ReferendumTitle"; } }

      public static string ReferendumDescriptionColumnName { get { return "ReferendumDesc"; } }

      public static string ReferendumDetailColumnName { get { return "ReferendumDetail"; } }

      public static string ReferendumDetailUrlColumnName { get { return "ReferendumDetailUrl"; } }

      public static string ReferendumFullTextColumnName { get { return "ReferendumFullText"; } }

      public static string ReferendumFullTextUrlColumnName { get { return "ReferendumFullTextUrl"; } }

      public static string IsReferendumTagForDeletionColumnName { get { return "IsReferendumTagForDeletion"; } }

      public static string IsPassedColumnName { get { return "IsPassed"; } }

      public static string IsResultRecordedColumnName { get { return "IsResultRecorded"; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int ReferendumKeyMaxLength { get { return 150; } }

      public static int ElectionKeyStateMaxLength { get { return 12; } }

      public static int ElectionKeyCountyMaxLength { get { return 15; } }

      public static int ElectionKeyLocalMaxLength { get { return 17; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int ReferendumTitleMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDescriptionMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDetailMaxLength { get { return int.MaxValue; } }

      public static int ReferendumDetailUrlMaxLength { get { return int.MaxValue; } }

      public static int ReferendumFullTextMaxLength { get { return int.MaxValue; } }

      public static int ReferendumFullTextUrlMaxLength { get { return int.MaxValue; } }

      public static int CountByElectionKey(String electionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKey(Column _column, String electionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ReferendumsTable GetDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ReferendumKey,ElectionKeyState,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static int UpdateElectionKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKeyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyStateByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCountyByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocalByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByElectionKey(Int32 newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitleByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescriptionByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrlByElectionKey(String newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletionByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecordedByElectionKey(Boolean newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE ElectionKey=@ElectionKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKey(Column _column, object newValue, String electionKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE ElectionKey=@ElectionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionKeyReferendumKeyExists(String electionKey, String referendumKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionKeyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumKeyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumKey FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumKeyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetElectionKeyStateByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyState FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyState(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyStateByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetElectionKeyCountyByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyCounty FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyCounty(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyCountyByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetElectionKeyLocalByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyLocal FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyLocal(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetElectionKeyLocalByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetStateCodeByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetStateCodeByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetCountyCodeByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCode(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetCountyCodeByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetLocalCodeByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCode(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetLocalCodeByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static Int32? GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Int32? GetOrderOnBallot(String electionKey, String referendumKey)
      {
        return GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Int32 GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Int32 GetOrderOnBallot(String electionKey, String referendumKey, Int32 defaultValue)
      {
        return GetOrderOnBallotByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Int32? _GetOrderOnBallotByElectionKeyReferendumKey(String electionKey, String referendumKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetReferendumTitleByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumTitle FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumTitle(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumTitleByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDescriptionByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDesc FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDescription(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDescriptionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDetailByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetail FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetail(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDetailByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumDetailUrlByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumDetailUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumDetailUrl(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumDetailUrlByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumFullTextByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullText FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullText(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumFullTextByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static String GetReferendumFullTextUrlByElectionKeyReferendumKey(String electionKey, String referendumKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReferendumFullTextUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReferendumFullTextUrl(String electionKey, String referendumKey, String defaultValue = null)
      {
        return GetReferendumFullTextUrlByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      public static Boolean? GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsReferendumTagForDeletion(String electionKey, String referendumKey)
      {
        return GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsReferendumTagForDeletion(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsReferendumTagForDeletionByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsReferendumTagForDeletionByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsReferendumTagForDeletion FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsPassed(String electionKey, String referendumKey)
      {
        return GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsPassed(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsPassedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsPassedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsPassed FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey)
      {
        return _GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, null);
      }

      public static Boolean? GetIsResultRecorded(String electionKey, String referendumKey)
      {
        return GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey);
      }

      public static Boolean GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return _GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue).Value;
      }

      public static Boolean GetIsResultRecorded(String electionKey, String referendumKey, Boolean defaultValue)
      {
        return GetIsResultRecordedByElectionKeyReferendumKey(electionKey, referendumKey, defaultValue);
      }

      private static Boolean? _GetIsResultRecordedByElectionKeyReferendumKey(String electionKey, String referendumKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByElectionKeyReferendumKey(Column _column, String electionKey, String referendumKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionKey, String referendumKey)
      {
        return GetColumnByElectionKeyReferendumKey(_column, electionKey, referendumKey);
      }

      public static ReferendumsTable GetDataByElectionKeyReferendumKey(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ReferendumKey,ElectionKeyState,ElectionKeyCounty,ElectionKeyLocal,StateCode,CountyCode,LocalCode,OrderOnBallot,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.All);
      }

      public static ReferendumsTable GetData(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        return GetDataByElectionKeyReferendumKey(electionKey, referendumKey, commandTimeout);
      }

      public static int UpdateElectionKeyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKey(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumKeyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumKey=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumKeyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateElectionKeyStateByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyState=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyState(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyStateByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateElectionKeyCountyByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyCounty=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyCounty(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyCountyByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateElectionKeyLocalByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ElectionKeyLocal=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyLocal(String newValue, String electionKey, String referendumKey)
      {
        return UpdateElectionKeyLocalByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateStateCodeByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionKey, String referendumKey)
      {
        return UpdateStateCodeByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateCountyCodeByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCode(String newValue, String electionKey, String referendumKey)
      {
        return UpdateCountyCodeByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateLocalCodeByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCode(String newValue, String electionKey, String referendumKey)
      {
        return UpdateLocalCodeByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateOrderOnBallotByElectionKeyReferendumKey(Int32 newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET OrderOnBallot=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallot(Int32 newValue, String electionKey, String referendumKey)
      {
        return UpdateOrderOnBallotByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumTitleByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumTitle=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumTitle(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumTitleByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDescriptionByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDesc=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDescription(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDescriptionByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDetailByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetail=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetail(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDetailByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumDetailUrlByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumDetailUrl=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumDetailUrl(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumDetailUrlByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumFullTextByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullText=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullText(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumFullTextByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateReferendumFullTextUrlByElectionKeyReferendumKey(String newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET ReferendumFullTextUrl=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReferendumFullTextUrl(String newValue, String electionKey, String referendumKey)
      {
        return UpdateReferendumFullTextUrlByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsReferendumTagForDeletionByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsReferendumTagForDeletion=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsReferendumTagForDeletion(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsReferendumTagForDeletionByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsPassedByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsPassed=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsPassed(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsPassedByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateIsResultRecordedByElectionKeyReferendumKey(Boolean newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET IsResultRecorded=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsResultRecorded(Boolean newValue, String electionKey, String referendumKey)
      {
        return UpdateIsResultRecordedByElectionKeyReferendumKey(newValue, electionKey, referendumKey);
      }

      public static int UpdateColumnByElectionKeyReferendumKey(Column _column, object newValue, String electionKey, String referendumKey)
      {
        string cmdText = "UPDATE Referendums SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionKey, String referendumKey)
      {
         return UpdateColumnByElectionKeyReferendumKey(_column, newValue, electionKey, referendumKey);
      }

      public static string SelectCacheCommandText
      {
        get
        {
          return "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllCacheData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Cache);
      }

      public static void UpdateCache(ReferendumsTable table)
      {
        UpdateCache(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCache(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.Cache, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ReferendumsTable GetCacheDataByElectionKeyReferendumKey(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,ReferendumTitle,ReferendumDesc,ReferendumDetail,ReferendumDetailUrl,ReferendumFullText,ReferendumFullTextUrl FROM Referendums WHERE ElectionKey=@ElectionKey AND ReferendumKey=@ReferendumKey";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteDb.AddCommandParameter(cmd, "ReferendumKey", referendumKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Cache);
      }

      public static ReferendumsTable GetCacheData(String electionKey, String referendumKey, int commandTimeout = -1)
      {
        return GetCacheDataByElectionKeyReferendumKey(electionKey, referendumKey, commandTimeout);
      }

      public static string SelectSummaryCommandText
      {
        get
        {
          return "SELECT ElectionKey,ReferendumKey,ReferendumTitle,ReferendumDesc,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllSummaryData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionKey,ReferendumKey,ReferendumTitle,ReferendumDesc,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.Summary);
      }

      public static void UpdateSummary(ReferendumsTable table)
      {
        UpdateSummary(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateSummary(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.Summary, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectListCommandText
      {
        get
        {
          return "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        }
      }

      public static ReferendumsTable GetAllListData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ReferendumsTable.ColumnSet.List);
      }

      public static void UpdateList(ReferendumsTable table)
      {
        UpdateList(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateList(ReferendumsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ReferendumsTable.ColumnSet.List, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ReferendumsTable GetListDataByElectionKey(String electionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ReferendumKey,OrderOnBallot,ReferendumTitle,IsReferendumTagForDeletion,IsPassed,IsResultRecorded FROM Referendums WHERE ElectionKey=@ElectionKey ORDER BY OrderOnBallot";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        return FillTable(cmd, ReferendumsTable.ColumnSet.List);
      }

      public static ReferendumsTable GetListData(String electionKey, int commandTimeout = -1)
      {
        return GetListDataByElectionKey(electionKey, commandTimeout);
      }

      public static string GetSelectCommandText(ReferendumsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ReferendumsTable.ColumnSet.All:
            return SelectAllCommandText;

          case ReferendumsTable.ColumnSet.Cache:
            return SelectCacheCommandText;

          case ReferendumsTable.ColumnSet.Summary:
            return SelectSummaryCommandText;

          case ReferendumsTable.ColumnSet.List:
            return SelectListCommandText;

          default:
            return null;
        }
      }

      static Referendums()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Referendums

    #region vote.Security

    public partial class SecurityRow : DataRow
    {
      internal SecurityRow(DataRowBuilder rb) : base(rb) {}

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserPassword
      {
        get { return this["UserPassword"] as String; }
        set { if (value == null) this["UserPassword"] = DBNull.Value; else this["UserPassword"] = value; }
      }

      public String UserEmail
      {
        get { return this["UserEmail"] as String; }
        set { if (value == null) this["UserEmail"] = DBNull.Value; else this["UserEmail"] = value; }
      }

      public String UserEmails
      {
        get { return this["UserEmails"] as String; }
        set { if (value == null) this["UserEmails"] = DBNull.Value; else this["UserEmails"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String UserCountyCode
      {
        get { return this["UserCountyCode"] as String; }
        set { if (value == null) this["UserCountyCode"] = DBNull.Value; else this["UserCountyCode"] = value; }
      }

      public String UserLocalCode
      {
        get { return this["UserLocalCode"] as String; }
        set { if (value == null) this["UserLocalCode"] = DBNull.Value; else this["UserLocalCode"] = value; }
      }

      public String UserDesignCode
      {
        get { return this["UserDesignCode"] as String; }
        set { if (value == null) this["UserDesignCode"] = DBNull.Value; else this["UserDesignCode"] = value; }
      }

      public String UserOrganizationCode
      {
        get { return this["UserOrganizationCode"] as String; }
        set { if (value == null) this["UserOrganizationCode"] = DBNull.Value; else this["UserOrganizationCode"] = value; }
      }

      public String UserIssuesCode
      {
        get { return this["UserIssuesCode"] as String; }
        set { if (value == null) this["UserIssuesCode"] = DBNull.Value; else this["UserIssuesCode"] = value; }
      }

      public String UserPartyKey
      {
        get { return this["UserPartyKey"] as String; }
        set { if (value == null) this["UserPartyKey"] = DBNull.Value; else this["UserPartyKey"] = value; }
      }

      public Boolean UserIsHasDataEntryAuthority
      {
        get { return (Boolean) this["UserIsHasDataEntryAuthority"]; }
        set { this["UserIsHasDataEntryAuthority"] = value; }
      }

      public Boolean IsSuperUser
      {
        get { return (Boolean) this["IsSuperUser"]; }
        set { this["IsSuperUser"] = value; }
      }
    }

    [Serializable]
    public partial class SecurityTable : TypedTableBase<SecurityRow>
    {
      public SecurityRow this[int index] { get { return (SecurityRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SecurityRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SecurityTable(); }

      new public SecurityRow NewRow() { return (SecurityRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SecurityRow(rb); }

      protected override Type GetRowType()
      { return typeof(SecurityRow); }

      public void RemoveRow(SecurityRow row) { this.Rows.Remove(row); }

      public SecurityRow NewRow(String userSecurity, String userName, String userPassword, String userEmail, String userEmails, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, Boolean userIsHasDataEntryAuthority, Boolean isSuperUser)
      {
        SecurityRow row = NewRow();
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.UserPassword = userPassword;
        row.UserEmail = userEmail;
        row.UserEmails = userEmails;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalCode = userLocalCode;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserIsHasDataEntryAuthority = userIsHasDataEntryAuthority;
        row.IsSuperUser = isSuperUser;
        return row;
      }

      public void AddRow(String userSecurity, String userName, String userPassword, String userEmail, String userEmails, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, Boolean userIsHasDataEntryAuthority, Boolean isSuperUser)
      {
        SecurityRow row = NewRow(userSecurity, userName, userPassword, userEmail, userEmails, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userIsHasDataEntryAuthority, isSuperUser);
        AddRow(row);
      }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserPasswordColumn { get { return this.Columns["UserPassword"]; } }

      public DataColumn UserEmailColumn { get { return this.Columns["UserEmail"]; } }

      public DataColumn UserEmailsColumn { get { return this.Columns["UserEmails"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn UserCountyCodeColumn { get { return this.Columns["UserCountyCode"]; } }

      public DataColumn UserLocalCodeColumn { get { return this.Columns["UserLocalCode"]; } }

      public DataColumn UserDesignCodeColumn { get { return this.Columns["UserDesignCode"]; } }

      public DataColumn UserOrganizationCodeColumn { get { return this.Columns["UserOrganizationCode"]; } }

      public DataColumn UserIssuesCodeColumn { get { return this.Columns["UserIssuesCode"]; } }

      public DataColumn UserPartyKeyColumn { get { return this.Columns["UserPartyKey"]; } }

      public DataColumn UserIsHasDataEntryAuthorityColumn { get { return this.Columns["UserIsHasDataEntryAuthority"]; } }

      public DataColumn IsSuperUserColumn { get { return this.Columns["IsSuperUser"]; } }

      public enum ColumnSet { All, Email }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPassword", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmails", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserLocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserDesignCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserIssuesCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserIsHasDataEntryAuthority", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSuperUser", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitEmailColumns()
      {
        DataColumn _column;
        _column = new DataColumn("UserEmail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserEmails", typeof(String));
        base.Columns.Add(_column);
      }

      public SecurityTable() : this(ColumnSet.All) { }

      public SecurityTable(ColumnSet columnSet)
      {
        this.TableName = "Security";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Email:
            InitEmailColumns();
            break;
        }
      }

      protected SecurityTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Security
    {
      public const string TableName = "Security";

      public enum Column { UserSecurity, UserName, UserPassword, UserEmail, UserEmails, UserStateCode, UserCountyCode, UserLocalCode, UserDesignCode, UserOrganizationCode, UserIssuesCode, UserPartyKey, UserIsHasDataEntryAuthority, IsSuperUser }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.UserPassword, "UserPassword" },
        { Column.UserEmail, "UserEmail" },
        { Column.UserEmails, "UserEmails" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.UserCountyCode, "UserCountyCode" },
        { Column.UserLocalCode, "UserLocalCode" },
        { Column.UserDesignCode, "UserDesignCode" },
        { Column.UserOrganizationCode, "UserOrganizationCode" },
        { Column.UserIssuesCode, "UserIssuesCode" },
        { Column.UserPartyKey, "UserPartyKey" },
        { Column.UserIsHasDataEntryAuthority, "UserIsHasDataEntryAuthority" },
        { Column.IsSuperUser, "IsSuperUser" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserIsHasDataEntryAuthority,IsSuperUser FROM Security";
        }
      }

      public static SecurityTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserIsHasDataEntryAuthority,IsSuperUser FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SecurityTable.ColumnSet.All);
      }

      public static SecurityTable FillTable(DbCommand command)
      {
        return FillTable(command, SecurityTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SecurityTable FillTable(DbCommand command, SecurityTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          SecurityTable table = new SecurityTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserPasswordColumnName { get { return "UserPassword"; } }

      public static string UserEmailColumnName { get { return "UserEmail"; } }

      public static string UserEmailsColumnName { get { return "UserEmails"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string UserCountyCodeColumnName { get { return "UserCountyCode"; } }

      public static string UserLocalCodeColumnName { get { return "UserLocalCode"; } }

      public static string UserDesignCodeColumnName { get { return "UserDesignCode"; } }

      public static string UserOrganizationCodeColumnName { get { return "UserOrganizationCode"; } }

      public static string UserIssuesCodeColumnName { get { return "UserIssuesCode"; } }

      public static string UserPartyKeyColumnName { get { return "UserPartyKey"; } }

      public static string UserIsHasDataEntryAuthorityColumnName { get { return "UserIsHasDataEntryAuthority"; } }

      public static string IsSuperUserColumnName { get { return "IsSuperUser"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserPasswordMaxLength { get { return 50; } }

      public static int UserEmailMaxLength { get { return 200; } }

      public static int UserEmailsMaxLength { get { return int.MaxValue; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int UserCountyCodeMaxLength { get { return 3; } }

      public static int UserLocalCodeMaxLength { get { return 2; } }

      public static int UserDesignCodeMaxLength { get { return 50; } }

      public static int UserOrganizationCodeMaxLength { get { return 50; } }

      public static int UserIssuesCodeMaxLength { get { return 2; } }

      public static int UserPartyKeyMaxLength { get { return 5; } }

      public static bool UserNameExists(String userName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetUserSecurityByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurity(String userName, String defaultValue = null)
      {
        return GetUserSecurityByUserName(userName, defaultValue);
      }

      public static String GetUserNameByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserName(String userName, String defaultValue = null)
      {
        return GetUserNameByUserName(userName, defaultValue);
      }

      public static String GetUserPasswordByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPassword FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPassword(String userName, String defaultValue = null)
      {
        return GetUserPasswordByUserName(userName, defaultValue);
      }

      public static String GetUserEmailByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserEmail FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserEmail(String userName, String defaultValue = null)
      {
        return GetUserEmailByUserName(userName, defaultValue);
      }

      public static String GetUserEmailsByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserEmails FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserEmails(String userName, String defaultValue = null)
      {
        return GetUserEmailsByUserName(userName, defaultValue);
      }

      public static String GetUserStateCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCode(String userName, String defaultValue = null)
      {
        return GetUserStateCodeByUserName(userName, defaultValue);
      }

      public static String GetUserCountyCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserCountyCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserCountyCode(String userName, String defaultValue = null)
      {
        return GetUserCountyCodeByUserName(userName, defaultValue);
      }

      public static String GetUserLocalCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserLocalCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserLocalCode(String userName, String defaultValue = null)
      {
        return GetUserLocalCodeByUserName(userName, defaultValue);
      }

      public static String GetUserDesignCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserDesignCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserDesignCode(String userName, String defaultValue = null)
      {
        return GetUserDesignCodeByUserName(userName, defaultValue);
      }

      public static String GetUserOrganizationCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserOrganizationCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserOrganizationCode(String userName, String defaultValue = null)
      {
        return GetUserOrganizationCodeByUserName(userName, defaultValue);
      }

      public static String GetUserIssuesCodeByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserIssuesCode FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserIssuesCode(String userName, String defaultValue = null)
      {
        return GetUserIssuesCodeByUserName(userName, defaultValue);
      }

      public static String GetUserPartyKeyByUserName(String userName, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPartyKey FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPartyKey(String userName, String defaultValue = null)
      {
        return GetUserPartyKeyByUserName(userName, defaultValue);
      }

      public static Boolean? GetUserIsHasDataEntryAuthorityByUserName(String userName)
      {
        return _GetUserIsHasDataEntryAuthorityByUserName(userName, null);
      }

      public static Boolean? GetUserIsHasDataEntryAuthority(String userName)
      {
        return GetUserIsHasDataEntryAuthorityByUserName(userName);
      }

      public static Boolean GetUserIsHasDataEntryAuthorityByUserName(String userName, Boolean defaultValue)
      {
        return _GetUserIsHasDataEntryAuthorityByUserName(userName, defaultValue).Value;
      }

      public static Boolean GetUserIsHasDataEntryAuthority(String userName, Boolean defaultValue)
      {
        return GetUserIsHasDataEntryAuthorityByUserName(userName, defaultValue);
      }

      private static Boolean? _GetUserIsHasDataEntryAuthorityByUserName(String userName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT UserIsHasDataEntryAuthority FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsSuperUserByUserName(String userName)
      {
        return _GetIsSuperUserByUserName(userName, null);
      }

      public static Boolean? GetIsSuperUser(String userName)
      {
        return GetIsSuperUserByUserName(userName);
      }

      public static Boolean GetIsSuperUserByUserName(String userName, Boolean defaultValue)
      {
        return _GetIsSuperUserByUserName(userName, defaultValue).Value;
      }

      public static Boolean GetIsSuperUser(String userName, Boolean defaultValue)
      {
        return GetIsSuperUserByUserName(userName, defaultValue);
      }

      private static Boolean? _GetIsSuperUserByUserName(String userName, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSuperUser FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM Security WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String userName)
      {
        return GetColumnByUserName(_column, userName);
      }

      public static SecurityTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserSecurity,UserName,UserPassword,UserEmail,UserEmails,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserIsHasDataEntryAuthority,IsSuperUser FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, SecurityTable.ColumnSet.All);
      }

      public static SecurityTable GetData(String userName, int commandTimeout = -1)
      {
        return GetDataByUserName(userName, commandTimeout);
      }

      public static string SelectEmailCommandText
      {
        get
        {
          return "SELECT UserEmail,UserEmails FROM Security";
        }
      }

      public static SecurityTable GetAllEmailData(int commandTimeout = -1)
      {
        string cmdText = "SELECT UserEmail,UserEmails FROM Security";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SecurityTable.ColumnSet.Email);
      }

      public static SecurityTable GetEmailDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserEmail,UserEmails FROM Security WHERE UserName=@UserName";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, SecurityTable.ColumnSet.Email);
      }

      public static string GetSelectCommandText(SecurityTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SecurityTable.ColumnSet.All:
            return SelectAllCommandText;

          case SecurityTable.ColumnSet.Email:
            return SelectEmailCommandText;

          default:
            return null;
        }
      }

      static Security()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Security

    #region vote.Sitemap

    public partial class SitemapRow : DataRow
    {
      internal SitemapRow(DataRowBuilder rb) : base(rb) {}

      public String DomainDataCode
      {
        get { return this["DomainDataCode"] as String; }
        set { if (value == null) this["DomainDataCode"] = DBNull.Value; else this["DomainDataCode"] = value; }
      }

      public String DomainName
      {
        get { return this["DomainName"] as String; }
        set { if (value == null) this["DomainName"] = DBNull.Value; else this["DomainName"] = value; }
      }

      public Int64 UrlsDefault
      {
        get { return (Int64) this["UrlsDefault"]; }
        set { this["UrlsDefault"] = value; }
      }

      public Int64 UrlsElection
      {
        get { return (Int64) this["UrlsElection"]; }
        set { this["UrlsElection"] = value; }
      }

      public Int64 UrlsOfficials
      {
        get { return (Int64) this["UrlsOfficials"]; }
        set { this["UrlsOfficials"] = value; }
      }

      public Int64 UrlsIntro
      {
        get { return (Int64) this["UrlsIntro"]; }
        set { this["UrlsIntro"] = value; }
      }

      public Int64 UrlsPoliticianIssue
      {
        get { return (Int64) this["UrlsPoliticianIssue"]; }
        set { this["UrlsPoliticianIssue"] = value; }
      }

      public Int64 UrlsIssue
      {
        get { return (Int64) this["UrlsIssue"]; }
        set { this["UrlsIssue"] = value; }
      }

      public Int64 UrlsBallot
      {
        get { return (Int64) this["UrlsBallot"]; }
        set { this["UrlsBallot"] = value; }
      }

      public Int32 PriorityDefault
      {
        get { return (Int32) this["PriorityDefault"]; }
        set { this["PriorityDefault"] = value; }
      }

      public Int32 PriorityElection
      {
        get { return (Int32) this["PriorityElection"]; }
        set { this["PriorityElection"] = value; }
      }

      public Int32 PriorityOfficials
      {
        get { return (Int32) this["PriorityOfficials"]; }
        set { this["PriorityOfficials"] = value; }
      }

      public Int32 PriorityIntro
      {
        get { return (Int32) this["PriorityIntro"]; }
        set { this["PriorityIntro"] = value; }
      }

      public Int32 PriorityPoliticianIssue
      {
        get { return (Int32) this["PriorityPoliticianIssue"]; }
        set { this["PriorityPoliticianIssue"] = value; }
      }

      public Int32 PriorityIssue
      {
        get { return (Int32) this["PriorityIssue"]; }
        set { this["PriorityIssue"] = value; }
      }

      public Int32 PriorityBallot
      {
        get { return (Int32) this["PriorityBallot"]; }
        set { this["PriorityBallot"] = value; }
      }

      public String FrequencyDefault
      {
        get { return this["FrequencyDefault"] as String; }
        set { if (value == null) this["FrequencyDefault"] = DBNull.Value; else this["FrequencyDefault"] = value; }
      }

      public String FrequencyElection
      {
        get { return this["FrequencyElection"] as String; }
        set { if (value == null) this["FrequencyElection"] = DBNull.Value; else this["FrequencyElection"] = value; }
      }

      public String FrequencyOfficials
      {
        get { return this["FrequencyOfficials"] as String; }
        set { if (value == null) this["FrequencyOfficials"] = DBNull.Value; else this["FrequencyOfficials"] = value; }
      }

      public String FrequencyIntro
      {
        get { return this["FrequencyIntro"] as String; }
        set { if (value == null) this["FrequencyIntro"] = DBNull.Value; else this["FrequencyIntro"] = value; }
      }

      public String FrequencyPoliticianIssue
      {
        get { return this["FrequencyPoliticianIssue"] as String; }
        set { if (value == null) this["FrequencyPoliticianIssue"] = DBNull.Value; else this["FrequencyPoliticianIssue"] = value; }
      }

      public String FrequencyIssue
      {
        get { return this["FrequencyIssue"] as String; }
        set { if (value == null) this["FrequencyIssue"] = DBNull.Value; else this["FrequencyIssue"] = value; }
      }

      public String FrequencyBallot
      {
        get { return this["FrequencyBallot"] as String; }
        set { if (value == null) this["FrequencyBallot"] = DBNull.Value; else this["FrequencyBallot"] = value; }
      }

      public String ElectionDirectories
      {
        get { return this["ElectionDirectories"] as String; }
        set { if (value == null) this["ElectionDirectories"] = DBNull.Value; else this["ElectionDirectories"] = value; }
      }

      public String PoliticianElections
      {
        get { return this["PoliticianElections"] as String; }
        set { if (value == null) this["PoliticianElections"] = DBNull.Value; else this["PoliticianElections"] = value; }
      }

      public Boolean MustHavePicture
      {
        get { return (Boolean) this["MustHavePicture"]; }
        set { this["MustHavePicture"] = value; }
      }

      public Boolean MustHaveStatement
      {
        get { return (Boolean) this["MustHaveStatement"]; }
        set { this["MustHaveStatement"] = value; }
      }

      public Int32 MinimumCandidates
      {
        get { return (Int32) this["MinimumCandidates"]; }
        set { this["MinimumCandidates"] = value; }
      }

      public Int32 MinimumAnswers
      {
        get { return (Int32) this["MinimumAnswers"]; }
        set { this["MinimumAnswers"] = value; }
      }

      public Int32 FactorIssue
      {
        get { return (Int32) this["FactorIssue"]; }
        set { this["FactorIssue"] = value; }
      }

      public DateTime LastCreated
      {
        get { return (DateTime) this["LastCreated"]; }
        set { this["LastCreated"] = value; }
      }

      public Int64 RunTimeSeconds
      {
        get { return (Int64) this["RunTimeSeconds"]; }
        set { this["RunTimeSeconds"] = value; }
      }

      public String Ballots
      {
        get { return this["Ballots"] as String; }
        set { if (value == null) this["Ballots"] = DBNull.Value; else this["Ballots"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] SitemapXml
      {
        get { return this["SitemapXml"] as Byte[]; }
        set { if (value == null) this["SitemapXml"] = DBNull.Value; else this["SitemapXml"] = value; }
      }
    }

    [Serializable]
    public partial class SitemapTable : TypedTableBase<SitemapRow>
    {
      public SitemapRow this[int index] { get { return (SitemapRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(SitemapRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new SitemapTable(); }

      new public SitemapRow NewRow() { return (SitemapRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new SitemapRow(rb); }

      protected override Type GetRowType()
      { return typeof(SitemapRow); }

      public void RemoveRow(SitemapRow row) { this.Rows.Remove(row); }

      public SitemapRow NewRow(String domainDataCode, String domainName, Int64 urlsDefault, Int64 urlsElection, Int64 urlsOfficials, Int64 urlsIntro, Int64 urlsPoliticianIssue, Int64 urlsIssue, Int64 urlsBallot, Int32 priorityDefault, Int32 priorityElection, Int32 priorityOfficials, Int32 priorityIntro, Int32 priorityPoliticianIssue, Int32 priorityIssue, Int32 priorityBallot, String frequencyDefault, String frequencyElection, String frequencyOfficials, String frequencyIntro, String frequencyPoliticianIssue, String frequencyIssue, String frequencyBallot, String electionDirectories, String politicianElections, Boolean mustHavePicture, Boolean mustHaveStatement, Int32 minimumCandidates, Int32 minimumAnswers, Int32 factorIssue, DateTime lastCreated, Int64 runTimeSeconds, String ballots, Byte[] sitemapXml)
      {
        SitemapRow row = NewRow();
        row.DomainDataCode = domainDataCode;
        row.DomainName = domainName;
        row.UrlsDefault = urlsDefault;
        row.UrlsElection = urlsElection;
        row.UrlsOfficials = urlsOfficials;
        row.UrlsIntro = urlsIntro;
        row.UrlsPoliticianIssue = urlsPoliticianIssue;
        row.UrlsIssue = urlsIssue;
        row.UrlsBallot = urlsBallot;
        row.PriorityDefault = priorityDefault;
        row.PriorityElection = priorityElection;
        row.PriorityOfficials = priorityOfficials;
        row.PriorityIntro = priorityIntro;
        row.PriorityPoliticianIssue = priorityPoliticianIssue;
        row.PriorityIssue = priorityIssue;
        row.PriorityBallot = priorityBallot;
        row.FrequencyDefault = frequencyDefault;
        row.FrequencyElection = frequencyElection;
        row.FrequencyOfficials = frequencyOfficials;
        row.FrequencyIntro = frequencyIntro;
        row.FrequencyPoliticianIssue = frequencyPoliticianIssue;
        row.FrequencyIssue = frequencyIssue;
        row.FrequencyBallot = frequencyBallot;
        row.ElectionDirectories = electionDirectories;
        row.PoliticianElections = politicianElections;
        row.MustHavePicture = mustHavePicture;
        row.MustHaveStatement = mustHaveStatement;
        row.MinimumCandidates = minimumCandidates;
        row.MinimumAnswers = minimumAnswers;
        row.FactorIssue = factorIssue;
        row.LastCreated = lastCreated;
        row.RunTimeSeconds = runTimeSeconds;
        row.Ballots = ballots;
        row.SitemapXml = sitemapXml;
        return row;
      }

      public void AddRow(String domainDataCode, String domainName, Int64 urlsDefault, Int64 urlsElection, Int64 urlsOfficials, Int64 urlsIntro, Int64 urlsPoliticianIssue, Int64 urlsIssue, Int64 urlsBallot, Int32 priorityDefault, Int32 priorityElection, Int32 priorityOfficials, Int32 priorityIntro, Int32 priorityPoliticianIssue, Int32 priorityIssue, Int32 priorityBallot, String frequencyDefault, String frequencyElection, String frequencyOfficials, String frequencyIntro, String frequencyPoliticianIssue, String frequencyIssue, String frequencyBallot, String electionDirectories, String politicianElections, Boolean mustHavePicture, Boolean mustHaveStatement, Int32 minimumCandidates, Int32 minimumAnswers, Int32 factorIssue, DateTime lastCreated, Int64 runTimeSeconds, String ballots, Byte[] sitemapXml)
      {
        SitemapRow row = NewRow(domainDataCode, domainName, urlsDefault, urlsElection, urlsOfficials, urlsIntro, urlsPoliticianIssue, urlsIssue, urlsBallot, priorityDefault, priorityElection, priorityOfficials, priorityIntro, priorityPoliticianIssue, priorityIssue, priorityBallot, frequencyDefault, frequencyElection, frequencyOfficials, frequencyIntro, frequencyPoliticianIssue, frequencyIssue, frequencyBallot, electionDirectories, politicianElections, mustHavePicture, mustHaveStatement, minimumCandidates, minimumAnswers, factorIssue, lastCreated, runTimeSeconds, ballots, sitemapXml);
        AddRow(row);
      }

      public DataColumn DomainDataCodeColumn { get { return this.Columns["DomainDataCode"]; } }

      public DataColumn DomainNameColumn { get { return this.Columns["DomainName"]; } }

      public DataColumn UrlsDefaultColumn { get { return this.Columns["UrlsDefault"]; } }

      public DataColumn UrlsElectionColumn { get { return this.Columns["UrlsElection"]; } }

      public DataColumn UrlsOfficialsColumn { get { return this.Columns["UrlsOfficials"]; } }

      public DataColumn UrlsIntroColumn { get { return this.Columns["UrlsIntro"]; } }

      public DataColumn UrlsPoliticianIssueColumn { get { return this.Columns["UrlsPoliticianIssue"]; } }

      public DataColumn UrlsIssueColumn { get { return this.Columns["UrlsIssue"]; } }

      public DataColumn UrlsBallotColumn { get { return this.Columns["UrlsBallot"]; } }

      public DataColumn PriorityDefaultColumn { get { return this.Columns["PriorityDefault"]; } }

      public DataColumn PriorityElectionColumn { get { return this.Columns["PriorityElection"]; } }

      public DataColumn PriorityOfficialsColumn { get { return this.Columns["PriorityOfficials"]; } }

      public DataColumn PriorityIntroColumn { get { return this.Columns["PriorityIntro"]; } }

      public DataColumn PriorityPoliticianIssueColumn { get { return this.Columns["PriorityPoliticianIssue"]; } }

      public DataColumn PriorityIssueColumn { get { return this.Columns["PriorityIssue"]; } }

      public DataColumn PriorityBallotColumn { get { return this.Columns["PriorityBallot"]; } }

      public DataColumn FrequencyDefaultColumn { get { return this.Columns["FrequencyDefault"]; } }

      public DataColumn FrequencyElectionColumn { get { return this.Columns["FrequencyElection"]; } }

      public DataColumn FrequencyOfficialsColumn { get { return this.Columns["FrequencyOfficials"]; } }

      public DataColumn FrequencyIntroColumn { get { return this.Columns["FrequencyIntro"]; } }

      public DataColumn FrequencyPoliticianIssueColumn { get { return this.Columns["FrequencyPoliticianIssue"]; } }

      public DataColumn FrequencyIssueColumn { get { return this.Columns["FrequencyIssue"]; } }

      public DataColumn FrequencyBallotColumn { get { return this.Columns["FrequencyBallot"]; } }

      public DataColumn ElectionDirectoriesColumn { get { return this.Columns["ElectionDirectories"]; } }

      public DataColumn PoliticianElectionsColumn { get { return this.Columns["PoliticianElections"]; } }

      public DataColumn MustHavePictureColumn { get { return this.Columns["MustHavePicture"]; } }

      public DataColumn MustHaveStatementColumn { get { return this.Columns["MustHaveStatement"]; } }

      public DataColumn MinimumCandidatesColumn { get { return this.Columns["MinimumCandidates"]; } }

      public DataColumn MinimumAnswersColumn { get { return this.Columns["MinimumAnswers"]; } }

      public DataColumn FactorIssueColumn { get { return this.Columns["FactorIssue"]; } }

      public DataColumn LastCreatedColumn { get { return this.Columns["LastCreated"]; } }

      public DataColumn RunTimeSecondsColumn { get { return this.Columns["RunTimeSeconds"]; } }

      public DataColumn BallotsColumn { get { return this.Columns["Ballots"]; } }

      public DataColumn SitemapXmlColumn { get { return this.Columns["SitemapXml"]; } }

      public enum ColumnSet { All, Key, Domain }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsDefault", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsElection", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsOfficials", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsIntro", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsPoliticianIssue", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsIssue", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UrlsBallot", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityDefault", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityElection", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityOfficials", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityIntro", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityPoliticianIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PriorityBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyDefault", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyElection", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyOfficials", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyIntro", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyPoliticianIssue", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyIssue", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FrequencyBallot", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionDirectories", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianElections", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MustHavePicture", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MustHaveStatement", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MinimumCandidates", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MinimumAnswers", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FactorIssue", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastCreated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RunTimeSeconds", typeof(Int64));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Ballots", typeof(String));
        _column.MaxLength = 8;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SitemapXml", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitKeyColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDomainColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DomainDataCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public SitemapTable() : this(ColumnSet.All) { }

      public SitemapTable(ColumnSet columnSet)
      {
        this.TableName = "Sitemap";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Key:
            InitKeyColumns();
            break;

          case ColumnSet.Domain:
            InitDomainColumns();
            break;
        }
      }

      protected SitemapTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Sitemap
    {
      public const string TableName = "Sitemap";

      public enum Column { DomainDataCode, DomainName, UrlsDefault, UrlsElection, UrlsOfficials, UrlsIntro, UrlsPoliticianIssue, UrlsIssue, UrlsBallot, PriorityDefault, PriorityElection, PriorityOfficials, PriorityIntro, PriorityPoliticianIssue, PriorityIssue, PriorityBallot, FrequencyDefault, FrequencyElection, FrequencyOfficials, FrequencyIntro, FrequencyPoliticianIssue, FrequencyIssue, FrequencyBallot, ElectionDirectories, PoliticianElections, MustHavePicture, MustHaveStatement, MinimumCandidates, MinimumAnswers, FactorIssue, LastCreated, RunTimeSeconds, Ballots, SitemapXml }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.DomainDataCode, "DomainDataCode" },
        { Column.DomainName, "DomainName" },
        { Column.UrlsDefault, "UrlsDefault" },
        { Column.UrlsElection, "UrlsElection" },
        { Column.UrlsOfficials, "UrlsOfficials" },
        { Column.UrlsIntro, "UrlsIntro" },
        { Column.UrlsPoliticianIssue, "UrlsPoliticianIssue" },
        { Column.UrlsIssue, "UrlsIssue" },
        { Column.UrlsBallot, "UrlsBallot" },
        { Column.PriorityDefault, "PriorityDefault" },
        { Column.PriorityElection, "PriorityElection" },
        { Column.PriorityOfficials, "PriorityOfficials" },
        { Column.PriorityIntro, "PriorityIntro" },
        { Column.PriorityPoliticianIssue, "PriorityPoliticianIssue" },
        { Column.PriorityIssue, "PriorityIssue" },
        { Column.PriorityBallot, "PriorityBallot" },
        { Column.FrequencyDefault, "FrequencyDefault" },
        { Column.FrequencyElection, "FrequencyElection" },
        { Column.FrequencyOfficials, "FrequencyOfficials" },
        { Column.FrequencyIntro, "FrequencyIntro" },
        { Column.FrequencyPoliticianIssue, "FrequencyPoliticianIssue" },
        { Column.FrequencyIssue, "FrequencyIssue" },
        { Column.FrequencyBallot, "FrequencyBallot" },
        { Column.ElectionDirectories, "ElectionDirectories" },
        { Column.PoliticianElections, "PoliticianElections" },
        { Column.MustHavePicture, "MustHavePicture" },
        { Column.MustHaveStatement, "MustHaveStatement" },
        { Column.MinimumCandidates, "MinimumCandidates" },
        { Column.MinimumAnswers, "MinimumAnswers" },
        { Column.FactorIssue, "FactorIssue" },
        { Column.LastCreated, "LastCreated" },
        { Column.RunTimeSeconds, "RunTimeSeconds" },
        { Column.Ballots, "Ballots" },
        { Column.SitemapXml, "SitemapXml" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap";
        }
      }

      public static SitemapTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.All);
      }

      public static SitemapTable FillTable(DbCommand command)
      {
        return FillTable(command, SitemapTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static SitemapTable FillTable(DbCommand command, SitemapTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          SitemapTable table = new SitemapTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string DomainDataCodeColumnName { get { return "DomainDataCode"; } }

      public static string DomainNameColumnName { get { return "DomainName"; } }

      public static string UrlsDefaultColumnName { get { return "UrlsDefault"; } }

      public static string UrlsElectionColumnName { get { return "UrlsElection"; } }

      public static string UrlsOfficialsColumnName { get { return "UrlsOfficials"; } }

      public static string UrlsIntroColumnName { get { return "UrlsIntro"; } }

      public static string UrlsPoliticianIssueColumnName { get { return "UrlsPoliticianIssue"; } }

      public static string UrlsIssueColumnName { get { return "UrlsIssue"; } }

      public static string UrlsBallotColumnName { get { return "UrlsBallot"; } }

      public static string PriorityDefaultColumnName { get { return "PriorityDefault"; } }

      public static string PriorityElectionColumnName { get { return "PriorityElection"; } }

      public static string PriorityOfficialsColumnName { get { return "PriorityOfficials"; } }

      public static string PriorityIntroColumnName { get { return "PriorityIntro"; } }

      public static string PriorityPoliticianIssueColumnName { get { return "PriorityPoliticianIssue"; } }

      public static string PriorityIssueColumnName { get { return "PriorityIssue"; } }

      public static string PriorityBallotColumnName { get { return "PriorityBallot"; } }

      public static string FrequencyDefaultColumnName { get { return "FrequencyDefault"; } }

      public static string FrequencyElectionColumnName { get { return "FrequencyElection"; } }

      public static string FrequencyOfficialsColumnName { get { return "FrequencyOfficials"; } }

      public static string FrequencyIntroColumnName { get { return "FrequencyIntro"; } }

      public static string FrequencyPoliticianIssueColumnName { get { return "FrequencyPoliticianIssue"; } }

      public static string FrequencyIssueColumnName { get { return "FrequencyIssue"; } }

      public static string FrequencyBallotColumnName { get { return "FrequencyBallot"; } }

      public static string ElectionDirectoriesColumnName { get { return "ElectionDirectories"; } }

      public static string PoliticianElectionsColumnName { get { return "PoliticianElections"; } }

      public static string MustHavePictureColumnName { get { return "MustHavePicture"; } }

      public static string MustHaveStatementColumnName { get { return "MustHaveStatement"; } }

      public static string MinimumCandidatesColumnName { get { return "MinimumCandidates"; } }

      public static string MinimumAnswersColumnName { get { return "MinimumAnswers"; } }

      public static string FactorIssueColumnName { get { return "FactorIssue"; } }

      public static string LastCreatedColumnName { get { return "LastCreated"; } }

      public static string RunTimeSecondsColumnName { get { return "RunTimeSeconds"; } }

      public static string BallotsColumnName { get { return "Ballots"; } }

      public static string SitemapXmlColumnName { get { return "SitemapXml"; } }

      public static int DomainDataCodeMaxLength { get { return 2; } }

      public static int DomainNameMaxLength { get { return int.MaxValue; } }

      public static int FrequencyDefaultMaxLength { get { return 10; } }

      public static int FrequencyElectionMaxLength { get { return 10; } }

      public static int FrequencyOfficialsMaxLength { get { return 10; } }

      public static int FrequencyIntroMaxLength { get { return 10; } }

      public static int FrequencyPoliticianIssueMaxLength { get { return 10; } }

      public static int FrequencyIssueMaxLength { get { return 10; } }

      public static int FrequencyBallotMaxLength { get { return 10; } }

      public static int ElectionDirectoriesMaxLength { get { return 20; } }

      public static int PoliticianElectionsMaxLength { get { return 8; } }

      public static int BallotsMaxLength { get { return 8; } }

      public static bool DomainDataCodeExists(String domainDataCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetDomainDataCodeByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainDataCode FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        return GetDomainDataCodeByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetDomainNameByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainName FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDomainName(String domainDataCode, String defaultValue = null)
      {
        return GetDomainNameByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Int64? GetUrlsDefaultByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsDefaultByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsDefault(String domainDataCode)
      {
        return GetUrlsDefaultByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsDefaultByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsDefaultByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsDefault(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsDefaultByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsElectionByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsElectionByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsElection(String domainDataCode)
      {
        return GetUrlsElectionByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsElectionByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsElectionByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsElection(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsElectionByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsOfficialsByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsOfficialsByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsOfficials(String domainDataCode)
      {
        return GetUrlsOfficialsByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsOfficialsByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsOfficialsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsOfficials(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsOfficialsByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsIntroByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsIntroByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsIntro(String domainDataCode)
      {
        return GetUrlsIntroByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsIntroByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsIntroByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsIntro(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsIntroByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsPoliticianIssue(String domainDataCode)
      {
        return GetUrlsPoliticianIssueByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsPoliticianIssue(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsPoliticianIssueByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsIssueByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsIssue(String domainDataCode)
      {
        return GetUrlsIssueByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsIssueByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsIssue(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsIssueByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int64? GetUrlsBallotByDomainDataCode(String domainDataCode)
      {
        return _GetUrlsBallotByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetUrlsBallot(String domainDataCode)
      {
        return GetUrlsBallotByDomainDataCode(domainDataCode);
      }

      public static Int64 GetUrlsBallotByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetUrlsBallotByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetUrlsBallot(String domainDataCode, Int64 defaultValue)
      {
        return GetUrlsBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetUrlsBallotByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT UrlsBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static Int32? GetPriorityDefaultByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityDefaultByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityDefault(String domainDataCode)
      {
        return GetPriorityDefaultByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityDefaultByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityDefaultByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityDefault(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityDefaultByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityElectionByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityElectionByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityElection(String domainDataCode)
      {
        return GetPriorityElectionByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityElectionByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityElectionByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityElection(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityElectionByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityOfficialsByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityOfficialsByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityOfficials(String domainDataCode)
      {
        return GetPriorityOfficialsByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityOfficialsByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityOfficialsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityOfficials(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityOfficialsByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityIntroByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityIntroByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityIntro(String domainDataCode)
      {
        return GetPriorityIntroByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityIntroByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityIntroByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityIntro(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityIntroByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityPoliticianIssue(String domainDataCode)
      {
        return GetPriorityPoliticianIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityPoliticianIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityPoliticianIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityIssueByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityIssue(String domainDataCode)
      {
        return GetPriorityIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetPriorityBallotByDomainDataCode(String domainDataCode)
      {
        return _GetPriorityBallotByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetPriorityBallot(String domainDataCode)
      {
        return GetPriorityBallotByDomainDataCode(domainDataCode);
      }

      public static Int32 GetPriorityBallotByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetPriorityBallotByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetPriorityBallot(String domainDataCode, Int32 defaultValue)
      {
        return GetPriorityBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetPriorityBallotByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT PriorityBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetFrequencyDefaultByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyDefault FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyDefault(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyDefaultByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyElectionByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyElection FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyElection(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyElectionByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyOfficialsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyOfficials FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyOfficials(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyOfficialsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyIntroByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyIntro FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyIntro(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyIntroByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyPoliticianIssueByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyPoliticianIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyPoliticianIssue(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyPoliticianIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyIssueByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyIssue(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetFrequencyBallotByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FrequencyBallot FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFrequencyBallot(String domainDataCode, String defaultValue = null)
      {
        return GetFrequencyBallotByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetElectionDirectoriesByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionDirectories FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionDirectories(String domainDataCode, String defaultValue = null)
      {
        return GetElectionDirectoriesByDomainDataCode(domainDataCode, defaultValue);
      }

      public static String GetPoliticianElectionsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianElections FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianElections(String domainDataCode, String defaultValue = null)
      {
        return GetPoliticianElectionsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Boolean? GetMustHavePictureByDomainDataCode(String domainDataCode)
      {
        return _GetMustHavePictureByDomainDataCode(domainDataCode, null);
      }

      public static Boolean? GetMustHavePicture(String domainDataCode)
      {
        return GetMustHavePictureByDomainDataCode(domainDataCode);
      }

      public static Boolean GetMustHavePictureByDomainDataCode(String domainDataCode, Boolean defaultValue)
      {
        return _GetMustHavePictureByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Boolean GetMustHavePicture(String domainDataCode, Boolean defaultValue)
      {
        return GetMustHavePictureByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Boolean? _GetMustHavePictureByDomainDataCode(String domainDataCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT MustHavePicture FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetMustHaveStatementByDomainDataCode(String domainDataCode)
      {
        return _GetMustHaveStatementByDomainDataCode(domainDataCode, null);
      }

      public static Boolean? GetMustHaveStatement(String domainDataCode)
      {
        return GetMustHaveStatementByDomainDataCode(domainDataCode);
      }

      public static Boolean GetMustHaveStatementByDomainDataCode(String domainDataCode, Boolean defaultValue)
      {
        return _GetMustHaveStatementByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Boolean GetMustHaveStatement(String domainDataCode, Boolean defaultValue)
      {
        return GetMustHaveStatementByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Boolean? _GetMustHaveStatementByDomainDataCode(String domainDataCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT MustHaveStatement FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetMinimumCandidatesByDomainDataCode(String domainDataCode)
      {
        return _GetMinimumCandidatesByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetMinimumCandidates(String domainDataCode)
      {
        return GetMinimumCandidatesByDomainDataCode(domainDataCode);
      }

      public static Int32 GetMinimumCandidatesByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetMinimumCandidatesByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetMinimumCandidates(String domainDataCode, Int32 defaultValue)
      {
        return GetMinimumCandidatesByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetMinimumCandidatesByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT MinimumCandidates FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetMinimumAnswersByDomainDataCode(String domainDataCode)
      {
        return _GetMinimumAnswersByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetMinimumAnswers(String domainDataCode)
      {
        return GetMinimumAnswersByDomainDataCode(domainDataCode);
      }

      public static Int32 GetMinimumAnswersByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetMinimumAnswersByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetMinimumAnswers(String domainDataCode, Int32 defaultValue)
      {
        return GetMinimumAnswersByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetMinimumAnswersByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT MinimumAnswers FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetFactorIssueByDomainDataCode(String domainDataCode)
      {
        return _GetFactorIssueByDomainDataCode(domainDataCode, null);
      }

      public static Int32? GetFactorIssue(String domainDataCode)
      {
        return GetFactorIssueByDomainDataCode(domainDataCode);
      }

      public static Int32 GetFactorIssueByDomainDataCode(String domainDataCode, Int32 defaultValue)
      {
        return _GetFactorIssueByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int32 GetFactorIssue(String domainDataCode, Int32 defaultValue)
      {
        return GetFactorIssueByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int32? _GetFactorIssueByDomainDataCode(String domainDataCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT FactorIssue FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastCreatedByDomainDataCode(String domainDataCode)
      {
        return _GetLastCreatedByDomainDataCode(domainDataCode, null);
      }

      public static DateTime? GetLastCreated(String domainDataCode)
      {
        return GetLastCreatedByDomainDataCode(domainDataCode);
      }

      public static DateTime GetLastCreatedByDomainDataCode(String domainDataCode, DateTime defaultValue)
      {
        return _GetLastCreatedByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static DateTime GetLastCreated(String domainDataCode, DateTime defaultValue)
      {
        return GetLastCreatedByDomainDataCode(domainDataCode, defaultValue);
      }

      private static DateTime? _GetLastCreatedByDomainDataCode(String domainDataCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastCreated FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int64? GetRunTimeSecondsByDomainDataCode(String domainDataCode)
      {
        return _GetRunTimeSecondsByDomainDataCode(domainDataCode, null);
      }

      public static Int64? GetRunTimeSeconds(String domainDataCode)
      {
        return GetRunTimeSecondsByDomainDataCode(domainDataCode);
      }

      public static Int64 GetRunTimeSecondsByDomainDataCode(String domainDataCode, Int64 defaultValue)
      {
        return _GetRunTimeSecondsByDomainDataCode(domainDataCode, defaultValue).Value;
      }

      public static Int64 GetRunTimeSeconds(String domainDataCode, Int64 defaultValue)
      {
        return GetRunTimeSecondsByDomainDataCode(domainDataCode, defaultValue);
      }

      private static Int64? _GetRunTimeSecondsByDomainDataCode(String domainDataCode, Int64? defaultValue)
      {
        object result;
        string cmdText = "SELECT RunTimeSeconds FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int64) result;
      }

      public static String GetBallotsByDomainDataCode(String domainDataCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Ballots FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallots(String domainDataCode, String defaultValue = null)
      {
        return GetBallotsByDomainDataCode(domainDataCode, defaultValue);
      }

      public static Byte[] GetSitemapXmlByDomainDataCode(String domainDataCode, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SitemapXml FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetSitemapXml(String domainDataCode, Byte[] defaultValue = null)
      {
        return GetSitemapXmlByDomainDataCode(domainDataCode, defaultValue);
      }

      public static object GetColumnByDomainDataCode(Column _column, String domainDataCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String domainDataCode)
      {
        return GetColumnByDomainDataCode(_column, domainDataCode);
      }

      public static SitemapTable GetDataByDomainDataCode(String domainDataCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName,UrlsDefault,UrlsElection,UrlsOfficials,UrlsIntro,UrlsPoliticianIssue,UrlsIssue,UrlsBallot,PriorityDefault,PriorityElection,PriorityOfficials,PriorityIntro,PriorityPoliticianIssue,PriorityIssue,PriorityBallot,FrequencyDefault,FrequencyElection,FrequencyOfficials,FrequencyIntro,FrequencyPoliticianIssue,FrequencyIssue,FrequencyBallot,ElectionDirectories,PoliticianElections,MustHavePicture,MustHaveStatement,MinimumCandidates,MinimumAnswers,FactorIssue,LastCreated,RunTimeSeconds,Ballots,SitemapXml FROM Sitemap WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        return FillTable(cmd, SitemapTable.ColumnSet.All);
      }

      public static SitemapTable GetData(String domainDataCode, int commandTimeout = -1)
      {
        return GetDataByDomainDataCode(domainDataCode, commandTimeout);
      }

      public static int UpdateDomainDataCodeByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET DomainDataCode=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDomainDataCode(String newValue, String domainDataCode)
      {
        return UpdateDomainDataCodeByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateDomainNameByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET DomainName=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDomainName(String newValue, String domainDataCode)
      {
        return UpdateDomainNameByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsDefaultByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsDefault(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsElectionByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsElection(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsOfficialsByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsOfficials(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsIntroByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsIntro(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsPoliticianIssueByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsPoliticianIssue(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsIssueByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsIssue(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateUrlsBallotByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET UrlsBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlsBallot(Int64 newValue, String domainDataCode)
      {
        return UpdateUrlsBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityDefaultByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityDefault(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityElectionByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityElection(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityOfficialsByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityOfficials(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityIntroByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityIntro(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityPoliticianIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityPoliticianIssue(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityIssue(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePriorityBallotByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PriorityBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePriorityBallot(Int32 newValue, String domainDataCode)
      {
        return UpdatePriorityBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyDefaultByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyDefault=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyDefault(String newValue, String domainDataCode)
      {
        return UpdateFrequencyDefaultByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyElectionByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyElection=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyElection(String newValue, String domainDataCode)
      {
        return UpdateFrequencyElectionByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyOfficialsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyOfficials=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyOfficials(String newValue, String domainDataCode)
      {
        return UpdateFrequencyOfficialsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyIntroByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyIntro=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyIntro(String newValue, String domainDataCode)
      {
        return UpdateFrequencyIntroByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyPoliticianIssueByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyPoliticianIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyPoliticianIssue(String newValue, String domainDataCode)
      {
        return UpdateFrequencyPoliticianIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyIssueByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyIssue(String newValue, String domainDataCode)
      {
        return UpdateFrequencyIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFrequencyBallotByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FrequencyBallot=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFrequencyBallot(String newValue, String domainDataCode)
      {
        return UpdateFrequencyBallotByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateElectionDirectoriesByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET ElectionDirectories=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionDirectories(String newValue, String domainDataCode)
      {
        return UpdateElectionDirectoriesByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdatePoliticianElectionsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET PoliticianElections=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianElections(String newValue, String domainDataCode)
      {
        return UpdatePoliticianElectionsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMustHavePictureByDomainDataCode(Boolean newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MustHavePicture=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMustHavePicture(Boolean newValue, String domainDataCode)
      {
        return UpdateMustHavePictureByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMustHaveStatementByDomainDataCode(Boolean newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MustHaveStatement=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMustHaveStatement(Boolean newValue, String domainDataCode)
      {
        return UpdateMustHaveStatementByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMinimumCandidatesByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MinimumCandidates=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMinimumCandidates(Int32 newValue, String domainDataCode)
      {
        return UpdateMinimumCandidatesByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateMinimumAnswersByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET MinimumAnswers=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMinimumAnswers(Int32 newValue, String domainDataCode)
      {
        return UpdateMinimumAnswersByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateFactorIssueByDomainDataCode(Int32 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET FactorIssue=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFactorIssue(Int32 newValue, String domainDataCode)
      {
        return UpdateFactorIssueByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateLastCreatedByDomainDataCode(DateTime newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET LastCreated=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastCreated(DateTime newValue, String domainDataCode)
      {
        return UpdateLastCreatedByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateRunTimeSecondsByDomainDataCode(Int64 newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET RunTimeSeconds=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRunTimeSeconds(Int64 newValue, String domainDataCode)
      {
        return UpdateRunTimeSecondsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateBallotsByDomainDataCode(String newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET Ballots=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallots(String newValue, String domainDataCode)
      {
        return UpdateBallotsByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateSitemapXmlByDomainDataCode(Byte[] newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET SitemapXml=@newValue WHERE DomainDataCode=@DomainDataCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapXml(Byte[] newValue, String domainDataCode)
      {
        return UpdateSitemapXmlByDomainDataCode(newValue, domainDataCode);
      }

      public static int UpdateColumnByDomainDataCode(Column _column, object newValue, String domainDataCode)
      {
        string cmdText = "UPDATE Sitemap SET {0}=@newValue WHERE DomainDataCode=@DomainDataCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "DomainDataCode", domainDataCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String domainDataCode)
      {
         return UpdateColumnByDomainDataCode(_column, newValue, domainDataCode);
      }

      public static string SelectKeyCommandText
      {
        get
        {
          return "SELECT DomainDataCode FROM Sitemap";
        }
      }

      public static SitemapTable GetAllKeyData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.Key);
      }

      public static string SelectDomainCommandText
      {
        get
        {
          return "SELECT DomainDataCode,DomainName FROM Sitemap";
        }
      }

      public static SitemapTable GetAllDomainData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DomainDataCode,DomainName FROM Sitemap";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, SitemapTable.ColumnSet.Domain);
      }

      public static string GetSelectCommandText(SitemapTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case SitemapTable.ColumnSet.All:
            return SelectAllCommandText;

          case SitemapTable.ColumnSet.Key:
            return SelectKeyCommandText;

          case SitemapTable.ColumnSet.Domain:
            return SelectDomainCommandText;

          default:
            return null;
        }
      }

      static Sitemap()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.Sitemap

    #region vote.States

    public partial class StatesRow : DataRow
    {
      internal StatesRow(DataRowBuilder rb) : base(rb) {}

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Boolean IsState
      {
        get { return (Boolean) this["IsState"]; }
        set { this["IsState"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String ShortName
      {
        get { return this["ShortName"] as String; }
        set { if (value == null) this["ShortName"] = DBNull.Value; else this["ShortName"] = value; }
      }

      public String BallotStateName
      {
        get { return this["BallotStateName"] as String; }
        set { if (value == null) this["BallotStateName"] = DBNull.Value; else this["BallotStateName"] = value; }
      }

      public String Abbreviations
      {
        get { return this["Abbreviations"] as String; }
        set { if (value == null) this["Abbreviations"] = DBNull.Value; else this["Abbreviations"] = value; }
      }

      public Boolean IsIncumbentShownOnBallots
      {
        get { return (Boolean) this["IsIncumbentShownOnBallots"]; }
        set { this["IsIncumbentShownOnBallots"] = value; }
      }

      public Boolean IsHasJudicialDistricts
      {
        get { return (Boolean) this["IsHasJudicialDistricts"]; }
        set { this["IsHasJudicialDistricts"] = value; }
      }

      public Boolean IsHasMultiCountyDistricts
      {
        get { return (Boolean) this["IsHasMultiCountyDistricts"]; }
        set { this["IsHasMultiCountyDistricts"] = value; }
      }

      public String EncloseNickname
      {
        get { return this["EncloseNickname"] as String; }
        set { if (value == null) this["EncloseNickname"] = DBNull.Value; else this["EncloseNickname"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ContactTitle
      {
        get { return this["ContactTitle"] as String; }
        set { if (value == null) this["ContactTitle"] = DBNull.Value; else this["ContactTitle"] = value; }
      }

      public String ContactEmail
      {
        get { return this["ContactEmail"] as String; }
        set { if (value == null) this["ContactEmail"] = DBNull.Value; else this["ContactEmail"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String AltContact
      {
        get { return this["AltContact"] as String; }
        set { if (value == null) this["AltContact"] = DBNull.Value; else this["AltContact"] = value; }
      }

      public String AltContactTitle
      {
        get { return this["AltContactTitle"] as String; }
        set { if (value == null) this["AltContactTitle"] = DBNull.Value; else this["AltContactTitle"] = value; }
      }

      public String AltEmail
      {
        get { return this["AltEMail"] as String; }
        set { if (value == null) this["AltEMail"] = DBNull.Value; else this["AltEMail"] = value; }
      }

      public String AltPhone
      {
        get { return this["AltPhone"] as String; }
        set { if (value == null) this["AltPhone"] = DBNull.Value; else this["AltPhone"] = value; }
      }

      public String Email
      {
        get { return this["EMail"] as String; }
        set { if (value == null) this["EMail"] = DBNull.Value; else this["EMail"] = value; }
      }

      public String Url
      {
        get { return this["URL"] as String; }
        set { if (value == null) this["URL"] = DBNull.Value; else this["URL"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String ElectionsAuthority
      {
        get { return this["ElectionsAuthority"] as String; }
        set { if (value == null) this["ElectionsAuthority"] = DBNull.Value; else this["ElectionsAuthority"] = value; }
      }

      public String AddressLine1
      {
        get { return this["AddressLine1"] as String; }
        set { if (value == null) this["AddressLine1"] = DBNull.Value; else this["AddressLine1"] = value; }
      }

      public String AddressLine2
      {
        get { return this["AddressLine2"] as String; }
        set { if (value == null) this["AddressLine2"] = DBNull.Value; else this["AddressLine2"] = value; }
      }

      public String CityStateZip
      {
        get { return this["CityStateZip"] as String; }
        set { if (value == null) this["CityStateZip"] = DBNull.Value; else this["CityStateZip"] = value; }
      }

      public String Notes
      {
        get { return this["Notes"] as String; }
        set { if (value == null) this["Notes"] = DBNull.Value; else this["Notes"] = value; }
      }

      public Boolean IsUseBOEBanner
      {
        get { return (Boolean) this["IsUseBOEBanner"]; }
        set { this["IsUseBOEBanner"] = value; }
      }

      public String UrlDataPage
      {
        get { return this["URLDataPage"] as String; }
        set { if (value == null) this["URLDataPage"] = DBNull.Value; else this["URLDataPage"] = value; }
      }

      public String StateCountyTitles
      {
        get { return this["StateCountyTitles"] as String; }
        set { if (value == null) this["StateCountyTitles"] = DBNull.Value; else this["StateCountyTitles"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["LDSStateCode"] as String; }
        set { if (value == null) this["LDSStateCode"] = DBNull.Value; else this["LDSStateCode"] = value; }
      }

      public String StateTableCurrent
      {
        get { return this["StateTableCurrent"] as String; }
        set { if (value == null) this["StateTableCurrent"] = DBNull.Value; else this["StateTableCurrent"] = value; }
      }

      public String StateTableCurrentDate
      {
        get { return this["StateTableCurrentDate"] as String; }
        set { if (value == null) this["StateTableCurrentDate"] = DBNull.Value; else this["StateTableCurrentDate"] = value; }
      }

      public String StateTableLast
      {
        get { return this["StateTableLast"] as String; }
        set { if (value == null) this["StateTableLast"] = DBNull.Value; else this["StateTableLast"] = value; }
      }

      public String StateTableLastDate
      {
        get { return this["StateTableLastDate"] as String; }
        set { if (value == null) this["StateTableLastDate"] = DBNull.Value; else this["StateTableLastDate"] = value; }
      }

      public String OmitIncumbent
      {
        get { return this["OmitIncumbent"] as String; }
        set { if (value == null) this["OmitIncumbent"] = DBNull.Value; else this["OmitIncumbent"] = value; }
      }

      public String IsIncumbentCode
      {
        get { return this["IsIncumbentCode"] as String; }
        set { if (value == null) this["IsIncumbentCode"] = DBNull.Value; else this["IsIncumbentCode"] = value; }
      }

      public String IsNotIncumbentCode
      {
        get { return this["IsNotIncumbentCode"] as String; }
        set { if (value == null) this["IsNotIncumbentCode"] = DBNull.Value; else this["IsNotIncumbentCode"] = value; }
      }

      public String OmitParty
      {
        get { return this["OmitParty"] as String; }
        set { if (value == null) this["OmitParty"] = DBNull.Value; else this["OmitParty"] = value; }
      }

      public String DemocraticCode
      {
        get { return this["DemocraticCode"] as String; }
        set { if (value == null) this["DemocraticCode"] = DBNull.Value; else this["DemocraticCode"] = value; }
      }

      public String RepublicanCode
      {
        get { return this["RepublicanCode"] as String; }
        set { if (value == null) this["RepublicanCode"] = DBNull.Value; else this["RepublicanCode"] = value; }
      }

      public String IndependentCode
      {
        get { return this["IndependentCode"] as String; }
        set { if (value == null) this["IndependentCode"] = DBNull.Value; else this["IndependentCode"] = value; }
      }

      public String GreenCode
      {
        get { return this["GreenCode"] as String; }
        set { if (value == null) this["GreenCode"] = DBNull.Value; else this["GreenCode"] = value; }
      }

      public String LibertarianCode
      {
        get { return this["LibertarianCode"] as String; }
        set { if (value == null) this["LibertarianCode"] = DBNull.Value; else this["LibertarianCode"] = value; }
      }

      public String ReformCode
      {
        get { return this["ReformCode"] as String; }
        set { if (value == null) this["ReformCode"] = DBNull.Value; else this["ReformCode"] = value; }
      }

      public String BallotOmitOfficeLinks
      {
        get { return this["BallotOmitOfficeLinks"] as String; }
        set { if (value == null) this["BallotOmitOfficeLinks"] = DBNull.Value; else this["BallotOmitOfficeLinks"] = value; }
      }

      public String BallotOmitCandidateLinks
      {
        get { return this["BallotOmitCandidateLinks"] as String; }
        set { if (value == null) this["BallotOmitCandidateLinks"] = DBNull.Value; else this["BallotOmitCandidateLinks"] = value; }
      }

      public String SecretaryOfState
      {
        get { return this["SecretaryOfState"] as String; }
        set { if (value == null) this["SecretaryOfState"] = DBNull.Value; else this["SecretaryOfState"] = value; }
      }

      public String SecretaryEmail
      {
        get { return this["SecretaryEMail"] as String; }
        set { if (value == null) this["SecretaryEMail"] = DBNull.Value; else this["SecretaryEMail"] = value; }
      }

      public String CalendarUrl
      {
        get { return this["CalendarURL"] as String; }
        set { if (value == null) this["CalendarURL"] = DBNull.Value; else this["CalendarURL"] = value; }
      }

      public String Info
      {
        get { return this["Info"] as String; }
        set { if (value == null) this["Info"] = DBNull.Value; else this["Info"] = value; }
      }

      public String CoordinatorName
      {
        get { return this["CoordinatorName"] as String; }
        set { if (value == null) this["CoordinatorName"] = DBNull.Value; else this["CoordinatorName"] = value; }
      }

      public String CoordinatorEmail
      {
        get { return this["CoordinatorEmail"] as String; }
        set { if (value == null) this["CoordinatorEmail"] = DBNull.Value; else this["CoordinatorEmail"] = value; }
      }

      public String CoordinatorPhone
      {
        get { return this["CoordinatorPhone"] as String; }
        set { if (value == null) this["CoordinatorPhone"] = DBNull.Value; else this["CoordinatorPhone"] = value; }
      }

      public String StateOmit
      {
        get { return this["StateOmit"] as String; }
        set { if (value == null) this["StateOmit"] = DBNull.Value; else this["StateOmit"] = value; }
      }

      public DateTime HomePageUpdated
      {
        get { return (DateTime) this["HomePageUpdated"]; }
        set { this["HomePageUpdated"] = value; }
      }

      public String ElectionKeyOfficialsReportStatus
      {
        get { return this["ElectionKeyOfficialsReportStatus"] as String; }
        set { if (value == null) this["ElectionKeyOfficialsReportStatus"] = DBNull.Value; else this["ElectionKeyOfficialsReportStatus"] = value; }
      }

      public Int32 SitemapUrls
      {
        get { return (Int32) this["SitemapUrls"]; }
        set { this["SitemapUrls"] = value; }
      }

      public String JudicialDistrictsReport
      {
        get { return this["JudicialDistrictsReport"] as String; }
        set { if (value == null) this["JudicialDistrictsReport"] = DBNull.Value; else this["JudicialDistrictsReport"] = value; }
      }

      public DateTime JudicialDistrictsReportLastUpdated
      {
        get { return (DateTime) this["JudicialDistrictsReportLastUpdated"]; }
        set { this["JudicialDistrictsReportLastUpdated"] = value; }
      }

      public String OfficesStatusStatewide
      {
        get { return this["OfficesStatusStatewide"] as String; }
        set { if (value == null) this["OfficesStatusStatewide"] = DBNull.Value; else this["OfficesStatusStatewide"] = value; }
      }

      public String OfficesStatusJudicial
      {
        get { return this["OfficesStatusJudicial"] as String; }
        set { if (value == null) this["OfficesStatusJudicial"] = DBNull.Value; else this["OfficesStatusJudicial"] = value; }
      }

      public String OfficesStatusCounties
      {
        get { return this["OfficesStatusCounties"] as String; }
        set { if (value == null) this["OfficesStatusCounties"] = DBNull.Value; else this["OfficesStatusCounties"] = value; }
      }

      public String MultiCountyDistrictsReport
      {
        get { return this["MultiCountyDistrictsReport"] as String; }
        set { if (value == null) this["MultiCountyDistrictsReport"] = DBNull.Value; else this["MultiCountyDistrictsReport"] = value; }
      }

      public DateTime MultiCountyDistrictsReportLastUpdated
      {
        get { return (DateTime) this["MultiCountyDistrictsReportLastUpdated"]; }
        set { this["MultiCountyDistrictsReportLastUpdated"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public DateTime EmailsDateElectionRosterPrimary
      {
        get { return (DateTime) this["EmailsDateElectionRosterPrimary"]; }
        set { this["EmailsDateElectionRosterPrimary"] = value; }
      }

      public Int32 EmailsSentElectionRosterPrimary
      {
        get { return (Int32) this["EmailsSentElectionRosterPrimary"]; }
        set { this["EmailsSentElectionRosterPrimary"] = value; }
      }

      public DateTime EmailsDateElectionRosterGeneral
      {
        get { return (DateTime) this["EmailsDateElectionRosterGeneral"]; }
        set { this["EmailsDateElectionRosterGeneral"] = value; }
      }

      public Int32 EmailsSentElectionRosterGeneral
      {
        get { return (Int32) this["EmailsSentElectionRosterGeneral"]; }
        set { this["EmailsSentElectionRosterGeneral"] = value; }
      }

      public String PollHours
      {
        get { return this["PollHours"] as String; }
        set { if (value == null) this["PollHours"] = DBNull.Value; else this["PollHours"] = value; }
      }

      public String PollHoursUrl
      {
        get { return this["PollHoursUrl"] as String; }
        set { if (value == null) this["PollHoursUrl"] = DBNull.Value; else this["PollHoursUrl"] = value; }
      }

      public String PollPlacesUrl
      {
        get { return this["PollPlacesUrl"] as String; }
        set { if (value == null) this["PollPlacesUrl"] = DBNull.Value; else this["PollPlacesUrl"] = value; }
      }

      public Boolean HasEarlyVoting
      {
        get { return (Boolean) this["HasEarlyVoting"]; }
        set { this["HasEarlyVoting"] = value; }
      }

      public Boolean HasVotingByMail
      {
        get { return (Boolean) this["HasVotingByMail"]; }
        set { this["HasVotingByMail"] = value; }
      }

      public Boolean VotingExclusivelyByMail
      {
        get { return (Boolean) this["VotingExclusivelyByMail"]; }
        set { this["VotingExclusivelyByMail"] = value; }
      }

      public Boolean StatePrimariesHaveSeparatePartyBallots
      {
        get { return (Boolean) this["StatePrimariesHaveSeparatePartyBallots"]; }
        set { this["StatePrimariesHaveSeparatePartyBallots"] = value; }
      }

      public Boolean PresidentialPrimariesHaveSeparatePartyBallots
      {
        get { return (Boolean) this["PresidentialPrimariesHaveSeparatePartyBallots"]; }
        set { this["PresidentialPrimariesHaveSeparatePartyBallots"] = value; }
      }

      public String HowVotingIsDone
      {
        get { return this["HowVotingIsDone"] as String; }
        set { if (value == null) this["HowVotingIsDone"] = DBNull.Value; else this["HowVotingIsDone"] = value; }
      }

      public String HowPrimariesAreDone
      {
        get { return this["HowPrimariesAreDone"] as String; }
        set { if (value == null) this["HowPrimariesAreDone"] = DBNull.Value; else this["HowPrimariesAreDone"] = value; }
      }

      public Boolean ShowUnopposed
      {
        get { return (Boolean) this["ShowUnopposed"]; }
        set { this["ShowUnopposed"] = value; }
      }

      public Boolean ShowWriteIn
      {
        get { return (Boolean) this["ShowWriteIn"]; }
        set { this["ShowWriteIn"] = value; }
      }

      public String CountyBoardsWebAddress
      {
        get { return this["CountyBoardsWebAddress"] as String; }
        set { if (value == null) this["CountyBoardsWebAddress"] = DBNull.Value; else this["CountyBoardsWebAddress"] = value; }
      }
    }

    [Serializable]
    public partial class StatesTable : TypedTableBase<StatesRow>
    {
      public StatesRow this[int index] { get { return (StatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(StatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new StatesTable(); }

      new public StatesRow NewRow() { return (StatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new StatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(StatesRow); }

      public void RemoveRow(StatesRow row) { this.Rows.Remove(row); }

      public StatesRow NewRow(String stateCode, Boolean isState, String state, String shortName, String ballotStateName, String abbreviations, Boolean isIncumbentShownOnBallots, Boolean isHasJudicialDistricts, Boolean isHasMultiCountyDistricts, String encloseNickname, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, Boolean isUseBOEBanner, String urlDataPage, String stateCountyTitles, String ldsStateCode, String stateTableCurrent, String stateTableCurrentDate, String stateTableLast, String stateTableLastDate, String omitIncumbent, String isIncumbentCode, String isNotIncumbentCode, String omitParty, String democraticCode, String republicanCode, String independentCode, String greenCode, String libertarianCode, String reformCode, String ballotOmitOfficeLinks, String ballotOmitCandidateLinks, String secretaryOfState, String secretaryEmail, String calendarUrl, String info, String coordinatorName, String coordinatorEmail, String coordinatorPhone, String stateOmit, DateTime homePageUpdated, String electionKeyOfficialsReportStatus, Int32 sitemapUrls, String judicialDistrictsReport, DateTime judicialDistrictsReportLastUpdated, String officesStatusStatewide, String officesStatusJudicial, String officesStatusCounties, String multiCountyDistrictsReport, DateTime multiCountyDistrictsReportLastUpdated, String title, DateTime emailsDateElectionRosterPrimary, Int32 emailsSentElectionRosterPrimary, DateTime emailsDateElectionRosterGeneral, Int32 emailsSentElectionRosterGeneral, String pollHours, String pollHoursUrl, String pollPlacesUrl, Boolean hasEarlyVoting, Boolean hasVotingByMail, Boolean votingExclusivelyByMail, Boolean statePrimariesHaveSeparatePartyBallots, Boolean presidentialPrimariesHaveSeparatePartyBallots, String howVotingIsDone, String howPrimariesAreDone, Boolean showUnopposed, Boolean showWriteIn, String countyBoardsWebAddress)
      {
        StatesRow row = NewRow();
        row.StateCode = stateCode;
        row.IsState = isState;
        row.State = state;
        row.ShortName = shortName;
        row.BallotStateName = ballotStateName;
        row.Abbreviations = abbreviations;
        row.IsIncumbentShownOnBallots = isIncumbentShownOnBallots;
        row.IsHasJudicialDistricts = isHasJudicialDistricts;
        row.IsHasMultiCountyDistricts = isHasMultiCountyDistricts;
        row.EncloseNickname = encloseNickname;
        row.Contact = contact;
        row.ContactTitle = contactTitle;
        row.ContactEmail = contactEmail;
        row.Phone = phone;
        row.AltContact = altContact;
        row.AltContactTitle = altContactTitle;
        row.AltEmail = altEmail;
        row.AltPhone = altPhone;
        row.Email = email;
        row.Url = url;
        row.BallotName = ballotName;
        row.ElectionsAuthority = electionsAuthority;
        row.AddressLine1 = addressLine1;
        row.AddressLine2 = addressLine2;
        row.CityStateZip = cityStateZip;
        row.Notes = notes;
        row.IsUseBOEBanner = isUseBOEBanner;
        row.UrlDataPage = urlDataPage;
        row.StateCountyTitles = stateCountyTitles;
        row.LdsStateCode = ldsStateCode;
        row.StateTableCurrent = stateTableCurrent;
        row.StateTableCurrentDate = stateTableCurrentDate;
        row.StateTableLast = stateTableLast;
        row.StateTableLastDate = stateTableLastDate;
        row.OmitIncumbent = omitIncumbent;
        row.IsIncumbentCode = isIncumbentCode;
        row.IsNotIncumbentCode = isNotIncumbentCode;
        row.OmitParty = omitParty;
        row.DemocraticCode = democraticCode;
        row.RepublicanCode = republicanCode;
        row.IndependentCode = independentCode;
        row.GreenCode = greenCode;
        row.LibertarianCode = libertarianCode;
        row.ReformCode = reformCode;
        row.BallotOmitOfficeLinks = ballotOmitOfficeLinks;
        row.BallotOmitCandidateLinks = ballotOmitCandidateLinks;
        row.SecretaryOfState = secretaryOfState;
        row.SecretaryEmail = secretaryEmail;
        row.CalendarUrl = calendarUrl;
        row.Info = info;
        row.CoordinatorName = coordinatorName;
        row.CoordinatorEmail = coordinatorEmail;
        row.CoordinatorPhone = coordinatorPhone;
        row.StateOmit = stateOmit;
        row.HomePageUpdated = homePageUpdated;
        row.ElectionKeyOfficialsReportStatus = electionKeyOfficialsReportStatus;
        row.SitemapUrls = sitemapUrls;
        row.JudicialDistrictsReport = judicialDistrictsReport;
        row.JudicialDistrictsReportLastUpdated = judicialDistrictsReportLastUpdated;
        row.OfficesStatusStatewide = officesStatusStatewide;
        row.OfficesStatusJudicial = officesStatusJudicial;
        row.OfficesStatusCounties = officesStatusCounties;
        row.MultiCountyDistrictsReport = multiCountyDistrictsReport;
        row.MultiCountyDistrictsReportLastUpdated = multiCountyDistrictsReportLastUpdated;
        row.Title = title;
        row.EmailsDateElectionRosterPrimary = emailsDateElectionRosterPrimary;
        row.EmailsSentElectionRosterPrimary = emailsSentElectionRosterPrimary;
        row.EmailsDateElectionRosterGeneral = emailsDateElectionRosterGeneral;
        row.EmailsSentElectionRosterGeneral = emailsSentElectionRosterGeneral;
        row.PollHours = pollHours;
        row.PollHoursUrl = pollHoursUrl;
        row.PollPlacesUrl = pollPlacesUrl;
        row.HasEarlyVoting = hasEarlyVoting;
        row.HasVotingByMail = hasVotingByMail;
        row.VotingExclusivelyByMail = votingExclusivelyByMail;
        row.StatePrimariesHaveSeparatePartyBallots = statePrimariesHaveSeparatePartyBallots;
        row.PresidentialPrimariesHaveSeparatePartyBallots = presidentialPrimariesHaveSeparatePartyBallots;
        row.HowVotingIsDone = howVotingIsDone;
        row.HowPrimariesAreDone = howPrimariesAreDone;
        row.ShowUnopposed = showUnopposed;
        row.ShowWriteIn = showWriteIn;
        row.CountyBoardsWebAddress = countyBoardsWebAddress;
        return row;
      }

      public void AddRow(String stateCode, Boolean isState, String state, String shortName, String ballotStateName, String abbreviations, Boolean isIncumbentShownOnBallots, Boolean isHasJudicialDistricts, Boolean isHasMultiCountyDistricts, String encloseNickname, String contact, String contactTitle, String contactEmail, String phone, String altContact, String altContactTitle, String altEmail, String altPhone, String email, String url, String ballotName, String electionsAuthority, String addressLine1, String addressLine2, String cityStateZip, String notes, Boolean isUseBOEBanner, String urlDataPage, String stateCountyTitles, String ldsStateCode, String stateTableCurrent, String stateTableCurrentDate, String stateTableLast, String stateTableLastDate, String omitIncumbent, String isIncumbentCode, String isNotIncumbentCode, String omitParty, String democraticCode, String republicanCode, String independentCode, String greenCode, String libertarianCode, String reformCode, String ballotOmitOfficeLinks, String ballotOmitCandidateLinks, String secretaryOfState, String secretaryEmail, String calendarUrl, String info, String coordinatorName, String coordinatorEmail, String coordinatorPhone, String stateOmit, DateTime homePageUpdated, String electionKeyOfficialsReportStatus, Int32 sitemapUrls, String judicialDistrictsReport, DateTime judicialDistrictsReportLastUpdated, String officesStatusStatewide, String officesStatusJudicial, String officesStatusCounties, String multiCountyDistrictsReport, DateTime multiCountyDistrictsReportLastUpdated, String title, DateTime emailsDateElectionRosterPrimary, Int32 emailsSentElectionRosterPrimary, DateTime emailsDateElectionRosterGeneral, Int32 emailsSentElectionRosterGeneral, String pollHours, String pollHoursUrl, String pollPlacesUrl, Boolean hasEarlyVoting, Boolean hasVotingByMail, Boolean votingExclusivelyByMail, Boolean statePrimariesHaveSeparatePartyBallots, Boolean presidentialPrimariesHaveSeparatePartyBallots, String howVotingIsDone, String howPrimariesAreDone, Boolean showUnopposed, Boolean showWriteIn, String countyBoardsWebAddress)
      {
        StatesRow row = NewRow(stateCode, isState, state, shortName, ballotStateName, abbreviations, isIncumbentShownOnBallots, isHasJudicialDistricts, isHasMultiCountyDistricts, encloseNickname, contact, contactTitle, contactEmail, phone, altContact, altContactTitle, altEmail, altPhone, email, url, ballotName, electionsAuthority, addressLine1, addressLine2, cityStateZip, notes, isUseBOEBanner, urlDataPage, stateCountyTitles, ldsStateCode, stateTableCurrent, stateTableCurrentDate, stateTableLast, stateTableLastDate, omitIncumbent, isIncumbentCode, isNotIncumbentCode, omitParty, democraticCode, republicanCode, independentCode, greenCode, libertarianCode, reformCode, ballotOmitOfficeLinks, ballotOmitCandidateLinks, secretaryOfState, secretaryEmail, calendarUrl, info, coordinatorName, coordinatorEmail, coordinatorPhone, stateOmit, homePageUpdated, electionKeyOfficialsReportStatus, sitemapUrls, judicialDistrictsReport, judicialDistrictsReportLastUpdated, officesStatusStatewide, officesStatusJudicial, officesStatusCounties, multiCountyDistrictsReport, multiCountyDistrictsReportLastUpdated, title, emailsDateElectionRosterPrimary, emailsSentElectionRosterPrimary, emailsDateElectionRosterGeneral, emailsSentElectionRosterGeneral, pollHours, pollHoursUrl, pollPlacesUrl, hasEarlyVoting, hasVotingByMail, votingExclusivelyByMail, statePrimariesHaveSeparatePartyBallots, presidentialPrimariesHaveSeparatePartyBallots, howVotingIsDone, howPrimariesAreDone, showUnopposed, showWriteIn, countyBoardsWebAddress);
        AddRow(row);
      }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn IsStateColumn { get { return this.Columns["IsState"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn ShortNameColumn { get { return this.Columns["ShortName"]; } }

      public DataColumn BallotStateNameColumn { get { return this.Columns["BallotStateName"]; } }

      public DataColumn AbbreviationsColumn { get { return this.Columns["Abbreviations"]; } }

      public DataColumn IsIncumbentShownOnBallotsColumn { get { return this.Columns["IsIncumbentShownOnBallots"]; } }

      public DataColumn IsHasJudicialDistrictsColumn { get { return this.Columns["IsHasJudicialDistricts"]; } }

      public DataColumn IsHasMultiCountyDistrictsColumn { get { return this.Columns["IsHasMultiCountyDistricts"]; } }

      public DataColumn EncloseNicknameColumn { get { return this.Columns["EncloseNickname"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ContactTitleColumn { get { return this.Columns["ContactTitle"]; } }

      public DataColumn ContactEmailColumn { get { return this.Columns["ContactEmail"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn AltContactColumn { get { return this.Columns["AltContact"]; } }

      public DataColumn AltContactTitleColumn { get { return this.Columns["AltContactTitle"]; } }

      public DataColumn AltEmailColumn { get { return this.Columns["AltEMail"]; } }

      public DataColumn AltPhoneColumn { get { return this.Columns["AltPhone"]; } }

      public DataColumn EmailColumn { get { return this.Columns["EMail"]; } }

      public DataColumn UrlColumn { get { return this.Columns["URL"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn ElectionsAuthorityColumn { get { return this.Columns["ElectionsAuthority"]; } }

      public DataColumn AddressLine1Column { get { return this.Columns["AddressLine1"]; } }

      public DataColumn AddressLine2Column { get { return this.Columns["AddressLine2"]; } }

      public DataColumn CityStateZipColumn { get { return this.Columns["CityStateZip"]; } }

      public DataColumn NotesColumn { get { return this.Columns["Notes"]; } }

      public DataColumn IsUseBOEBannerColumn { get { return this.Columns["IsUseBOEBanner"]; } }

      public DataColumn UrlDataPageColumn { get { return this.Columns["URLDataPage"]; } }

      public DataColumn StateCountyTitlesColumn { get { return this.Columns["StateCountyTitles"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["LDSStateCode"]; } }

      public DataColumn StateTableCurrentColumn { get { return this.Columns["StateTableCurrent"]; } }

      public DataColumn StateTableCurrentDateColumn { get { return this.Columns["StateTableCurrentDate"]; } }

      public DataColumn StateTableLastColumn { get { return this.Columns["StateTableLast"]; } }

      public DataColumn StateTableLastDateColumn { get { return this.Columns["StateTableLastDate"]; } }

      public DataColumn OmitIncumbentColumn { get { return this.Columns["OmitIncumbent"]; } }

      public DataColumn IsIncumbentCodeColumn { get { return this.Columns["IsIncumbentCode"]; } }

      public DataColumn IsNotIncumbentCodeColumn { get { return this.Columns["IsNotIncumbentCode"]; } }

      public DataColumn OmitPartyColumn { get { return this.Columns["OmitParty"]; } }

      public DataColumn DemocraticCodeColumn { get { return this.Columns["DemocraticCode"]; } }

      public DataColumn RepublicanCodeColumn { get { return this.Columns["RepublicanCode"]; } }

      public DataColumn IndependentCodeColumn { get { return this.Columns["IndependentCode"]; } }

      public DataColumn GreenCodeColumn { get { return this.Columns["GreenCode"]; } }

      public DataColumn LibertarianCodeColumn { get { return this.Columns["LibertarianCode"]; } }

      public DataColumn ReformCodeColumn { get { return this.Columns["ReformCode"]; } }

      public DataColumn BallotOmitOfficeLinksColumn { get { return this.Columns["BallotOmitOfficeLinks"]; } }

      public DataColumn BallotOmitCandidateLinksColumn { get { return this.Columns["BallotOmitCandidateLinks"]; } }

      public DataColumn SecretaryOfStateColumn { get { return this.Columns["SecretaryOfState"]; } }

      public DataColumn SecretaryEmailColumn { get { return this.Columns["SecretaryEMail"]; } }

      public DataColumn CalendarUrlColumn { get { return this.Columns["CalendarURL"]; } }

      public DataColumn InfoColumn { get { return this.Columns["Info"]; } }

      public DataColumn CoordinatorNameColumn { get { return this.Columns["CoordinatorName"]; } }

      public DataColumn CoordinatorEmailColumn { get { return this.Columns["CoordinatorEmail"]; } }

      public DataColumn CoordinatorPhoneColumn { get { return this.Columns["CoordinatorPhone"]; } }

      public DataColumn StateOmitColumn { get { return this.Columns["StateOmit"]; } }

      public DataColumn HomePageUpdatedColumn { get { return this.Columns["HomePageUpdated"]; } }

      public DataColumn ElectionKeyOfficialsReportStatusColumn { get { return this.Columns["ElectionKeyOfficialsReportStatus"]; } }

      public DataColumn SitemapUrlsColumn { get { return this.Columns["SitemapUrls"]; } }

      public DataColumn JudicialDistrictsReportColumn { get { return this.Columns["JudicialDistrictsReport"]; } }

      public DataColumn JudicialDistrictsReportLastUpdatedColumn { get { return this.Columns["JudicialDistrictsReportLastUpdated"]; } }

      public DataColumn OfficesStatusStatewideColumn { get { return this.Columns["OfficesStatusStatewide"]; } }

      public DataColumn OfficesStatusJudicialColumn { get { return this.Columns["OfficesStatusJudicial"]; } }

      public DataColumn OfficesStatusCountiesColumn { get { return this.Columns["OfficesStatusCounties"]; } }

      public DataColumn MultiCountyDistrictsReportColumn { get { return this.Columns["MultiCountyDistrictsReport"]; } }

      public DataColumn MultiCountyDistrictsReportLastUpdatedColumn { get { return this.Columns["MultiCountyDistrictsReportLastUpdated"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn EmailsDateElectionRosterPrimaryColumn { get { return this.Columns["EmailsDateElectionRosterPrimary"]; } }

      public DataColumn EmailsSentElectionRosterPrimaryColumn { get { return this.Columns["EmailsSentElectionRosterPrimary"]; } }

      public DataColumn EmailsDateElectionRosterGeneralColumn { get { return this.Columns["EmailsDateElectionRosterGeneral"]; } }

      public DataColumn EmailsSentElectionRosterGeneralColumn { get { return this.Columns["EmailsSentElectionRosterGeneral"]; } }

      public DataColumn PollHoursColumn { get { return this.Columns["PollHours"]; } }

      public DataColumn PollHoursUrlColumn { get { return this.Columns["PollHoursUrl"]; } }

      public DataColumn PollPlacesUrlColumn { get { return this.Columns["PollPlacesUrl"]; } }

      public DataColumn HasEarlyVotingColumn { get { return this.Columns["HasEarlyVoting"]; } }

      public DataColumn HasVotingByMailColumn { get { return this.Columns["HasVotingByMail"]; } }

      public DataColumn VotingExclusivelyByMailColumn { get { return this.Columns["VotingExclusivelyByMail"]; } }

      public DataColumn StatePrimariesHaveSeparatePartyBallotsColumn { get { return this.Columns["StatePrimariesHaveSeparatePartyBallots"]; } }

      public DataColumn PresidentialPrimariesHaveSeparatePartyBallotsColumn { get { return this.Columns["PresidentialPrimariesHaveSeparatePartyBallots"]; } }

      public DataColumn HowVotingIsDoneColumn { get { return this.Columns["HowVotingIsDone"]; } }

      public DataColumn HowPrimariesAreDoneColumn { get { return this.Columns["HowPrimariesAreDone"]; } }

      public DataColumn ShowUnopposedColumn { get { return this.Columns["ShowUnopposed"]; } }

      public DataColumn ShowWriteInColumn { get { return this.Columns["ShowWriteIn"]; } }

      public DataColumn CountyBoardsWebAddressColumn { get { return this.Columns["CountyBoardsWebAddress"]; } }

      public enum ColumnSet { All, Cached }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShortName", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotStateName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Abbreviations", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbentShownOnBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsHasJudicialDistricts", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsHasMultiCountyDistricts", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EncloseNickname", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltContactTitle", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltEMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AltPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine1", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressLine2", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Notes", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsUseBOEBanner", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URLDataPage", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCountyTitles", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LDSStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateTableCurrent", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateTableCurrentDate", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateTableLast", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateTableLastDate", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OmitIncumbent", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbentCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsNotIncumbentCode", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OmitParty", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DemocraticCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RepublicanCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IndependentCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("GreenCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LibertarianCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReformCode", typeof(String));
        _column.MaxLength = 6;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotOmitOfficeLinks", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotOmitCandidateLinks", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SecretaryOfState", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SecretaryEMail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CalendarURL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Info", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CoordinatorName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CoordinatorEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CoordinatorPhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateOmit", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HomePageUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKeyOfficialsReportStatus", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SitemapUrls", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("JudicialDistrictsReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("JudicialDistrictsReportLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusStatewide", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusJudicial", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficesStatusCounties", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MultiCountyDistrictsReport", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MultiCountyDistrictsReportLastUpdated", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateElectionRosterPrimary", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentElectionRosterPrimary", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsDateElectionRosterGeneral", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EmailsSentElectionRosterGeneral", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollHours", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollHoursUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PollPlacesUrl", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HasEarlyVoting", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HasVotingByMail", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VotingExclusivelyByMail", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StatePrimariesHaveSeparatePartyBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PresidentialPrimariesHaveSeparatePartyBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HowVotingIsDone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("HowPrimariesAreDone", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("ShowUnopposed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowWriteIn", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyBoardsWebAddress", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCachedColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsState", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShortName", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotStateName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Abbreviations", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsIncumbentShownOnBallots", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EncloseNickname", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactEmail", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("EMail", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("URL", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsAuthority", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LDSStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowUnopposed", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ShowWriteIn", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public StatesTable() : this(ColumnSet.All) { }

      public StatesTable(ColumnSet columnSet)
      {
        this.TableName = "States";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Cached:
            InitCachedColumns();
            break;
        }
      }

      protected StatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class States
    {
      public const string TableName = "States";

      public enum Column { StateCode, IsState, State, ShortName, BallotStateName, Abbreviations, IsIncumbentShownOnBallots, IsHasJudicialDistricts, IsHasMultiCountyDistricts, EncloseNickname, Contact, ContactTitle, ContactEmail, Phone, AltContact, AltContactTitle, AltEmail, AltPhone, Email, Url, BallotName, ElectionsAuthority, AddressLine1, AddressLine2, CityStateZip, Notes, IsUseBOEBanner, UrlDataPage, StateCountyTitles, LdsStateCode, StateTableCurrent, StateTableCurrentDate, StateTableLast, StateTableLastDate, OmitIncumbent, IsIncumbentCode, IsNotIncumbentCode, OmitParty, DemocraticCode, RepublicanCode, IndependentCode, GreenCode, LibertarianCode, ReformCode, BallotOmitOfficeLinks, BallotOmitCandidateLinks, SecretaryOfState, SecretaryEmail, CalendarUrl, Info, CoordinatorName, CoordinatorEmail, CoordinatorPhone, StateOmit, HomePageUpdated, ElectionKeyOfficialsReportStatus, SitemapUrls, JudicialDistrictsReport, JudicialDistrictsReportLastUpdated, OfficesStatusStatewide, OfficesStatusJudicial, OfficesStatusCounties, MultiCountyDistrictsReport, MultiCountyDistrictsReportLastUpdated, Title, EmailsDateElectionRosterPrimary, EmailsSentElectionRosterPrimary, EmailsDateElectionRosterGeneral, EmailsSentElectionRosterGeneral, PollHours, PollHoursUrl, PollPlacesUrl, HasEarlyVoting, HasVotingByMail, VotingExclusivelyByMail, StatePrimariesHaveSeparatePartyBallots, PresidentialPrimariesHaveSeparatePartyBallots, HowVotingIsDone, HowPrimariesAreDone, ShowUnopposed, ShowWriteIn, CountyBoardsWebAddress }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.StateCode, "StateCode" },
        { Column.IsState, "IsState" },
        { Column.State, "State" },
        { Column.ShortName, "ShortName" },
        { Column.BallotStateName, "BallotStateName" },
        { Column.Abbreviations, "Abbreviations" },
        { Column.IsIncumbentShownOnBallots, "IsIncumbentShownOnBallots" },
        { Column.IsHasJudicialDistricts, "IsHasJudicialDistricts" },
        { Column.IsHasMultiCountyDistricts, "IsHasMultiCountyDistricts" },
        { Column.EncloseNickname, "EncloseNickname" },
        { Column.Contact, "Contact" },
        { Column.ContactTitle, "ContactTitle" },
        { Column.ContactEmail, "ContactEmail" },
        { Column.Phone, "Phone" },
        { Column.AltContact, "AltContact" },
        { Column.AltContactTitle, "AltContactTitle" },
        { Column.AltEmail, "AltEMail" },
        { Column.AltPhone, "AltPhone" },
        { Column.Email, "EMail" },
        { Column.Url, "URL" },
        { Column.BallotName, "BallotName" },
        { Column.ElectionsAuthority, "ElectionsAuthority" },
        { Column.AddressLine1, "AddressLine1" },
        { Column.AddressLine2, "AddressLine2" },
        { Column.CityStateZip, "CityStateZip" },
        { Column.Notes, "Notes" },
        { Column.IsUseBOEBanner, "IsUseBOEBanner" },
        { Column.UrlDataPage, "URLDataPage" },
        { Column.StateCountyTitles, "StateCountyTitles" },
        { Column.LdsStateCode, "LDSStateCode" },
        { Column.StateTableCurrent, "StateTableCurrent" },
        { Column.StateTableCurrentDate, "StateTableCurrentDate" },
        { Column.StateTableLast, "StateTableLast" },
        { Column.StateTableLastDate, "StateTableLastDate" },
        { Column.OmitIncumbent, "OmitIncumbent" },
        { Column.IsIncumbentCode, "IsIncumbentCode" },
        { Column.IsNotIncumbentCode, "IsNotIncumbentCode" },
        { Column.OmitParty, "OmitParty" },
        { Column.DemocraticCode, "DemocraticCode" },
        { Column.RepublicanCode, "RepublicanCode" },
        { Column.IndependentCode, "IndependentCode" },
        { Column.GreenCode, "GreenCode" },
        { Column.LibertarianCode, "LibertarianCode" },
        { Column.ReformCode, "ReformCode" },
        { Column.BallotOmitOfficeLinks, "BallotOmitOfficeLinks" },
        { Column.BallotOmitCandidateLinks, "BallotOmitCandidateLinks" },
        { Column.SecretaryOfState, "SecretaryOfState" },
        { Column.SecretaryEmail, "SecretaryEMail" },
        { Column.CalendarUrl, "CalendarURL" },
        { Column.Info, "Info" },
        { Column.CoordinatorName, "CoordinatorName" },
        { Column.CoordinatorEmail, "CoordinatorEmail" },
        { Column.CoordinatorPhone, "CoordinatorPhone" },
        { Column.StateOmit, "StateOmit" },
        { Column.HomePageUpdated, "HomePageUpdated" },
        { Column.ElectionKeyOfficialsReportStatus, "ElectionKeyOfficialsReportStatus" },
        { Column.SitemapUrls, "SitemapUrls" },
        { Column.JudicialDistrictsReport, "JudicialDistrictsReport" },
        { Column.JudicialDistrictsReportLastUpdated, "JudicialDistrictsReportLastUpdated" },
        { Column.OfficesStatusStatewide, "OfficesStatusStatewide" },
        { Column.OfficesStatusJudicial, "OfficesStatusJudicial" },
        { Column.OfficesStatusCounties, "OfficesStatusCounties" },
        { Column.MultiCountyDistrictsReport, "MultiCountyDistrictsReport" },
        { Column.MultiCountyDistrictsReportLastUpdated, "MultiCountyDistrictsReportLastUpdated" },
        { Column.Title, "Title" },
        { Column.EmailsDateElectionRosterPrimary, "EmailsDateElectionRosterPrimary" },
        { Column.EmailsSentElectionRosterPrimary, "EmailsSentElectionRosterPrimary" },
        { Column.EmailsDateElectionRosterGeneral, "EmailsDateElectionRosterGeneral" },
        { Column.EmailsSentElectionRosterGeneral, "EmailsSentElectionRosterGeneral" },
        { Column.PollHours, "PollHours" },
        { Column.PollHoursUrl, "PollHoursUrl" },
        { Column.PollPlacesUrl, "PollPlacesUrl" },
        { Column.HasEarlyVoting, "HasEarlyVoting" },
        { Column.HasVotingByMail, "HasVotingByMail" },
        { Column.VotingExclusivelyByMail, "VotingExclusivelyByMail" },
        { Column.StatePrimariesHaveSeparatePartyBallots, "StatePrimariesHaveSeparatePartyBallots" },
        { Column.PresidentialPrimariesHaveSeparatePartyBallots, "PresidentialPrimariesHaveSeparatePartyBallots" },
        { Column.HowVotingIsDone, "HowVotingIsDone" },
        { Column.HowPrimariesAreDone, "HowPrimariesAreDone" },
        { Column.ShowUnopposed, "ShowUnopposed" },
        { Column.ShowWriteIn, "ShowWriteIn" },
        { Column.CountyBoardsWebAddress, "CountyBoardsWebAddress" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States";
        }
      }

      public static StatesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static StatesTable FillTable(DbCommand command)
      {
        return FillTable(command, StatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static StatesTable FillTable(DbCommand command, StatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          StatesTable table = new StatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string IsStateColumnName { get { return "IsState"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string ShortNameColumnName { get { return "ShortName"; } }

      public static string BallotStateNameColumnName { get { return "BallotStateName"; } }

      public static string AbbreviationsColumnName { get { return "Abbreviations"; } }

      public static string IsIncumbentShownOnBallotsColumnName { get { return "IsIncumbentShownOnBallots"; } }

      public static string IsHasJudicialDistrictsColumnName { get { return "IsHasJudicialDistricts"; } }

      public static string IsHasMultiCountyDistrictsColumnName { get { return "IsHasMultiCountyDistricts"; } }

      public static string EncloseNicknameColumnName { get { return "EncloseNickname"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ContactTitleColumnName { get { return "ContactTitle"; } }

      public static string ContactEmailColumnName { get { return "ContactEmail"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string AltContactColumnName { get { return "AltContact"; } }

      public static string AltContactTitleColumnName { get { return "AltContactTitle"; } }

      public static string AltEmailColumnName { get { return "AltEMail"; } }

      public static string AltPhoneColumnName { get { return "AltPhone"; } }

      public static string EmailColumnName { get { return "EMail"; } }

      public static string UrlColumnName { get { return "URL"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string ElectionsAuthorityColumnName { get { return "ElectionsAuthority"; } }

      public static string AddressLine1ColumnName { get { return "AddressLine1"; } }

      public static string AddressLine2ColumnName { get { return "AddressLine2"; } }

      public static string CityStateZipColumnName { get { return "CityStateZip"; } }

      public static string NotesColumnName { get { return "Notes"; } }

      public static string IsUseBOEBannerColumnName { get { return "IsUseBOEBanner"; } }

      public static string UrlDataPageColumnName { get { return "URLDataPage"; } }

      public static string StateCountyTitlesColumnName { get { return "StateCountyTitles"; } }

      public static string LdsStateCodeColumnName { get { return "LDSStateCode"; } }

      public static string StateTableCurrentColumnName { get { return "StateTableCurrent"; } }

      public static string StateTableCurrentDateColumnName { get { return "StateTableCurrentDate"; } }

      public static string StateTableLastColumnName { get { return "StateTableLast"; } }

      public static string StateTableLastDateColumnName { get { return "StateTableLastDate"; } }

      public static string OmitIncumbentColumnName { get { return "OmitIncumbent"; } }

      public static string IsIncumbentCodeColumnName { get { return "IsIncumbentCode"; } }

      public static string IsNotIncumbentCodeColumnName { get { return "IsNotIncumbentCode"; } }

      public static string OmitPartyColumnName { get { return "OmitParty"; } }

      public static string DemocraticCodeColumnName { get { return "DemocraticCode"; } }

      public static string RepublicanCodeColumnName { get { return "RepublicanCode"; } }

      public static string IndependentCodeColumnName { get { return "IndependentCode"; } }

      public static string GreenCodeColumnName { get { return "GreenCode"; } }

      public static string LibertarianCodeColumnName { get { return "LibertarianCode"; } }

      public static string ReformCodeColumnName { get { return "ReformCode"; } }

      public static string BallotOmitOfficeLinksColumnName { get { return "BallotOmitOfficeLinks"; } }

      public static string BallotOmitCandidateLinksColumnName { get { return "BallotOmitCandidateLinks"; } }

      public static string SecretaryOfStateColumnName { get { return "SecretaryOfState"; } }

      public static string SecretaryEmailColumnName { get { return "SecretaryEMail"; } }

      public static string CalendarUrlColumnName { get { return "CalendarURL"; } }

      public static string InfoColumnName { get { return "Info"; } }

      public static string CoordinatorNameColumnName { get { return "CoordinatorName"; } }

      public static string CoordinatorEmailColumnName { get { return "CoordinatorEmail"; } }

      public static string CoordinatorPhoneColumnName { get { return "CoordinatorPhone"; } }

      public static string StateOmitColumnName { get { return "StateOmit"; } }

      public static string HomePageUpdatedColumnName { get { return "HomePageUpdated"; } }

      public static string ElectionKeyOfficialsReportStatusColumnName { get { return "ElectionKeyOfficialsReportStatus"; } }

      public static string SitemapUrlsColumnName { get { return "SitemapUrls"; } }

      public static string JudicialDistrictsReportColumnName { get { return "JudicialDistrictsReport"; } }

      public static string JudicialDistrictsReportLastUpdatedColumnName { get { return "JudicialDistrictsReportLastUpdated"; } }

      public static string OfficesStatusStatewideColumnName { get { return "OfficesStatusStatewide"; } }

      public static string OfficesStatusJudicialColumnName { get { return "OfficesStatusJudicial"; } }

      public static string OfficesStatusCountiesColumnName { get { return "OfficesStatusCounties"; } }

      public static string MultiCountyDistrictsReportColumnName { get { return "MultiCountyDistrictsReport"; } }

      public static string MultiCountyDistrictsReportLastUpdatedColumnName { get { return "MultiCountyDistrictsReportLastUpdated"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string EmailsDateElectionRosterPrimaryColumnName { get { return "EmailsDateElectionRosterPrimary"; } }

      public static string EmailsSentElectionRosterPrimaryColumnName { get { return "EmailsSentElectionRosterPrimary"; } }

      public static string EmailsDateElectionRosterGeneralColumnName { get { return "EmailsDateElectionRosterGeneral"; } }

      public static string EmailsSentElectionRosterGeneralColumnName { get { return "EmailsSentElectionRosterGeneral"; } }

      public static string PollHoursColumnName { get { return "PollHours"; } }

      public static string PollHoursUrlColumnName { get { return "PollHoursUrl"; } }

      public static string PollPlacesUrlColumnName { get { return "PollPlacesUrl"; } }

      public static string HasEarlyVotingColumnName { get { return "HasEarlyVoting"; } }

      public static string HasVotingByMailColumnName { get { return "HasVotingByMail"; } }

      public static string VotingExclusivelyByMailColumnName { get { return "VotingExclusivelyByMail"; } }

      public static string StatePrimariesHaveSeparatePartyBallotsColumnName { get { return "StatePrimariesHaveSeparatePartyBallots"; } }

      public static string PresidentialPrimariesHaveSeparatePartyBallotsColumnName { get { return "PresidentialPrimariesHaveSeparatePartyBallots"; } }

      public static string HowVotingIsDoneColumnName { get { return "HowVotingIsDone"; } }

      public static string HowPrimariesAreDoneColumnName { get { return "HowPrimariesAreDone"; } }

      public static string ShowUnopposedColumnName { get { return "ShowUnopposed"; } }

      public static string ShowWriteInColumnName { get { return "ShowWriteIn"; } }

      public static string CountyBoardsWebAddressColumnName { get { return "CountyBoardsWebAddress"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int StateMaxLength { get { return 100; } }

      public static int ShortNameMaxLength { get { return 20; } }

      public static int BallotStateNameMaxLength { get { return int.MaxValue; } }

      public static int AbbreviationsMaxLength { get { return 50; } }

      public static int EncloseNicknameMaxLength { get { return 1; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int ContactTitleMaxLength { get { return int.MaxValue; } }

      public static int ContactEmailMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int AltContactMaxLength { get { return int.MaxValue; } }

      public static int AltContactTitleMaxLength { get { return int.MaxValue; } }

      public static int AltEmailMaxLength { get { return 200; } }

      public static int AltPhoneMaxLength { get { return int.MaxValue; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int UrlMaxLength { get { return int.MaxValue; } }

      public static int BallotNameMaxLength { get { return int.MaxValue; } }

      public static int ElectionsAuthorityMaxLength { get { return int.MaxValue; } }

      public static int AddressLine1MaxLength { get { return int.MaxValue; } }

      public static int AddressLine2MaxLength { get { return int.MaxValue; } }

      public static int CityStateZipMaxLength { get { return int.MaxValue; } }

      public static int NotesMaxLength { get { return int.MaxValue; } }

      public static int UrlDataPageMaxLength { get { return int.MaxValue; } }

      public static int StateCountyTitlesMaxLength { get { return 200; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int StateTableCurrentMaxLength { get { return 50; } }

      public static int StateTableCurrentDateMaxLength { get { return 20; } }

      public static int StateTableLastMaxLength { get { return 50; } }

      public static int StateTableLastDateMaxLength { get { return 20; } }

      public static int OmitIncumbentMaxLength { get { return 10; } }

      public static int IsIncumbentCodeMaxLength { get { return 10; } }

      public static int IsNotIncumbentCodeMaxLength { get { return 10; } }

      public static int OmitPartyMaxLength { get { return 10; } }

      public static int DemocraticCodeMaxLength { get { return 6; } }

      public static int RepublicanCodeMaxLength { get { return 6; } }

      public static int IndependentCodeMaxLength { get { return 6; } }

      public static int GreenCodeMaxLength { get { return 6; } }

      public static int LibertarianCodeMaxLength { get { return 6; } }

      public static int ReformCodeMaxLength { get { return 6; } }

      public static int BallotOmitOfficeLinksMaxLength { get { return 10; } }

      public static int BallotOmitCandidateLinksMaxLength { get { return 10; } }

      public static int SecretaryOfStateMaxLength { get { return int.MaxValue; } }

      public static int SecretaryEmailMaxLength { get { return int.MaxValue; } }

      public static int CalendarUrlMaxLength { get { return int.MaxValue; } }

      public static int InfoMaxLength { get { return int.MaxValue; } }

      public static int CoordinatorNameMaxLength { get { return int.MaxValue; } }

      public static int CoordinatorEmailMaxLength { get { return int.MaxValue; } }

      public static int CoordinatorPhoneMaxLength { get { return int.MaxValue; } }

      public static int StateOmitMaxLength { get { return 10; } }

      public static int ElectionKeyOfficialsReportStatusMaxLength { get { return 20; } }

      public static int JudicialDistrictsReportMaxLength { get { return int.MaxValue; } }

      public static int OfficesStatusStatewideMaxLength { get { return int.MaxValue; } }

      public static int OfficesStatusJudicialMaxLength { get { return int.MaxValue; } }

      public static int OfficesStatusCountiesMaxLength { get { return int.MaxValue; } }

      public static int MultiCountyDistrictsReportMaxLength { get { return int.MaxValue; } }

      public static int TitleMaxLength { get { return int.MaxValue; } }

      public static int PollHoursMaxLength { get { return int.MaxValue; } }

      public static int PollHoursUrlMaxLength { get { return int.MaxValue; } }

      public static int PollPlacesUrlMaxLength { get { return int.MaxValue; } }

      public static int HowVotingIsDoneMaxLength { get { return int.MaxValue; } }

      public static int HowPrimariesAreDoneMaxLength { get { return int.MaxValue; } }

      public static int CountyBoardsWebAddressMaxLength { get { return 255; } }

      public static bool StateCodeExists(String stateCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String stateCode, String defaultValue = null)
      {
        return GetStateCodeByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsStateByStateCode(String stateCode)
      {
        return _GetIsStateByStateCode(stateCode, null);
      }

      public static Boolean? GetIsState(String stateCode)
      {
        return GetIsStateByStateCode(stateCode);
      }

      public static Boolean GetIsStateByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsStateByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsState(String stateCode, Boolean defaultValue)
      {
        return GetIsStateByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsStateByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsState FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetState(String stateCode, String defaultValue = null)
      {
        return GetStateByStateCode(stateCode, defaultValue);
      }

      public static String GetShortNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ShortName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetShortName(String stateCode, String defaultValue = null)
      {
        return GetShortNameByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotStateNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotStateName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotStateName(String stateCode, String defaultValue = null)
      {
        return GetBallotStateNameByStateCode(stateCode, defaultValue);
      }

      public static String GetAbbreviationsByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Abbreviations FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAbbreviations(String stateCode, String defaultValue = null)
      {
        return GetAbbreviationsByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsIncumbentShownOnBallotsByStateCode(String stateCode)
      {
        return _GetIsIncumbentShownOnBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetIsIncumbentShownOnBallots(String stateCode)
      {
        return GetIsIncumbentShownOnBallotsByStateCode(stateCode);
      }

      public static Boolean GetIsIncumbentShownOnBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsIncumbentShownOnBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsIncumbentShownOnBallots(String stateCode, Boolean defaultValue)
      {
        return GetIsIncumbentShownOnBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsIncumbentShownOnBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbentShownOnBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsHasJudicialDistrictsByStateCode(String stateCode)
      {
        return _GetIsHasJudicialDistrictsByStateCode(stateCode, null);
      }

      public static Boolean? GetIsHasJudicialDistricts(String stateCode)
      {
        return GetIsHasJudicialDistrictsByStateCode(stateCode);
      }

      public static Boolean GetIsHasJudicialDistrictsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsHasJudicialDistrictsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsHasJudicialDistricts(String stateCode, Boolean defaultValue)
      {
        return GetIsHasJudicialDistrictsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsHasJudicialDistrictsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsHasJudicialDistricts FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsHasMultiCountyDistrictsByStateCode(String stateCode)
      {
        return _GetIsHasMultiCountyDistrictsByStateCode(stateCode, null);
      }

      public static Boolean? GetIsHasMultiCountyDistricts(String stateCode)
      {
        return GetIsHasMultiCountyDistrictsByStateCode(stateCode);
      }

      public static Boolean GetIsHasMultiCountyDistrictsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsHasMultiCountyDistrictsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsHasMultiCountyDistricts(String stateCode, Boolean defaultValue)
      {
        return GetIsHasMultiCountyDistrictsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsHasMultiCountyDistrictsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsHasMultiCountyDistricts FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetEncloseNicknameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EncloseNickname FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEncloseNickname(String stateCode, String defaultValue = null)
      {
        return GetEncloseNicknameByStateCode(stateCode, defaultValue);
      }

      public static String GetContactByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContact(String stateCode, String defaultValue = null)
      {
        return GetContactByStateCode(stateCode, defaultValue);
      }

      public static String GetContactTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitle(String stateCode, String defaultValue = null)
      {
        return GetContactTitleByStateCode(stateCode, defaultValue);
      }

      public static String GetContactEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmail(String stateCode, String defaultValue = null)
      {
        return GetContactEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetPhoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhone(String stateCode, String defaultValue = null)
      {
        return GetPhoneByStateCode(stateCode, defaultValue);
      }

      public static String GetAltContactByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContact(String stateCode, String defaultValue = null)
      {
        return GetAltContactByStateCode(stateCode, defaultValue);
      }

      public static String GetAltContactTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitle(String stateCode, String defaultValue = null)
      {
        return GetAltContactTitleByStateCode(stateCode, defaultValue);
      }

      public static String GetAltEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmail(String stateCode, String defaultValue = null)
      {
        return GetAltEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetAltPhoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhone(String stateCode, String defaultValue = null)
      {
        return GetAltPhoneByStateCode(stateCode, defaultValue);
      }

      public static String GetEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmail(String stateCode, String defaultValue = null)
      {
        return GetEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrl(String stateCode, String defaultValue = null)
      {
        return GetUrlByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotName(String stateCode, String defaultValue = null)
      {
        return GetBallotNameByStateCode(stateCode, defaultValue);
      }

      public static String GetElectionsAuthorityByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthority(String stateCode, String defaultValue = null)
      {
        return GetElectionsAuthorityByStateCode(stateCode, defaultValue);
      }

      public static String GetAddressLine1ByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1(String stateCode, String defaultValue = null)
      {
        return GetAddressLine1ByStateCode(stateCode, defaultValue);
      }

      public static String GetAddressLine2ByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2(String stateCode, String defaultValue = null)
      {
        return GetAddressLine2ByStateCode(stateCode, defaultValue);
      }

      public static String GetCityStateZipByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZip(String stateCode, String defaultValue = null)
      {
        return GetCityStateZipByStateCode(stateCode, defaultValue);
      }

      public static String GetNotesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotes(String stateCode, String defaultValue = null)
      {
        return GetNotesByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetIsUseBOEBannerByStateCode(String stateCode)
      {
        return _GetIsUseBOEBannerByStateCode(stateCode, null);
      }

      public static Boolean? GetIsUseBOEBanner(String stateCode)
      {
        return GetIsUseBOEBannerByStateCode(stateCode);
      }

      public static Boolean GetIsUseBOEBannerByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetIsUseBOEBannerByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetIsUseBOEBanner(String stateCode, Boolean defaultValue)
      {
        return GetIsUseBOEBannerByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetIsUseBOEBannerByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUseBOEBanner FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUrlDataPageByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlDataPage(String stateCode, String defaultValue = null)
      {
        return GetUrlDataPageByStateCode(stateCode, defaultValue);
      }

      public static String GetStateCountyTitlesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyTitles FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyTitles(String stateCode, String defaultValue = null)
      {
        return GetStateCountyTitlesByStateCode(stateCode, defaultValue);
      }

      public static String GetLdsStateCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LDSStateCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCode(String stateCode, String defaultValue = null)
      {
        return GetLdsStateCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetStateTableCurrentByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableCurrent FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableCurrent(String stateCode, String defaultValue = null)
      {
        return GetStateTableCurrentByStateCode(stateCode, defaultValue);
      }

      public static String GetStateTableCurrentDateByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableCurrentDate FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableCurrentDate(String stateCode, String defaultValue = null)
      {
        return GetStateTableCurrentDateByStateCode(stateCode, defaultValue);
      }

      public static String GetStateTableLastByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableLast FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableLast(String stateCode, String defaultValue = null)
      {
        return GetStateTableLastByStateCode(stateCode, defaultValue);
      }

      public static String GetStateTableLastDateByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableLastDate FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableLastDate(String stateCode, String defaultValue = null)
      {
        return GetStateTableLastDateByStateCode(stateCode, defaultValue);
      }

      public static String GetOmitIncumbentByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OmitIncumbent FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOmitIncumbent(String stateCode, String defaultValue = null)
      {
        return GetOmitIncumbentByStateCode(stateCode, defaultValue);
      }

      public static String GetIsIncumbentCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IsIncumbentCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIsIncumbentCode(String stateCode, String defaultValue = null)
      {
        return GetIsIncumbentCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetIsNotIncumbentCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IsNotIncumbentCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIsNotIncumbentCode(String stateCode, String defaultValue = null)
      {
        return GetIsNotIncumbentCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetOmitPartyByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OmitParty FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOmitParty(String stateCode, String defaultValue = null)
      {
        return GetOmitPartyByStateCode(stateCode, defaultValue);
      }

      public static String GetDemocraticCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DemocraticCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDemocraticCode(String stateCode, String defaultValue = null)
      {
        return GetDemocraticCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetRepublicanCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RepublicanCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRepublicanCode(String stateCode, String defaultValue = null)
      {
        return GetRepublicanCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetIndependentCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IndependentCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIndependentCode(String stateCode, String defaultValue = null)
      {
        return GetIndependentCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetGreenCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GreenCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGreenCode(String stateCode, String defaultValue = null)
      {
        return GetGreenCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetLibertarianCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LibertarianCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLibertarianCode(String stateCode, String defaultValue = null)
      {
        return GetLibertarianCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetReformCodeByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReformCode FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReformCode(String stateCode, String defaultValue = null)
      {
        return GetReformCodeByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotOmitOfficeLinksByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotOmitOfficeLinks FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotOmitOfficeLinks(String stateCode, String defaultValue = null)
      {
        return GetBallotOmitOfficeLinksByStateCode(stateCode, defaultValue);
      }

      public static String GetBallotOmitCandidateLinksByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotOmitCandidateLinks FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotOmitCandidateLinks(String stateCode, String defaultValue = null)
      {
        return GetBallotOmitCandidateLinksByStateCode(stateCode, defaultValue);
      }

      public static String GetSecretaryOfStateByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SecretaryOfState FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecretaryOfState(String stateCode, String defaultValue = null)
      {
        return GetSecretaryOfStateByStateCode(stateCode, defaultValue);
      }

      public static String GetSecretaryEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SecretaryEMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecretaryEmail(String stateCode, String defaultValue = null)
      {
        return GetSecretaryEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetCalendarUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CalendarURL FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCalendarUrl(String stateCode, String defaultValue = null)
      {
        return GetCalendarUrlByStateCode(stateCode, defaultValue);
      }

      public static String GetInfoByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Info FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInfo(String stateCode, String defaultValue = null)
      {
        return GetInfoByStateCode(stateCode, defaultValue);
      }

      public static String GetCoordinatorNameByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorName FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorName(String stateCode, String defaultValue = null)
      {
        return GetCoordinatorNameByStateCode(stateCode, defaultValue);
      }

      public static String GetCoordinatorEmailByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorEmail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorEmail(String stateCode, String defaultValue = null)
      {
        return GetCoordinatorEmailByStateCode(stateCode, defaultValue);
      }

      public static String GetCoordinatorPhoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorPhone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorPhone(String stateCode, String defaultValue = null)
      {
        return GetCoordinatorPhoneByStateCode(stateCode, defaultValue);
      }

      public static String GetStateOmitByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateOmit FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateOmit(String stateCode, String defaultValue = null)
      {
        return GetStateOmitByStateCode(stateCode, defaultValue);
      }

      public static DateTime? GetHomePageUpdatedByStateCode(String stateCode)
      {
        return _GetHomePageUpdatedByStateCode(stateCode, null);
      }

      public static DateTime? GetHomePageUpdated(String stateCode)
      {
        return GetHomePageUpdatedByStateCode(stateCode);
      }

      public static DateTime GetHomePageUpdatedByStateCode(String stateCode, DateTime defaultValue)
      {
        return _GetHomePageUpdatedByStateCode(stateCode, defaultValue).Value;
      }

      public static DateTime GetHomePageUpdated(String stateCode, DateTime defaultValue)
      {
        return GetHomePageUpdatedByStateCode(stateCode, defaultValue);
      }

      private static DateTime? _GetHomePageUpdatedByStateCode(String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HomePageUpdated FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetElectionKeyOfficialsReportStatusByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyOfficialsReportStatus FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyOfficialsReportStatus(String stateCode, String defaultValue = null)
      {
        return GetElectionKeyOfficialsReportStatusByStateCode(stateCode, defaultValue);
      }

      public static Int32? GetSitemapUrlsByStateCode(String stateCode)
      {
        return _GetSitemapUrlsByStateCode(stateCode, null);
      }

      public static Int32? GetSitemapUrls(String stateCode)
      {
        return GetSitemapUrlsByStateCode(stateCode);
      }

      public static Int32 GetSitemapUrlsByStateCode(String stateCode, Int32 defaultValue)
      {
        return _GetSitemapUrlsByStateCode(stateCode, defaultValue).Value;
      }

      public static Int32 GetSitemapUrls(String stateCode, Int32 defaultValue)
      {
        return GetSitemapUrlsByStateCode(stateCode, defaultValue);
      }

      private static Int32? _GetSitemapUrlsByStateCode(String stateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT SitemapUrls FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetJudicialDistrictsReportByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT JudicialDistrictsReport FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetJudicialDistrictsReport(String stateCode, String defaultValue = null)
      {
        return GetJudicialDistrictsReportByStateCode(stateCode, defaultValue);
      }

      public static DateTime? GetJudicialDistrictsReportLastUpdatedByStateCode(String stateCode)
      {
        return _GetJudicialDistrictsReportLastUpdatedByStateCode(stateCode, null);
      }

      public static DateTime? GetJudicialDistrictsReportLastUpdated(String stateCode)
      {
        return GetJudicialDistrictsReportLastUpdatedByStateCode(stateCode);
      }

      public static DateTime GetJudicialDistrictsReportLastUpdatedByStateCode(String stateCode, DateTime defaultValue)
      {
        return _GetJudicialDistrictsReportLastUpdatedByStateCode(stateCode, defaultValue).Value;
      }

      public static DateTime GetJudicialDistrictsReportLastUpdated(String stateCode, DateTime defaultValue)
      {
        return GetJudicialDistrictsReportLastUpdatedByStateCode(stateCode, defaultValue);
      }

      private static DateTime? _GetJudicialDistrictsReportLastUpdatedByStateCode(String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT JudicialDistrictsReportLastUpdated FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetOfficesStatusStatewideByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusStatewide FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusStatewide(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusStatewideByStateCode(stateCode, defaultValue);
      }

      public static String GetOfficesStatusJudicialByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusJudicial FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusJudicial(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusJudicialByStateCode(stateCode, defaultValue);
      }

      public static String GetOfficesStatusCountiesByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusCounties FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusCounties(String stateCode, String defaultValue = null)
      {
        return GetOfficesStatusCountiesByStateCode(stateCode, defaultValue);
      }

      public static String GetMultiCountyDistrictsReportByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MultiCountyDistrictsReport FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMultiCountyDistrictsReport(String stateCode, String defaultValue = null)
      {
        return GetMultiCountyDistrictsReportByStateCode(stateCode, defaultValue);
      }

      public static DateTime? GetMultiCountyDistrictsReportLastUpdatedByStateCode(String stateCode)
      {
        return _GetMultiCountyDistrictsReportLastUpdatedByStateCode(stateCode, null);
      }

      public static DateTime? GetMultiCountyDistrictsReportLastUpdated(String stateCode)
      {
        return GetMultiCountyDistrictsReportLastUpdatedByStateCode(stateCode);
      }

      public static DateTime GetMultiCountyDistrictsReportLastUpdatedByStateCode(String stateCode, DateTime defaultValue)
      {
        return _GetMultiCountyDistrictsReportLastUpdatedByStateCode(stateCode, defaultValue).Value;
      }

      public static DateTime GetMultiCountyDistrictsReportLastUpdated(String stateCode, DateTime defaultValue)
      {
        return GetMultiCountyDistrictsReportLastUpdatedByStateCode(stateCode, defaultValue);
      }

      private static DateTime? _GetMultiCountyDistrictsReportLastUpdatedByStateCode(String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MultiCountyDistrictsReportLastUpdated FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetTitleByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTitle(String stateCode, String defaultValue = null)
      {
        return GetTitleByStateCode(stateCode, defaultValue);
      }

      public static DateTime? GetEmailsDateElectionRosterPrimaryByStateCode(String stateCode)
      {
        return _GetEmailsDateElectionRosterPrimaryByStateCode(stateCode, null);
      }

      public static DateTime? GetEmailsDateElectionRosterPrimary(String stateCode)
      {
        return GetEmailsDateElectionRosterPrimaryByStateCode(stateCode);
      }

      public static DateTime GetEmailsDateElectionRosterPrimaryByStateCode(String stateCode, DateTime defaultValue)
      {
        return _GetEmailsDateElectionRosterPrimaryByStateCode(stateCode, defaultValue).Value;
      }

      public static DateTime GetEmailsDateElectionRosterPrimary(String stateCode, DateTime defaultValue)
      {
        return GetEmailsDateElectionRosterPrimaryByStateCode(stateCode, defaultValue);
      }

      private static DateTime? _GetEmailsDateElectionRosterPrimaryByStateCode(String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionRosterPrimary FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionRosterPrimaryByStateCode(String stateCode)
      {
        return _GetEmailsSentElectionRosterPrimaryByStateCode(stateCode, null);
      }

      public static Int32? GetEmailsSentElectionRosterPrimary(String stateCode)
      {
        return GetEmailsSentElectionRosterPrimaryByStateCode(stateCode);
      }

      public static Int32 GetEmailsSentElectionRosterPrimaryByStateCode(String stateCode, Int32 defaultValue)
      {
        return _GetEmailsSentElectionRosterPrimaryByStateCode(stateCode, defaultValue).Value;
      }

      public static Int32 GetEmailsSentElectionRosterPrimary(String stateCode, Int32 defaultValue)
      {
        return GetEmailsSentElectionRosterPrimaryByStateCode(stateCode, defaultValue);
      }

      private static Int32? _GetEmailsSentElectionRosterPrimaryByStateCode(String stateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionRosterPrimary FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateElectionRosterGeneralByStateCode(String stateCode)
      {
        return _GetEmailsDateElectionRosterGeneralByStateCode(stateCode, null);
      }

      public static DateTime? GetEmailsDateElectionRosterGeneral(String stateCode)
      {
        return GetEmailsDateElectionRosterGeneralByStateCode(stateCode);
      }

      public static DateTime GetEmailsDateElectionRosterGeneralByStateCode(String stateCode, DateTime defaultValue)
      {
        return _GetEmailsDateElectionRosterGeneralByStateCode(stateCode, defaultValue).Value;
      }

      public static DateTime GetEmailsDateElectionRosterGeneral(String stateCode, DateTime defaultValue)
      {
        return GetEmailsDateElectionRosterGeneralByStateCode(stateCode, defaultValue);
      }

      private static DateTime? _GetEmailsDateElectionRosterGeneralByStateCode(String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionRosterGeneral FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionRosterGeneralByStateCode(String stateCode)
      {
        return _GetEmailsSentElectionRosterGeneralByStateCode(stateCode, null);
      }

      public static Int32? GetEmailsSentElectionRosterGeneral(String stateCode)
      {
        return GetEmailsSentElectionRosterGeneralByStateCode(stateCode);
      }

      public static Int32 GetEmailsSentElectionRosterGeneralByStateCode(String stateCode, Int32 defaultValue)
      {
        return _GetEmailsSentElectionRosterGeneralByStateCode(stateCode, defaultValue).Value;
      }

      public static Int32 GetEmailsSentElectionRosterGeneral(String stateCode, Int32 defaultValue)
      {
        return GetEmailsSentElectionRosterGeneralByStateCode(stateCode, defaultValue);
      }

      private static Int32? _GetEmailsSentElectionRosterGeneralByStateCode(String stateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionRosterGeneral FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPollHoursByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHours FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHours(String stateCode, String defaultValue = null)
      {
        return GetPollHoursByStateCode(stateCode, defaultValue);
      }

      public static String GetPollHoursUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHoursUrl FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHoursUrl(String stateCode, String defaultValue = null)
      {
        return GetPollHoursUrlByStateCode(stateCode, defaultValue);
      }

      public static String GetPollPlacesUrlByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollPlacesUrl FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollPlacesUrl(String stateCode, String defaultValue = null)
      {
        return GetPollPlacesUrlByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetHasEarlyVotingByStateCode(String stateCode)
      {
        return _GetHasEarlyVotingByStateCode(stateCode, null);
      }

      public static Boolean? GetHasEarlyVoting(String stateCode)
      {
        return GetHasEarlyVotingByStateCode(stateCode);
      }

      public static Boolean GetHasEarlyVotingByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetHasEarlyVotingByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetHasEarlyVoting(String stateCode, Boolean defaultValue)
      {
        return GetHasEarlyVotingByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetHasEarlyVotingByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasEarlyVoting FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetHasVotingByMailByStateCode(String stateCode)
      {
        return _GetHasVotingByMailByStateCode(stateCode, null);
      }

      public static Boolean? GetHasVotingByMail(String stateCode)
      {
        return GetHasVotingByMailByStateCode(stateCode);
      }

      public static Boolean GetHasVotingByMailByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetHasVotingByMailByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetHasVotingByMail(String stateCode, Boolean defaultValue)
      {
        return GetHasVotingByMailByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetHasVotingByMailByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasVotingByMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetVotingExclusivelyByMailByStateCode(String stateCode)
      {
        return _GetVotingExclusivelyByMailByStateCode(stateCode, null);
      }

      public static Boolean? GetVotingExclusivelyByMail(String stateCode)
      {
        return GetVotingExclusivelyByMailByStateCode(stateCode);
      }

      public static Boolean GetVotingExclusivelyByMailByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetVotingExclusivelyByMailByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetVotingExclusivelyByMail(String stateCode, Boolean defaultValue)
      {
        return GetVotingExclusivelyByMailByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetVotingExclusivelyByMailByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT VotingExclusivelyByMail FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallots(String stateCode)
      {
        return GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode);
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallots(String stateCode, Boolean defaultValue)
      {
        return GetStatePrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetStatePrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT StatePrimariesHaveSeparatePartyBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, null);
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallots(String stateCode)
      {
        return GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode);
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallots(String stateCode, Boolean defaultValue)
      {
        return GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetPresidentialPrimariesHaveSeparatePartyBallotsByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresidentialPrimariesHaveSeparatePartyBallots FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHowVotingIsDoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowVotingIsDone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowVotingIsDone(String stateCode, String defaultValue = null)
      {
        return GetHowVotingIsDoneByStateCode(stateCode, defaultValue);
      }

      public static String GetHowPrimariesAreDoneByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowPrimariesAreDone FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowPrimariesAreDone(String stateCode, String defaultValue = null)
      {
        return GetHowPrimariesAreDoneByStateCode(stateCode, defaultValue);
      }

      public static Boolean? GetShowUnopposedByStateCode(String stateCode)
      {
        return _GetShowUnopposedByStateCode(stateCode, null);
      }

      public static Boolean? GetShowUnopposed(String stateCode)
      {
        return GetShowUnopposedByStateCode(stateCode);
      }

      public static Boolean GetShowUnopposedByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetShowUnopposedByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetShowUnopposed(String stateCode, Boolean defaultValue)
      {
        return GetShowUnopposedByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetShowUnopposedByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowUnopposed FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowWriteInByStateCode(String stateCode)
      {
        return _GetShowWriteInByStateCode(stateCode, null);
      }

      public static Boolean? GetShowWriteIn(String stateCode)
      {
        return GetShowWriteInByStateCode(stateCode);
      }

      public static Boolean GetShowWriteInByStateCode(String stateCode, Boolean defaultValue)
      {
        return _GetShowWriteInByStateCode(stateCode, defaultValue).Value;
      }

      public static Boolean GetShowWriteIn(String stateCode, Boolean defaultValue)
      {
        return GetShowWriteInByStateCode(stateCode, defaultValue);
      }

      private static Boolean? _GetShowWriteInByStateCode(String stateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowWriteIn FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetCountyBoardsWebAddressByStateCode(String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyBoardsWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyBoardsWebAddress(String stateCode, String defaultValue = null)
      {
        return GetCountyBoardsWebAddressByStateCode(stateCode, defaultValue);
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String stateCode)
      {
        return GetColumnByStateCode(_column, stateCode);
      }

      public static StatesTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static StatesTable GetData(String stateCode, int commandTimeout = -1)
      {
        return GetDataByStateCode(stateCode, commandTimeout);
      }

      public static int UpdateStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String stateCode)
      {
        return UpdateStateCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateIsStateByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsState(Boolean newValue, String stateCode)
      {
        return UpdateIsStateByStateCode(newValue, stateCode);
      }

      public static int UpdateStateByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateState(String newValue, String stateCode)
      {
        return UpdateStateByStateCode(newValue, stateCode);
      }

      public static int UpdateShortNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortName(String newValue, String stateCode)
      {
        return UpdateShortNameByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotStateNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateName(String newValue, String stateCode)
      {
        return UpdateBallotStateNameByStateCode(newValue, stateCode);
      }

      public static int UpdateAbbreviationsByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviations(String newValue, String stateCode)
      {
        return UpdateAbbreviationsByStateCode(newValue, stateCode);
      }

      public static int UpdateIsIncumbentShownOnBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallots(Boolean newValue, String stateCode)
      {
        return UpdateIsIncumbentShownOnBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdateIsHasJudicialDistrictsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsHasJudicialDistricts=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasJudicialDistricts(Boolean newValue, String stateCode)
      {
        return UpdateIsHasJudicialDistrictsByStateCode(newValue, stateCode);
      }

      public static int UpdateIsHasMultiCountyDistrictsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsHasMultiCountyDistricts=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasMultiCountyDistricts(Boolean newValue, String stateCode)
      {
        return UpdateIsHasMultiCountyDistrictsByStateCode(newValue, stateCode);
      }

      public static int UpdateEncloseNicknameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNickname(String newValue, String stateCode)
      {
        return UpdateEncloseNicknameByStateCode(newValue, stateCode);
      }

      public static int UpdateContactByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContact(String newValue, String stateCode)
      {
        return UpdateContactByStateCode(newValue, stateCode);
      }

      public static int UpdateContactTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitle(String newValue, String stateCode)
      {
        return UpdateContactTitleByStateCode(newValue, stateCode);
      }

      public static int UpdateContactEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmail(String newValue, String stateCode)
      {
        return UpdateContactEmailByStateCode(newValue, stateCode);
      }

      public static int UpdatePhoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhone(String newValue, String stateCode)
      {
        return UpdatePhoneByStateCode(newValue, stateCode);
      }

      public static int UpdateAltContactByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContact(String newValue, String stateCode)
      {
        return UpdateAltContactByStateCode(newValue, stateCode);
      }

      public static int UpdateAltContactTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitle(String newValue, String stateCode)
      {
        return UpdateAltContactTitleByStateCode(newValue, stateCode);
      }

      public static int UpdateAltEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmail(String newValue, String stateCode)
      {
        return UpdateAltEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateAltPhoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhone(String newValue, String stateCode)
      {
        return UpdateAltPhoneByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmail(String newValue, String stateCode)
      {
        return UpdateEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrl(String newValue, String stateCode)
      {
        return UpdateUrlByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotName(String newValue, String stateCode)
      {
        return UpdateBallotNameByStateCode(newValue, stateCode);
      }

      public static int UpdateElectionsAuthorityByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthority(String newValue, String stateCode)
      {
        return UpdateElectionsAuthorityByStateCode(newValue, stateCode);
      }

      public static int UpdateAddressLine1ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1(String newValue, String stateCode)
      {
        return UpdateAddressLine1ByStateCode(newValue, stateCode);
      }

      public static int UpdateAddressLine2ByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2(String newValue, String stateCode)
      {
        return UpdateAddressLine2ByStateCode(newValue, stateCode);
      }

      public static int UpdateCityStateZipByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZip(String newValue, String stateCode)
      {
        return UpdateCityStateZipByStateCode(newValue, stateCode);
      }

      public static int UpdateNotesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotes(String newValue, String stateCode)
      {
        return UpdateNotesByStateCode(newValue, stateCode);
      }

      public static int UpdateIsUseBOEBannerByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBanner(Boolean newValue, String stateCode)
      {
        return UpdateIsUseBOEBannerByStateCode(newValue, stateCode);
      }

      public static int UpdateUrlDataPageByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPage(String newValue, String stateCode)
      {
        return UpdateUrlDataPageByStateCode(newValue, stateCode);
      }

      public static int UpdateStateCountyTitlesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitles(String newValue, String stateCode)
      {
        return UpdateStateCountyTitlesByStateCode(newValue, stateCode);
      }

      public static int UpdateLdsStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCode(String newValue, String stateCode)
      {
        return UpdateLdsStateCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateStateTableCurrentByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateTableCurrent=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrent(String newValue, String stateCode)
      {
        return UpdateStateTableCurrentByStateCode(newValue, stateCode);
      }

      public static int UpdateStateTableCurrentDateByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateTableCurrentDate=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentDate(String newValue, String stateCode)
      {
        return UpdateStateTableCurrentDateByStateCode(newValue, stateCode);
      }

      public static int UpdateStateTableLastByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateTableLast=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLast(String newValue, String stateCode)
      {
        return UpdateStateTableLastByStateCode(newValue, stateCode);
      }

      public static int UpdateStateTableLastDateByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateTableLastDate=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastDate(String newValue, String stateCode)
      {
        return UpdateStateTableLastDateByStateCode(newValue, stateCode);
      }

      public static int UpdateOmitIncumbentByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OmitIncumbent=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitIncumbent(String newValue, String stateCode)
      {
        return UpdateOmitIncumbentByStateCode(newValue, stateCode);
      }

      public static int UpdateIsIncumbentCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentCode(String newValue, String stateCode)
      {
        return UpdateIsIncumbentCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateIsNotIncumbentCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IsNotIncumbentCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotIncumbentCode(String newValue, String stateCode)
      {
        return UpdateIsNotIncumbentCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateOmitPartyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OmitParty=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitParty(String newValue, String stateCode)
      {
        return UpdateOmitPartyByStateCode(newValue, stateCode);
      }

      public static int UpdateDemocraticCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET DemocraticCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDemocraticCode(String newValue, String stateCode)
      {
        return UpdateDemocraticCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateRepublicanCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET RepublicanCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRepublicanCode(String newValue, String stateCode)
      {
        return UpdateRepublicanCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateIndependentCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET IndependentCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIndependentCode(String newValue, String stateCode)
      {
        return UpdateIndependentCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateGreenCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET GreenCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGreenCode(String newValue, String stateCode)
      {
        return UpdateGreenCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateLibertarianCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET LibertarianCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLibertarianCode(String newValue, String stateCode)
      {
        return UpdateLibertarianCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateReformCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ReformCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReformCode(String newValue, String stateCode)
      {
        return UpdateReformCodeByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotOmitOfficeLinksByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotOmitOfficeLinks=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitOfficeLinks(String newValue, String stateCode)
      {
        return UpdateBallotOmitOfficeLinksByStateCode(newValue, stateCode);
      }

      public static int UpdateBallotOmitCandidateLinksByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET BallotOmitCandidateLinks=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitCandidateLinks(String newValue, String stateCode)
      {
        return UpdateBallotOmitCandidateLinksByStateCode(newValue, stateCode);
      }

      public static int UpdateSecretaryOfStateByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET SecretaryOfState=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryOfState(String newValue, String stateCode)
      {
        return UpdateSecretaryOfStateByStateCode(newValue, stateCode);
      }

      public static int UpdateSecretaryEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET SecretaryEMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryEmail(String newValue, String stateCode)
      {
        return UpdateSecretaryEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateCalendarUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CalendarURL=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCalendarUrl(String newValue, String stateCode)
      {
        return UpdateCalendarUrlByStateCode(newValue, stateCode);
      }

      public static int UpdateInfoByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Info=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateInfo(String newValue, String stateCode)
      {
        return UpdateInfoByStateCode(newValue, stateCode);
      }

      public static int UpdateCoordinatorNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorName(String newValue, String stateCode)
      {
        return UpdateCoordinatorNameByStateCode(newValue, stateCode);
      }

      public static int UpdateCoordinatorEmailByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorEmail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorEmail(String newValue, String stateCode)
      {
        return UpdateCoordinatorEmailByStateCode(newValue, stateCode);
      }

      public static int UpdateCoordinatorPhoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorPhone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorPhone(String newValue, String stateCode)
      {
        return UpdateCoordinatorPhoneByStateCode(newValue, stateCode);
      }

      public static int UpdateStateOmitByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StateOmit=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateOmit(String newValue, String stateCode)
      {
        return UpdateStateOmitByStateCode(newValue, stateCode);
      }

      public static int UpdateHomePageUpdatedByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HomePageUpdated=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomePageUpdated(DateTime newValue, String stateCode)
      {
        return UpdateHomePageUpdatedByStateCode(newValue, stateCode);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ElectionKeyOfficialsReportStatus=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatus(String newValue, String stateCode)
      {
        return UpdateElectionKeyOfficialsReportStatusByStateCode(newValue, stateCode);
      }

      public static int UpdateSitemapUrlsByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET SitemapUrls=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapUrls(Int32 newValue, String stateCode)
      {
        return UpdateSitemapUrlsByStateCode(newValue, stateCode);
      }

      public static int UpdateJudicialDistrictsReportByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReport=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReport(String newValue, String stateCode)
      {
        return UpdateJudicialDistrictsReportByStateCode(newValue, stateCode);
      }

      public static int UpdateJudicialDistrictsReportLastUpdatedByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReportLastUpdated=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportLastUpdated(DateTime newValue, String stateCode)
      {
        return UpdateJudicialDistrictsReportLastUpdatedByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusStatewideByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewide(String newValue, String stateCode)
      {
        return UpdateOfficesStatusStatewideByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusJudicialByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicial(String newValue, String stateCode)
      {
        return UpdateOfficesStatusJudicialByStateCode(newValue, stateCode);
      }

      public static int UpdateOfficesStatusCountiesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCounties(String newValue, String stateCode)
      {
        return UpdateOfficesStatusCountiesByStateCode(newValue, stateCode);
      }

      public static int UpdateMultiCountyDistrictsReportByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReport=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReport(String newValue, String stateCode)
      {
        return UpdateMultiCountyDistrictsReportByStateCode(newValue, stateCode);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdatedByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReportLastUpdated=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdated(DateTime newValue, String stateCode)
      {
        return UpdateMultiCountyDistrictsReportLastUpdatedByStateCode(newValue, stateCode);
      }

      public static int UpdateTitleByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitle(String newValue, String stateCode)
      {
        return UpdateTitleByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailsDateElectionRosterPrimaryByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterPrimary=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterPrimary(DateTime newValue, String stateCode)
      {
        return UpdateEmailsDateElectionRosterPrimaryByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailsSentElectionRosterPrimaryByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterPrimary=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterPrimary(Int32 newValue, String stateCode)
      {
        return UpdateEmailsSentElectionRosterPrimaryByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailsDateElectionRosterGeneralByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterGeneral=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterGeneral(DateTime newValue, String stateCode)
      {
        return UpdateEmailsDateElectionRosterGeneralByStateCode(newValue, stateCode);
      }

      public static int UpdateEmailsSentElectionRosterGeneralByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterGeneral=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterGeneral(Int32 newValue, String stateCode)
      {
        return UpdateEmailsSentElectionRosterGeneralByStateCode(newValue, stateCode);
      }

      public static int UpdatePollHoursByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHours(String newValue, String stateCode)
      {
        return UpdatePollHoursByStateCode(newValue, stateCode);
      }

      public static int UpdatePollHoursUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrl(String newValue, String stateCode)
      {
        return UpdatePollHoursUrlByStateCode(newValue, stateCode);
      }

      public static int UpdatePollPlacesUrlByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrl(String newValue, String stateCode)
      {
        return UpdatePollPlacesUrlByStateCode(newValue, stateCode);
      }

      public static int UpdateHasEarlyVotingByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVoting(Boolean newValue, String stateCode)
      {
        return UpdateHasEarlyVotingByStateCode(newValue, stateCode);
      }

      public static int UpdateHasVotingByMailByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMail(Boolean newValue, String stateCode)
      {
        return UpdateHasVotingByMailByStateCode(newValue, stateCode);
      }

      public static int UpdateVotingExclusivelyByMailByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMail(Boolean newValue, String stateCode)
      {
        return UpdateVotingExclusivelyByMailByStateCode(newValue, stateCode);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallots(Boolean newValue, String stateCode)
      {
        return UpdateStatePrimariesHaveSeparatePartyBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallots(Boolean newValue, String stateCode)
      {
        return UpdatePresidentialPrimariesHaveSeparatePartyBallotsByStateCode(newValue, stateCode);
      }

      public static int UpdateHowVotingIsDoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDone(String newValue, String stateCode)
      {
        return UpdateHowVotingIsDoneByStateCode(newValue, stateCode);
      }

      public static int UpdateHowPrimariesAreDoneByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDone(String newValue, String stateCode)
      {
        return UpdateHowPrimariesAreDoneByStateCode(newValue, stateCode);
      }

      public static int UpdateShowUnopposedByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposed(Boolean newValue, String stateCode)
      {
        return UpdateShowUnopposedByStateCode(newValue, stateCode);
      }

      public static int UpdateShowWriteInByStateCode(Boolean newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteIn(Boolean newValue, String stateCode)
      {
        return UpdateShowWriteInByStateCode(newValue, stateCode);
      }

      public static int UpdateCountyBoardsWebAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddress(String newValue, String stateCode)
      {
        return UpdateCountyBoardsWebAddressByStateCode(newValue, stateCode);
      }

      public static int UpdateColumnByStateCode(Column _column, object newValue, String stateCode)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String stateCode)
      {
         return UpdateColumnByStateCode(_column, newValue, stateCode);
      }

      public static bool LdsStateCodeExists(String ldsStateCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStateCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsStateByLdsStateCode(String ldsStateCode)
      {
        return _GetIsStateByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsStateByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsStateByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsStateByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsState FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetShortNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ShortName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotStateNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotStateName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAbbreviationsByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Abbreviations FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetIsIncumbentShownOnBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsIncumbentShownOnBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsIncumbentShownOnBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsIncumbentShownOnBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsHasJudicialDistrictsByLdsStateCode(String ldsStateCode)
      {
        return _GetIsHasJudicialDistrictsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsHasJudicialDistrictsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsHasJudicialDistrictsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsHasJudicialDistrictsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsHasJudicialDistricts FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsHasMultiCountyDistrictsByLdsStateCode(String ldsStateCode)
      {
        return _GetIsHasMultiCountyDistrictsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsHasMultiCountyDistrictsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsHasMultiCountyDistrictsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsHasMultiCountyDistrictsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsHasMultiCountyDistricts FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetEncloseNicknameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EncloseNickname FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactTitle FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactEmail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPhoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Phone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContact FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltContactTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltContactTitle FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltEMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAltPhoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AltPhone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT EMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URL FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionsAuthorityByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionsAuthority FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine1ByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine1 FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressLine2ByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressLine2 FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateZipByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CityStateZip FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNotesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Notes FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsUseBOEBannerByLdsStateCode(String ldsStateCode)
      {
        return _GetIsUseBOEBannerByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetIsUseBOEBannerByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetIsUseBOEBannerByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetIsUseBOEBannerByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsUseBOEBanner FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetUrlDataPageByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT URLDataPage FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCountyTitlesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCountyTitles FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LDSStateCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableCurrentByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableCurrent FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableCurrentDateByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableCurrentDate FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableLastByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableLast FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateTableLastDateByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateTableLastDate FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOmitIncumbentByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OmitIncumbent FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIsIncumbentCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IsIncumbentCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIsNotIncumbentCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IsNotIncumbentCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOmitPartyByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OmitParty FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDemocraticCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DemocraticCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRepublicanCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RepublicanCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIndependentCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IndependentCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGreenCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT GreenCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLibertarianCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LibertarianCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReformCodeByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReformCode FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotOmitOfficeLinksByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotOmitOfficeLinks FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBallotOmitCandidateLinksByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BallotOmitCandidateLinks FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecretaryOfStateByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SecretaryOfState FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecretaryEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SecretaryEMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCalendarUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CalendarURL FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetInfoByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Info FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorNameByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorName FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorEmailByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorEmail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCoordinatorPhoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CoordinatorPhone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateOmitByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateOmit FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetHomePageUpdatedByLdsStateCode(String ldsStateCode)
      {
        return _GetHomePageUpdatedByLdsStateCode(ldsStateCode, null);
      }

      public static DateTime GetHomePageUpdatedByLdsStateCode(String ldsStateCode, DateTime defaultValue)
      {
        return _GetHomePageUpdatedByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static DateTime? _GetHomePageUpdatedByLdsStateCode(String ldsStateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HomePageUpdated FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetElectionKeyOfficialsReportStatusByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKeyOfficialsReportStatus FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetSitemapUrlsByLdsStateCode(String ldsStateCode)
      {
        return _GetSitemapUrlsByLdsStateCode(ldsStateCode, null);
      }

      public static Int32 GetSitemapUrlsByLdsStateCode(String ldsStateCode, Int32 defaultValue)
      {
        return _GetSitemapUrlsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Int32? _GetSitemapUrlsByLdsStateCode(String ldsStateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT SitemapUrls FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetJudicialDistrictsReportByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT JudicialDistrictsReport FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetJudicialDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode)
      {
        return _GetJudicialDistrictsReportLastUpdatedByLdsStateCode(ldsStateCode, null);
      }

      public static DateTime GetJudicialDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode, DateTime defaultValue)
      {
        return _GetJudicialDistrictsReportLastUpdatedByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static DateTime? _GetJudicialDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT JudicialDistrictsReportLastUpdated FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetOfficesStatusStatewideByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusStatewide FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusJudicialByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusJudicial FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficesStatusCountiesByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficesStatusCounties FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMultiCountyDistrictsReportByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MultiCountyDistrictsReport FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetMultiCountyDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode)
      {
        return _GetMultiCountyDistrictsReportLastUpdatedByLdsStateCode(ldsStateCode, null);
      }

      public static DateTime GetMultiCountyDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode, DateTime defaultValue)
      {
        return _GetMultiCountyDistrictsReportLastUpdatedByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static DateTime? _GetMultiCountyDistrictsReportLastUpdatedByLdsStateCode(String ldsStateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT MultiCountyDistrictsReportLastUpdated FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetTitleByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Title FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetEmailsDateElectionRosterPrimaryByLdsStateCode(String ldsStateCode)
      {
        return _GetEmailsDateElectionRosterPrimaryByLdsStateCode(ldsStateCode, null);
      }

      public static DateTime GetEmailsDateElectionRosterPrimaryByLdsStateCode(String ldsStateCode, DateTime defaultValue)
      {
        return _GetEmailsDateElectionRosterPrimaryByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static DateTime? _GetEmailsDateElectionRosterPrimaryByLdsStateCode(String ldsStateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionRosterPrimary FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionRosterPrimaryByLdsStateCode(String ldsStateCode)
      {
        return _GetEmailsSentElectionRosterPrimaryByLdsStateCode(ldsStateCode, null);
      }

      public static Int32 GetEmailsSentElectionRosterPrimaryByLdsStateCode(String ldsStateCode, Int32 defaultValue)
      {
        return _GetEmailsSentElectionRosterPrimaryByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Int32? _GetEmailsSentElectionRosterPrimaryByLdsStateCode(String ldsStateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionRosterPrimary FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetEmailsDateElectionRosterGeneralByLdsStateCode(String ldsStateCode)
      {
        return _GetEmailsDateElectionRosterGeneralByLdsStateCode(ldsStateCode, null);
      }

      public static DateTime GetEmailsDateElectionRosterGeneralByLdsStateCode(String ldsStateCode, DateTime defaultValue)
      {
        return _GetEmailsDateElectionRosterGeneralByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static DateTime? _GetEmailsDateElectionRosterGeneralByLdsStateCode(String ldsStateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsDateElectionRosterGeneral FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Int32? GetEmailsSentElectionRosterGeneralByLdsStateCode(String ldsStateCode)
      {
        return _GetEmailsSentElectionRosterGeneralByLdsStateCode(ldsStateCode, null);
      }

      public static Int32 GetEmailsSentElectionRosterGeneralByLdsStateCode(String ldsStateCode, Int32 defaultValue)
      {
        return _GetEmailsSentElectionRosterGeneralByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Int32? _GetEmailsSentElectionRosterGeneralByLdsStateCode(String ldsStateCode, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT EmailsSentElectionRosterGeneral FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetPollHoursByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHours FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollHoursUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollHoursUrl FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPollPlacesUrlByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PollPlacesUrl FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetHasEarlyVotingByLdsStateCode(String ldsStateCode)
      {
        return _GetHasEarlyVotingByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetHasEarlyVotingByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetHasEarlyVotingByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetHasEarlyVotingByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasEarlyVoting FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetHasVotingByMailByLdsStateCode(String ldsStateCode)
      {
        return _GetHasVotingByMailByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetHasVotingByMailByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetHasVotingByMailByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetHasVotingByMailByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT HasVotingByMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode)
      {
        return _GetVotingExclusivelyByMailByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetVotingExclusivelyByMailByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetVotingExclusivelyByMailByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT VotingExclusivelyByMail FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT StatePrimariesHaveSeparatePartyBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetPresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT PresidentialPrimariesHaveSeparatePartyBallots FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetHowVotingIsDoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowVotingIsDone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHowPrimariesAreDoneByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HowPrimariesAreDone FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetShowUnopposedByLdsStateCode(String ldsStateCode)
      {
        return _GetShowUnopposedByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetShowUnopposedByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetShowUnopposedByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetShowUnopposedByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowUnopposed FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetShowWriteInByLdsStateCode(String ldsStateCode)
      {
        return _GetShowWriteInByLdsStateCode(ldsStateCode, null);
      }

      public static Boolean GetShowWriteInByLdsStateCode(String ldsStateCode, Boolean defaultValue)
      {
        return _GetShowWriteInByLdsStateCode(ldsStateCode, defaultValue).Value;
      }

      private static Boolean? _GetShowWriteInByLdsStateCode(String ldsStateCode, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ShowWriteIn FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetCountyBoardsWebAddressByLdsStateCode(String ldsStateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyBoardsWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByLdsStateCode(Column _column, String ldsStateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE LDSStateCode=@LdsStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByLdsStateCode(String ldsStateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasJudicialDistrictsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsHasJudicialDistricts=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasMultiCountyDistrictsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsHasMultiCountyDistricts=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateTableCurrent=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentDateByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateTableCurrentDate=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateTableLast=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastDateByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateTableLastDate=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitIncumbentByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OmitIncumbent=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsIncumbentCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotIncumbentCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IsNotIncumbentCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitPartyByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OmitParty=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDemocraticCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET DemocraticCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRepublicanCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET RepublicanCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIndependentCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET IndependentCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGreenCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET GreenCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLibertarianCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET LibertarianCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReformCodeByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ReformCode=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitOfficeLinksByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotOmitOfficeLinks=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitCandidateLinksByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET BallotOmitCandidateLinks=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryOfStateByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET SecretaryOfState=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET SecretaryEMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCalendarUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CalendarURL=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateInfoByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Info=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorNameByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorName=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorEmailByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorEmail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorPhoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CoordinatorPhone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateOmitByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StateOmit=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomePageUpdatedByLdsStateCode(DateTime newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HomePageUpdated=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ElectionKeyOfficialsReportStatus=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapUrlsByLdsStateCode(Int32 newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET SitemapUrls=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReport=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportLastUpdatedByLdsStateCode(DateTime newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReportLastUpdated=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReport=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdatedByLdsStateCode(DateTime newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReportLastUpdated=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterPrimaryByLdsStateCode(DateTime newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterPrimary=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterPrimaryByLdsStateCode(Int32 newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterPrimary=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterGeneralByLdsStateCode(DateTime newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterGeneral=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterGeneralByLdsStateCode(Int32 newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterGeneral=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByLdsStateCode(Boolean newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByLdsStateCode(String newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE LDSStateCode=@LdsStateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLdsStateCode(Column _column, object newValue, String ldsStateCode)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE LDSStateCode=@LdsStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByState(String state, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "State", state);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByState(Column _column, String state)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE State=@State";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByState(String state, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "State", state);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasJudicialDistrictsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsHasJudicialDistricts=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasMultiCountyDistrictsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsHasMultiCountyDistricts=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateTableCurrent=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentDateByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateTableCurrentDate=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateTableLast=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastDateByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateTableLastDate=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitIncumbentByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OmitIncumbent=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET IsIncumbentCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotIncumbentCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET IsNotIncumbentCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitPartyByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OmitParty=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDemocraticCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET DemocraticCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRepublicanCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET RepublicanCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIndependentCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET IndependentCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGreenCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET GreenCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLibertarianCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET LibertarianCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReformCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ReformCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitOfficeLinksByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotOmitOfficeLinks=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitCandidateLinksByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET BallotOmitCandidateLinks=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryOfStateByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET SecretaryOfState=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET SecretaryEMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCalendarUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CalendarURL=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateInfoByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Info=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CoordinatorName=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorEmailByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CoordinatorEmail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorPhoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CoordinatorPhone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateOmitByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET StateOmit=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomePageUpdatedByState(DateTime newValue, String state)
      {
        string cmdText = "UPDATE States SET HomePageUpdated=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET ElectionKeyOfficialsReportStatus=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapUrlsByState(Int32 newValue, String state)
      {
        string cmdText = "UPDATE States SET SitemapUrls=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReport=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportLastUpdatedByState(DateTime newValue, String state)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReportLastUpdated=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReport=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdatedByState(DateTime newValue, String state)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReportLastUpdated=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterPrimaryByState(DateTime newValue, String state)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterPrimary=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterPrimaryByState(Int32 newValue, String state)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterPrimary=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterGeneralByState(DateTime newValue, String state)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterGeneral=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterGeneralByState(Int32 newValue, String state)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterGeneral=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByState(Boolean newValue, String state)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByState(String newValue, String state)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE State=@State";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByState(Column _column, object newValue, String state)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE State=@State";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "State", state);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasJudicialDistrictsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsHasJudicialDistricts=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasMultiCountyDistrictsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsHasMultiCountyDistricts=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateTableCurrent=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentDateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateTableCurrentDate=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateTableLast=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastDateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateTableLastDate=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitIncumbentByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OmitIncumbent=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET IsIncumbentCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotIncumbentCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET IsNotIncumbentCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitPartyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OmitParty=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDemocraticCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET DemocraticCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRepublicanCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET RepublicanCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIndependentCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET IndependentCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGreenCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET GreenCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLibertarianCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET LibertarianCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReformCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ReformCode=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitOfficeLinksByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotOmitOfficeLinks=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitCandidateLinksByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET BallotOmitCandidateLinks=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryOfStateByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET SecretaryOfState=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET SecretaryEMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCalendarUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CalendarURL=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateInfoByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Info=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorNameByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CoordinatorName=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CoordinatorEmail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorPhoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CoordinatorPhone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateOmitByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET StateOmit=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomePageUpdatedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE States SET HomePageUpdated=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET ElectionKeyOfficialsReportStatus=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapUrlsByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE States SET SitemapUrls=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReport=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportLastUpdatedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReportLastUpdated=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReport=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdatedByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReportLastUpdated=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterPrimaryByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterPrimary=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterPrimaryByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterPrimary=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterGeneralByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterGeneral=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterGeneralByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterGeneral=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE EMail=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE EMail=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByAltEmail(String altEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM States WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByAltEmail(Column _column, String altEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM States WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static StatesTable GetDataByAltEmail(String altEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,IsHasJudicialDistricts,IsHasMultiCountyDistricts,EncloseNickname,Contact,ContactTitle,ContactEmail,Phone,AltContact,AltContactTitle,AltEMail,AltPhone,EMail,URL,BallotName,ElectionsAuthority,AddressLine1,AddressLine2,CityStateZip,Notes,IsUseBOEBanner,URLDataPage,StateCountyTitles,LDSStateCode,StateTableCurrent,StateTableCurrentDate,StateTableLast,StateTableLastDate,OmitIncumbent,IsIncumbentCode,IsNotIncumbentCode,OmitParty,DemocraticCode,RepublicanCode,IndependentCode,GreenCode,LibertarianCode,ReformCode,BallotOmitOfficeLinks,BallotOmitCandidateLinks,SecretaryOfState,SecretaryEMail,CalendarURL,Info,CoordinatorName,CoordinatorEmail,CoordinatorPhone,StateOmit,HomePageUpdated,ElectionKeyOfficialsReportStatus,SitemapUrls,JudicialDistrictsReport,JudicialDistrictsReportLastUpdated,OfficesStatusStatewide,OfficesStatusJudicial,OfficesStatusCounties,MultiCountyDistrictsReport,MultiCountyDistrictsReportLastUpdated,Title,EmailsDateElectionRosterPrimary,EmailsSentElectionRosterPrimary,EmailsDateElectionRosterGeneral,EmailsSentElectionRosterGeneral,PollHours,PollHoursUrl,PollPlacesUrl,HasEarlyVoting,HasVotingByMail,VotingExclusivelyByMail,StatePrimariesHaveSeparatePartyBallots,PresidentialPrimariesHaveSeparatePartyBallots,HowVotingIsDone,HowPrimariesAreDone,ShowUnopposed,ShowWriteIn,CountyBoardsWebAddress FROM States WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        return FillTable(cmd, StatesTable.ColumnSet.All);
      }

      public static int UpdateStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsState=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET State=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShortNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShortName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotStateNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotStateName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAbbreviationsByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Abbreviations=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentShownOnBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsIncumbentShownOnBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasJudicialDistrictsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsHasJudicialDistricts=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsHasMultiCountyDistrictsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsHasMultiCountyDistricts=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEncloseNicknameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EncloseNickname=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Contact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ContactEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Phone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltContact=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltContactTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltContactTitle=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAltPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AltPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET URL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionsAuthorityByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ElectionsAuthority=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine1ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AddressLine1=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressLine2ByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET AddressLine2=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateZipByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CityStateZip=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNotesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Notes=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsUseBOEBannerByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsUseBOEBanner=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrlDataPageByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET URLDataPage=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCountyTitlesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateCountyTitles=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET LDSStateCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateTableCurrent=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableCurrentDateByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateTableCurrentDate=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateTableLast=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateTableLastDateByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateTableLastDate=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitIncumbentByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OmitIncumbent=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsIncumbentCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsIncumbentCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsNotIncumbentCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IsNotIncumbentCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOmitPartyByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OmitParty=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDemocraticCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET DemocraticCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRepublicanCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET RepublicanCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIndependentCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET IndependentCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGreenCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET GreenCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLibertarianCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET LibertarianCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReformCodeByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ReformCode=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitOfficeLinksByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotOmitOfficeLinks=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBallotOmitCandidateLinksByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET BallotOmitCandidateLinks=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryOfStateByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET SecretaryOfState=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecretaryEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET SecretaryEMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCalendarUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CalendarURL=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateInfoByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Info=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorNameByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CoordinatorName=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorEmailByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CoordinatorEmail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCoordinatorPhoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CoordinatorPhone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateOmitByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StateOmit=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHomePageUpdatedByAltEmail(DateTime newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HomePageUpdated=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyOfficialsReportStatusByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ElectionKeyOfficialsReportStatus=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSitemapUrlsByAltEmail(Int32 newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET SitemapUrls=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReport=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateJudicialDistrictsReportLastUpdatedByAltEmail(DateTime newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET JudicialDistrictsReportLastUpdated=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusStatewideByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusStatewide=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusJudicialByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusJudicial=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficesStatusCountiesByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET OfficesStatusCounties=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReport=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyDistrictsReportLastUpdatedByAltEmail(DateTime newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET MultiCountyDistrictsReportLastUpdated=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTitleByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET Title=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterPrimaryByAltEmail(DateTime newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterPrimary=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterPrimaryByAltEmail(Int32 newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterPrimary=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsDateElectionRosterGeneralByAltEmail(DateTime newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EmailsDateElectionRosterGeneral=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailsSentElectionRosterGeneralByAltEmail(Int32 newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET EmailsSentElectionRosterGeneral=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollHours=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollHoursUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollHoursUrl=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePollPlacesUrlByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PollPlacesUrl=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasEarlyVotingByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HasEarlyVoting=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHasVotingByMailByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HasVotingByMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVotingExclusivelyByMailByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET VotingExclusivelyByMail=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePrimariesHaveSeparatePartyBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET StatePrimariesHaveSeparatePartyBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePresidentialPrimariesHaveSeparatePartyBallotsByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET PresidentialPrimariesHaveSeparatePartyBallots=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowVotingIsDoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HowVotingIsDone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHowPrimariesAreDoneByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET HowPrimariesAreDone=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowUnopposedByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShowUnopposed=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateShowWriteInByAltEmail(Boolean newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET ShowWriteIn=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyBoardsWebAddressByAltEmail(String newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET CountyBoardsWebAddress=@newValue WHERE AltEMail=@AltEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByAltEmail(Column _column, object newValue, String altEmail)
      {
        string cmdText = "UPDATE States SET {0}=@newValue WHERE AltEMail=@AltEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "AltEmail", altEmail);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCachedCommandText
      {
        get
        {
          return "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,ContactEmail,EMail,URL,ElectionsAuthority,LDSStateCode,ShowUnopposed,ShowWriteIn FROM States";
        }
      }

      public static StatesTable GetAllCachedData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode,IsState,State,ShortName,BallotStateName,Abbreviations,IsIncumbentShownOnBallots,EncloseNickname,ContactEmail,EMail,URL,ElectionsAuthority,LDSStateCode,ShowUnopposed,ShowWriteIn FROM States";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, StatesTable.ColumnSet.Cached);
      }

      public static string GetSelectCommandText(StatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case StatesTable.ColumnSet.All:
            return SelectAllCommandText;

          case StatesTable.ColumnSet.Cached:
            return SelectCachedCommandText;

          default:
            return null;
        }
      }

      static States()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.States

    #region vote.TempEmail

    public partial class TempEmailRow : DataRow
    {
      internal TempEmailRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 BatchId
      {
        get { return (Int32) this["BatchId"]; }
        set { this["BatchId"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String Title
      {
        get { return this["Title"] as String; }
        set { if (value == null) this["Title"] = DBNull.Value; else this["Title"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String PartyEmail
      {
        get { return this["PartyEmail"] as String; }
        set { if (value == null) this["PartyEmail"] = DBNull.Value; else this["PartyEmail"] = value; }
      }

      public Int32? VisitorId
      {
        get { if (this.IsNull("VisitorId")) return null; else return (Int32) this["VisitorId"]; }
        set { if (value.HasValue) this["VisitorId"] = value.Value; else this["VisitorId"] = DBNull.Value; }
      }

      public Int32? DonorId
      {
        get { if (this.IsNull("DonorId")) return null; else return (Int32) this["DonorId"]; }
        set { if (value.HasValue) this["DonorId"] = value.Value; else this["DonorId"] = DBNull.Value; }
      }

      public String SortName
      {
        get { return this["SortName"] as String; }
        set { if (value == null) this["SortName"] = DBNull.Value; else this["SortName"] = value; }
      }
    }

    [Serializable]
    public partial class TempEmailTable : TypedTableBase<TempEmailRow>
    {
      public TempEmailRow this[int index] { get { return (TempEmailRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TempEmailRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TempEmailTable(); }

      new public TempEmailRow NewRow() { return (TempEmailRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TempEmailRow(rb); }

      protected override Type GetRowType()
      { return typeof(TempEmailRow); }

      public void RemoveRow(TempEmailRow row) { this.Rows.Remove(row); }

      public TempEmailRow NewRow(Int32 id, Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localCode, String politicianKey, String electionKey, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, String sortName)
      {
        TempEmailRow row = NewRow();
        row.Id = id;
        row.BatchId = batchId;
        row.Email = email;
        row.Contact = contact;
        row.Title = title;
        row.Phone = phone;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.PoliticianKey = politicianKey;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PartyKey = partyKey;
        row.PartyEmail = partyEmail;
        row.VisitorId = visitorId;
        row.DonorId = donorId;
        row.SortName = sortName;
        return row;
      }

      public void AddRow(Int32 id, Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localCode, String politicianKey, String electionKey, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, String sortName)
      {
        TempEmailRow row = NewRow(id, batchId, email, contact, title, phone, stateCode, countyCode, localCode, politicianKey, electionKey, officeKey, partyKey, partyEmail, visitorId, donorId, sortName);
        AddRow(row);
      }

      public TempEmailRow NewRow(Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localCode, String politicianKey, String electionKey, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, String sortName)
      {
        TempEmailRow row = NewRow();
        row.BatchId = batchId;
        row.Email = email;
        row.Contact = contact;
        row.Title = title;
        row.Phone = phone;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.PoliticianKey = politicianKey;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PartyKey = partyKey;
        row.PartyEmail = partyEmail;
        row.VisitorId = visitorId;
        row.DonorId = donorId;
        row.SortName = sortName;
        return row;
      }

      public void AddRow(Int32 batchId, String email, String contact, String title, String phone, String stateCode, String countyCode, String localCode, String politicianKey, String electionKey, String officeKey, String partyKey, String partyEmail, Int32? visitorId, Int32? donorId, String sortName)
      {
        TempEmailRow row = NewRow(batchId, email, contact, title, phone, stateCode, countyCode, localCode, politicianKey, electionKey, officeKey, partyKey, partyEmail, visitorId, donorId, sortName);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn BatchIdColumn { get { return this.Columns["BatchId"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn TitleColumn { get { return this.Columns["Title"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn PartyEmailColumn { get { return this.Columns["PartyEmail"]; } }

      public DataColumn VisitorIdColumn { get { return this.Columns["VisitorId"]; } }

      public DataColumn DonorIdColumn { get { return this.Columns["DonorId"]; } }

      public DataColumn SortNameColumn { get { return this.Columns["SortName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("BatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Title", typeof(String));
        _column.MaxLength = 128;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.MaxLength = 64;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyEmail", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("VisitorId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DonorId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("SortName", typeof(String));
        _column.MaxLength = 128;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TempEmailTable() : this(ColumnSet.All) { }

      public TempEmailTable(ColumnSet columnSet)
      {
        this.TableName = "TempEmail";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TempEmailTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TempEmail
    {
      public const string TableName = "TempEmail";

      public enum Column { Id, BatchId, Email, Contact, Title, Phone, StateCode, CountyCode, LocalCode, PoliticianKey, ElectionKey, OfficeKey, PartyKey, PartyEmail, VisitorId, DonorId, SortName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.BatchId, "BatchId" },
        { Column.Email, "Email" },
        { Column.Contact, "Contact" },
        { Column.Title, "Title" },
        { Column.Phone, "Phone" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PartyKey, "PartyKey" },
        { Column.PartyEmail, "PartyEmail" },
        { Column.VisitorId, "VisitorId" },
        { Column.DonorId, "DonorId" },
        { Column.SortName, "SortName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalCode,PoliticianKey,ElectionKey,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,SortName FROM TempEmail";
        }
      }

      public static TempEmailTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalCode,PoliticianKey,ElectionKey,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,SortName FROM TempEmail";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static TempEmailTable FillTable(DbCommand command)
      {
        return FillTable(command, TempEmailTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TempEmailTable FillTable(DbCommand command, TempEmailTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TempEmailTable table = new TempEmailTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(TempEmailTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, TempEmailTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(TempEmailTable table, TempEmailTable.ColumnSet columnSet = TempEmailTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string BatchIdColumnName { get { return "BatchId"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string TitleColumnName { get { return "Title"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string PartyEmailColumnName { get { return "PartyEmail"; } }

      public static string VisitorIdColumnName { get { return "VisitorId"; } }

      public static string DonorIdColumnName { get { return "DonorId"; } }

      public static string SortNameColumnName { get { return "SortName"; } }

      public static int EmailMaxLength { get { return 128; } }

      public static int ContactMaxLength { get { return 128; } }

      public static int TitleMaxLength { get { return 128; } }

      public static int PhoneMaxLength { get { return 64; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int PartyEmailMaxLength { get { return 200; } }

      public static int SortNameMaxLength { get { return 128; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalCode,PoliticianKey,ElectionKey,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,SortName FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool BatchIdEmailExists(Int32 batchId, String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByBatchIdEmail(Column _column, Int32 batchId, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataByBatchIdEmail(Int32 batchId, String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalCode,PoliticianKey,ElectionKey,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,SortName FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteByBatchIdEmail(Int32 batchId, String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE BatchId=@BatchId AND Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByBatchId(Column _column, Int32 batchId)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmail WHERE BatchId=@BatchId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailTable GetDataByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,BatchId,Email,Contact,Title,Phone,StateCode,CountyCode,LocalCode,PoliticianKey,ElectionKey,OfficeKey,PartyKey,PartyEmail,VisitorId,DonorId,SortName FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        return FillTable(cmd, TempEmailTable.ColumnSet.All);
      }

      public static int DeleteByBatchId(Int32 batchId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmail WHERE BatchId=@BatchId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "BatchId", batchId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TempEmailTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TempEmailTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TempEmail()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TempEmail

    #region vote.TempEmailBatches

    public partial class TempEmailBatchesRow : DataRow
    {
      internal TempEmailBatchesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime CreationTime
      {
        get { return (DateTime) this["CreationTime"]; }
        set { this["CreationTime"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public DateTime TimeLastSent
      {
        get { return (DateTime) this["TimeLastSent"]; }
        set { this["TimeLastSent"] = value; }
      }

      public Int32 Sent
      {
        get { return (Int32) this["Sent"]; }
        set { this["Sent"] = value; }
      }

      public Int32 Failed
      {
        get { return (Int32) this["Failed"]; }
        set { this["Failed"] = value; }
      }
    }

    [Serializable]
    public partial class TempEmailBatchesTable : TypedTableBase<TempEmailBatchesRow>
    {
      public TempEmailBatchesRow this[int index] { get { return (TempEmailBatchesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(TempEmailBatchesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new TempEmailBatchesTable(); }

      new public TempEmailBatchesRow NewRow() { return (TempEmailBatchesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new TempEmailBatchesRow(rb); }

      protected override Type GetRowType()
      { return typeof(TempEmailBatchesRow); }

      public void RemoveRow(TempEmailBatchesRow row) { this.Rows.Remove(row); }

      public TempEmailBatchesRow NewRow(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow();
        row.Id = id;
        row.CreationTime = creationTime;
        row.UserName = userName;
        row.TimeLastSent = timeLastSent;
        row.Sent = sent;
        row.Failed = failed;
        return row;
      }

      public void AddRow(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow(id, creationTime, userName, timeLastSent, sent, failed);
        AddRow(row);
      }

      public TempEmailBatchesRow NewRow(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow();
        row.CreationTime = creationTime;
        row.UserName = userName;
        row.TimeLastSent = timeLastSent;
        row.Sent = sent;
        row.Failed = failed;
        return row;
      }

      public void AddRow(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed)
      {
        TempEmailBatchesRow row = NewRow(creationTime, userName, timeLastSent, sent, failed);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CreationTimeColumn { get { return this.Columns["CreationTime"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn TimeLastSentColumn { get { return this.Columns["TimeLastSent"]; } }

      public DataColumn SentColumn { get { return this.Columns["Sent"]; } }

      public DataColumn FailedColumn { get { return this.Columns["Failed"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CreationTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TimeLastSent", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sent", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Failed", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public TempEmailBatchesTable() : this(ColumnSet.All) { }

      public TempEmailBatchesTable(ColumnSet columnSet)
      {
        this.TableName = "TempEmailBatches";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected TempEmailBatchesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class TempEmailBatches
    {
      public const string TableName = "TempEmailBatches";

      public enum Column { Id, CreationTime, UserName, TimeLastSent, Sent, Failed }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CreationTime, "CreationTime" },
        { Column.UserName, "UserName" },
        { Column.TimeLastSent, "TimeLastSent" },
        { Column.Sent, "Sent" },
        { Column.Failed, "Failed" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailBatches";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TempEmailBatches (Id,CreationTime,UserName,TimeLastSent,Sent,Failed) VALUES (@Id,@CreationTime,@UserName,@TimeLastSent,@Sent,@Failed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "TimeLastSent", timeLastSent);
        VoteDb.AddCommandParameter(cmd, "Sent", sent);
        VoteDb.AddCommandParameter(cmd, "Failed", failed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime creationTime, String userName, DateTime timeLastSent, Int32 sent, Int32 failed, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO TempEmailBatches (CreationTime,UserName,TimeLastSent,Sent,Failed) VALUES (@CreationTime,@UserName,@TimeLastSent,@Sent,@Failed)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteDb.AddCommandParameter(cmd, "UserName", userName);
        VoteDb.AddCommandParameter(cmd, "TimeLastSent", timeLastSent);
        VoteDb.AddCommandParameter(cmd, "Sent", sent);
        VoteDb.AddCommandParameter(cmd, "Failed", failed);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches";
        }
      }

      public static TempEmailBatchesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, TempEmailBatchesTable.ColumnSet.All);
      }

      public static TempEmailBatchesTable FillTable(DbCommand command)
      {
        return FillTable(command, TempEmailBatchesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static TempEmailBatchesTable FillTable(DbCommand command, TempEmailBatchesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          TempEmailBatchesTable table = new TempEmailBatchesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CreationTimeColumnName { get { return "CreationTime"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string TimeLastSentColumnName { get { return "TimeLastSent"; } }

      public static string SentColumnName { get { return "Sent"; } }

      public static string FailedColumnName { get { return "Failed"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM TempEmailBatches WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static TempEmailBatchesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,UserName,TimeLastSent,Sent,Failed FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, TempEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET CreationTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeLastSentById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET TimeLastSent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Sent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET Failed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE TempEmailBatches SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM TempEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(TempEmailBatchesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case TempEmailBatchesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static TempEmailBatches()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.TempEmailBatches

    #region vote.VolunteersView

    public partial class VolunteersViewRow : DataRow
    {
      internal VolunteersViewRow(DataRowBuilder rb) : base(rb) {}

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Phone
      {
        get { return this["Phone"] as String; }
        set { if (value == null) this["Phone"] = DBNull.Value; else this["Phone"] = value; }
      }

      public String PartyName
      {
        get { return this["PartyName"] as String; }
        set { if (value == null) this["PartyName"] = DBNull.Value; else this["PartyName"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String StateName
      {
        get { return this["StateName"] as String; }
        set { if (value == null) this["StateName"] = DBNull.Value; else this["StateName"] = value; }
      }
    }

    [Serializable]
    public partial class VolunteersViewTable : TypedTableBase<VolunteersViewRow>
    {
      public VolunteersViewRow this[int index] { get { return (VolunteersViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VolunteersViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VolunteersViewTable(); }

      new public VolunteersViewRow NewRow() { return (VolunteersViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VolunteersViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(VolunteersViewRow); }

      public void RemoveRow(VolunteersViewRow row) { this.Rows.Remove(row); }

      public VolunteersViewRow NewRow(String email, String password, String partyKey, String firstName, String lastName, String phone, String partyName, String stateCode, String stateName)
      {
        VolunteersViewRow row = NewRow();
        row.Email = email;
        row.Password = password;
        row.PartyKey = partyKey;
        row.FirstName = firstName;
        row.LastName = lastName;
        row.Phone = phone;
        row.PartyName = partyName;
        row.StateCode = stateCode;
        row.StateName = stateName;
        return row;
      }

      public void AddRow(String email, String password, String partyKey, String firstName, String lastName, String phone, String partyName, String stateCode, String stateName)
      {
        VolunteersViewRow row = NewRow(email, password, partyKey, firstName, lastName, phone, partyName, stateCode, stateName);
        AddRow(row);
      }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn PhoneColumn { get { return this.Columns["Phone"]; } }

      public DataColumn PartyNameColumn { get { return this.Columns["PartyName"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn StateNameColumn { get { return this.Columns["StateName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Password", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Phone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyName", typeof(String));
        _column.MaxLength = 200;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("StateName", typeof(String));
        _column.MaxLength = 100;
        base.Columns.Add(_column);
      }

      public VolunteersViewTable() : this(ColumnSet.All) { }

      public VolunteersViewTable(ColumnSet columnSet)
      {
        this.TableName = "VolunteersView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VolunteersViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VolunteersView
    {
      public const string TableName = "VolunteersView";

      public enum Column { Email, Password, PartyKey, FirstName, LastName, Phone, PartyName, StateCode, StateName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Email, "Email" },
        { Column.Password, "Password" },
        { Column.PartyKey, "PartyKey" },
        { Column.FirstName, "FirstName" },
        { Column.LastName, "LastName" },
        { Column.Phone, "Phone" },
        { Column.PartyName, "PartyName" },
        { Column.StateCode, "StateCode" },
        { Column.StateName, "StateName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,StateCode,StateName FROM VolunteersView";
        }
      }

      public static VolunteersViewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,StateCode,StateName FROM VolunteersView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VolunteersViewTable.ColumnSet.All);
      }

      public static VolunteersViewTable FillTable(DbCommand command)
      {
        return FillTable(command, VolunteersViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VolunteersViewTable FillTable(DbCommand command, VolunteersViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VolunteersViewTable table = new VolunteersViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string EmailColumnName { get { return "Email"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string PhoneColumnName { get { return "Phone"; } }

      public static string PartyNameColumnName { get { return "PartyName"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string StateNameColumnName { get { return "StateName"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int PasswordMaxLength { get { return 50; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int FirstNameMaxLength { get { return int.MaxValue; } }

      public static int LastNameMaxLength { get { return int.MaxValue; } }

      public static int PhoneMaxLength { get { return int.MaxValue; } }

      public static int PartyNameMaxLength { get { return 200; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int StateNameMaxLength { get { return 100; } }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM VolunteersView WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String email)
      {
        return GetColumnByEmail(_column, email);
      }

      public static VolunteersViewTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,Password,PartyKey,FirstName,LastName,Phone,PartyName,StateCode,StateName FROM VolunteersView WHERE Email=@Email";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, VolunteersViewTable.ColumnSet.All);
      }

      public static VolunteersViewTable GetData(String email, int commandTimeout = -1)
      {
        return GetDataByEmail(email, commandTimeout);
      }

      public static string GetSelectCommandText(VolunteersViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VolunteersViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VolunteersView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VolunteersView

    #region vote.VsCandidates

    public partial class VsCandidatesRow : DataRow
    {
      internal VsCandidatesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 CandidateId
      {
        get { return (Int32) this["CandidateId"]; }
        set { this["CandidateId"] = value; }
      }

      public DateTime LastRefreshDate
      {
        get { return (DateTime) this["LastRefreshDate"]; }
        set { this["LastRefreshDate"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MiddleName"] as String; }
        set { if (value == null) this["MiddleName"] = DBNull.Value; else this["MiddleName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public DateTime BirthDate
      {
        get { return (DateTime) this["BirthDate"]; }
        set { this["BirthDate"] = value; }
      }

      public String BirthPlace
      {
        get { return this["BirthPlace"] as String; }
        set { if (value == null) this["BirthPlace"] = DBNull.Value; else this["BirthPlace"] = value; }
      }

      public String Pronunciation
      {
        get { return this["Pronunciation"] as String; }
        set { if (value == null) this["Pronunciation"] = DBNull.Value; else this["Pronunciation"] = value; }
      }

      public String Gender
      {
        get { return this["Gender"] as String; }
        set { if (value == null) this["Gender"] = DBNull.Value; else this["Gender"] = value; }
      }

      public String Family
      {
        get { return this["Family"] as String; }
        set { if (value == null) this["Family"] = DBNull.Value; else this["Family"] = value; }
      }

      public String Photo
      {
        get { return this["Photo"] as String; }
        set { if (value == null) this["Photo"] = DBNull.Value; else this["Photo"] = value; }
      }

      public String HomeCity
      {
        get { return this["HomeCity"] as String; }
        set { if (value == null) this["HomeCity"] = DBNull.Value; else this["HomeCity"] = value; }
      }

      public String HomeState
      {
        get { return this["HomeState"] as String; }
        set { if (value == null) this["HomeState"] = DBNull.Value; else this["HomeState"] = value; }
      }

      public String Education
      {
        get { return this["Education"] as String; }
        set { if (value == null) this["Education"] = DBNull.Value; else this["Education"] = value; }
      }

      public String Profession
      {
        get { return this["Profession"] as String; }
        set { if (value == null) this["Profession"] = DBNull.Value; else this["Profession"] = value; }
      }

      public String Political
      {
        get { return this["Political"] as String; }
        set { if (value == null) this["Political"] = DBNull.Value; else this["Political"] = value; }
      }

      public String Religion
      {
        get { return this["Religion"] as String; }
        set { if (value == null) this["Religion"] = DBNull.Value; else this["Religion"] = value; }
      }

      public String CongMembership
      {
        get { return this["CongMembership"] as String; }
        set { if (value == null) this["CongMembership"] = DBNull.Value; else this["CongMembership"] = value; }
      }

      public String OrgMembership
      {
        get { return this["OrgMembership"] as String; }
        set { if (value == null) this["OrgMembership"] = DBNull.Value; else this["OrgMembership"] = value; }
      }

      public String SpecialMsg
      {
        get { return this["SpecialMsg"] as String; }
        set { if (value == null) this["SpecialMsg"] = DBNull.Value; else this["SpecialMsg"] = value; }
      }
    }

    [Serializable]
    public partial class VsCandidatesTable : TypedTableBase<VsCandidatesRow>
    {
      public VsCandidatesRow this[int index] { get { return (VsCandidatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsCandidatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsCandidatesTable(); }

      new public VsCandidatesRow NewRow() { return (VsCandidatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsCandidatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsCandidatesRow); }

      public void RemoveRow(VsCandidatesRow row) { this.Rows.Remove(row); }

      public VsCandidatesRow NewRow(Int32 candidateId, DateTime lastRefreshDate, String firstName, String middleName, String nickname, String lastName, String suffix, DateTime birthDate, String birthPlace, String pronunciation, String gender, String family, String photo, String homeCity, String homeState, String education, String profession, String political, String religion, String congMembership, String orgMembership, String specialMsg)
      {
        VsCandidatesRow row = NewRow();
        row.CandidateId = candidateId;
        row.LastRefreshDate = lastRefreshDate;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.Suffix = suffix;
        row.BirthDate = birthDate;
        row.BirthPlace = birthPlace;
        row.Pronunciation = pronunciation;
        row.Gender = gender;
        row.Family = family;
        row.Photo = photo;
        row.HomeCity = homeCity;
        row.HomeState = homeState;
        row.Education = education;
        row.Profession = profession;
        row.Political = political;
        row.Religion = religion;
        row.CongMembership = congMembership;
        row.OrgMembership = orgMembership;
        row.SpecialMsg = specialMsg;
        return row;
      }

      public void AddRow(Int32 candidateId, DateTime lastRefreshDate, String firstName, String middleName, String nickname, String lastName, String suffix, DateTime birthDate, String birthPlace, String pronunciation, String gender, String family, String photo, String homeCity, String homeState, String education, String profession, String political, String religion, String congMembership, String orgMembership, String specialMsg)
      {
        VsCandidatesRow row = NewRow(candidateId, lastRefreshDate, firstName, middleName, nickname, lastName, suffix, birthDate, birthPlace, pronunciation, gender, family, photo, homeCity, homeState, education, profession, political, religion, congMembership, orgMembership, specialMsg);
        AddRow(row);
      }

      public DataColumn CandidateIdColumn { get { return this.Columns["CandidateId"]; } }

      public DataColumn LastRefreshDateColumn { get { return this.Columns["LastRefreshDate"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MiddleName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn BirthDateColumn { get { return this.Columns["BirthDate"]; } }

      public DataColumn BirthPlaceColumn { get { return this.Columns["BirthPlace"]; } }

      public DataColumn PronunciationColumn { get { return this.Columns["Pronunciation"]; } }

      public DataColumn GenderColumn { get { return this.Columns["Gender"]; } }

      public DataColumn FamilyColumn { get { return this.Columns["Family"]; } }

      public DataColumn PhotoColumn { get { return this.Columns["Photo"]; } }

      public DataColumn HomeCityColumn { get { return this.Columns["HomeCity"]; } }

      public DataColumn HomeStateColumn { get { return this.Columns["HomeState"]; } }

      public DataColumn EducationColumn { get { return this.Columns["Education"]; } }

      public DataColumn ProfessionColumn { get { return this.Columns["Profession"]; } }

      public DataColumn PoliticalColumn { get { return this.Columns["Political"]; } }

      public DataColumn ReligionColumn { get { return this.Columns["Religion"]; } }

      public DataColumn CongMembershipColumn { get { return this.Columns["CongMembership"]; } }

      public DataColumn OrgMembershipColumn { get { return this.Columns["OrgMembership"]; } }

      public DataColumn SpecialMsgColumn { get { return this.Columns["SpecialMsg"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("CandidateId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastRefreshDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MiddleName", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BirthDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BirthPlace", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Pronunciation", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Gender", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Family", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Photo", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HomeCity", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HomeState", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Education", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Profession", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Political", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Religion", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongMembership", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrgMembership", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SpecialMsg", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VsCandidatesTable() : this(ColumnSet.All) { }

      public VsCandidatesTable(ColumnSet columnSet)
      {
        this.TableName = "VsCandidates";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsCandidatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsCandidates
    {
      public const string TableName = "VsCandidates";

      public enum Column { CandidateId, LastRefreshDate, FirstName, MiddleName, Nickname, LastName, Suffix, BirthDate, BirthPlace, Pronunciation, Gender, Family, Photo, HomeCity, HomeState, Education, Profession, Political, Religion, CongMembership, OrgMembership, SpecialMsg }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.CandidateId, "CandidateId" },
        { Column.LastRefreshDate, "LastRefreshDate" },
        { Column.FirstName, "FirstName" },
        { Column.MiddleName, "MiddleName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LastName" },
        { Column.Suffix, "Suffix" },
        { Column.BirthDate, "BirthDate" },
        { Column.BirthPlace, "BirthPlace" },
        { Column.Pronunciation, "Pronunciation" },
        { Column.Gender, "Gender" },
        { Column.Family, "Family" },
        { Column.Photo, "Photo" },
        { Column.HomeCity, "HomeCity" },
        { Column.HomeState, "HomeState" },
        { Column.Education, "Education" },
        { Column.Profession, "Profession" },
        { Column.Political, "Political" },
        { Column.Religion, "Religion" },
        { Column.CongMembership, "CongMembership" },
        { Column.OrgMembership, "OrgMembership" },
        { Column.SpecialMsg, "SpecialMsg" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 candidateId, DateTime lastRefreshDate, String firstName, String middleName, String nickname, String lastName, String suffix, DateTime birthDate, String birthPlace, String pronunciation, String gender, String family, String photo, String homeCity, String homeState, String education, String profession, String political, String religion, String congMembership, String orgMembership, String specialMsg, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsCandidates (CandidateId,LastRefreshDate,FirstName,MiddleName,Nickname,LastName,Suffix,BirthDate,BirthPlace,Pronunciation,Gender,Family,Photo,HomeCity,HomeState,Education,Profession,Political,Religion,CongMembership,OrgMembership,SpecialMsg) VALUES (@CandidateId,@LastRefreshDate,@FirstName,@MiddleName,@Nickname,@LastName,@Suffix,@BirthDate,@BirthPlace,@Pronunciation,@Gender,@Family,@Photo,@HomeCity,@HomeState,@Education,@Profession,@Political,@Religion,@CongMembership,@OrgMembership,@SpecialMsg)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "LastRefreshDate", lastRefreshDate);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteDb.AddCommandParameter(cmd, "BirthDate", birthDate);
        VoteDb.AddCommandParameter(cmd, "BirthPlace", birthPlace);
        VoteDb.AddCommandParameter(cmd, "Pronunciation", pronunciation);
        VoteDb.AddCommandParameter(cmd, "Gender", gender);
        VoteDb.AddCommandParameter(cmd, "Family", family);
        VoteDb.AddCommandParameter(cmd, "Photo", photo);
        VoteDb.AddCommandParameter(cmd, "HomeCity", homeCity);
        VoteDb.AddCommandParameter(cmd, "HomeState", homeState);
        VoteDb.AddCommandParameter(cmd, "Education", education);
        VoteDb.AddCommandParameter(cmd, "Profession", profession);
        VoteDb.AddCommandParameter(cmd, "Political", political);
        VoteDb.AddCommandParameter(cmd, "Religion", religion);
        VoteDb.AddCommandParameter(cmd, "CongMembership", congMembership);
        VoteDb.AddCommandParameter(cmd, "OrgMembership", orgMembership);
        VoteDb.AddCommandParameter(cmd, "SpecialMsg", specialMsg);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT CandidateId,LastRefreshDate,FirstName,MiddleName,Nickname,LastName,Suffix,BirthDate,BirthPlace,Pronunciation,Gender,Family,Photo,HomeCity,HomeState,Education,Profession,Political,Religion,CongMembership,OrgMembership,SpecialMsg FROM VsCandidates";
        }
      }

      public static VsCandidatesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT CandidateId,LastRefreshDate,FirstName,MiddleName,Nickname,LastName,Suffix,BirthDate,BirthPlace,Pronunciation,Gender,Family,Photo,HomeCity,HomeState,Education,Profession,Political,Religion,CongMembership,OrgMembership,SpecialMsg FROM VsCandidates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsCandidatesTable.ColumnSet.All);
      }

      public static VsCandidatesTable FillTable(DbCommand command)
      {
        return FillTable(command, VsCandidatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsCandidatesTable FillTable(DbCommand command, VsCandidatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsCandidatesTable table = new VsCandidatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string CandidateIdColumnName { get { return "CandidateId"; } }

      public static string LastRefreshDateColumnName { get { return "LastRefreshDate"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string MiddleNameColumnName { get { return "MiddleName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string BirthDateColumnName { get { return "BirthDate"; } }

      public static string BirthPlaceColumnName { get { return "BirthPlace"; } }

      public static string PronunciationColumnName { get { return "Pronunciation"; } }

      public static string GenderColumnName { get { return "Gender"; } }

      public static string FamilyColumnName { get { return "Family"; } }

      public static string PhotoColumnName { get { return "Photo"; } }

      public static string HomeCityColumnName { get { return "HomeCity"; } }

      public static string HomeStateColumnName { get { return "HomeState"; } }

      public static string EducationColumnName { get { return "Education"; } }

      public static string ProfessionColumnName { get { return "Profession"; } }

      public static string PoliticalColumnName { get { return "Political"; } }

      public static string ReligionColumnName { get { return "Religion"; } }

      public static string CongMembershipColumnName { get { return "CongMembership"; } }

      public static string OrgMembershipColumnName { get { return "OrgMembership"; } }

      public static string SpecialMsgColumnName { get { return "SpecialMsg"; } }

      public static int FirstNameMaxLength { get { return 30; } }

      public static int MiddleNameMaxLength { get { return 30; } }

      public static int NicknameMaxLength { get { return 50; } }

      public static int LastNameMaxLength { get { return 30; } }

      public static int SuffixMaxLength { get { return 10; } }

      public static int BirthPlaceMaxLength { get { return 60; } }

      public static int PronunciationMaxLength { get { return 30; } }

      public static int GenderMaxLength { get { return 1; } }

      public static int FamilyMaxLength { get { return int.MaxValue; } }

      public static int PhotoMaxLength { get { return 255; } }

      public static int HomeCityMaxLength { get { return 30; } }

      public static int HomeStateMaxLength { get { return 2; } }

      public static int EducationMaxLength { get { return int.MaxValue; } }

      public static int ProfessionMaxLength { get { return int.MaxValue; } }

      public static int PoliticalMaxLength { get { return int.MaxValue; } }

      public static int ReligionMaxLength { get { return int.MaxValue; } }

      public static int CongMembershipMaxLength { get { return int.MaxValue; } }

      public static int OrgMembershipMaxLength { get { return int.MaxValue; } }

      public static int SpecialMsgMaxLength { get { return int.MaxValue; } }

      public static bool CandidateIdExists(Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidates WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByCandidateId(Column _column, Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsCandidates WHERE CandidateId=@CandidateId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 candidateId)
      {
        return GetColumnByCandidateId(_column, candidateId);
      }

      public static VsCandidatesTable GetDataByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "SELECT CandidateId,LastRefreshDate,FirstName,MiddleName,Nickname,LastName,Suffix,BirthDate,BirthPlace,Pronunciation,Gender,Family,Photo,HomeCity,HomeState,Education,Profession,Political,Religion,CongMembership,OrgMembership,SpecialMsg FROM VsCandidates WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return FillTable(cmd, VsCandidatesTable.ColumnSet.All);
      }

      public static VsCandidatesTable GetData(Int32 candidateId, int commandTimeout = -1)
      {
        return GetDataByCandidateId(candidateId, commandTimeout);
      }

      public static int DeleteByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsCandidates WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VsCandidatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsCandidatesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsCandidates()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsCandidates

    #region vote.VsCandidatesItems

    public partial class VsCandidatesItemsRow : DataRow
    {
      internal VsCandidatesItemsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 CandidateId
      {
        get { return (Int32) this["CandidateId"]; }
        set { this["CandidateId"] = value; }
      }

      public String ItemName
      {
        get { return this["ItemName"] as String; }
        set { if (value == null) this["ItemName"] = DBNull.Value; else this["ItemName"] = value; }
      }

      public String ItemData
      {
        get { return this["ItemData"] as String; }
        set { if (value == null) this["ItemData"] = DBNull.Value; else this["ItemData"] = value; }
      }
    }

    [Serializable]
    public partial class VsCandidatesItemsTable : TypedTableBase<VsCandidatesItemsRow>
    {
      public VsCandidatesItemsRow this[int index] { get { return (VsCandidatesItemsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsCandidatesItemsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsCandidatesItemsTable(); }

      new public VsCandidatesItemsRow NewRow() { return (VsCandidatesItemsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsCandidatesItemsRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsCandidatesItemsRow); }

      public void RemoveRow(VsCandidatesItemsRow row) { this.Rows.Remove(row); }

      public VsCandidatesItemsRow NewRow(Int32 id, Int32 candidateId, String itemName, String itemData)
      {
        VsCandidatesItemsRow row = NewRow();
        row.Id = id;
        row.CandidateId = candidateId;
        row.ItemName = itemName;
        row.ItemData = itemData;
        return row;
      }

      public void AddRow(Int32 id, Int32 candidateId, String itemName, String itemData)
      {
        VsCandidatesItemsRow row = NewRow(id, candidateId, itemName, itemData);
        AddRow(row);
      }

      public VsCandidatesItemsRow NewRow(Int32 candidateId, String itemName, String itemData)
      {
        VsCandidatesItemsRow row = NewRow();
        row.CandidateId = candidateId;
        row.ItemName = itemName;
        row.ItemData = itemData;
        return row;
      }

      public void AddRow(Int32 candidateId, String itemName, String itemData)
      {
        VsCandidatesItemsRow row = NewRow(candidateId, itemName, itemData);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CandidateIdColumn { get { return this.Columns["CandidateId"]; } }

      public DataColumn ItemNameColumn { get { return this.Columns["ItemName"]; } }

      public DataColumn ItemDataColumn { get { return this.Columns["ItemData"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CandidateId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ItemName", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ItemData", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VsCandidatesItemsTable() : this(ColumnSet.All) { }

      public VsCandidatesItemsTable(ColumnSet columnSet)
      {
        this.TableName = "VsCandidatesItems";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsCandidatesItemsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsCandidatesItems
    {
      public const string TableName = "VsCandidatesItems";

      public enum Column { Id, CandidateId, ItemName, ItemData }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CandidateId, "CandidateId" },
        { Column.ItemName, "ItemName" },
        { Column.ItemData, "ItemData" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesItems";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 candidateId, String itemName, String itemData, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsCandidatesItems (Id,CandidateId,ItemName,ItemData) VALUES (@Id,@CandidateId,@ItemName,@ItemData)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "ItemName", itemName);
        VoteDb.AddCommandParameter(cmd, "ItemData", itemData);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 candidateId, String itemName, String itemData, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsCandidatesItems (CandidateId,ItemName,ItemData) VALUES (@CandidateId,@ItemName,@ItemData)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "ItemName", itemName);
        VoteDb.AddCommandParameter(cmd, "ItemData", itemData);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CandidateId,ItemName,ItemData FROM VsCandidatesItems";
        }
      }

      public static VsCandidatesItemsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,ItemName,ItemData FROM VsCandidatesItems";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsCandidatesItemsTable.ColumnSet.All);
      }

      public static VsCandidatesItemsTable FillTable(DbCommand command)
      {
        return FillTable(command, VsCandidatesItemsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsCandidatesItemsTable FillTable(DbCommand command, VsCandidatesItemsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsCandidatesItemsTable table = new VsCandidatesItemsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CandidateIdColumnName { get { return "CandidateId"; } }

      public static string ItemNameColumnName { get { return "ItemName"; } }

      public static string ItemDataColumnName { get { return "ItemData"; } }

      public static int ItemNameMaxLength { get { return 40; } }

      public static int ItemDataMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesItems WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsCandidatesItems WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static VsCandidatesItemsTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,ItemName,ItemData FROM VsCandidatesItems WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, VsCandidatesItemsTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsCandidatesItems WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesItems WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCandidateId(Column _column, Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsCandidatesItems WHERE CandidateId=@CandidateId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 candidateId)
      {
        return GetColumnByCandidateId(_column, candidateId);
      }

      public static VsCandidatesItemsTable GetDataByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,ItemName,ItemData FROM VsCandidatesItems WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return FillTable(cmd, VsCandidatesItemsTable.ColumnSet.All);
      }

      public static VsCandidatesItemsTable GetData(Int32 candidateId, int commandTimeout = -1)
      {
        return GetDataByCandidateId(candidateId, commandTimeout);
      }

      public static int DeleteByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsCandidatesItems WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VsCandidatesItemsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsCandidatesItemsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsCandidatesItems()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsCandidatesItems

    #region vote.VsCandidatesWebAddresses

    public partial class VsCandidatesWebAddressesRow : DataRow
    {
      internal VsCandidatesWebAddressesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 CandidateId
      {
        get { return (Int32) this["CandidateId"]; }
        set { this["CandidateId"] = value; }
      }

      public String WebAddressTypeId
      {
        get { return this["WebAddressTypeId"] as String; }
        set { if (value == null) this["WebAddressTypeId"] = DBNull.Value; else this["WebAddressTypeId"] = value; }
      }

      public String WebAddress
      {
        get { return this["WebAddress"] as String; }
        set { if (value == null) this["WebAddress"] = DBNull.Value; else this["WebAddress"] = value; }
      }
    }

    [Serializable]
    public partial class VsCandidatesWebAddressesTable : TypedTableBase<VsCandidatesWebAddressesRow>
    {
      public VsCandidatesWebAddressesRow this[int index] { get { return (VsCandidatesWebAddressesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsCandidatesWebAddressesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsCandidatesWebAddressesTable(); }

      new public VsCandidatesWebAddressesRow NewRow() { return (VsCandidatesWebAddressesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsCandidatesWebAddressesRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsCandidatesWebAddressesRow); }

      public void RemoveRow(VsCandidatesWebAddressesRow row) { this.Rows.Remove(row); }

      public VsCandidatesWebAddressesRow NewRow(Int32 id, Int32 candidateId, String webAddressTypeId, String webAddress)
      {
        VsCandidatesWebAddressesRow row = NewRow();
        row.Id = id;
        row.CandidateId = candidateId;
        row.WebAddressTypeId = webAddressTypeId;
        row.WebAddress = webAddress;
        return row;
      }

      public void AddRow(Int32 id, Int32 candidateId, String webAddressTypeId, String webAddress)
      {
        VsCandidatesWebAddressesRow row = NewRow(id, candidateId, webAddressTypeId, webAddress);
        AddRow(row);
      }

      public VsCandidatesWebAddressesRow NewRow(Int32 candidateId, String webAddressTypeId, String webAddress)
      {
        VsCandidatesWebAddressesRow row = NewRow();
        row.CandidateId = candidateId;
        row.WebAddressTypeId = webAddressTypeId;
        row.WebAddress = webAddress;
        return row;
      }

      public void AddRow(Int32 candidateId, String webAddressTypeId, String webAddress)
      {
        VsCandidatesWebAddressesRow row = NewRow(candidateId, webAddressTypeId, webAddress);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CandidateIdColumn { get { return this.Columns["CandidateId"]; } }

      public DataColumn WebAddressTypeIdColumn { get { return this.Columns["WebAddressTypeId"]; } }

      public DataColumn WebAddressColumn { get { return this.Columns["WebAddress"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CandidateId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddressTypeId", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WebAddress", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VsCandidatesWebAddressesTable() : this(ColumnSet.All) { }

      public VsCandidatesWebAddressesTable(ColumnSet columnSet)
      {
        this.TableName = "VsCandidatesWebAddresses";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsCandidatesWebAddressesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsCandidatesWebAddresses
    {
      public const string TableName = "VsCandidatesWebAddresses";

      public enum Column { Id, CandidateId, WebAddressTypeId, WebAddress }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CandidateId, "CandidateId" },
        { Column.WebAddressTypeId, "WebAddressTypeId" },
        { Column.WebAddress, "WebAddress" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesWebAddresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 candidateId, String webAddressTypeId, String webAddress, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsCandidatesWebAddresses (Id,CandidateId,WebAddressTypeId,WebAddress) VALUES (@Id,@CandidateId,@WebAddressTypeId,@WebAddress)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "WebAddressTypeId", webAddressTypeId);
        VoteDb.AddCommandParameter(cmd, "WebAddress", webAddress);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 candidateId, String webAddressTypeId, String webAddress, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsCandidatesWebAddresses (CandidateId,WebAddressTypeId,WebAddress) VALUES (@CandidateId,@WebAddressTypeId,@WebAddress)";
        switch (VoteDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "WebAddressTypeId", webAddressTypeId);
        VoteDb.AddCommandParameter(cmd, "WebAddress", webAddress);
        return Convert.ToInt32(VoteDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CandidateId,WebAddressTypeId,WebAddress FROM VsCandidatesWebAddresses";
        }
      }

      public static VsCandidatesWebAddressesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,WebAddressTypeId,WebAddress FROM VsCandidatesWebAddresses";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsCandidatesWebAddressesTable.ColumnSet.All);
      }

      public static VsCandidatesWebAddressesTable FillTable(DbCommand command)
      {
        return FillTable(command, VsCandidatesWebAddressesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsCandidatesWebAddressesTable FillTable(DbCommand command, VsCandidatesWebAddressesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsCandidatesWebAddressesTable table = new VsCandidatesWebAddressesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CandidateIdColumnName { get { return "CandidateId"; } }

      public static string WebAddressTypeIdColumnName { get { return "WebAddressTypeId"; } }

      public static string WebAddressColumnName { get { return "WebAddress"; } }

      public static int WebAddressTypeIdMaxLength { get { return 1; } }

      public static int WebAddressMaxLength { get { return 255; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesWebAddresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsCandidatesWebAddresses WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static VsCandidatesWebAddressesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,WebAddressTypeId,WebAddress FROM VsCandidatesWebAddresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, VsCandidatesWebAddressesTable.ColumnSet.All);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsCandidatesWebAddresses WHERE Id=@Id";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Id", id);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsCandidatesWebAddresses WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCandidateId(Column _column, Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsCandidatesWebAddresses WHERE CandidateId=@CandidateId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 candidateId)
      {
        return GetColumnByCandidateId(_column, candidateId);
      }

      public static VsCandidatesWebAddressesTable GetDataByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CandidateId,WebAddressTypeId,WebAddress FROM VsCandidatesWebAddresses WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return FillTable(cmd, VsCandidatesWebAddressesTable.ColumnSet.All);
      }

      public static VsCandidatesWebAddressesTable GetData(Int32 candidateId, int commandTimeout = -1)
      {
        return GetDataByCandidateId(candidateId, commandTimeout);
      }

      public static int DeleteByCandidateId(Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsCandidatesWebAddresses WHERE CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VsCandidatesWebAddressesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsCandidatesWebAddressesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsCandidatesWebAddresses()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsCandidatesWebAddresses

    #region vote.VsElectionYearState

    public partial class VsElectionYearStateRow : DataRow
    {
      internal VsElectionYearStateRow(DataRowBuilder rb) : base(rb) {}

      public String ElectionYear
      {
        get { return this["ElectionYear"] as String; }
        set { if (value == null) this["ElectionYear"] = DBNull.Value; else this["ElectionYear"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public DateTime? LastRefreshTime
      {
        get { if (this.IsNull("LastRefreshTime")) return null; else return (DateTime) this["LastRefreshTime"]; }
        set { if (value.HasValue) this["LastRefreshTime"] = value.Value; else this["LastRefreshTime"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class VsElectionYearStateTable : TypedTableBase<VsElectionYearStateRow>
    {
      public VsElectionYearStateRow this[int index] { get { return (VsElectionYearStateRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsElectionYearStateRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsElectionYearStateTable(); }

      new public VsElectionYearStateRow NewRow() { return (VsElectionYearStateRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsElectionYearStateRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsElectionYearStateRow); }

      public void RemoveRow(VsElectionYearStateRow row) { this.Rows.Remove(row); }

      public VsElectionYearStateRow NewRow(String electionYear, String stateCode, DateTime? lastRefreshTime)
      {
        VsElectionYearStateRow row = NewRow();
        row.ElectionYear = electionYear;
        row.StateCode = stateCode;
        row.LastRefreshTime = lastRefreshTime;
        return row;
      }

      public void AddRow(String electionYear, String stateCode, DateTime? lastRefreshTime)
      {
        VsElectionYearStateRow row = NewRow(electionYear, stateCode, lastRefreshTime);
        AddRow(row);
      }

      public DataColumn ElectionYearColumn { get { return this.Columns["ElectionYear"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn LastRefreshTimeColumn { get { return this.Columns["LastRefreshTime"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionYear", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastRefreshTime", typeof(DateTime));
        base.Columns.Add(_column);
      }

      public VsElectionYearStateTable() : this(ColumnSet.All) { }

      public VsElectionYearStateTable(ColumnSet columnSet)
      {
        this.TableName = "VsElectionYearState";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsElectionYearStateTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsElectionYearState
    {
      public const string TableName = "VsElectionYearState";

      public enum Column { ElectionYear, StateCode, LastRefreshTime }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionYear, "ElectionYear" },
        { Column.StateCode, "StateCode" },
        { Column.LastRefreshTime, "LastRefreshTime" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionYearState";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String electionYear, String stateCode, DateTime? lastRefreshTime, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsElectionYearState (ElectionYear,StateCode,LastRefreshTime) VALUES (@ElectionYear,@StateCode,@LastRefreshTime)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "LastRefreshTime", lastRefreshTime);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionYear,StateCode,LastRefreshTime FROM VsElectionYearState";
        }
      }

      public static VsElectionYearStateTable FillTable(DbCommand command)
      {
        return FillTable(command, VsElectionYearStateTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsElectionYearStateTable FillTable(DbCommand command, VsElectionYearStateTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsElectionYearStateTable table = new VsElectionYearStateTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string ElectionYearColumnName { get { return "ElectionYear"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string LastRefreshTimeColumnName { get { return "LastRefreshTime"; } }

      public static int ElectionYearMaxLength { get { return 4; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static bool ElectionYearStateCodeExists(String electionYear, String stateCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionYearState WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetElectionYearByElectionYearStateCode(String electionYear, String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionYear FROM VsElectionYearState WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionYear(String electionYear, String stateCode, String defaultValue = null)
      {
        return GetElectionYearByElectionYearStateCode(electionYear, stateCode, defaultValue);
      }

      public static String GetStateCodeByElectionYearStateCode(String electionYear, String stateCode, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM VsElectionYearState WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(String electionYear, String stateCode, String defaultValue = null)
      {
        return GetStateCodeByElectionYearStateCode(electionYear, stateCode, defaultValue);
      }

      public static DateTime? GetLastRefreshTimeByElectionYearStateCode(String electionYear, String stateCode)
      {
        return _GetLastRefreshTimeByElectionYearStateCode(electionYear, stateCode, null);
      }

      public static DateTime? GetLastRefreshTime(String electionYear, String stateCode)
      {
        return GetLastRefreshTimeByElectionYearStateCode(electionYear, stateCode);
      }

      public static DateTime GetLastRefreshTimeByElectionYearStateCode(String electionYear, String stateCode, DateTime defaultValue)
      {
        return _GetLastRefreshTimeByElectionYearStateCode(electionYear, stateCode, defaultValue).Value;
      }

      public static DateTime GetLastRefreshTime(String electionYear, String stateCode, DateTime defaultValue)
      {
        return GetLastRefreshTimeByElectionYearStateCode(electionYear, stateCode, defaultValue);
      }

      private static DateTime? _GetLastRefreshTimeByElectionYearStateCode(String electionYear, String stateCode, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastRefreshTime FROM VsElectionYearState WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByElectionYearStateCode(Column _column, String electionYear, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElectionYearState WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String electionYear, String stateCode)
      {
        return GetColumnByElectionYearStateCode(_column, electionYear, stateCode);
      }

      public static int UpdateElectionYearByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElectionYearState SET ElectionYear=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYear(String newValue, String electionYear, String stateCode)
      {
        return UpdateElectionYearByElectionYearStateCode(newValue, electionYear, stateCode);
      }

      public static int UpdateStateCodeByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElectionYearState SET StateCode=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, String electionYear, String stateCode)
      {
        return UpdateStateCodeByElectionYearStateCode(newValue, electionYear, stateCode);
      }

      public static int UpdateLastRefreshTimeByElectionYearStateCode(DateTime? newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElectionYearState SET LastRefreshTime=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastRefreshTime(DateTime? newValue, String electionYear, String stateCode)
      {
        return UpdateLastRefreshTimeByElectionYearStateCode(newValue, electionYear, stateCode);
      }

      public static int UpdateColumnByElectionYearStateCode(Column _column, object newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElectionYearState SET {0}=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String electionYear, String stateCode)
      {
         return UpdateColumnByElectionYearStateCode(_column, newValue, electionYear, stateCode);
      }

      public static string GetSelectCommandText(VsElectionYearStateTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsElectionYearStateTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsElectionYearState()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsElectionYearState

    #region vote.VsElections

    public partial class VsElectionsRow : DataRow
    {
      internal VsElectionsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 ElectionId
      {
        get { return (Int32) this["ElectionId"]; }
        set { this["ElectionId"] = value; }
      }

      public String StageId
      {
        get { return this["StageId"] as String; }
        set { if (value == null) this["StageId"] = DBNull.Value; else this["StageId"] = value; }
      }

      public String ElectionYear
      {
        get { return this["ElectionYear"] as String; }
        set { if (value == null) this["ElectionYear"] = DBNull.Value; else this["ElectionYear"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String OfficeTypeId
      {
        get { return this["OfficeTypeId"] as String; }
        set { if (value == null) this["OfficeTypeId"] = DBNull.Value; else this["OfficeTypeId"] = value; }
      }

      public String Special
      {
        get { return this["Special"] as String; }
        set { if (value == null) this["Special"] = DBNull.Value; else this["Special"] = value; }
      }

      public String ElectionName
      {
        get { return this["ElectionName"] as String; }
        set { if (value == null) this["ElectionName"] = DBNull.Value; else this["ElectionName"] = value; }
      }

      public String StageName
      {
        get { return this["StageName"] as String; }
        set { if (value == null) this["StageName"] = DBNull.Value; else this["StageName"] = value; }
      }

      public DateTime StageDate
      {
        get { return (DateTime) this["StageDate"]; }
        set { this["StageDate"] = value; }
      }

      public DateTime? CandidateListRefreshTime
      {
        get { if (this.IsNull("CandidateListRefreshTime")) return null; else return (DateTime) this["CandidateListRefreshTime"]; }
        set { if (value.HasValue) this["CandidateListRefreshTime"] = value.Value; else this["CandidateListRefreshTime"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class VsElectionsTable : TypedTableBase<VsElectionsRow>
    {
      public VsElectionsRow this[int index] { get { return (VsElectionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsElectionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsElectionsTable(); }

      new public VsElectionsRow NewRow() { return (VsElectionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsElectionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsElectionsRow); }

      public void RemoveRow(VsElectionsRow row) { this.Rows.Remove(row); }

      public VsElectionsRow NewRow(Int32 electionId, String stageId, String electionYear, String stateCode, String officeTypeId, String special, String electionName, String stageName, DateTime stageDate, DateTime? candidateListRefreshTime)
      {
        VsElectionsRow row = NewRow();
        row.ElectionId = electionId;
        row.StageId = stageId;
        row.ElectionYear = electionYear;
        row.StateCode = stateCode;
        row.OfficeTypeId = officeTypeId;
        row.Special = special;
        row.ElectionName = electionName;
        row.StageName = stageName;
        row.StageDate = stageDate;
        row.CandidateListRefreshTime = candidateListRefreshTime;
        return row;
      }

      public void AddRow(Int32 electionId, String stageId, String electionYear, String stateCode, String officeTypeId, String special, String electionName, String stageName, DateTime stageDate, DateTime? candidateListRefreshTime)
      {
        VsElectionsRow row = NewRow(electionId, stageId, electionYear, stateCode, officeTypeId, special, electionName, stageName, stageDate, candidateListRefreshTime);
        AddRow(row);
      }

      public DataColumn ElectionIdColumn { get { return this.Columns["ElectionId"]; } }

      public DataColumn StageIdColumn { get { return this.Columns["StageId"]; } }

      public DataColumn ElectionYearColumn { get { return this.Columns["ElectionYear"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn OfficeTypeIdColumn { get { return this.Columns["OfficeTypeId"]; } }

      public DataColumn SpecialColumn { get { return this.Columns["Special"]; } }

      public DataColumn ElectionNameColumn { get { return this.Columns["ElectionName"]; } }

      public DataColumn StageNameColumn { get { return this.Columns["StageName"]; } }

      public DataColumn StageDateColumn { get { return this.Columns["StageDate"]; } }

      public DataColumn CandidateListRefreshTimeColumn { get { return this.Columns["CandidateListRefreshTime"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StageId", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionYear", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeTypeId", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Special", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StageName", typeof(String));
        _column.MaxLength = 255;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StageDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidateListRefreshTime", typeof(DateTime));
        base.Columns.Add(_column);
      }

      public VsElectionsTable() : this(ColumnSet.All) { }

      public VsElectionsTable(ColumnSet columnSet)
      {
        this.TableName = "VsElections";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsElectionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsElections
    {
      public const string TableName = "VsElections";

      public enum Column { ElectionId, StageId, ElectionYear, StateCode, OfficeTypeId, Special, ElectionName, StageName, StageDate, CandidateListRefreshTime }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionId, "ElectionId" },
        { Column.StageId, "StageId" },
        { Column.ElectionYear, "ElectionYear" },
        { Column.StateCode, "StateCode" },
        { Column.OfficeTypeId, "OfficeTypeId" },
        { Column.Special, "Special" },
        { Column.ElectionName, "ElectionName" },
        { Column.StageName, "StageName" },
        { Column.StageDate, "StageDate" },
        { Column.CandidateListRefreshTime, "CandidateListRefreshTime" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 electionId, String stageId, String electionYear, String stateCode, String officeTypeId, String special, String electionName, String stageName, DateTime stageDate, DateTime? candidateListRefreshTime, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsElections (ElectionId,StageId,ElectionYear,StateCode,OfficeTypeId,Special,ElectionName,StageName,StageDate,CandidateListRefreshTime) VALUES (@ElectionId,@StageId,@ElectionYear,@StateCode,@OfficeTypeId,@Special,@ElectionName,@StageName,@StageDate,@CandidateListRefreshTime)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "OfficeTypeId", officeTypeId);
        VoteDb.AddCommandParameter(cmd, "Special", special);
        VoteDb.AddCommandParameter(cmd, "ElectionName", electionName);
        VoteDb.AddCommandParameter(cmd, "StageName", stageName);
        VoteDb.AddCommandParameter(cmd, "StageDate", stageDate);
        VoteDb.AddCommandParameter(cmd, "CandidateListRefreshTime", candidateListRefreshTime);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionId,StageId,ElectionYear,StateCode,OfficeTypeId,Special,ElectionName,StageName,StageDate,CandidateListRefreshTime FROM VsElections";
        }
      }

      public static VsElectionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionId,StageId,ElectionYear,StateCode,OfficeTypeId,Special,ElectionName,StageName,StageDate,CandidateListRefreshTime FROM VsElections";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsElectionsTable.ColumnSet.All);
      }

      public static VsElectionsTable FillTable(DbCommand command)
      {
        return FillTable(command, VsElectionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsElectionsTable FillTable(DbCommand command, VsElectionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsElectionsTable table = new VsElectionsTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string ElectionIdColumnName { get { return "ElectionId"; } }

      public static string StageIdColumnName { get { return "StageId"; } }

      public static string ElectionYearColumnName { get { return "ElectionYear"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string OfficeTypeIdColumnName { get { return "OfficeTypeId"; } }

      public static string SpecialColumnName { get { return "Special"; } }

      public static string ElectionNameColumnName { get { return "ElectionName"; } }

      public static string StageNameColumnName { get { return "StageName"; } }

      public static string StageDateColumnName { get { return "StageDate"; } }

      public static string CandidateListRefreshTimeColumnName { get { return "CandidateListRefreshTime"; } }

      public static int StageIdMaxLength { get { return 1; } }

      public static int ElectionYearMaxLength { get { return 4; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int OfficeTypeIdMaxLength { get { return 1; } }

      public static int SpecialMaxLength { get { return 1; } }

      public static int ElectionNameMaxLength { get { return 255; } }

      public static int StageNameMaxLength { get { return 255; } }

      public static bool ElectionIdStageIdExists(Int32 electionId, String stageId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetStageIdByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StageId FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetStageIdByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetElectionYearByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionYear FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionYear(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetElectionYearByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetStateCodeByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCode(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetStateCodeByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetOfficeTypeIdByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeTypeId FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeTypeId(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetOfficeTypeIdByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetSpecialByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Special FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSpecial(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetSpecialByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetElectionNameByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionName FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionName(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetElectionNameByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static String GetStageNameByElectionIdStageId(Int32 electionId, String stageId, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StageName FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStageName(Int32 electionId, String stageId, String defaultValue = null)
      {
        return GetStageNameByElectionIdStageId(electionId, stageId, defaultValue);
      }

      public static DateTime? GetStageDateByElectionIdStageId(Int32 electionId, String stageId)
      {
        return _GetStageDateByElectionIdStageId(electionId, stageId, null);
      }

      public static DateTime? GetStageDate(Int32 electionId, String stageId)
      {
        return GetStageDateByElectionIdStageId(electionId, stageId);
      }

      public static DateTime GetStageDateByElectionIdStageId(Int32 electionId, String stageId, DateTime defaultValue)
      {
        return _GetStageDateByElectionIdStageId(electionId, stageId, defaultValue).Value;
      }

      public static DateTime GetStageDate(Int32 electionId, String stageId, DateTime defaultValue)
      {
        return GetStageDateByElectionIdStageId(electionId, stageId, defaultValue);
      }

      private static DateTime? _GetStageDateByElectionIdStageId(Int32 electionId, String stageId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT StageDate FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetCandidateListRefreshTimeByElectionIdStageId(Int32 electionId, String stageId)
      {
        return _GetCandidateListRefreshTimeByElectionIdStageId(electionId, stageId, null);
      }

      public static DateTime? GetCandidateListRefreshTime(Int32 electionId, String stageId)
      {
        return GetCandidateListRefreshTimeByElectionIdStageId(electionId, stageId);
      }

      public static DateTime GetCandidateListRefreshTimeByElectionIdStageId(Int32 electionId, String stageId, DateTime defaultValue)
      {
        return _GetCandidateListRefreshTimeByElectionIdStageId(electionId, stageId, defaultValue).Value;
      }

      public static DateTime GetCandidateListRefreshTime(Int32 electionId, String stageId, DateTime defaultValue)
      {
        return GetCandidateListRefreshTimeByElectionIdStageId(electionId, stageId, defaultValue);
      }

      private static DateTime? _GetCandidateListRefreshTimeByElectionIdStageId(Int32 electionId, String stageId, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CandidateListRefreshTime FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByElectionIdStageId(Column _column, Int32 electionId, String stageId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 electionId, String stageId)
      {
        return GetColumnByElectionIdStageId(_column, electionId, stageId);
      }

      public static VsElectionsTable GetDataByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionId,StageId,ElectionYear,StateCode,OfficeTypeId,Special,ElectionName,StageName,StageDate,CandidateListRefreshTime FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        return FillTable(cmd, VsElectionsTable.ColumnSet.All);
      }

      public static VsElectionsTable GetData(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        return GetDataByElectionIdStageId(electionId, stageId, commandTimeout);
      }

      public static int UpdateElectionIdByElectionIdStageId(Int32 newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET ElectionId=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionId(Int32 newValue, Int32 electionId, String stageId)
      {
        return UpdateElectionIdByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateStageIdByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET StageId=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageId(String newValue, Int32 electionId, String stageId)
      {
        return UpdateStageIdByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateElectionYearByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET ElectionYear=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYear(String newValue, Int32 electionId, String stageId)
      {
        return UpdateElectionYearByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateStateCodeByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET StateCode=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCode(String newValue, Int32 electionId, String stageId)
      {
        return UpdateStateCodeByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateOfficeTypeIdByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET OfficeTypeId=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeTypeId(String newValue, Int32 electionId, String stageId)
      {
        return UpdateOfficeTypeIdByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateSpecialByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET Special=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSpecial(String newValue, Int32 electionId, String stageId)
      {
        return UpdateSpecialByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateElectionNameByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET ElectionName=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionName(String newValue, Int32 electionId, String stageId)
      {
        return UpdateElectionNameByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateStageNameByElectionIdStageId(String newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET StageName=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageName(String newValue, Int32 electionId, String stageId)
      {
        return UpdateStageNameByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateStageDateByElectionIdStageId(DateTime newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET StageDate=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageDate(DateTime newValue, Int32 electionId, String stageId)
      {
        return UpdateStageDateByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateCandidateListRefreshTimeByElectionIdStageId(DateTime? newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET CandidateListRefreshTime=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidateListRefreshTime(DateTime? newValue, Int32 electionId, String stageId)
      {
        return UpdateCandidateListRefreshTimeByElectionIdStageId(newValue, electionId, stageId);
      }

      public static int UpdateColumnByElectionIdStageId(Column _column, object newValue, Int32 electionId, String stageId)
      {
        string cmdText = "UPDATE VsElections SET {0}=@newValue WHERE ElectionId=@ElectionId AND StageId=@StageId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, Int32 electionId, String stageId)
      {
         return UpdateColumnByElectionIdStageId(_column, newValue, electionId, stageId);
      }

      public static int DeleteByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsElections WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionYearStateCode(String electionYear, String stateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElections WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionYearStateCode(Column _column, String electionYear, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElections WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static VsElectionsTable GetDataByElectionYearStateCode(String electionYear, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT ElectionId,StageId,ElectionYear,StateCode,OfficeTypeId,Special,ElectionName,StageName,StageDate,CandidateListRefreshTime FROM VsElections WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, VsElectionsTable.ColumnSet.All);
      }

      public static int UpdateElectionIdByElectionYearStateCode(Int32 newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET ElectionId=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageIdByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET StageId=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionYearByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET ElectionYear=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET StateCode=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeTypeIdByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET OfficeTypeId=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSpecialByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET Special=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionNameByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET ElectionName=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageNameByElectionYearStateCode(String newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET StageName=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStageDateByElectionYearStateCode(DateTime newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET StageDate=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCandidateListRefreshTimeByElectionYearStateCode(DateTime? newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET CandidateListRefreshTime=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteDb.AddCommandParameter(cmd, "newValue", o);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionYearStateCode(Column _column, object newValue, String electionYear, String stateCode)
      {
        string cmdText = "UPDATE VsElections SET {0}=@newValue WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionYearStateCode(String electionYear, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsElections WHERE ElectionYear=@ElectionYear AND StateCode=@StateCode";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionYear", electionYear);
        VoteDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VsElectionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsElectionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsElections()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsElections

    #region vote.VsElectionsCandidates

    public partial class VsElectionsCandidatesRow : DataRow
    {
      internal VsElectionsCandidatesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 ElectionId
      {
        get { return (Int32) this["ElectionId"]; }
        set { this["ElectionId"] = value; }
      }

      public String StageId
      {
        get { return this["StageId"] as String; }
        set { if (value == null) this["StageId"] = DBNull.Value; else this["StageId"] = value; }
      }

      public Int32 CandidateId
      {
        get { return (Int32) this["CandidateId"]; }
        set { this["CandidateId"] = value; }
      }

      public String BallotName
      {
        get { return this["BallotName"] as String; }
        set { if (value == null) this["BallotName"] = DBNull.Value; else this["BallotName"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }
    }

    [Serializable]
    public partial class VsElectionsCandidatesTable : TypedTableBase<VsElectionsCandidatesRow>
    {
      public VsElectionsCandidatesRow this[int index] { get { return (VsElectionsCandidatesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsElectionsCandidatesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsElectionsCandidatesTable(); }

      new public VsElectionsCandidatesRow NewRow() { return (VsElectionsCandidatesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsElectionsCandidatesRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsElectionsCandidatesRow); }

      public void RemoveRow(VsElectionsCandidatesRow row) { this.Rows.Remove(row); }

      public VsElectionsCandidatesRow NewRow(Int32 electionId, String stageId, Int32 candidateId, String ballotName, String lastName, String firstName)
      {
        VsElectionsCandidatesRow row = NewRow();
        row.ElectionId = electionId;
        row.StageId = stageId;
        row.CandidateId = candidateId;
        row.BallotName = ballotName;
        row.LastName = lastName;
        row.FirstName = firstName;
        return row;
      }

      public void AddRow(Int32 electionId, String stageId, Int32 candidateId, String ballotName, String lastName, String firstName)
      {
        VsElectionsCandidatesRow row = NewRow(electionId, stageId, candidateId, ballotName, lastName, firstName);
        AddRow(row);
      }

      public DataColumn ElectionIdColumn { get { return this.Columns["ElectionId"]; } }

      public DataColumn StageIdColumn { get { return this.Columns["StageId"]; } }

      public DataColumn CandidateIdColumn { get { return this.Columns["CandidateId"]; } }

      public DataColumn BallotNameColumn { get { return this.Columns["BallotName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ElectionId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StageId", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CandidateId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BallotName", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VsElectionsCandidatesTable() : this(ColumnSet.All) { }

      public VsElectionsCandidatesTable(ColumnSet columnSet)
      {
        this.TableName = "VsElectionsCandidates";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsElectionsCandidatesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsElectionsCandidates
    {
      public const string TableName = "VsElectionsCandidates";

      public enum Column { ElectionId, StageId, CandidateId, BallotName, LastName, FirstName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ElectionId, "ElectionId" },
        { Column.StageId, "StageId" },
        { Column.CandidateId, "CandidateId" },
        { Column.BallotName, "BallotName" },
        { Column.LastName, "LastName" },
        { Column.FirstName, "FirstName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionsCandidates";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(Int32 electionId, String stageId, Int32 candidateId, String ballotName, String lastName, String firstName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO VsElectionsCandidates (ElectionId,StageId,CandidateId,BallotName,LastName,FirstName) VALUES (@ElectionId,@StageId,@CandidateId,@BallotName,@LastName,@FirstName)";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        VoteDb.AddCommandParameter(cmd, "BallotName", ballotName);
        VoteDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ElectionId,StageId,CandidateId,BallotName,LastName,FirstName FROM VsElectionsCandidates";
        }
      }

      public static VsElectionsCandidatesTable FillTable(DbCommand command)
      {
        return FillTable(command, VsElectionsCandidatesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsElectionsCandidatesTable FillTable(DbCommand command, VsElectionsCandidatesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsElectionsCandidatesTable table = new VsElectionsCandidatesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string ElectionIdColumnName { get { return "ElectionId"; } }

      public static string StageIdColumnName { get { return "StageId"; } }

      public static string CandidateIdColumnName { get { return "CandidateId"; } }

      public static string BallotNameColumnName { get { return "BallotName"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static int StageIdMaxLength { get { return 1; } }

      public static int BallotNameMaxLength { get { return 150; } }

      public static int LastNameMaxLength { get { return 30; } }

      public static int FirstNameMaxLength { get { return 30; } }

      public static int CountByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionIdStageId(Column _column, Int32 electionId, String stageId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 electionId, String stageId)
      {
        return GetColumnByElectionIdStageId(_column, electionId, stageId);
      }

      public static int DeleteByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static bool ElectionIdStageIdCandidateIdExists(Int32 electionId, String stageId, Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId AND CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByElectionIdStageIdCandidateId(Column _column, Int32 electionId, String stageId, Int32 candidateId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId AND CandidateId=@CandidateId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int DeleteByElectionIdStageIdCandidateId(Int32 electionId, String stageId, Int32 candidateId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM VsElectionsCandidates WHERE ElectionId=@ElectionId AND StageId=@StageId AND CandidateId=@CandidateId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        VoteDb.AddCommandParameter(cmd, "CandidateId", candidateId);
        return VoteDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(VsElectionsCandidatesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsElectionsCandidatesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsElectionsCandidates()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsElectionsCandidates

    #region vote.VsElectionsCandidatesView

    public partial class VsElectionsCandidatesViewRow : DataRow
    {
      internal VsElectionsCandidatesViewRow(DataRowBuilder rb) : base(rb) {}

      public Int32? CandidateId
      {
        get { if (this.IsNull("CandidateId")) return null; else return (Int32) this["CandidateId"]; }
        set { if (value.HasValue) this["CandidateId"] = value.Value; else this["CandidateId"] = DBNull.Value; }
      }

      public Int32? ElectionId
      {
        get { if (this.IsNull("ElectionId")) return null; else return (Int32) this["ElectionId"]; }
        set { if (value.HasValue) this["ElectionId"] = value.Value; else this["ElectionId"] = DBNull.Value; }
      }

      public String StageId
      {
        get { return this["StageId"] as String; }
        set { if (value == null) this["StageId"] = DBNull.Value; else this["StageId"] = value; }
      }

      public String ElectionsFirstName
      {
        get { return this["ElectionsFirstName"] as String; }
        set { if (value == null) this["ElectionsFirstName"] = DBNull.Value; else this["ElectionsFirstName"] = value; }
      }

      public String ElectionsLastName
      {
        get { return this["ElectionsLastName"] as String; }
        set { if (value == null) this["ElectionsLastName"] = DBNull.Value; else this["ElectionsLastName"] = value; }
      }

      public String FirstName
      {
        get { return this["FirstName"] as String; }
        set { if (value == null) this["FirstName"] = DBNull.Value; else this["FirstName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MiddleName"] as String; }
        set { if (value == null) this["MiddleName"] = DBNull.Value; else this["MiddleName"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String LastName
      {
        get { return this["LastName"] as String; }
        set { if (value == null) this["LastName"] = DBNull.Value; else this["LastName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }
    }

    [Serializable]
    public partial class VsElectionsCandidatesViewTable : TypedTableBase<VsElectionsCandidatesViewRow>
    {
      public VsElectionsCandidatesViewRow this[int index] { get { return (VsElectionsCandidatesViewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsElectionsCandidatesViewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsElectionsCandidatesViewTable(); }

      new public VsElectionsCandidatesViewRow NewRow() { return (VsElectionsCandidatesViewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsElectionsCandidatesViewRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsElectionsCandidatesViewRow); }

      public void RemoveRow(VsElectionsCandidatesViewRow row) { this.Rows.Remove(row); }

      public VsElectionsCandidatesViewRow NewRow(Int32? candidateId, Int32? electionId, String stageId, String electionsFirstName, String electionsLastName, String firstName, String middleName, String nickname, String lastName, String suffix)
      {
        VsElectionsCandidatesViewRow row = NewRow();
        row.CandidateId = candidateId;
        row.ElectionId = electionId;
        row.StageId = stageId;
        row.ElectionsFirstName = electionsFirstName;
        row.ElectionsLastName = electionsLastName;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.Nickname = nickname;
        row.LastName = lastName;
        row.Suffix = suffix;
        return row;
      }

      public void AddRow(Int32? candidateId, Int32? electionId, String stageId, String electionsFirstName, String electionsLastName, String firstName, String middleName, String nickname, String lastName, String suffix)
      {
        VsElectionsCandidatesViewRow row = NewRow(candidateId, electionId, stageId, electionsFirstName, electionsLastName, firstName, middleName, nickname, lastName, suffix);
        AddRow(row);
      }

      public DataColumn CandidateIdColumn { get { return this.Columns["CandidateId"]; } }

      public DataColumn ElectionIdColumn { get { return this.Columns["ElectionId"]; } }

      public DataColumn StageIdColumn { get { return this.Columns["StageId"]; } }

      public DataColumn ElectionsFirstNameColumn { get { return this.Columns["ElectionsFirstName"]; } }

      public DataColumn ElectionsLastNameColumn { get { return this.Columns["ElectionsLastName"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FirstName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MiddleName"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LastName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("CandidateId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionId", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("StageId", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsFirstName", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionsLastName", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("FirstName", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("MiddleName", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
        _column = new DataColumn("LastName", typeof(String));
        _column.MaxLength = 30;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
      }

      public VsElectionsCandidatesViewTable() : this(ColumnSet.All) { }

      public VsElectionsCandidatesViewTable(ColumnSet columnSet)
      {
        this.TableName = "VsElectionsCandidatesView";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsElectionsCandidatesViewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsElectionsCandidatesView
    {
      public const string TableName = "VsElectionsCandidatesView";

      public enum Column { CandidateId, ElectionId, StageId, ElectionsFirstName, ElectionsLastName, FirstName, MiddleName, Nickname, LastName, Suffix }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.CandidateId, "CandidateId" },
        { Column.ElectionId, "ElectionId" },
        { Column.StageId, "StageId" },
        { Column.ElectionsFirstName, "ElectionsFirstName" },
        { Column.ElectionsLastName, "ElectionsLastName" },
        { Column.FirstName, "FirstName" },
        { Column.MiddleName, "MiddleName" },
        { Column.Nickname, "Nickname" },
        { Column.LastName, "LastName" },
        { Column.Suffix, "Suffix" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionsCandidatesView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT CandidateId,ElectionId,StageId,ElectionsFirstName,ElectionsLastName,FirstName,MiddleName,Nickname,LastName,Suffix FROM VsElectionsCandidatesView";
        }
      }

      public static VsElectionsCandidatesViewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT CandidateId,ElectionId,StageId,ElectionsFirstName,ElectionsLastName,FirstName,MiddleName,Nickname,LastName,Suffix FROM VsElectionsCandidatesView";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsElectionsCandidatesViewTable.ColumnSet.All);
      }

      public static VsElectionsCandidatesViewTable FillTable(DbCommand command)
      {
        return FillTable(command, VsElectionsCandidatesViewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsElectionsCandidatesViewTable FillTable(DbCommand command, VsElectionsCandidatesViewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsElectionsCandidatesViewTable table = new VsElectionsCandidatesViewTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string CandidateIdColumnName { get { return "CandidateId"; } }

      public static string ElectionIdColumnName { get { return "ElectionId"; } }

      public static string StageIdColumnName { get { return "StageId"; } }

      public static string ElectionsFirstNameColumnName { get { return "ElectionsFirstName"; } }

      public static string ElectionsLastNameColumnName { get { return "ElectionsLastName"; } }

      public static string FirstNameColumnName { get { return "FirstName"; } }

      public static string MiddleNameColumnName { get { return "MiddleName"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string LastNameColumnName { get { return "LastName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static int StageIdMaxLength { get { return 1; } }

      public static int ElectionsFirstNameMaxLength { get { return 30; } }

      public static int ElectionsLastNameMaxLength { get { return 30; } }

      public static int FirstNameMaxLength { get { return 30; } }

      public static int MiddleNameMaxLength { get { return 30; } }

      public static int NicknameMaxLength { get { return 50; } }

      public static int LastNameMaxLength { get { return 30; } }

      public static int SuffixMaxLength { get { return 10; } }

      public static int CountByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsElectionsCandidatesView WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionIdStageId(Column _column, Int32 electionId, String stageId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsElectionsCandidatesView WHERE ElectionId=@ElectionId AND StageId=@StageId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, Int32 electionId, String stageId)
      {
        return GetColumnByElectionIdStageId(_column, electionId, stageId);
      }

      public static VsElectionsCandidatesViewTable GetDataByElectionIdStageId(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        string cmdText = "SELECT CandidateId,ElectionId,StageId,ElectionsFirstName,ElectionsLastName,FirstName,MiddleName,Nickname,LastName,Suffix FROM VsElectionsCandidatesView WHERE ElectionId=@ElectionId AND StageId=@StageId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "ElectionId", electionId);
        VoteDb.AddCommandParameter(cmd, "StageId", stageId);
        return FillTable(cmd, VsElectionsCandidatesViewTable.ColumnSet.All);
      }

      public static VsElectionsCandidatesViewTable GetData(Int32 electionId, String stageId, int commandTimeout = -1)
      {
        return GetDataByElectionIdStageId(electionId, stageId, commandTimeout);
      }

      public static string GetSelectCommandText(VsElectionsCandidatesViewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsElectionsCandidatesViewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsElectionsCandidatesView()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsElectionsCandidatesView

    #region vote.VsWebAddressTypes

    public partial class VsWebAddressTypesRow : DataRow
    {
      internal VsWebAddressTypesRow(DataRowBuilder rb) : base(rb) {}

      public String WebAddressTypeId
      {
        get { return this["WebAddressTypeId"] as String; }
        set { if (value == null) this["WebAddressTypeId"] = DBNull.Value; else this["WebAddressTypeId"] = value; }
      }

      public String Name
      {
        get { return this["Name"] as String; }
        set { if (value == null) this["Name"] = DBNull.Value; else this["Name"] = value; }
      }
    }

    [Serializable]
    public partial class VsWebAddressTypesTable : TypedTableBase<VsWebAddressTypesRow>
    {
      public VsWebAddressTypesRow this[int index] { get { return (VsWebAddressTypesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(VsWebAddressTypesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new VsWebAddressTypesTable(); }

      new public VsWebAddressTypesRow NewRow() { return (VsWebAddressTypesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new VsWebAddressTypesRow(rb); }

      protected override Type GetRowType()
      { return typeof(VsWebAddressTypesRow); }

      public void RemoveRow(VsWebAddressTypesRow row) { this.Rows.Remove(row); }

      public VsWebAddressTypesRow NewRow(String webAddressTypeId, String name)
      {
        VsWebAddressTypesRow row = NewRow();
        row.WebAddressTypeId = webAddressTypeId;
        row.Name = name;
        return row;
      }

      public void AddRow(String webAddressTypeId, String name)
      {
        VsWebAddressTypesRow row = NewRow(webAddressTypeId, name);
        AddRow(row);
      }

      public DataColumn WebAddressTypeIdColumn { get { return this.Columns["WebAddressTypeId"]; } }

      public DataColumn NameColumn { get { return this.Columns["Name"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("WebAddressTypeId", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Name", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public VsWebAddressTypesTable() : this(ColumnSet.All) { }

      public VsWebAddressTypesTable(ColumnSet columnSet)
      {
        this.TableName = "VsWebAddressTypes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected VsWebAddressTypesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class VsWebAddressTypes
    {
      public const string TableName = "VsWebAddressTypes";

      public enum Column { WebAddressTypeId, Name }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.WebAddressTypeId, "WebAddressTypeId" },
        { Column.Name, "Name" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsWebAddressTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT WebAddressTypeId,Name FROM VsWebAddressTypes";
        }
      }

      public static VsWebAddressTypesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddressTypeId,Name FROM VsWebAddressTypes";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, VsWebAddressTypesTable.ColumnSet.All);
      }

      public static VsWebAddressTypesTable FillTable(DbCommand command)
      {
        return FillTable(command, VsWebAddressTypesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static VsWebAddressTypesTable FillTable(DbCommand command, VsWebAddressTypesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          VsWebAddressTypesTable table = new VsWebAddressTypesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string WebAddressTypeIdColumnName { get { return "WebAddressTypeId"; } }

      public static string NameColumnName { get { return "Name"; } }

      public static int WebAddressTypeIdMaxLength { get { return 1; } }

      public static int NameMaxLength { get { return 30; } }

      public static bool WebAddressTypeIdExists(String webAddressTypeId)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM VsWebAddressTypes WHERE WebAddressTypeId=@WebAddressTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "WebAddressTypeId", webAddressTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByWebAddressTypeId(Column _column, String webAddressTypeId)
      {
        object result;
        string cmdText = "SELECT {0} FROM VsWebAddressTypes WHERE WebAddressTypeId=@WebAddressTypeId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "WebAddressTypeId", webAddressTypeId);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String webAddressTypeId)
      {
        return GetColumnByWebAddressTypeId(_column, webAddressTypeId);
      }

      public static VsWebAddressTypesTable GetDataByWebAddressTypeId(String webAddressTypeId, int commandTimeout = -1)
      {
        string cmdText = "SELECT WebAddressTypeId,Name FROM VsWebAddressTypes WHERE WebAddressTypeId=@WebAddressTypeId";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "WebAddressTypeId", webAddressTypeId);
        return FillTable(cmd, VsWebAddressTypesTable.ColumnSet.All);
      }

      public static VsWebAddressTypesTable GetData(String webAddressTypeId, int commandTimeout = -1)
      {
        return GetDataByWebAddressTypeId(webAddressTypeId, commandTimeout);
      }

      public static string GetSelectCommandText(VsWebAddressTypesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case VsWebAddressTypesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static VsWebAddressTypes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.VsWebAddressTypes

    #region vote.WordsCommon

    public partial class WordsCommonRow : DataRow
    {
      internal WordsCommonRow(DataRowBuilder rb) : base(rb) {}

      public String Word
      {
        get { return this["Word"] as String; }
        set { if (value == null) this["Word"] = DBNull.Value; else this["Word"] = value; }
      }
    }

    [Serializable]
    public partial class WordsCommonTable : TypedTableBase<WordsCommonRow>
    {
      public WordsCommonRow this[int index] { get { return (WordsCommonRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsCommonRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsCommonTable(); }

      new public WordsCommonRow NewRow() { return (WordsCommonRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsCommonRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsCommonRow); }

      public void RemoveRow(WordsCommonRow row) { this.Rows.Remove(row); }

      public WordsCommonRow NewRow(String word)
      {
        WordsCommonRow row = NewRow();
        row.Word = word;
        return row;
      }

      public void AddRow(String word)
      {
        WordsCommonRow row = NewRow(word);
        AddRow(row);
      }

      public DataColumn WordColumn { get { return this.Columns["Word"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Word", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsCommonTable() : this(ColumnSet.All) { }

      public WordsCommonTable(ColumnSet columnSet)
      {
        this.TableName = "WordsCommon";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsCommonTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsCommon
    {
      public const string TableName = "WordsCommon";

      public enum Column { Word }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Word, "Word" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsCommon";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Word FROM WordsCommon";
        }
      }

      public static WordsCommonTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsCommon";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsCommonTable.ColumnSet.All);
      }

      public static WordsCommonTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsCommonTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsCommonTable FillTable(DbCommand command, WordsCommonTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsCommonTable table = new WordsCommonTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string WordColumnName { get { return "Word"; } }

      public static int WordMaxLength { get { return 40; } }

      public static bool WordExists(String word)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsCommon WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByWord(Column _column, String word)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsCommon WHERE Word=@Word";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsCommonTable GetDataByWord(String word, int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsCommon WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        return FillTable(cmd, WordsCommonTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsCommonTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsCommonTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsCommon()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsCommon

    #region vote.WordsFollowers

    public partial class WordsFollowersRow : DataRow
    {
      internal WordsFollowersRow(DataRowBuilder rb) : base(rb) {}

      public String Follower
      {
        get { return this["Follower"] as String; }
        set { if (value == null) this["Follower"] = DBNull.Value; else this["Follower"] = value; }
      }
    }

    [Serializable]
    public partial class WordsFollowersTable : TypedTableBase<WordsFollowersRow>
    {
      public WordsFollowersRow this[int index] { get { return (WordsFollowersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsFollowersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsFollowersTable(); }

      new public WordsFollowersRow NewRow() { return (WordsFollowersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsFollowersRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsFollowersRow); }

      public void RemoveRow(WordsFollowersRow row) { this.Rows.Remove(row); }

      public WordsFollowersRow NewRow(String follower)
      {
        WordsFollowersRow row = NewRow();
        row.Follower = follower;
        return row;
      }

      public void AddRow(String follower)
      {
        WordsFollowersRow row = NewRow(follower);
        AddRow(row);
      }

      public DataColumn FollowerColumn { get { return this.Columns["Follower"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Follower", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsFollowersTable() : this(ColumnSet.All) { }

      public WordsFollowersTable(ColumnSet columnSet)
      {
        this.TableName = "WordsFollowers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsFollowersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsFollowers
    {
      public const string TableName = "WordsFollowers";

      public enum Column { Follower }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Follower, "Follower" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsFollowers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Follower FROM WordsFollowers";
        }
      }

      public static WordsFollowersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Follower FROM WordsFollowers";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsFollowersTable.ColumnSet.All);
      }

      public static WordsFollowersTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsFollowersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsFollowersTable FillTable(DbCommand command, WordsFollowersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsFollowersTable table = new WordsFollowersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string FollowerColumnName { get { return "Follower"; } }

      public static int FollowerMaxLength { get { return 60; } }

      public static bool FollowerExists(String follower)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsFollowers WHERE Follower=@Follower";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByFollower(Column _column, String follower)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsFollowers WHERE Follower=@Follower";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsFollowersTable GetDataByFollower(String follower, int commandTimeout = -1)
      {
        string cmdText = "SELECT Follower FROM WordsFollowers WHERE Follower=@Follower";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Follower", follower);
        return FillTable(cmd, WordsFollowersTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsFollowersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsFollowersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsFollowers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsFollowers

    #region vote.WordsLeaders

    public partial class WordsLeadersRow : DataRow
    {
      internal WordsLeadersRow(DataRowBuilder rb) : base(rb) {}

      public String Leader
      {
        get { return this["Leader"] as String; }
        set { if (value == null) this["Leader"] = DBNull.Value; else this["Leader"] = value; }
      }
    }

    [Serializable]
    public partial class WordsLeadersTable : TypedTableBase<WordsLeadersRow>
    {
      public WordsLeadersRow this[int index] { get { return (WordsLeadersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsLeadersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsLeadersTable(); }

      new public WordsLeadersRow NewRow() { return (WordsLeadersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsLeadersRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsLeadersRow); }

      public void RemoveRow(WordsLeadersRow row) { this.Rows.Remove(row); }

      public WordsLeadersRow NewRow(String leader)
      {
        WordsLeadersRow row = NewRow();
        row.Leader = leader;
        return row;
      }

      public void AddRow(String leader)
      {
        WordsLeadersRow row = NewRow(leader);
        AddRow(row);
      }

      public DataColumn LeaderColumn { get { return this.Columns["Leader"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Leader", typeof(String));
        _column.MaxLength = 60;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsLeadersTable() : this(ColumnSet.All) { }

      public WordsLeadersTable(ColumnSet columnSet)
      {
        this.TableName = "WordsLeaders";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsLeadersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsLeaders
    {
      public const string TableName = "WordsLeaders";

      public enum Column { Leader }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Leader, "Leader" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsLeaders";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Leader FROM WordsLeaders";
        }
      }

      public static WordsLeadersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Leader FROM WordsLeaders";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsLeadersTable.ColumnSet.All);
      }

      public static WordsLeadersTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsLeadersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsLeadersTable FillTable(DbCommand command, WordsLeadersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsLeadersTable table = new WordsLeadersTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string LeaderColumnName { get { return "Leader"; } }

      public static int LeaderMaxLength { get { return 60; } }

      public static bool LeaderExists(String leader)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsLeaders WHERE Leader=@Leader";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByLeader(Column _column, String leader)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsLeaders WHERE Leader=@Leader";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsLeadersTable GetDataByLeader(String leader, int commandTimeout = -1)
      {
        string cmdText = "SELECT Leader FROM WordsLeaders WHERE Leader=@Leader";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Leader", leader);
        return FillTable(cmd, WordsLeadersTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsLeadersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsLeadersTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsLeaders()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsLeaders

    #region vote.WordsPhrases

    public partial class WordsPhrasesRow : DataRow
    {
      internal WordsPhrasesRow(DataRowBuilder rb) : base(rb) {}

      public String FirstWord
      {
        get { return this["FirstWord"] as String; }
        set { if (value == null) this["FirstWord"] = DBNull.Value; else this["FirstWord"] = value; }
      }

      public String RestOfPhrase
      {
        get { return this["RestOfPhrase"] as String; }
        set { if (value == null) this["RestOfPhrase"] = DBNull.Value; else this["RestOfPhrase"] = value; }
      }
    }

    [Serializable]
    public partial class WordsPhrasesTable : TypedTableBase<WordsPhrasesRow>
    {
      public WordsPhrasesRow this[int index] { get { return (WordsPhrasesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsPhrasesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsPhrasesTable(); }

      new public WordsPhrasesRow NewRow() { return (WordsPhrasesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsPhrasesRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsPhrasesRow); }

      public void RemoveRow(WordsPhrasesRow row) { this.Rows.Remove(row); }

      public WordsPhrasesRow NewRow(String firstWord, String restOfPhrase)
      {
        WordsPhrasesRow row = NewRow();
        row.FirstWord = firstWord;
        row.RestOfPhrase = restOfPhrase;
        return row;
      }

      public void AddRow(String firstWord, String restOfPhrase)
      {
        WordsPhrasesRow row = NewRow(firstWord, restOfPhrase);
        AddRow(row);
      }

      public DataColumn FirstWordColumn { get { return this.Columns["FirstWord"]; } }

      public DataColumn RestOfPhraseColumn { get { return this.Columns["RestOfPhrase"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("FirstWord", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RestOfPhrase", typeof(String));
        _column.MaxLength = 80;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsPhrasesTable() : this(ColumnSet.All) { }

      public WordsPhrasesTable(ColumnSet columnSet)
      {
        this.TableName = "WordsPhrases";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsPhrasesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsPhrases
    {
      public const string TableName = "WordsPhrases";

      public enum Column { FirstWord, RestOfPhrase }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.FirstWord, "FirstWord" },
        { Column.RestOfPhrase, "RestOfPhrase" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsPhrases";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT FirstWord,RestOfPhrase FROM WordsPhrases";
        }
      }

      public static WordsPhrasesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT FirstWord,RestOfPhrase FROM WordsPhrases";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsPhrasesTable.ColumnSet.All);
      }

      public static WordsPhrasesTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsPhrasesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsPhrasesTable FillTable(DbCommand command, WordsPhrasesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsPhrasesTable table = new WordsPhrasesTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string FirstWordColumnName { get { return "FirstWord"; } }

      public static string RestOfPhraseColumnName { get { return "RestOfPhrase"; } }

      public static int FirstWordMaxLength { get { return 40; } }

      public static int RestOfPhraseMaxLength { get { return 80; } }

      public static bool FirstWordRestOfPhraseExists(String firstWord, String restOfPhrase)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByFirstWordRestOfPhrase(Column _column, String firstWord, String restOfPhrase)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsPhrasesTable GetDataByFirstWordRestOfPhrase(String firstWord, String restOfPhrase, int commandTimeout = -1)
      {
        string cmdText = "SELECT FirstWord,RestOfPhrase FROM WordsPhrases WHERE FirstWord=@FirstWord AND RestOfPhrase=@RestOfPhrase";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "FirstWord", firstWord);
        VoteDb.AddCommandParameter(cmd, "RestOfPhrase", restOfPhrase);
        return FillTable(cmd, WordsPhrasesTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsPhrasesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsPhrasesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsPhrases()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsPhrases

    #region vote.WordsSpecial

    public partial class WordsSpecialRow : DataRow
    {
      internal WordsSpecialRow(DataRowBuilder rb) : base(rb) {}

      public String Word
      {
        get { return this["Word"] as String; }
        set { if (value == null) this["Word"] = DBNull.Value; else this["Word"] = value; }
      }
    }

    [Serializable]
    public partial class WordsSpecialTable : TypedTableBase<WordsSpecialRow>
    {
      public WordsSpecialRow this[int index] { get { return (WordsSpecialRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(WordsSpecialRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new WordsSpecialTable(); }

      new public WordsSpecialRow NewRow() { return (WordsSpecialRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new WordsSpecialRow(rb); }

      protected override Type GetRowType()
      { return typeof(WordsSpecialRow); }

      public void RemoveRow(WordsSpecialRow row) { this.Rows.Remove(row); }

      public WordsSpecialRow NewRow(String word)
      {
        WordsSpecialRow row = NewRow();
        row.Word = word;
        return row;
      }

      public void AddRow(String word)
      {
        WordsSpecialRow row = NewRow(word);
        AddRow(row);
      }

      public DataColumn WordColumn { get { return this.Columns["Word"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Word", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public WordsSpecialTable() : this(ColumnSet.All) { }

      public WordsSpecialTable(ColumnSet columnSet)
      {
        this.TableName = "WordsSpecial";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected WordsSpecialTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class WordsSpecial
    {
      public const string TableName = "WordsSpecial";

      public enum Column { Word }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Word, "Word" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsSpecial";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Word FROM WordsSpecial";
        }
      }

      public static WordsSpecialTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsSpecial";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, WordsSpecialTable.ColumnSet.All);
      }

      public static WordsSpecialTable FillTable(DbCommand command)
      {
        return FillTable(command, WordsSpecialTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static WordsSpecialTable FillTable(DbCommand command, WordsSpecialTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteDb.GetOpenConnection())
        {
          command.Connection = cn;
          WordsSpecialTable table = new WordsSpecialTable(columnSet);
          DbDataAdapter adapter = VoteDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static string WordColumnName { get { return "Word"; } }

      public static int WordMaxLength { get { return 40; } }

      public static bool WordExists(String word)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM WordsSpecial WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static object GetColumnByWord(Column _column, String word)
      {
        object result;
        string cmdText = "SELECT {0} FROM WordsSpecial WHERE Word=@Word";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteDb.GetCommand(cmdText, -1);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        result = VoteDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static WordsSpecialTable GetDataByWord(String word, int commandTimeout = -1)
      {
        string cmdText = "SELECT Word FROM WordsSpecial WHERE Word=@Word";
        DbCommand cmd = VoteDb.GetCommand(cmdText, commandTimeout);
        VoteDb.AddCommandParameter(cmd, "Word", word);
        return FillTable(cmd, WordsSpecialTable.ColumnSet.All);
      }

      public static string GetSelectCommandText(WordsSpecialTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case WordsSpecialTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static WordsSpecial()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion vote.WordsSpecial
  }
}
