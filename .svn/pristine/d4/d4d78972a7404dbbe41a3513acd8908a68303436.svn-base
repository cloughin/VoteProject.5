using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using DB.Vote;
using Vote.Controls;

namespace Vote.Politician
{
  public partial class UpdateIssuesPage : SecurePoliticianPage
  {
    #region Private Members

    private int _UpdateCount;
    private AnswersViewTable _AnswersTable;

    private const string MonitorPrefix = "mc";
    private const string MonitorTabPrefix = "mt";
    private const string MonitorSuperTabPrefix = "ms";

    private readonly MonitorFactory _MonitorFactory =
      new MonitorFactory(MonitorPrefix);

    private const int LinesInCategoryHeading = 1;
    private const int LinesInCategorySubHeading = 3;

    // for testing
    private const int MaxCategories = int.MaxValue;
    private const int MaxIssuesPerCategory = int.MaxValue;
    private const int MaxQuestionsPerIssue = int.MaxValue;

    private void DoTopicUpdate(string questionKey, bool reportUnchanged)
    {
      DoAnswerUpdate(GetAnswersTable(), questionKey, reportUnchanged,
        ref _UpdateCount);
    }

    private AnswersViewTable GetAnswersTable()
    {
      if (_AnswersTable == null)
      {
        var officeKey = PageCache.Politicians.GetOfficeKey(PoliticianKey);
        var officeClass = PageCache.Offices.GetOfficeClass(officeKey);
        if (officeClass.IsFederal())
          _AnswersTable =
            AnswersView.GetAllDataByIssueLevelStateCodePoliticianKey("B", "US",
              PoliticianKey);
        else
          _AnswersTable =
            AnswersView.GetAllDataByIssueLevelStateCodePoliticianKey("C",
              Politicians.GetStateCodeFromKey(PoliticianKey), PoliticianKey);
      }
      return _AnswersTable;
    }

    #endregion Private Members

    #region Private Members to Build the Tabs

    private Font _IssueTabFont;

    // specs for breaking the vertical tabs
    private const string IssueTabFontFamily = "Arial";
    private const float IssueTabFontSize = 8.0F; // 8pt
    private const int IssueTabMaxWidth = 120; // 120px

    private void BuildTabTable()
    {
      var table = GetAnswersTable();
      var issueGroups = table.Rows.OfType<AnswersViewRow>()
        .GroupBy(row => row.IssueGroupKey)
        .OrderBy(group => group.First()
          .IssueGroupOrder);
      ProcessCategories(issueGroups);
    }

    private HtmlContainerControl CreateCategory(AnswersViewRow row,
      Control horizontalTabs)
    {
      // create panel
      var panel = AddContainer(MainTabsPlaceholder, "tab-" + row.IssueGroupKey,
        "content-panel tab-panel htab-panel");

      // create vertical tab control
      var verticalTabs = AddVertTabControl(panel, null, "tabs-nested");

      // create horizontal tab
      var superTabKey = MonitorSuperTabPrefix + "-igroup" + row.IssueGroupKey;
      var horizontalTab = AddHorzTab(horizontalTabs, "#" + panel.ClientID,
        GetMainTabLabel(row), superTabKey);

      AddAsteriskIndicator(horizontalTab, null, null,
        string.Format("There are unsaved changes to the {0} category",
          row.IssueGroupHeading));

      AddStarIndicator(horizontalTab, null, null,
        string.Format(
          "We have at least one response from you for the {0} category",
          row.IssueGroupHeading));

      return verticalTabs;
    }

    private HtmlContainerControl CreateIssue(AnswersViewRow row, Control tabs,
      Control container)
    {
      if (_IssueTabFont == null)
        // We use bold as worst-case
        _IssueTabFont = new Font(IssueTabFontFamily, IssueTabFontSize,
          FontStyle.Bold);

      // create panel
      var panel = AddContainer(container, "tab-" + row.IssueKey,
        "content-panel tab-panel vtab-panel");

      // create accordion control
      var accordion = AddAccordionControl(panel, null, null);

      // create vertical tab
      var tabKey = MonitorTabPrefix + "-issue" + row.IssueKey;
      var verticalTab = AddVertTab(tabs, "#" + panel.ClientID,
        BreakForTab(row.Issue, _IssueTabFont, IssueTabMaxWidth), tabKey + " vcentered-tab");

      // center the a tag -- the first child of the tab always
      Center(verticalTab.Controls[0], false, true);

      AddAsteriskIndicator(verticalTab, null, null,
        string.Format("There are unsaved changes to {0}", row.Issue));

      AddStarIndicator(verticalTab, null, null,
        string.Format("We have at least one response from you for {0}", row.Issue));

      return accordion;
    }

    private void CreateQuestion(AnswersViewRow row, Control parent)
    {
      var monitor = _MonitorFactory.GetMonitorInstance(row.QuestionKey);

      // create the accordion header
      var accordionHeader = AddAccordionHeader(parent, row.Question);

      // create the accordion panel
      var panel = AddContainer(parent, "tab-answer-" + row.QuestionKey,
        "content-panel accordion-panel");

      AddAsteriskIndicator(accordionHeader, "Ast" + row.QuestionKey,
        monitor.GetAsteriskClass(null),
        string.Format("There are unsaved changes to \"{0}\"", row.Question));

      AddStarIndicator(accordionHeader, "Star" + row.QuestionKey,
        monitor.GetStarClass(null, "answer"),
        string.Format("We have a response from you for \"{0}\"", row.Question));

      var updatePanel = AddAjaxUpdatePanel(panel, "UpdatePanel" + row.QuestionKey);

      var container = AddContainer(updatePanel.ContentTemplateContainer,
        "Container" + row.QuestionKey, monitor.GetContainerClass("update-all updated"));

      AddHiddenField(container, "Description" + row.QuestionKey,
        monitor.GetDescriptionClass(null, "answer"), row.Question);

      var relative =
        Relative(AddUndoButton(container, "Undo" + row.QuestionKey,
          monitor.GetUndoClass(null),
          string.Format("Revert \"{0}\" to the latest saved version", row.Question)));

      AddClearButton(relative, "Clear" + row.QuestionKey,
        monitor.GetClearClass(null, "answer"),
        string.Format("Clear \"{0}\"", row.Question));

      var tabPrefix = MonitorPrefix + "-" + MonitorTabPrefix + "-issue" +
        row.IssueKey;
      var superTabPrefix = MonitorPrefix + "-" + MonitorSuperTabPrefix + "-igroup" +
        row.IssueGroupKey;
      var prefixes = tabPrefix + " " + superTabPrefix;
      AddTextArea(container, "TextBox" + row.QuestionKey,
        monitor.GetDataClass("shadow reasons-textbox " + prefixes, "answer"),
        row.Answer, "Type or paste your response into this box", true);

      // the remove-line-breaks button
      AddButtonInputElement(container, null,
        "remove-line-breaks button-2 button-smallest", "Remove Line Breaks", "remove-line-breaks");

      if (!IsPoliticianUser) // add source and date boxes
      {
        //AddTextInputElement(container, "Source" + row.QuestionKey,
        //  monitor.GetDataClass("shadow-2 source-textbox " + prefixes, "source"),
        //  row.Source,
        //  "Copy and paste the url of the web page (with or without http://) where" +
        //    " you obtained the answer or a description of the source in the textbox" +
        //    " below, i.e. a news article.", true, "Source", "source", null, null,
        //  null);
        AddTextAreaInputElement(container, "Source" + row.QuestionKey,
          monitor.GetDataClass("shadow source-textbox " + prefixes, "source"),
          row.Source, "Copy and paste the url of the web page (with or without http://) where" +
            " you obtained the answer or a description of the source into this box.", false, 
            "Copy and paste the url of the web page (with or without http://) where" +
            " you obtained the answer or a description of the source into this box.",
            true, "Source", "source", null, null, null);
        AddTextInputElement(container, "Date" + row.QuestionKey,
          monitor.GetDataClass("shadow-2 date-textbox date-picker " + prefixes, "date"),
          row.DateStamp.DbDateToShortDate(),
          "Enter the date of the answer if today is not an appropriate date. For" +
            " example if you obtained the answer from the candidate's campaign website," +
            " and the election is over, enter some date a couple days prior to the" +
            " election.", false, "Date", "date", null, null, null);
        AddButtonInputElement(container, null,
          "today-button button-1 button-smallest", "Today", "today");
        AddClearBoth(container)
          .AddCssClasses("spacer");
      }

      // feedback
      AddFeedbackWithIE7Floater(container, "Feedback" + row.QuestionKey,
        monitor.GetFeedbackClass(null));

      // update button
      AddUpdateButtonInContainer(container, "Button" + row.QuestionKey,
        "update-button",
        monitor.GetButtonClass("update-button button-1"),
        string.Format("Update \"{0}\"", row.Question), ButtonTopic_OnClick);

      AddClearBoth(container);
    }

    private static PlaceHolder GetMainTabLabel(AnswersViewRow row)
    {
      // The database entry has pre-defined breaks. Here we verify the count and
      // pad with blank lines at the end, if necessary

      var container = new PlaceHolder {EnableViewState = false};

      var formattedHeading = ValidateBreaks(row.IssueGroupHeading,
        LinesInCategoryHeading, true,
        "Too many lines in category heading: " + row.IssueGroupKey);
      new LiteralControl(formattedHeading) {EnableViewState = false}.AddTo(
        container);

      var formattedSubHeading = ValidateBreaks(row.IssueGroupSubHeading,
        LinesInCategorySubHeading, true,
        "Too many lines in category subheading: " + row.IssueGroupKey);
      new HtmlGenericControl("span")
        {
          EnableViewState = false,
          InnerHtml = formattedSubHeading
        }.AddTo(container);

      return container;
    }

    private void ProcessCategories(
      IEnumerable<IGrouping<string, AnswersViewRow>> categories)
    {
      var horizontalTabs = AddTabContainer(MainTabsPlaceholder, null, "tabs htabs unselectable");

      foreach (var category in categories)
      {
        var first = category.First();
        var tabs = CreateCategory(first, horizontalTabs);

        var issues = category.GroupBy(row => row.IssueKey)
          .OrderBy(group => group.First()
            .IssueOrder);
        ProcessIssues(issues, tabs);
        if (horizontalTabs.Controls.Count >= MaxCategories) return;
      }
    }

    private void ProcessIssues(
      IEnumerable<IGrouping<string, AnswersViewRow>> issues, Control container)
    {
      var verticalTabs = AddTabContainer(container, null, "tabs vtabs unselectable");

      foreach (var issue in issues)
      {
        var first = issue.First();
        var accordion = CreateIssue(first, verticalTabs, container);

        var questions = issue.OrderBy(question => question.QuestionOrder);
        ProcessQuestions(questions, accordion);
        if (verticalTabs.Controls.Count >= MaxIssuesPerCategory) return;
      }
    }

    private void ProcessQuestions(IEnumerable<AnswersViewRow> questions,
      Control container)
    {
      foreach (var question in questions)
      {
        CreateQuestion(question, container);
        if ((container.Controls.Count/2) >= MaxQuestionsPerIssue) return;
      }
    }

    private static string ValidateBreaks(string input, int linesExpected, bool pad,
      string errorMessage)
    {
      ICollection<string> lines = input.SplitOnBreakTags();
      if (lines.Count > linesExpected)
      {
        if (string.IsNullOrWhiteSpace(errorMessage))
          errorMessage = "More lines than expected";
        throw new ApplicationException(errorMessage);
      }
      if (pad && lines.Count < linesExpected)
      {
        lines = new List<string>(lines);
        while (linesExpected-- > lines.Count)
          lines.Add("&nbsp;");
      }
      return string.Join("<br />", lines);
    }

    #endregion Private Members to Build the Tabs

    #region Event Handlers

    protected void Page_Load(object sender, EventArgs e)
    {
      BuildTabTable();

      if (!IsPostBack)
      {
        Page.Title = PoliticianName + " Update Issues";
        H1.InnerHtml = PoliticianName + "<span>Update Issues</span>";
        H2.InnerHtml = OfficeAndStatus;
        UpdateIntroLink.Attributes["href"] = UpdateIntroPageUrl;
        ShowIntroLink.Attributes["href"] = IntroPageUrl;
        ShowPoliticianIssueLink.Attributes["href"] = PoliticianIssuePageUrl;
      }
    }

    protected override void OnPreRender(EventArgs e)
    {
      base.OnPreRender(e);

      // This isn't available at Page_Load time
      var viewIssuesLink =
        PageCachingSubHeadingWithHelp.FindTemplateControl("ViewIssuesLink") as
          HtmlAnchor;
      if (viewIssuesLink != null) viewIssuesLink.HRef = PoliticianIssuePageUrl;

      // We handle post-update processing here so we only have to do it once per postback,
      // not on each field.
      if (_UpdateCount <= 0) return;
      Politicians.IncrementDataUpdatedCount(PoliticianKey);
      //CommonCacheInvalidation.ScheduleInvalidateAllCacheForPolitician(PoliticianKey,
      //  PageCache);
    }

    private void ButtonTopic_OnClick(object sender, EventArgs e)
    {
      var button = sender as Button;
      if (button == null ||
        !button.ID.StartsWith("Button", StringComparison.Ordinal)) return;
      var questionKey = button.ID.Substring(6);
      var feedback =
        Master.FindMainContentControl("Feedback" + questionKey) as
          FeedbackContainerControl;

      try
      {
        DoTopicUpdate(questionKey, true);
        InvalidatePageCache();
      }
      catch (Exception ex)
      {
        if (feedback != null)
          feedback.HandleException(ex);
      }
    }

    protected void ButtonUpdateAll_OnClick(object sender, EventArgs e)
    {
      try
      {
        var errorCount = 0;
        var table = GetAnswersTable();

        foreach (var row in table)
          if (DoAnswerUpdate(table, row.QuestionKey, false, ref _UpdateCount) ==
            UpdateStatus.Failure)
            errorCount++;

        FeedbackUpdateAll.AddInfo(
          _UpdateCount.ToString(CultureInfo.InvariantCulture) +
            _UpdateCount.Plural(" item was", " items were") + " updated.");
        if (errorCount > 0)
          FeedbackUpdateAll.AddError(
            errorCount.ToString(CultureInfo.InvariantCulture) +
              errorCount.Plural(" item was", " items were") +
              " not updated due to errors.");

        InvalidatePageCache();
      }
      catch (Exception ex)
      {
        FeedbackUpdateAll.HandleException(ex);
      }
    }

    #endregion Event Handlers
  }
}