define(["jquery", "vote/adminMaster", "vote/util", "monitor", "jqueryui"],
  function ($, master, util, monitor) {

    var $$ = util.$$;

    // begin: automatically fill in source and date from current

    // notes:
    // - source and date do not show when a politician is updating
    // - they are filled in when the response changes if both fields are empty
    // - "current" is updated on any save operation

    var currentSource = "";
    var currentDate = "";

    function checkAutoSource(group) {
      if (!group.changed || !util.endsWith(group.group, "-answer")) return;
      var $container = $("#" + group.parent.container);
      var $source = $("." + group.parent.group + "-source", $container);
      var $date = $("." + group.parent.group + "-date", $container);
      if ($source.length === 1 && $date.length === 1 &&
       !$source.val() && !$date.val()) {
        $source.val(currentSource);
        $date.val(currentDate);
      }
    }

    function saveSourceAndDate(group) {
      var $container = $("#" + group.container);
      var $source = $("." + group.group + "-source", $container);
      var $date = $("." + group.group + "-date", $container);
      if ($source.length === 1 && $date.length === 1) {
        currentSource = $source.val();
        currentDate = $date.val();
      }
    };

    // end: automatically fill in source and date from current

    function init() {
      monitor.registerCallback("afterUpdateContainer", afterUpdateContainer);
      monitor.registerCallback("clientChange", clientChange);

      $("#main-tabs")
        .on("click", "input.remove-line-breaks", function () {
          var $textarea = $(this).closest(".mc-container").find("textarea");
          $textarea.val(util.replaceLineBreaksWithSpaces($textarea.val()));
        })
        .on("change", ".action-menu select", function () {
          doActionMenuChange($(this));
        });

      $("body")
        .on("click", "#view-responses-dialog input.edit-other-response", function () {
          doEditOtherResponse($(this));
        });

      initGroup(null);
    }

    function afterUpdateContainer(group, args) {
      if (!group) return;
      initGroup($$(group.container));
      saveSourceAndDate(group);
    }

    function clientChange(group, args) {
      if (!group) return;
      checkAutoSource(group);
    }

    function doActionMenuChange($select, force) {
      var $container = $select.closest(".answer-container");
      var groupName = monitor.getMonitorClass($container);
      var isGroupChanged = monitor.isGroupChanged(groupName);
      var option = $select.val();
      var $sequence = $(".answer-sequence", $container);
      var sequence = $sequence.val();

      switch (option) {
        case "edit":
          // this should never be changed to. If not selected, it's always disabled.
          break;

        case "add":
          if (isGroupChanged && !force) {
            util.confirm("You have unsaved changes to the response you are currently editing." +
              " These will be lost if you continue.",
             function (button) {
               if (button === "Ok")
                 doActionMenuChange($select, true);
             });
            return;
          }
          
          if (isGroupChanged) monitor.undoGroup(groupName, false);
          saveResponse($container);

          // clear the text boxes, reset the changed status, store "?" as the sequence,
          // disable the "edit" button, and enable the "view" button
          $(".answer-textbox", $container).val("");
          $(".source-textbox", $container).val("");
          $(".date-textbox", $container).val("");
          monitor.clearChangedStatus(groupName);
          $sequence.val("?");
          $("option[value='edit']", $container).prop("disabled", true);
          $("option[value='view']", $container).prop("disabled", false);
          
          break;

        case "view":
          // restore action in case dialog is cancelled
          $select.val(sequence === "?" ? "add" : "edit");
          var $dialog = $$("view-responses-dialog");
          if (!$dialog.length) {
            $("body").append('<div id="view-responses-dialog" class="hidden"></div>');
            $dialog = $$("view-responses-dialog");
            $dialog.dialog({
              autoOpen: false,
              width: 880,
              resizable: true,
              title: "Other Responses for This Question",
              dialogClass: 'view-responses-dialog overlay-dialog',
              // custom open and close to fix various problems
              open: master.onOpenJqDialog,
              close: master.onCloseJqDialog,
              modal: true
            });
          }
          
          fillViewResponsesDialog($container);
          
          $dialog.dialog("open");
          break;
      }
    }
    
    function doEditOtherResponse($button, force) {
      var $dialog = $$("view-responses-dialog");
      var groupName = $(".group-name", $dialog).val();
      var isGroupChanged = monitor.isGroupChanged(groupName);
      var $container = $("." + groupName);
      var sequence = $button.attr("rel");
      var $sequence = $(".answer-sequence", $container);
      var responses = $sequence.data("responses") || [];
      var response = null;
      
      $.each(responses, function () {
        if (this.Sequence === sequence) {
          response = this;
          return false;
        }
      });
      
      if (response) {
        if (isGroupChanged && !force) {
          util.confirm("You have unsaved changes to the response you are currently editing." +
              " These will be lost if you continue.",
             function (button) {
               if (button === "Ok")
                 doEditOtherResponse($button, true);
             });
          return;
        }

        if (isGroupChanged) monitor.undoGroup(groupName, false);
        saveResponse($container);

        // replace the text boxes, reset the changed status, store the sequence,
        // enable and select the "edit" button
        $(".answer-textbox", $container).val(response.Answer);
        $(".source-textbox", $container).val(response.Source);
        $(".date-textbox", $container).val(response.Date);
        monitor.clearChangedStatus(groupName);
        $sequence.val(response.Sequence);
        $("option[value='edit']", $container).prop("disabled", false);
        $("option[value='edit']", $container).prop("selected", true);

        $dialog.dialog("close");
      }
   }

    function fillViewResponsesDialog($container) {
      var groupName = monitor.getMonitorClass($container);
      var $sequence = $(".answer-sequence", $container);
      var $dialog = $$("view-responses-dialog");
      
      // get the other responses data and sort it Date descending, Sequence descending
      var responses = $sequence.data("responses") || [];
      responses.sort(function (a, b) {
        var datea = new Date(a.Date);
        var dateb = new Date(b.Date);
        if (datea > dateb) return -1;
        if (datea < dateb) return 1;
        if (a.Sequence > b.Sequence) return -1;
        if (a.Sequence < b.Sequence) return 1;
        return 0;
      });

      var html = [];
      html.push('<input type="hidden" class="group-name" value="' + groupName + '" />');
      for (var inx = 0; inx < responses.length; inx++) {
        var response = responses[inx];
        html.push('<div class="one-response clearfix">');
        html.push('<div class="answer-text">');
        html.push(util.replaceLineBreaksWithParagraphs(response.Answer));
        html.push('</div>');
        html.push('<input type="button" value="Edit this response" class="edit-other-response button-2 button-smallest" rel="');
        html.push(response.Sequence);
        html.push('" />');
        html.push('<div class="source-text"><span>Source: </span>');
        html.push(response.Source);
        html.push(" (");
        html.push(response.Date);
        html.push(")");
        html.push('</div>');
        html.push('</div>');
      }

      $dialog.html(html.join(""));
    }

    function initGroup($group) {
      if ($group != null && !$group.hasClass("answer-container")) return;

      $(".date-picker", $group).datepicker({
        changeYear: true,
        yearRange: "2010:+0"
      });

      $(".today-button", $group).safeBind("click", function (event) {
        var today = new Date();
        today = (today.getMonth() + 101).toString().substr(1) + "/" +
          (today.getDate() + 100).toString().substr(1) + "/" +
          today.getFullYear();
        $(event.target).closest(".mc-container").find(".date-textbox").val(today);
      });
    }
    
    function saveResponse($container) {
      // make sure the current response is saved in the responses data
      var $sequence = $(".answer-sequence", $container);
      var responses = $sequence.data("responses") || [];
      var sequenceExists = false;
      var sequence = $sequence.val();

      if (sequence === "?") return; // we never save a new entry
      
      $.each(responses, function () {
        if (this.Sequence == sequence) {
          sequenceExists = true;
          return false;
        }
      });
      
      if (!sequenceExists) {
        var response = {
          Answer: $(".answer-textbox", $container).val(),
          Source: $(".source-textbox", $container).val(),
          Date: $(".date-textbox", $container).val(),
          Sequence: sequence
        };
        // save it
        responses.push(response);
        $sequence.data("responses", responses);
      }
    }

    $(function () {
      init();
    });

    return {
    };
  });