using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;

namespace Vote
{
  public partial class Issue2PageX : CacheablePage
  {
    protected Issue2PageX()
    {
      No404OnUrlNormalizeError = true;
      NoUrlEdit = true; /* bacause disabled */
      NoIndex = true; /* bacause disabled */
    }

    #region Caching support

    protected override bool SuppressCaching
    {
      get { return true; }
    }

    protected override string GetCacheKey()
    {
      var key = UrlManager.GetStateCodeFromHostName() + "." + QueryState + "." +
        QueryElection + "." + QueryOffice + "." + QueryIssue;
      var siteId = UrlManager.CurrentQuerySiteId;
      if (!string.IsNullOrEmpty(siteId))
        key += "." + siteId;

      return key;
    }

    protected override string GetCacheType()
    {
      return "Issue2";
    }

    #endregion Caching support

    //private readonly string _IssueKey = QueryIssue;
    //private string _ElectionDescription;
    //private string _OfficeDescription;
    //private string _IssueDescription;
    //private string _PoliticianNames;

    //private const string TitleTagAllStatesDomain =
    //  "Candidates’ Positions on {2} Issues";

    //private const string MetaDescriptionAllStatesDomain =
    //  "Candidate Position Comparisons on {2} Issues of {3} in {0}";

    //private const string MetaKeywordsAllStatesDomain = "{2}, {3}";

    //private const string TitleTagSingleStateDomain =
    //  "Candidates’ Positions on {2} Issues";

    //private const string MetaDescriptionSingleStateDomain =
    //  "Candidate Position Comparisons on {2} Issues of {3} in {0}";

    //private const string MetaKeywordsSingleStateDomain = "{2}, {3}";

    //private const string TitleTagBioAllStatesDomain =
    //  "Candidates’ Biographical Information";

    //private const string MetaDescriptionBioAllStatesDomain =
    //  "Candidate Biographical Information for {3} in {0}";

    //private const string MetaKeywordsBioAllStatesDomain =
    //  "Biographical Information, {3}";

    //private const string TitleTagBioSingleStateDomain =
    //  "Candidates’ Biographical Information";

    //private const string MetaDescriptionBioSingleStateDomain =
    //  "Candidate Biographical Information for {3} in {0}";

    //private const string MetaKeywordsBioSingleStateDomain =
    //  "Biographical Information, {3}";

    //private void PopulateMetaTags()
    //{
    //  if (DomainData.IsValidStateCode) // Single state
    //  {
    //    var titleTagTemplate = TitleTagSingleStateDomain;
    //    var metaDescriptionTemplate = MetaDescriptionSingleStateDomain;
    //    var metaKeywordsTemplate = MetaKeywordsSingleStateDomain;
    //    if (Issues.IsBiographicalKey(_IssueKey))
    //    {
    //      titleTagTemplate = TitleTagBioSingleStateDomain;
    //      metaDescriptionTemplate = MetaDescriptionBioSingleStateDomain;
    //      metaKeywordsTemplate = MetaKeywordsBioSingleStateDomain;
    //    }
    //    if (DomainDesign.IncludeTitleForSingleState)
    //      TitleTag.Text = Substitute(titleTagTemplate);
    //    if (DomainDesign.IncludeMetaDescriptionForSingleState)
    //      MetaDescriptionTag.Content = Substitute(metaDescriptionTemplate);
    //    if (DomainDesign.IncludeMetaKeywordsForSingleState)
    //      MetaKeywordsTag.Content = Substitute(metaKeywordsTemplate);
    //  }
    //  else
    //  {
    //    var titleTagTemplate = TitleTagAllStatesDomain;
    //    var metaDescriptionTemplate = MetaDescriptionAllStatesDomain;
    //    var metaKeywordsTemplate = MetaKeywordsAllStatesDomain;
    //    if (Issues.IsBiographicalKey(_IssueKey))
    //    {
    //      titleTagTemplate = TitleTagBioAllStatesDomain;
    //      metaDescriptionTemplate = MetaDescriptionBioAllStatesDomain;
    //      metaKeywordsTemplate = MetaKeywordsBioAllStatesDomain;
    //    }
    //    if (DomainDesign.IncludeTitleForAllStates)
    //      TitleTag.Text = Substitute(titleTagTemplate);
    //    if (DomainDesign.IncludeMetaDescriptionForAllStates)
    //      MetaDescriptionTag.Content = Substitute(metaDescriptionTemplate);
    //    if (DomainDesign.IncludeMetaKeywordsForAllStates)
    //      MetaKeywordsTag.Content = Substitute(metaKeywordsTemplate);
    //  }
    //}

    //private string Substitute(string tag)
    //{
    //  return string.Format(tag, _ElectionDescription, _OfficeDescription,
    //    _IssueDescription, _PoliticianNames);
    //}

    //private void SetUpMainHeading()
    //{
    //  if (Issues.IsIssuesListKey(_IssueKey) || Issues.IsBiographicalKey(_IssueKey))
    //  {
    //    PageHeading.MainHeadingCssClass = "header";
    //    PageHeading.SubHeadingText = null;
    //  }
    //  else
    //  {
    //    PageHeading.MainHeadingCssClass = "header longHeader";
    //    PageHeading.SubHeadingText = string.Format(PageHeading.SubHeadingText,
    //      Issues.GetIssueDescription(_IssueKey));
    //  }
    //}

    //private void FillInSubheading()
    //{
    //  if (Issues.IsIssuesListKey(_IssueKey))
    //    Heading.Text =
    //      "Questions Available to Candidates to Express Their Positions and Views";
    //  else if (Issues.IsBiographicalKey(_IssueKey))
    //    Heading.Text = "Candidates' Biographical Information";
    //  else
    //    Heading.Text = "Candidates' Positions and Views";

    //  if (Elections.GetElectionTypeFromKey(_ElectionKey) ==
    //    Elections.ElectionTypeUSPresidentialPrimary)
    //    // Presidential comparison
    //  {
    //    Office.Text = PageCache.Elections.GetElectionDesc(_ElectionKey);
    //    Election.Text = string.Empty;
    //  }
    //  else
    //  {
    //    Office.Text = Offices.GetLocalizedOfficeNameWithElectoralClass(PageCache,
    //      _OfficeKey);
    //    Election.Text = PageCache.Elections.GetElectionDesc(_ElectionKey);
    //  }
    //}

    //private void FillInIssuesList()
    //{
    //  var tr = new HtmlTableRow().AddTo(IssueLinksTable, "trIssueLinks");
    //  var td = new HtmlTableCell().AddTo(tr, "tdIssueLinks");
    //  IssuesListLinks.GetReport(_ElectionKey, _OfficeKey)
    //    .AddTo(td);
    //}

    //private void FillInHeadings(int answerCount)
    //{
    //  if (Issues.IsIssuesListKey(_IssueKey))
    //  {
    //    IssueLinksHeading.Text =
    //      "Candidates' Positions and Views on Other Issues where Information" +
    //        " is Available:";

    //    LinksInstruction.Text =
    //      Substitute("Below is a report of the issues and issue questions" +
    //        " available to {3} seeking {1} in the {0}. The links" +
    //        " immediately below will provide pages of the candidate responses to" +
    //        " these questions. Since many candidates choose not to respond to many" +
    //        " questions, links are only provided where we have response information." +
    //        " Unfortunately, there are instances where we have not been provided" +
    //        " with any of the candidates' positions and views.");
    //  }
    //  else if (Issues.IsBiographicalKey(_IssueKey))
    //  {
    //    IssueLinksHeading.Text =
    //      "Candidates' Positions and Views on Other Issues where Information" +
    //        " is Available:";
    //    LinksInstruction.Text =
    //      Substitute("The report below lists the candidate responses" +
    //        " to  issue questions and biographical information. The responses were provided by" +
    //        " {3} or were obtained from their websites. The candidates" +
    //        " select the issues and questions for which they want to provide a" +
    //        " response. The first link is a report of all the issues and questions" +
    //        " made available to the candidates. Many issues and questions had no" +
    //        " responses - links are only provided where we have information. If" +
    //        " there are many candidates for this office, you may have to scroll" +
    //        " down to compare all responses.");
    //  }
    //  else if (answerCount > 0)
    //  {
    //    IssueLinksHeading.Text =
    //      "Candidates positions and views on other Issues where information" +
    //        " is available:";
    //    LinksInstruction.Text =
    //      Substitute("The report below lists the candidate responses" +
    //        " to {2} issue questions. The responses were provided by" +
    //        " {3} or were obtained from their websites. The candidates" +
    //        " select the issues and questions for which they want to provide a" +
    //        " response. The first link is a report of all the issues and questions" +
    //        " made available to the candidates. Many issues and questions had no" +
    //        " responses - links are only provided where we have information. If" +
    //        " there are many candidates for this office, you may have to scroll" +
    //        " down to compare all responses.");
    //  }
    //  else
    //  {
    //    IssueLinksHeading.Text = "No candidates positions and views are available";
    //    LinksInstruction.Text =
    //      Substitute("Unfortunately, {3} seeking" +
    //        " {1} in the {0} did not provide any responses" +
    //        " to over 800 different issues and questions available to" +
    //        " communicate positions and views. Use the List of Issues Link to" +
    //        " obtain a report of these issues and questions.");
    //  }
    //}

    //private int FillInReport()
    //{
    //  if (Issues.IsIssuesListKey(_IssueKey))
    //  {
    //    IssueReportIssueList.GetReportByOfficeKey(_OfficeKey, _ElectionKey)
    //      .AddTo(ReportPlaceHolder);
    //    _PoliticianNames =
    //      ElectionsPoliticians.GetPoliticianListForOfficeInElection(_ElectionKey,
    //        _OfficeKey);
    //    return 0;
    //  }

    //  if (Issues.IsBiographicalKey(_IssueKey))
    //  {
    //    var bioReportObject = new IssueReportBiographical();
    //    bioReportObject.GenerateReport(_ElectionKey, _OfficeKey)
    //      .AddTo(ReportPlaceHolder);
    //    _PoliticianNames = bioReportObject.GetPoliticianNames();
    //    return 0;
    //  }

    //  int answers;
    //  var reportObject = new IssueReportIssues();
    //  reportObject.GenerateReport(_ElectionKey, _OfficeKey, _IssueKey, out answers)
    //    .AddTo(ReportPlaceHolder);
    //  _PoliticianNames = reportObject.GetPoliticianNames();
    //  return answers;
    //}

    protected void Page_Load(object sender, EventArgs e)
    {
      // The OnPreInit method of the parent class handles serving from cache, 
      // in which case this method is never called.

      this.IncludeCss("~/css/MainCommon.css");
      this.IncludeCss("~/css/SecondaryCommon.css");
      this.IncludeCss("~/css/All.css");
      this.IncludeCss("~/css/Issue.css");
      this.IncludeJs(
        "http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js");
      this.IncludeJs(
        "http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js");
      this.IncludeJs("~/js/Issue.js");
      this.IncludeJs("/js/jq/iframeResizer.min.js");
      this.IncludeCss("~/js/jq/jquery-ui.css");

      if (HasUrlError)
      {
        InnerContent.Controls.Clear();
        var p = new HtmlGenericControl("p").AddTo(InnerContent, "not-found-error");
        new LiteralControl("We could not show the information you requested: " +
          UrlError).AddTo(p);
        return;
      }

      var explorerUri = UrlManager.GetElectionExplorerPageUri(QueryState,
        QueryElection, QueryCongress, QueryStateSenate, QueryStateHouse,
        QueryCounty, QueryOffice, true);
      explorer.Attributes.Add("src", explorerUri.ToString());

      //_ElectionDescription = Elections.GetElectionDesc(_ElectionKey, string.Empty);
      //_OfficeDescription = Offices.GetLocalizedOfficeName(_OfficeKey);
      //_IssueDescription = Issues.GetIssueDescription(_IssueKey);
      //var answerCount = FillInReport();
      //PopulateMetaTags();
      //SetUpMainHeading();
      //FillInSubheading();
      //FillInIssuesList();
      //FillInHeadings(answerCount);
    }
  }
}