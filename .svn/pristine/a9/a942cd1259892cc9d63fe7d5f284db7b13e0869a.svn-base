using System;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using DB.Vote;

namespace Vote
{
  public static partial class db
  {
    #region SCRIPT_NAME /Default.aspx
    public static string SCRIPT_NAME()// like: /Default.aspx (with /preceeding)"
    {
      return HttpContext.Current.Request.ServerVariables["SCRIPT_NAME"];
    }
    #endregion SCRIPT_NAME /Default.aspx

    #region Security Table & Security

    public static string Session_Get(string str)
    {
      return HttpContext.Current.Session[str] as string;
    }

    public static void Session_Put(string sessionStr, string valueStr)
    {
      HttpContext.Current.Session[sessionStr] = valueStr;
    }

    #endregion Security Table & Security

    #region User

    public static string User_StateCode()
    {
      if (
        SecurePage.IsMasterUser
        && !string.IsNullOrEmpty(VotePage.QueryState)
        )
        return VotePage.QueryState;
      else
        return db.Session_Get("UserStateCode").ToUpper();
    }

    public static string User_CountyCode()
    {
      if (
        (SecurePage.IsMasterUser || SecurePage.IsStateAdminUser)
        && (!string.IsNullOrEmpty(VotePage.QueryCounty))
        )
        return VotePage.QueryCounty;
      else
        return db.Session_Get("UserCountyCode");
    }

    public static string User_LocalCode()
    {
      if (
        (SecurePage.IsMasterUser || SecurePage.IsStateAdminUser || SecurePage.IsCountyAdminUser)
        && (!string.IsNullOrEmpty(VotePage.QueryLocal))
        )
        return VotePage.QueryLocal;
      return db.Session_Get("UserLocalCode");
    }

    #endregion User

    #region Is_Valid StateCode... ElectionKey OfficeKey PoliticianKey IssueKey

    public static bool Is_Valid_Election(string electionKey)
    {
      if (!string.IsNullOrEmpty(electionKey))
        return db.Rows("Elections", "ElectionKey", electionKey) == 1;
      return false;
    }

    public static bool Is_Valid_Issue(string issueKey)
    {
      if (string.IsNullOrEmpty(issueKey)) return false;
      if (issueKey.Length == 13 && issueKey.Substring(3, 10)
        .ToUpper() == "ISSUESLIST")
        return true;
      if ((issueKey.Length == 6) && (issueKey.Substring(3, 3)
        .ToUpper() == "BIO"))
        return true;
      return db.Rows("Issues", "IssueKey", issueKey) == 1;
    }

    public static bool Is_Valid_Security(string userName)
    {
      if (!string.IsNullOrEmpty(userName))
        return db.Rows("Security", "UserName", userName) == 1;
      return false;
    }

    public static bool Is_Valid_Judicial_District(string stateCode, string districtCode, string districtCodeAlpha)
    {
      return db.Row_Optional(sql.JudicialDistricts(stateCode, districtCode, districtCodeAlpha)) != null;
    }

    public static bool Is_Valid_MultiCounty_District(string stateCode, string districtCode, string districtCodeAlpha)
    {
      return db.Row_Optional(sql.MultiCountyDistricts(stateCode, districtCode, districtCodeAlpha)) != null;
    }

    #endregion Is_Valid StateCode... ElectionKey OfficeKey PoliticianKey IssueKey

    #region User Security
    //public enum Security
    public enum UserType
    {
      Master,
      Admin,
      AdminIntern,
      County,
      Local,
      Politician,
      Party,
      Anonymous,
      Unknown,
    }

    public static UserType User()
    {
      if (string.IsNullOrEmpty(SecurePage.UserSecurityClass))
        return db.UserType.Anonymous;

      if (Politicians.IsValid(SecurePage.UserName))
        return db.UserType.Politician;

      if (db.Is_Valid_PartiesEmails(SecurePage.UserName))
        return db.UserType.Party;

      if (db.Security_Str_Optional(
        SecurePage.UserName
        , "UserSecurity").ToUpper() == "MASTER")
        return db.UserType.Master;

      switch (db.Security_Str_Optional(SecurePage.UserName, "UserSecurity").ToUpper())
      {
        case "ADMIN":
          return db.Security_User_Is_Has_DataEntry_Authority(SecurePage.UserName) 
            ? db.UserType.AdminIntern 
            : db.UserType.Admin;
        case "COUNTY":
          return db.UserType.County;
        case "LOCAL":
          return db.UserType.Local;
        default:
          return db.UserType.Unknown;
      }
    }

    public static string User_Security_Default()
    {
      switch (db.User())
      {
        case db.UserType.Master:
          return "MASTER";
        case db.UserType.AdminIntern:
          return "ADMIN";
        case db.UserType.Admin:
          return "ADMIN";
        case db.UserType.County:
          return "COUNTY";
        case db.UserType.Local:
          return "LOCAL";
        case db.UserType.Politician:
          return "POLITICIAN";
        case db.UserType.Anonymous:
          return string.Empty;
        case db.UserType.Unknown:
          return string.Empty;
        default:
          return string.Empty;
      }
    }

    public static bool Is_User_Admin_DataEntry()
    {
      return db.User() == db.UserType.AdminIntern;
    }

    public static bool Is_User_Master_Unrestricted()
    {
      string sql = "Security";
      sql += " WHERE UserName = " + db.SQLLit(SecurePage.UserName);
      sql += " AND UserSecurity = 'MASTER'";
      sql += " AND UserStateCode = ''";
      sql += " AND UserCountyCode = ''";
      int testRows = db.Rows_Count_From(sql);
      return db.Rows_Count_From(sql) == 1;
    }

    public static bool Is_User_Master_Restricted()
    {
      return !db.Is_User_Master_Unrestricted();
    }

    #endregion User Security

    #region StateCode, ReportCode, CountyCode, LocalCode

    public static string State_Code()
    {
      //**Test
      string stateCode = SecurePage.GetViewStateStateCode();
      if (stateCode != null) return stateCode;

      #region Note
      //All Security State Administators Users 
      //may have the StateCode passed in query string
      //or set in /Admin/Home.aspx or by login security
      //
      //delete below
      //if (
      //  (! db.Is_SessionState_Enabled())
      //  )
      #endregion Note

      if (VotePage.IsPublicPage)
        return db.StateCode_Domain_This();

      if (SecurePage.IsMasterUser)
      {
        #region Master
        #region A State Change Note
        //only unrestricted MASTER can change StateCode, 
        //which resets CountyCode and LocalCode
        //next call to db.County_Code() then db.Local_Code() 
        //may set CountyCode and LocalCode
        #endregion A State Change


        if (!string.IsNullOrEmpty(VotePage.QueryState))
        {
          db.Session_Put("UserCountyCode", string.Empty);
          db.Session_Put("UserLocalCode", string.Empty);
          db.Session_Put("UserStateCode", VotePage.QueryState);

          return VotePage.QueryState;
        }
        if (!string.IsNullOrEmpty(db.User_StateCode()))
        {
          return db.User_StateCode();
        }
        return string.Empty;

        #endregion Master
      }
      if (SecurePage.IsStateAdminUser)
      {
        #region Admin
        if (StateCache.IsValidStateOrFederalCode(db.User_StateCode(), false))
          return db.User_StateCode();
        if (StateCache.IsValidStateOrFederalCode(db.Domain_StateCode_This(), false))
          return db.Domain_StateCode_This();
        return string.Empty;

        #endregion Admin
      }
      return string.Empty;
    }

    public static string County_Code()
    {
      string viewStateCountyCode = SecurePage.GetViewStateCountyCode();
      if (viewStateCountyCode != null) return viewStateCountyCode;

      string countyCode = string.Empty;

      if (
        !VotePage.IsSessionStateEnabled
        || !SecurePage.IsSignedIn
        )
      //if (db.Is_User_Anonymous())
      {
        #region Anonymous User
        if (!string.IsNullOrEmpty(VotePage.QueryElection))
          //could be old ElectionKey format
          countyCode = Elections.GetCountyCodeFromKey(
            //db.ElectionKey_New_Format(db.QueryString("Election")));
            VotePage.QueryElection);
        else if (!string.IsNullOrEmpty(VotePage.QueryOffice))
          countyCode = Offices.GetCountyCodeFromKey(VotePage.QueryOffice);
        else if (!string.IsNullOrEmpty(VotePage.QueryCounty))
          countyCode = VotePage.QueryCounty;
        if (
          (countyCode == "000")//Directory of Counties
          || (CountyCache.CountyExists(db.State_Code()
          , countyCode))
          )
          return countyCode;
        else
          return string.Empty;
        #endregion Anonymous User
      }
      else
      {
        #region Master, or State, County or Local Administrator
        #region A County Change
        //only MASTER or State ADMIN can change CountyCode of county
        //Setting UserLocalCode empty resets to County level security
        #endregion A County Change

        if (
          (
            (SecurePage.IsMasterUser)
            || (db.Is_User_Master_Restricted())
            || (SecurePage.IsStateAdminUser)
            )
          && (!string.IsNullOrEmpty(VotePage.QueryCounty))
          )
        {
          db.Session_Put("UserCountyCode", VotePage.QueryCounty);
          db.Session_Put("UserLocalCode", string.Empty);
        }
        else
        {
          //Need to reset CountyCode to empty
          //When there is a StateCode query string 
          //but no CountyCode query string
          if (!string.IsNullOrEmpty(db.State_Code()))
          {
            db.Session_Put("UserCountyCode", string.Empty);
            db.Session_Put("UserLocalCode", string.Empty);
          }
        }

        if (CountyCache.CountyExists(
          db.State_Code()
          , db.User_CountyCode()))
          return db.User_CountyCode();
        else
          return string.Empty;
        #endregion Master, or State, County or Local Administrator
      }
    }

    public static string Local_Code()
    {
      string viewStateLocalCode = SecurePage.GetViewStateLocalCode();
      if (viewStateLocalCode != null) return viewStateLocalCode;

      string localCode = string.Empty;

      if (
        !VotePage.IsSessionStateEnabled
        || !SecurePage.IsSignedIn
        )
      {
        #region Anonymous User
        if (!string.IsNullOrEmpty(VotePage.QueryElection))
          localCode = Elections.GetLocalCodeFromKey(
            VotePage.QueryElection);
        else if (!string.IsNullOrEmpty(VotePage.QueryOffice))
          localCode = Offices.GetLocalCodeFromKey(VotePage.QueryOffice);
        else if (!string.IsNullOrEmpty(VotePage.QueryLocal))
          localCode = VotePage.QueryLocal;
        if (
          (localCode == "00")//Directory of Local Districts
          || (LocalDistricts.IsValid(db.State_Code()
          , db.County_Code()
          , localCode))
          )
          return localCode;
        else
          return string.Empty;
        #endregion Anonymous User
      }
      else
      {
        #region Master, or State, County or Local Administrator

        #region A Local District Change
        //Any user can change the LocalCode for Local District
        //If so, County and State MUST stay unchanged
        #endregion A Local District Change

        if (!string.IsNullOrEmpty(VotePage.QueryLocal))
          //Session["UserLocalCode"] = db.QueryString("Local");
          db.Session_Put("UserLocalCode", VotePage.QueryLocal);

        //Local_Code = db.User_LocalCode();
        if (LocalDistricts.IsValid(
          db.State_Code()
          , db.User_CountyCode()
          , db.User_LocalCode()))
          return db.User_LocalCode();
        else
          return string.Empty;
        #endregion State, County or Local Administrator User
      }
    }
    #endregion Master, or State, County or Local Administrator

    #region Security for MASTER, ADMIN, PUBLIC users

    public static bool Is_User_Security_Ok()
    {
      #region Notes
      //Insures a valid login user
      //Then security check insures that each user type 
      //has the valid code or codes required of the user type, specifically:
      //A MASTER user only needs any valid StateCode of FederalCode
      //A State ADMIN user only needs the StateCode assigned in the Security Table
      //because it has authority to manage any county or local district in that State
      //A COUNTY user need a valid StateCode and County code 
      //which restricts user to that county and its local districts.
      //A LOCAL user needs a valid StateCode, CountyCode and LocalCode 
      //restricting it to only that particular local district.
      #endregion Notes

      if (SecurePage.IsSuperUser) return true;

      if (SecurePage.IsMasterUser)
      {
        #region Master
        if (
          (db.User_StateCode() == "UU")//Creating a General election for each state
          && (SecurePage.IsSuperUser)
          )
        {
          return true;
        }
        else if (
          (!string.IsNullOrEmpty(db.User_StateCode()))
          && (
                (StateCache.IsValidStateOrFederalCode(db.User_StateCode(), false))
                || (db.User_StateCode() == "LL")//for All issues or National issues
                || (db.User_StateCode() == "US")//Presidential Primary Candidates Remaining in Race
          //|| (db.User_StateCode() == "UU")//Creating a General election for each state
                || (db.User_StateCode() == "PP")//Template of All Major Presidential Primary Candidates
              )
            )
          return true;
        else
          return false;
        #endregion Master
      }
      else
      {
        if (SecurePage.UserSecurityClass != db.User_Security_Default())
          //Security in Session from login must be same as in Security Table
          return false;
        else
        {
          #region Admin Users
          if (SecurePage.IsStateAdminUser)
          {
            #region State Admin
            if (
              //(!string.IsNullOrEmpty(db.Domain_StateCode_This()))
              //&& (db.Is_Valid_StateCode(db.Domain_StateCode_This()))
              //&& (db.Security_Str(db.User_Name(), "UserStateCode") == db.Domain_StateCode_This())
              (StateCache.IsValidStateOrFederalCode(db.User_StateCode(), false))
              && (db.Security_Str(SecurePage.UserName, "UserStateCode") == db.User_StateCode())
              )
              return true;
            else
              return false;
            #endregion State Admin
          }
          else if (SecurePage.IsCountyAdminUser)
          {
            #region County Admin
            if (
              //(!string.IsNullOrEmpty(db.Domain_StateCode_This()))
              //&& (db.Is_Valid_StateCode(db.Domain_StateCode_This()))
              //&& (!string.IsNullOrEmpty(db.User_CountyCode()))
              //&& (db.Is_Valid_County(db.Domain_StateCode_This(), db.User_CountyCode()))
              StateCache.IsValidStateOrFederalCode(db.User_StateCode(), false)
              && CountyCache.CountyExists(db.User_StateCode(), db.User_CountyCode())
              && db.Security_Str(SecurePage.UserName, "UserStateCode") == db.Domain_StateCode_This()
              && db.Security_Str(SecurePage.UserName, "UserCountyCode") == db.User_CountyCode()
              )
              return true;
            else
              return false;
            #endregion County Admin
          }
          else if (SecurePage.IsLocalAdminUser)
          {
            #region Local Admin
            if (
              //(!string.IsNullOrEmpty(db.Domain_StateCode_This()))
              //&& (db.Is_Valid_StateCode(db.Domain_StateCode_This()))
              //&& (!string.IsNullOrEmpty(db.User_CountyCode()))
              //&& (db.Is_Valid_County(db.Domain_StateCode_This(), db.User_CountyCode()))
              //&& (!string.IsNullOrEmpty(db.User_LocalCode()))
              //&& (db.Is_Valid_LocalDistrict(db.Domain_StateCode_This(), db.User_CountyCode(), db.User_LocalCode()))
                (StateCache.IsValidStateOrFederalCode(db.User_StateCode(), false))
                && (CountyCache.CountyExists(db.User_StateCode(), db.User_CountyCode()))
                && (LocalDistricts.IsValid(db.User_StateCode(), db.User_CountyCode(), db.User_LocalCode()))
                && (db.Security_Str(SecurePage.UserName, "UserStateCode") == db.Domain_StateCode_This())
                && (db.Security_Str(SecurePage.UserName, "UserCountyCode") == db.User_CountyCode())
                && (db.Security_Str(SecurePage.UserName, "UserLocalCode") == db.User_LocalCode())
              )
              return true;
            else
              return false;
            #endregion Local Admin
          }
          else
          {
            return false;
          }
          #endregion Admin Users
        }
      }
    }

    public static string State_Code_Security_Login()
    {
      if (SecurePage.IsMasterUser)
        //StateCode passed as query string in /Master/Default.aspx
        //return User_Security_StateCode();
        return db.User_StateCode();
      else
        //return HttpContext.Current.Session["UserStateCode"].ToString();
        return db.Security_Str(SecurePage.UserName, "UserStateCode");
    }
    public static string County_Code_Security_Login()
    {
      return db.Security_Str(SecurePage.UserName, "UserCountyCode");
    }
    public static string Local_Code_Security_Login()
    {
      return db.Security_Str(SecurePage.UserName, "UserLocalCode");
    }

    public static string PoliticianKey_ViewState()
    {
      #region Note:
      //Politician, Master, Admin Interns, and Party users
      //obtain the PoliticianKey used if ViewState["PoliticianKey"]
      //for all pages in the Politician Folder here
      #endregion Note:
      if (
        (SecurePage.IsMasterUser)
        || (db.Is_User_Admin_DataEntry())
        || (SecurePage.IsPartyUser)
        )
      {
        #region Special Users who can enter Politician Data
        if (!string.IsNullOrEmpty(VotePage.QueryId))
        {
          return VotePage.QueryId;
        }
        else
        {
          return string.Empty;
        }
        #endregion Special Users who can enter Politician Data
      }
      else
      {
        #region Politician
        return SecurePage.UserName;
        #endregion Politician
      }
    }
    public static string PartyKey_ViewState()
    {
      if (
        (SecurePage.IsMasterUser)
        && (!string.IsNullOrEmpty(VotePage.QueryParty))
        )
        return VotePage.QueryParty;
      else if (SecurePage.IsPartyUser)
        //return db.User_Name();
        return db.PartiesEmails_Str(
          SecurePage.UserName
        , "PartyKey"
        );
      else
        return string.Empty;
    }
    #endregion Security for MASTER, ADMIN, PUBLIC users

    #region Office Electoral Level
    public const int Electoral_Undefined = 99;
    public const int Electoral_All = 0;
    public const int Electoral_Federal = 1;
    public const int Electoral_State = 2;
    public const int Electoral_Multi_Counties = 3;
    public const int Electoral_County = 4;
    public const int Electoral_Multi_Locals = 5;
    public const int Electoral_Local = 6;

    public static bool Is_Electoral_Federal(OfficeClass officeClass)
    {
      #region switch (Office_Class)
      switch (officeClass)
      {
        case OfficeClass.USPresident:
        case OfficeClass.USSenate:
        case OfficeClass.USHouse:
          return true;
        default:
          return false;
      }
      #endregion Template
    }

    public static bool Is_Electoral_State(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.StateWide:
        case OfficeClass.StateSenate:
        case OfficeClass.StateHouse:
          return true;
        default:
          return false;
      }
    }

    public static bool Is_Electoral_District_Multi_Counties(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.StateDistrictMultiCounties:
        case OfficeClass.StateDistrictMultiCountiesJudicial:
        case OfficeClass.StateDistrictMultiCountiesParty:
          return true;
        default:
          return false;
      }
    }
    public static bool Is_Electoral_County(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.CountyExecutive:
        case OfficeClass.CountyLegislative:
        case OfficeClass.CountySchoolBoard:
        case OfficeClass.CountyCommission:
        case OfficeClass.CountyJudicial:
        case OfficeClass.CountyParty:
          return true;
        default:
          return false;
      }
    }

    public static bool Is_Electoral_District_Multi_Partial_Counties(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.StateDistrictMultiPartialCounties:
          return true;
        default:
          return false;
      }
    }

    public static bool Is_Electoral_Local(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.LocalExecutive:
        case OfficeClass.LocalLegislative:
        case OfficeClass.LocalSchoolBoard:
        case OfficeClass.LocalCommission:
        case OfficeClass.LocalJudicial:
        case OfficeClass.LocalParty:
          return true;
        default:
          return false;
      }
    }

    public static bool Is_Electoral_Federal(string officeKey)
    {
      return db.Is_Electoral_Federal(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_State(string officeKey)
    {
      return db.Is_Electoral_State(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_District_Multi_Counties(string officeKey)
    {
      return db.Is_Electoral_District_Multi_Counties(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_County(string officeKey)
    {
      return db.Is_Electoral_County(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_OfficeKey_County(string officeKey)
    {
      return db.Is_Electoral_County(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_District_Multi_Partial_Counties(string officeKey)
    {
      return db.Is_Electoral_District_Multi_Partial_Counties(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_Local(string officeKey)
    {
      return db.Is_Electoral_Local(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_OfficeKey_Local(string officeKey)
    {
      return db.Is_Electoral_Local(Offices.GetOfficeClass(officeKey));
    }

    public static bool Is_Electoral_Federal_State_District(OfficeClass officeClass)
    {
      //Only needs a StateCode
      if (
        (db.Is_Electoral_Federal(officeClass))
        || (db.Is_Electoral_State(officeClass))
        || (db.Is_Electoral_District_Multi_Counties(officeClass))
        || (db.Is_Electoral_District_Multi_Partial_Counties(officeClass))
        )
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Federal_State_District(string officeKey)
    {
      //Only needs a StateCode
      if (
        (db.Is_Electoral_Federal(officeKey))
        || (db.Is_Electoral_State(officeKey))
        || (db.Is_Electoral_District_Multi_Counties(officeKey))
        || (db.Is_Electoral_District_Multi_Partial_Counties(officeKey))
        )
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_District(OfficeClass officeClass)
    {
      //Need a DistrictCode
      if (
        (db.Is_Electoral_District_Multi_Counties(officeClass))
        || (db.Is_Electoral_District_Multi_Partial_Counties(officeClass))
        )
        return true;
      else
        return false;
    }
     
    public static bool Is_Electoral_District(string officeKey)
    {
      //Need a DistrictCode
      return Offices.IsUSHouse(officeKey)
        || Offices.IsStateSenate(officeKey)
        || Offices.IsStateHouse(officeKey)
        || db.Is_Electoral_District_Multi_Counties(officeKey)
        || db.Is_Electoral_District_Multi_Partial_Counties(officeKey);
    }

    #endregion Office Electoral Level

    #region Office Type
    public const int Type_All = 0;
    public const int Type_Executive = 1;
    public const int Type_Legislative = 2;
    public const int Type_SchoolBoard = 3;
    public const int Type_Commission = 4;
    public const int Type_Judicial = 5;
    public const int Type_Party = 6;
    #endregion Office Type

    // Electoral Regions

    #region Electoral_Class (Demographic Class)
    public enum ElectoralClass
    {
      All,
      USPresident,
      USSenate,
      USHouse,
      USGovernors,
      State,
      County,
      Local,
      Unknown
    }

    public static ElectoralClass Electoral_Class(string stateCode, string countyCode,
      string localCode)
    {
      if ((!string.IsNullOrEmpty(localCode)) && (!string.IsNullOrEmpty(countyCode)) &&
        (!string.IsNullOrEmpty(stateCode)))
        return ElectoralClass.Local;

      if ((!string.IsNullOrEmpty(countyCode)) && (!string.IsNullOrEmpty(stateCode)))
        return ElectoralClass.County;

      if (!string.IsNullOrEmpty(stateCode))
        switch (stateCode)
        {
          case "PP":
          case "US":
          case "U1":
            return ElectoralClass.USPresident;
          case "U2":
            return ElectoralClass.USSenate;
          case "U3":
            return ElectoralClass.USHouse;
          case "U4":
            return ElectoralClass.USGovernors;
          default:
            return StateCache.IsValidStateCode(stateCode) ? ElectoralClass.State : ElectoralClass.All;
        }

      return ElectoralClass.Unknown;
    }

    public static db.ElectoralClass Electoral_Class_Election(string electionKey)
    {
      switch (electionKey.Length)
      {
        case Elections.ElectionKeyLengthStateOrFederal:
          return db.Electoral_Class(
            Offices.GetStateCodeFromKey(electionKey)
            , string.Empty
            , string.Empty
            );
        case Elections.ElectionKeyLengthCounty:
          return db.Electoral_Class(
            Offices.GetStateCodeFromKey(electionKey)
            , Elections.GetCountyCodeFromKey(electionKey)
            , string.Empty
            );
        case Elections.ElectionKeyLengthLocal:
          return db.Electoral_Class(
            Offices.GetStateCodeFromKey(electionKey)
            , Elections.GetCountyCodeFromKey(electionKey)
            , Elections.GetLocalCodeFromKey(electionKey)
            );
        default:
          return db.Electoral_Class(
            string.Empty
            , string.Empty
            , string.Empty
            );
      }
    }

    public static db.ElectoralClass Electoral_Class(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.All:
          return db.ElectoralClass.All;
        case OfficeClass.USPresident:
          return db.ElectoralClass.USPresident;
        case OfficeClass.USSenate:
          return db.ElectoralClass.USSenate;
        case OfficeClass.USHouse:
          return db.ElectoralClass.USHouse;
        case OfficeClass.USGovernors:
          return db.ElectoralClass.USGovernors;
        case OfficeClass.StateWide:
        case OfficeClass.StateSenate:
        case OfficeClass.StateHouse:
        case OfficeClass.StateDistrictMultiCounties:
        case OfficeClass.StateJudicial:
        case OfficeClass.StateDistrictMultiCountiesJudicial:
        case OfficeClass.StateParty:
        case OfficeClass.StateDistrictMultiCountiesParty:
          return db.ElectoralClass.State;
        case OfficeClass.CountyExecutive:
        case OfficeClass.CountyLegislative:
        case OfficeClass.CountySchoolBoard:
        case OfficeClass.CountyCommission:
        case OfficeClass.CountyJudicial:
        case OfficeClass.CountyParty:
          return db.ElectoralClass.County;
        case OfficeClass.LocalExecutive:
        case OfficeClass.LocalLegislative:
        case OfficeClass.LocalSchoolBoard:
        case OfficeClass.LocalCommission:
        case OfficeClass.LocalJudicial:
        case OfficeClass.LocalParty:
          return db.ElectoralClass.Local;
        default:
          return db.ElectoralClass.Unknown;
      }
    }

    #endregion Electoral_Class  (Demographic Class)

    #region Is_Electoral_Class

    public static bool Is_Electoral_Class_State(string stateCode, string countyCode, string localCode)
    {
      if (db.Electoral_Class(stateCode, countyCode, localCode)
          == db.ElectoralClass.State)
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_County(string stateCode, string countyCode, string localCode)
    {
      if (db.Electoral_Class(stateCode, countyCode, localCode)
          == db.ElectoralClass.County)
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_Local(string stateCode, string countyCode, string localCode)
    {
      if (db.Electoral_Class(stateCode, countyCode, localCode)
          == db.ElectoralClass.Local)
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_Federal(string stateCode, string countyCode, string localCode)
    {
      if (
        (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.USPresident)
        || (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.USSenate)
        || (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.USHouse)
        || (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.USGovernors)
        )
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_State_County_Local(string stateCode, string countyCode, string localCode)
    {
      if (
        (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.State)
        || (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.County)
        || (db.Electoral_Class(stateCode, countyCode, localCode) == db.ElectoralClass.Local)
        )
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_County(int officeClass)
    {
      if (db.Electoral_Class(officeClass.ToOfficeClass())
          == db.ElectoralClass.County)
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_Local(int officeClass)
    {
      if (db.Electoral_Class(officeClass.ToOfficeClass())
          == db.ElectoralClass.Local)
        return true;
      else
        return false;
    }

    public static bool Is_Electoral_Class_Can_Add_Offices(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.StateWide:
        case OfficeClass.StateDistrictMultiCounties:
        case OfficeClass.CountyExecutive:
        case OfficeClass.LocalExecutive:
        case OfficeClass.CountyLegislative:
        case OfficeClass.LocalLegislative:
        case OfficeClass.CountySchoolBoard:
        case OfficeClass.LocalSchoolBoard:
        case OfficeClass.CountyCommission:
        case OfficeClass.LocalCommission:
        case OfficeClass.StateJudicial:
        case OfficeClass.StateDistrictMultiCountiesJudicial:
        case OfficeClass.CountyJudicial:
        case OfficeClass.LocalJudicial:
        case OfficeClass.StateParty:
        case OfficeClass.StateDistrictMultiCountiesParty:
        case OfficeClass.CountyParty:
        case OfficeClass.LocalParty:
          return true;
        default:
          return false;
      }
    }

    #endregion Is_Electoral_Class

    #region Electoral Region NAME
    public static string Electoral_Class_Type(OfficeClass officeClass)
    {
      switch (officeClass)
      {
        case OfficeClass.All:
          return "All";
        case OfficeClass.USPresident:
          return "US President";
        case OfficeClass.USSenate:
          return "US Senate";
        case OfficeClass.USHouse:
          return "US House";
        case OfficeClass.StateWide:
          return "Statewide";
        case OfficeClass.StateSenate:
          return "State Senate";
        case OfficeClass.StateHouse:
          return "State House";
        case OfficeClass.StateDistrictMultiCounties:
          return "Multi County";
        case OfficeClass.CountyExecutive:
          return "Executive";
        case OfficeClass.LocalExecutive:
          return "Executive";
        case OfficeClass.CountyLegislative:
          return "Legislative";
        case OfficeClass.LocalLegislative:
          return "Legislative";
        case OfficeClass.CountySchoolBoard:
          return "School Board";
        case OfficeClass.LocalSchoolBoard:
          return "School Board";
        case OfficeClass.CountyCommission:
          return "Commission";
        case OfficeClass.LocalCommission:
          return "Commission";
        case OfficeClass.StateJudicial:
          return "Judicial";
        case OfficeClass.StateDistrictMultiCountiesJudicial:
          return "Judicial";
        case OfficeClass.CountyJudicial:
          return "Judicial";
        case OfficeClass.LocalJudicial:
          return "Judicial";
        case OfficeClass.StateParty:
          return "Political Party";
        case OfficeClass.StateDistrictMultiCountiesParty:
          return "Political Party";
        case OfficeClass.CountyParty:
          return "Political Party";
        case OfficeClass.LocalParty:
          return "Political Party";
        default:
          return string.Empty;
      }
    }

    public static string Name_Electoral()
    {
      return Offices.GetElectoralClassDescription(db.State_Code(), db.County_Code(), 
        db.Local_Code());
    }

    public static string Name_Electoral_Short()
    {
      return Offices.GetElectoralClassShortDescription(db.State_Code(), db.County_Code(),
        db.Local_Code());
    }

    public static string Name_Electoral_Plus_Text(
      string textBeforeName
      , string textAfterName
      , bool isElectoralClassNameLong
      )
    {
      string text = string.Empty;
      if (!string.IsNullOrEmpty(textBeforeName.Trim()))
        text += textBeforeName;

      if (isElectoralClassNameLong)
        text += db.Name_Electoral();
      else
        text += db.Name_Electoral_Short();

      if (!string.IsNullOrEmpty(textAfterName.Trim()))
        //Text += " " + Text_After_Name;
        text += textAfterName;

      return text;
    }

    public static string Name_Electoral_Plus_Text(
      string textBeforeName
      , string textAfterName
      )
    {
      return db.Name_Electoral_Plus_Text(
             textBeforeName
            , textAfterName
            , true
            );
    }

    public static string Name_Electoral_Plus_Text(string textAfterName)
    {
      return db.Name_Electoral_Plus_Text(
             string.Empty
            , textAfterName
            , true
            );
    }

    #endregion Electoral Region NAME

    // Office Contests

    #region Contest, Office
    public static string Name_Office_Contest_And_Electoral(string officeKey)
    {
      if (Offices.IsValid(officeKey))
      {
        string nameOfficeContest = string.Empty;

        nameOfficeContest += Offices.FormatOfficeName(officeKey);

        nameOfficeContest += ", ";

        nameOfficeContest += 
          Offices.GetElectoralClassDescriptionFromOfficeKey(officeKey);

        return nameOfficeContest;
      }
      else
        return string.Empty;
    }

    public static string Name_Office_Contest_And_Electoral_Plus_Offices(OfficeClass officeClass, string stateCode, string countyCode, string localCode)
    {
      return Offices.GetLocalizedOfficeClassDescription(officeClass, stateCode, 
        countyCode, localCode) + " Offices";
    }
    #endregion Contest, Office

    #region enum

    public enum ReportUser
    {
      Public,
      Admin,
      Master
    }

    #endregion

    #region Messages
    public static string Ok(string msg)
    {
      return "<span class=" + "\"" + "MsgOk" + "\"" + ">"
      + "SUCCESS!!! " + msg + "</span>";
    }
    public static string Fail(string msg)
    {
      return "<span class=" + "\"" + "MsgFail" + "\"" + ">"
      + "****FAILURE**** " + msg + "</span>";
    }
    public static string Msg(string msg)
    {
      return "<span class=" + "\"" + "Msg" + "\"" + ">"
      + msg + "</span>";
    }
    public static string Warn(string msg)
    {
      return "<span class=" + "\"" + "MsgWarn" + "\"" + ">"
      + "******WARNING****** " + msg + "</span>";
    }


    #endregion

    #region Errors 301, 302, 404 & Unhandled & Error Logs
    #region Note
    //301 Permanent Redirect
    //302 Temporary Redirect
    //404 Page Not Found
    //Unhandled Errors
    #endregion Note

    public static string Page_Url()
    {
      return UrlManager.CurrentHostName
        + db.SCRIPT_NAME()
        + "?"
        + HttpContext.Current.Request.ServerVariables["QUERY_STRING"];
    }

    #region Log Errors

    public static void Log_Page_Not_Found_404(string msg)
    {
      if (MemCache.IsLoggingErrors)
        DB.VoteLog.Log404PageNotFound.Insert(DateTime.Now, VotePage.CurrentUrl, msg);
    }


    public static void Log_Error_Admin(Exception ex, string message = null)
    {
      string logMessage = string.Empty;
      string stackTrace = string.Empty;
      if (ex != null)
      {
        logMessage = ex.Message;
        stackTrace = ex.StackTrace;
      }
      if (!string.IsNullOrWhiteSpace(message))
      {
        if (!string.IsNullOrWhiteSpace(logMessage))
          logMessage += " :: ";
        logMessage += message;
      }
      DB.VoteLog.LogErrorsAdmin.Insert(DateTime.Now, db.Page_Url(), logMessage, stackTrace);
    }

    #endregion Log Errors

    #endregion Errors 301, 302, 404 & Unhandled & Error Logs

    #region Dates - DateTime

    public static string YYYY_MM_DD(string date)
    {
      return Convert.ToDateTime(date).ToString("yyyy-MM-dd");
    }

    #endregion Dates - DateTime

    #region Bool (Is)

    public static bool Is_Valid_Integer(string number2Check)
    {
      int value;
      return int.TryParse(number2Check, out value);
    }

    // renamed from Is_Digit for clarity
    public static bool Is_Single_Digit(string char2Check)
    {
      return char2Check.Length == 1 && char.IsDigit(char2Check, 0);
    }

    public static bool Is_Digits(string strToCheck)
    {
      char[] chars = strToCheck.ToCharArray(0, strToCheck.Length);
      for (int i = 0; i <= strToCheck.Length - 1; i++)
      {
        //if (!db.Is_Digit(chars[i]))
        if (!char.IsDigit(chars[i]))
          return false;
      }
      return true;
    }
    public static bool Is_Has_Digits(string strToCheck)
    {
      char[] chars = strToCheck.ToCharArray(0, strToCheck.Length);
      for (int i = 0; i <= strToCheck.Length - 1; i++)
      {
        //if (db.Is_Digit(chars[i]))
        if (char.IsDigit(chars[i]))
          return true;
      }
      return false;
    }
    public static bool Is_Chars_Upper(string strToCheck)
    {
      char[] chars = strToCheck.ToCharArray(0, strToCheck.Length);
      for (int i = 0; i <= strToCheck.Length - 1; i++)
      {
        //if (!db.Is_Char_Upper(chars[i]))
        if (!char.IsUpper(chars[i]))
          return false;
      }
      return true;
    }
    public static bool Is_Valid_Date(string date)
    {
      DateTime value;
      return DateTime.TryParse(date, out value);
    }
    public static bool Is_Str_Html(string strTest)
    {
      if (
        strTest.IndexOf("<") >= 0
        || strTest.IndexOf("/>") >= 0
        )
        return true;
      else
        return false;
    }
    public static bool Is_TextBox_Html(TextBox textBox)
    {
      if (
        (textBox.Text.IndexOf("<") >= 0)
        || (textBox.Text.IndexOf("/>") >= 0)
        )
        return true;
      else
        return false;
    }
    public static bool Is_Str_Script(string strToCheck)
    {
      if (strToCheck.Trim().ToUpper().IndexOf("<SCRIPT") >= 0)
        return true;
      else
        return false;
    }
    public static bool Is_Str_Html_Or_Illegal(string str)
    {
      if (
        (db.Is_Str_Html(str))
        || (db.Is_Str_Script(str))
        )
        return true;
      else
        return false;
    }

    #endregion Bool (Is)

    //---strings --- 

    #region Strings

    public static bool Is_Valid_Email_Address(string emailAddress)
    {
      return emailAddress.Trim().IndexOf("@", StringComparison.Ordinal) != -1;
    }

    public static string SQLLit(string str)
    {
      //Enclose string in single quotes and double up any embededded single quotes
      str = "'" + str.Replace("'", "''") + "'";
      return str;
    }

    public static string RenderToString(Control control)
    {
      var stringWriter = new StringWriter();
      var htmlWriter = new HtmlTextWriter(stringWriter);
      control.RenderControl(htmlWriter);
      return stringWriter.ToString();
    }

    public static string Str_ReCase(string str2Fix)
    {
      StringBuilder sb = new StringBuilder(str2Fix.Length);
      bool wordBegin = true;
      foreach (char c in str2Fix)
      {
        sb.Append(wordBegin ? char.ToUpper(c) : char.ToLower(c));
        //wordBegin = char.IsWhiteSpace(c);
        if (
          (char.IsWhiteSpace(c))
          || (char.IsPunctuation(c))
          )
          wordBegin = true;
        else
          wordBegin = false;
      }
      return sb.ToString();
    }

    public static string Str_ReCase_WhiteSpace(string str2Fix)
    {
      StringBuilder sb = new StringBuilder(str2Fix.Length);
      bool wordBegin = true;
      foreach (char c in str2Fix)
      {
        sb.Append(wordBegin ? char.ToUpper(c) : char.ToLower(c));
        //wordBegin = char.IsWhiteSpace(c);
        if (char.IsWhiteSpace(c))
          wordBegin = true;
        else
          wordBegin = false;
      }
      return sb.ToString();
    }

    public static string Str_ReCase_Office_Title(string str2Fix)
    {
      string strFixed = db.Str_ReCase_WhiteSpace(str2Fix);

      //' of ' is always lower case
      //may have serveral Of's
      //Chairman Of Board Of Supervisors
      int startIndex = 0;
      string stringRemaining = string.Empty;
      if (strFixed.ToLower().IndexOf(" of ") != -1)
      {
        int index = strFixed.ToLower().IndexOf(" of ", startIndex);
        strFixed = strFixed.Remove(index, 4);
        strFixed = strFixed.Insert(index, " of ");
        startIndex = index + 4;
        stringRemaining = strFixed.Substring(startIndex);
      }
      if (stringRemaining.ToLower().IndexOf(" of ") != -1)
      {
        int index = strFixed.ToLower().IndexOf(" of ", startIndex);
        strFixed = strFixed.Remove(index, 4);
        strFixed = strFixed.Insert(index, " of ");
      }

      return strFixed;
    }

    public static string ToUpper1stChar(string name)
    {
      if (name.Trim() == string.Empty) return string.Empty;
      string newCleanName = name.ToLower()
        .Trim(); //all lower chars
      char firstChar = newCleanName[0]; //1st char upper
      firstChar = Char.ToUpper(firstChar);
      int len = name.Length;
      string remainingChars = newCleanName.Substring(1, len - 1);
      remainingChars = remainingChars.ToLower();
      return Char.ToString(firstChar) + remainingChars;
    }
    public static string Str_Remove_Non_Digits(string str2Fix)
    {
      char[] chars;
      string fixedStr = string.Empty;
      chars = str2Fix.ToCharArray(0, str2Fix.Length);
      for (int i = 0; i <= str2Fix.Length - 1; i++)
      {
        //if (db.Is_Digit(chars[i]))
        if (char.IsDigit(chars[i]))
          fixedStr += chars[i];
      }
      return fixedStr;
    }

    public static string Str_Remove_Single_And_Double_Quotes(string str2Modify)
    {
      string str = str2Modify;
      str = str.Replace("\'", string.Empty);
      str = str.Replace("\"", string.Empty);

      return str;
    }


    public static string Str_Remove_SpecialChars_All(string str2Modify)
    {
      string str = str2Modify;
      str = str.Trim();
      str = str.Replace("-", string.Empty);
      str = str.Replace("+", string.Empty);
      str = str.Replace("=", string.Empty);
      str = str.Replace("\"", string.Empty);
      str = str.Replace("\'", string.Empty);
      str = str.Replace(".", string.Empty);
      str = str.Replace(",", string.Empty);
      str = str.Replace("(", string.Empty);
      str = str.Replace(")", string.Empty);
      str = str.Replace("!", string.Empty);
      str = str.Replace("@", string.Empty);
      str = str.Replace("#", string.Empty);
      str = str.Replace("%", string.Empty);
      str = str.Replace("&", string.Empty);
      str = str.Replace("*", string.Empty);
      str = str.Replace(":", string.Empty);
      str = str.Replace(";", string.Empty);
      str = str.Replace("$", string.Empty);
      str = str.Replace("^", string.Empty);
      str = str.Replace("?", string.Empty);
      str = str.Replace("<", string.Empty);
      str = str.Replace(">", string.Empty);
      str = str.Replace("[", string.Empty);
      str = str.Replace("]", string.Empty);
      str = str.Replace("{", string.Empty);
      str = str.Replace("}", string.Empty);
      str = str.Replace("|", string.Empty);
      str = str.Replace("~", string.Empty);
      str = str.Replace("`", string.Empty);
      str = str.Replace("_", string.Empty);
      str = str.Replace("/", string.Empty);
      return str;
    }

    public static string Str_Remove_SpecialChars_Except_Single_And_Double_Quotes_Dash_And_Period(string str2Modify)
    {
      string str = str2Modify;
      //characters to strip off
      //single ' keep for names like O'Donnell
      //. also kept for Middle Name abreviations 
      //- kept for Hypenated last names
      str = str.Trim();
      //Str = Str.Replace("-", string.Empty);
      str = str.Replace("+", string.Empty);
      str = str.Replace("=", string.Empty);
      //Str = Str.Replace("\"", string.Empty);
      //Str = Str.Replace("\'", string.Empty);
      //Str = Str.Replace(".", string.Empty);
      str = str.Replace(",", string.Empty);
      str = str.Replace("(", string.Empty);
      str = str.Replace(")", string.Empty);
      str = str.Replace("!", string.Empty);
      str = str.Replace("@", string.Empty);
      str = str.Replace("#", string.Empty);
      str = str.Replace("%", string.Empty);
      str = str.Replace("&", string.Empty);
      str = str.Replace("*", string.Empty);
      str = str.Replace(":", string.Empty);
      str = str.Replace(";", string.Empty);
      str = str.Replace("$", string.Empty);
      str = str.Replace("^", string.Empty);
      str = str.Replace("?", string.Empty);
      str = str.Replace("<", string.Empty);
      str = str.Replace(">", string.Empty);
      str = str.Replace("[", string.Empty);
      str = str.Replace("]", string.Empty);
      str = str.Replace("{", string.Empty);
      str = str.Replace("}", string.Empty);
      str = str.Replace("|", string.Empty);
      str = str.Replace("~", string.Empty);
      str = str.Replace("`", string.Empty);
      str = str.Replace("_", string.Empty);
      str = str.Replace("/", string.Empty);
      return str;
    }
    public static string Str_Remove_SpecialChars_All_Except_Spaces(string str2Modify)
    {
      string str = str2Modify;
      str = str.Trim();
      str = db.Str_Remove_SpecialChars_Except_Single_And_Double_Quotes_Dash_And_Period(str);
      str = db.Str_Remove_Single_And_Double_Quotes(str);

      return str;
    }
    public static string Str_Remove_Non_Key_Chars(string str2Modify)
    {
      string str = str2Modify;
      str = db.Str_Remove_SpecialChars_All(str);
      str = str.Replace(" ", string.Empty);
      return str;
    }
    public static string Str_Remove_Puctuation(string str2Modify)
    {
      string str = str2Modify;
      //characters to strip off
      str = str.Trim();
      str = str.Replace("\"", string.Empty);
      str = str.Replace("\'", string.Empty);
      str = str.Replace(".", string.Empty);
      str = str.Replace(",", string.Empty);
      str = str.Replace("(", string.Empty);
      str = str.Replace(")", string.Empty);
      str = str.Replace("[", string.Empty);
      str = str.Replace("[", string.Empty);
      str = str.Replace("_", string.Empty);
      str = str.Replace("-", string.Empty);
      return str;
    }

    public static string Str_Remove_Quotes(string str2Modify)
    {
      string str = str2Modify;
      //characters to strip off
      str = str.Trim();
      str = str.Replace("\"", string.Empty);
      str = str.Replace("\'", string.Empty);
      return str;
    }

    public static string Str_Replace_Puctuation_With(string str2Modify, string strReplaceWith)
    {
      string str = str2Modify;
      //characters to strip off
      str = str.Trim();
      str = str.Replace("\"", strReplaceWith);
      str = str.Replace("\'", strReplaceWith);
      str = str.Replace(".", strReplaceWith);
      str = str.Replace(",", strReplaceWith);
      str = str.Replace("(", strReplaceWith);
      str = str.Replace(")", strReplaceWith);
      str = str.Replace("[", strReplaceWith);
      str = str.Replace("[", strReplaceWith);
      str = str.Replace("_", strReplaceWith);
      str = str.Replace("-", strReplaceWith);
      return str;
    }

    public static string Str_Remove_MailTo(string str2Fix)
    {
      //?? dangerous: sendmailtome@gmail.com -> sendme@gmail.com
      //int loc = Str2Fix.ToLower().IndexOf("mailto", 0, Str2Fix.Length);
      //if (loc != -1)
      //  Str2Fix = Str2Fix.Remove(loc, 6).Trim();
      int loc = str2Fix.ToLower().IndexOf(@"mailto:", 0, str2Fix.Length);
      if (loc != -1)
        str2Fix = str2Fix.Remove(loc, 7).Trim();

      //?? dangerous: myemail@gmail.com -> my@gmail.com
      //loc = Str2Fix.ToLower().IndexOf("email", 0, Str2Fix.Length);
      //if (loc != -1)
      //{
      //  Str2Fix = Str2Fix.Remove(loc, 5).Trim();
      //}

      //Str2Fix = Str2Fix.Replace(":", string.Empty);
      return str2Fix;
    }
    public static string Str_Remove_Http(string str2Fix)
    {
      if (!string.IsNullOrEmpty(str2Fix))
      {
        int loc = str2Fix.ToLower().IndexOf("http://", 0, str2Fix.Length);
        if (loc != -1)
        {
          str2Fix = str2Fix.Remove(loc, 7).Trim();
        }

        loc = str2Fix.ToLower().IndexOf("http//", 0, str2Fix.Length);
        if (loc != -1)
        {
          str2Fix = str2Fix.Remove(loc, 6).Trim();
        }

        loc = str2Fix.ToLower().IndexOf("https://", 0, str2Fix.Length);
        if (loc != -1)
        {
          str2Fix = str2Fix.Remove(loc, 8).Trim();
        }

        //?? dangerous: burlington.com -> bington.com
        //loc = Str2Fix.ToLower().IndexOf("url", 0, Str2Fix.Length);
        //if (loc != -1)
        //{
        //  Str2Fix = Str2Fix.Remove(loc, 3).Trim();
        //}

        //?? NB: for bare domain names the trailing / is typically retained
        if (str2Fix.EndsWith(@"/"))
        {
          str2Fix = str2Fix.Substring(0, str2Fix.Length - 1);
        }
      }

      //Str2Fix = Str2Fix.Replace(":", string.Empty);

      return str2Fix;
    }


    public static string Html_From_Db_For_Page(string dbText)
    {
      return HttpUtility.HtmlEncode(dbText).ReplaceNewLinesWithBreakTags();
      //return db.Str_CrLf_To_Br(DbText);
      //return HttpUtility.HtmlEncode(DbText);
    }

    public static string DBErrorMsg(string sql, string err)
    {
      //Write code to log database errors to a DBFailues Table
      return "Database Failure for SQL Statement::" + sql + " :: Error Msg:: " + err;
    }

    public static string MakeUnique6Digits()
    {
      string password = string.Empty;
      //Make a DDDDDD password
      for (int n = 0; n < 6; n++)
        password += GetRandomDigit();
      return password;
    }

    public static string Str_Run_Time(TimeSpan runTime)
    {
      return string.Format("{0:D2}h:{1:D2}m:{2:D2}s",
                              runTime.Hours,
                              runTime.Minutes,
                              runTime.Seconds);
    }

    public static string Str_Date_Of_Birth(PageCache cache, string politicianKey)
    {
      DateTime dateOfBirth = cache.Politicians.GetDateOfBirth(politicianKey);
      if (dateOfBirth != Convert.ToDateTime("1/1/1900"))
        return dateOfBirth.ToShortDateString();
      else
        return string.Empty;
    }

    public static string Age(string politicianKey)
    {
      return Age(VotePage.GetPageCache(), politicianKey);
    }

    public static string Age(PageCache cache, string politicianKey)
    {
      string years = string.Empty;
      string dob = db.Str_Date_Of_Birth(cache, politicianKey);
      if (!string.IsNullOrEmpty(dob))
      {
        DateTime dateOfBirth = cache.Politicians.GetDateOfBirth(politicianKey);
        if (dateOfBirth.DayOfYear <= DateTime.Now.DayOfYear)
        {
          years = (DateTime.Now.Year - dateOfBirth.Year).ToString();
        }
        else
        {
          years = (DateTime.Now.Year - dateOfBirth.Year - 1).ToString();
        }

      }
      return years;
    }
    public static string Str_Election_Type_Description(string type, string stateCode)
    {
      switch (type)
      {
        case "G":
          return "General Election";
        case "O":
          return "General Off-Year Election";
        case "S":
          return "Special Election";
        case "P":
          return "Primary";
        case "B":
          return "Presidential Primary";
        case "A":
          if (stateCode == "US")
            return "Remaining Presidential Party Primary Candidates";
          else //stateCode == "PP" - used as a template for identical states
            return "Template of Major Presidential Party Primary Candidates";
        default:
          return string.Empty;
      }
    }
    #endregion Strings

    //-------Tokens

    #region Tokens

    public static int Tokens(string strToCheck)
    {
      strToCheck = strToCheck.Trim();

      int count = 0;
      if (!string.IsNullOrEmpty(strToCheck))
        count = 1;

      while (strToCheck.IndexOf(" ", 0, strToCheck.Length) != -1)
      {
        int locToken = strToCheck.IndexOf(" ", 0, strToCheck.Length);
        count++;
        strToCheck = strToCheck.Substring(locToken + 1, strToCheck.Length - (locToken + 1));
        strToCheck = strToCheck.Trim();
      }
      return count;
    }

    #endregion Tokens

    #region User Input Edits
    public static bool Is_Request_Erase(string dataTo)
    {
      if (dataTo.ToUpper().Trim().Replace(" ", string.Empty) == "N/A")//explicit request to erase data
        return true;
      else
        return false;
    }

    public static string FormatName(string name)
    {
      if ((name.Trim() != string.Empty) && (!db.Is_Request_Erase(name.Trim())))
        return db.Str_ReCase(name.Trim());
      else
        return name;
    }

    #endregion

    #region Edits

    public static string LegislativeDistrictsWithBRs()
    {
      return "<br />" + VotePage.FormatLegislativeDistrictsFromQueryString();
      //string theLegislativeDistricts = string.Empty;
      ////if (db.QueryString("State")//db.State_Code() 
      //if (db.State_Code()
      //  != "DC")
      //{
      //  if (db.CongressDistrict_Code_QueryString() != "000")
      //    theLegislativeDistricts += "<br>US House District "
      //      + db.Str_Remove_Leading_0s(db.CongressDistrict_Code_QueryString())
      //      //+ " " + db.Name_State(db.QueryString("State"));//db.State_Code());
      //      + " " + StateCache.GetStateName(db.State_Code());
      //  if (db.StateSenate_Code_QueryString() != "000")
      //    theLegislativeDistricts += "<br>"
      //      //+ db.Name_State(db.QueryString("State"))//db.State_Code())
      //      + StateCache.GetStateName(db.State_Code())
      //      + " Senate District "
      //      + db.Str_Remove_Leading_0s(db.StateSenate_Code_QueryString());
      //  if (db.StateHouse_Code_QueryString() != "000")
      //    theLegislativeDistricts += "<br>"
      //      //+ db.Name_State(db.QueryString("State"))//db.State_Code())
      //      + db.State_Code()
      //      + " House District "
      //      + db.Str_Remove_Leading_0s(db.StateHouse_Code_QueryString());
      //  if (db.QueryString("County") != string.Empty)
      //    theLegislativeDistricts += "<br>" + CountyCache.GetCountyName(
      //      db.State_Code(), db.QueryString("County"));
      //}
      //else
      //{
      //  if (db.StateSenate_Code_QueryString() != "000")
      //    theLegislativeDistricts += "<br>"
      //      + "Ward "
      //      + db.Str_Remove_Leading_0s(db.StateSenate_Code_QueryString());
      //}
      //return theLegislativeDistricts;
    }

    public static string LegislativeDistricts()
    {
      string legislativeDistrictsAddress;

      if (!StateCache.IsValidStateCode(db.State_Code()))
        legislativeDistrictsAddress = "for any address in the United States";
      else
      {
        legislativeDistrictsAddress = "<span class=\"districtsHead\">for address in:</span>"
          + LegislativeDistrictsWithBRs();
      }
      return legislativeDistrictsAddress;
    }

    #endregion

    #region Passwords
    public static Random RandomObject = null;
    public static char GetRandomAlpha24()
    {
      if (RandomObject == null)
        RandomObject = new Random();
      int n = RandomObject.Next(24);
      if (n < 8)
        return Convert.ToChar(n + Convert.ToInt32('A'));
      else if (n < 13)
        return Convert.ToChar(n + Convert.ToInt32('B'));//skip I
      else
        return Convert.ToChar(n + Convert.ToInt32('C'));//skip O
    }
    public static char GetRandomDigit()
    {
      if (RandomObject == null)
        RandomObject = new Random();
      return Convert.ToChar(RandomObject.Next(10) + Convert.ToUInt32('0'));
    }
    public static string MakeUniquePassword()
    {
      string password = string.Empty;
      //Make a AAADDD password
      for (int n = 0; n < 3; n++)
        password += GetRandomAlpha24();
      for (int n = 0; n < 3; n++)
        password += GetRandomDigit();
      return password;
    }

    #endregion

    #region Default and Custom Strings

    #endregion Default and Custom Strings

    #region StateCode and DataCode for NavbarState and Domains

    public static bool Is_StateCode_State_By_State(string stateCode)
    {
      return StateCache.IsValidFederalCode(stateCode) &&
        !StateCache.IsUS(stateCode);
    }

    public static bool Is_StateCode_National_Party_Contest(string stateCode)
    {
      return stateCode == "US" || stateCode == "PP";
    }

    public static bool Is_StateCode_State_Or_National_Party_Contest(string stateCode)
    {
      return StateCache.IsValidStateCode(stateCode)
        || db.Is_StateCode_National_Party_Contest(stateCode);
    }

    public static bool Is_Domain_SingleState()
    {
      return StateCache.IsValidStateCode(db.Domain_DataCode_This());
    }
    #endregion StateCode and DataCode for Domains

    #region Is Page

    public static bool Is_Page_Issues()
    {
      switch (db.SCRIPT_NAME().ToLower())
      {
        case "/admin/issues.aspx":
          return true;
        case "/admin/issue.aspx":
          return true;
        case "/admin/issuesreport.aspx":
          return true;
        case "/admin/issuesquestions.aspx":
          return true;
        default:
          return false;
      }
    }
    #endregion  Is Page

    //--- Urls and Anchors for Pages

    #region URLs & Anchors for Pages ==============

    #region Anchor Utilities

    public static string Center(string text2Center)
    {
      return "<center>" + text2Center + "</center>";
    }

    #endregion Anchor Utilities

    #region Generic Urls & Anchors



    #region Urls State Election Authority and Organization
    #endregion Urls State Election Authority and Organization

    #region Email Anchors
    public static string UrlAddressEmail(string emailAddress)
    {
      return emailAddress != string.Empty ? "mailto:" + emailAddress : string.Empty;
    }

    public static string Anchor_Mailto_Email(string emailAddress)
    {
      if (emailAddress != string.Empty)
      {
        return "<a href=mailto:"
          + emailAddress
          + ">"
          + emailAddress
          + "</a>";
      }
      else
        return string.Empty;
    }

    #endregion Email Anchors

    #region Anchor(string Url, string AnchorText, string ToolTip, string Target)
    public static string Anchor(string url, string anchorText, string toolTip, 
      string target)
    {
      //<a href="Url" title="ToolTip" Class= "className" target=Target>AnchorText</a>
      string anchor = string.Empty;
      anchor += "<a href=";
      anchor += "\"";
      anchor += url;
      anchor += "\"";

      if (toolTip != string.Empty)
      {
        anchor += " title=";
        anchor += "\"";
        anchor += db.Str_Remove_Single_And_Double_Quotes(toolTip);
        anchor += "\"";
        anchor += " ";
      }

      if (target != string.Empty)
      {
        anchor += " target=";
        anchor += "\"";
        anchor += target;
        anchor += "\"";
        anchor += " ";
      }

      anchor += ">";

      if (anchorText != string.Empty)
        anchor += anchorText;
      else
        anchor += url;

      anchor += "</a>";
      return anchor;
    }
    public static string Anchor(string url, string anchorText, string toolTip)
    {
      return db.Anchor(url, anchorText, toolTip, string.Empty);
    }

    public static string Anchor(string url)
    {
      return db.Anchor(url, string.Empty, string.Empty, string.Empty);
    }

    public static string Anchor(Uri uri, string anchorText, string toolTip,
      string target)
    {
      return Anchor(uri.ToString(), anchorText, toolTip, target);
    }

    public static string Anchor(Uri uri)
    {
      return db.Anchor(uri.ToString(), string.Empty, string.Empty, string.Empty);
    }
    #endregion public static string Anchor(string Url, string AnchorText, string ToolTip, string Target)

    public static string Image(string url)
    {
      string imageTag = "<img src=";
      imageTag += "\"";
      imageTag += url;
      imageTag += "\"";
      imageTag += ">";
      return imageTag;
    }


    public static string Image_Politician_Tag(string politicianKey)
    {
      return db.Image(db.Url_Image_Politician_Or_NoPhoto(
          politicianKey
          , db.Image_Size_100_Headshot));

    }

    public static string AnchorPoliticianImageOrNoPhoto(string href,
      string politicianKey, int imageWidth, string title, string target)
    {
      if (politicianKey == "NoRunningMate")
        return "<span class=\"no-running-mate\">No Running Mate Selected<span>";

      string anchor = string.Empty;

      anchor += "<a";

      #region href
      anchor += " href=";
      anchor += "\"";
      anchor += href;
      anchor += "\"";
      #endregion href

      #region title
      if (title != string.Empty)
      {
        anchor += " title=";
        anchor += "\"";
        anchor += db.Str_Remove_Single_And_Double_Quotes(title);//Nicknames have quotes on them
        anchor += "\"";
      }
      #endregion title

      #region target
      #region Note
      //When Anchor is on various Directories
      //and the user is MASTER or ADMIN
      //the target should be _intro.
      //Otherwise for Anonamous users
      //the target should be _self
      //
      //Can't use if(db.Is_User_Anonymous())
      //because when the report is being 
      //created the user is always MASTER or ADMIN
      #endregion Note

      anchor += " target=";
      anchor += "\"";

      if (target != string.Empty)
        anchor += target;
      else
        anchor += "_self";

      anchor += "\"";
      #endregion target

      anchor += ">";

      #region img
      anchor += "<img src=";
      anchor += "\"";
      anchor += db.Url_Image_Politician_Or_NoPhoto(
          politicianKey
          , imageWidth);
      anchor += "\"";

      if (imageWidth > 100)
        //issue.aspx page
        anchor += " align=center";
      else
        anchor += " align=left";

      anchor += " />";
      #endregion img

      anchor += "</a>";
      return anchor;

    }


    #endregion Generic Anchors

    #region / root urls & anchors on NavBarDefault (StateCode not used but passed along)

    #region /Default.aspx URLs & Anchors

    #region Vote-XX.org Urls and Anchors
    public static string Url_Vote_XX_org_Page(string page)
    {
      return UrlManager.GetStateUri(db.State_Code(),
           page, "State=" + db.State_Code()).ToString();
    }

    public static string Url_Vote_XX_org_Default()
    {
      return db.Url_Vote_XX_org_Page("Default.aspx");
    }

    #endregion Vote-XX.org Urls and Anchors

    #endregion /Default.aspx URLs & Anchors

    #region /Intro.aspx URLs & Anchors

    public static string Anchor_Intro(
      string politicianKey
      , string anchorText
      , string title
      , string target)
    {
      string anchor = string.Empty;

      anchor += "<a";

      #region href
      anchor += " href=";
      anchor += "\"";

      #region Note
      //Anchor += db.Url_Intro(PoliticianKey);
      //Changed this relative url to absolute to avoid having 
      //duplicate page content for different domains.
      //i.e. Vote-USA.org/Intro.aspx?Id="ILObama"
      //and Vote-IL.org/Intro.aspx?Id="ILObama"
      #endregion Note
      //Anchor += db.Domain_State_Or_USA(
      //            db.StateCode_In_PoliticianKey(PoliticianKey));
      anchor += UrlManager.GetIntroPageUri(politicianKey).ToString();

      anchor += "\"";
      #endregion href

      #region title
      if (title != string.Empty)
      {
        anchor += " title=";
        anchor += "\"";
        anchor += db.Str_Remove_Single_And_Double_Quotes(title);//nicknames have quotes
        anchor += "\"";
      }
      #endregion title

      #region target
      //if (Target != string.Empty)
      //{
      //  Anchor += " target=";
      //  Anchor += "\"";
      //  Anchor += Target;
      //  Anchor += "\"";
      //}

      anchor += " target=";
      anchor += "\"";

      if (target != string.Empty)
        anchor += target;
      else
        anchor += "_self";

      anchor += "\"";
      #endregion target

      anchor += ">";

      anchor += anchorText;

      anchor += "</a>";

      return anchor;
    }
    #endregion /Intro.aspx URLs & Anchors (ok)

    #region /Issue.aspx URLs & Anchors (ok)
    public static string Url_Issue(
      string electionKey
      , string officeKey
      , string issueKey
      , string stateCode
      )
    {
      #region Note: Definition of IssueKeys
      //IssueKeys:
      //IssueLevel[0,1]
      //IssueGroup[1,2]
      //CountyCode[2,3] not implemented
      //IssueAbreviation[3,x] any short description of the issue
      //
      //IssueLevel
      //A = All Offices
      //B = National Issues for President, US Senate, US Congress
      //C = State Issues for Statewide, State Senate, State House Offices (with State Code)
      //D = County Issues (with State Code and County Name)
      //E = Local Issues (with State Code, County Name, Local District)
      //
      //StateCode
      //For Level A = LL - indicating all politicians
      //For Level B = US - National US Issues
      //For Level C and higher = StateCode
      //
      //Examples IssueKeys (depends on issue level):
      //
      //ALLPersonal -> Personal and Biographical Questions to all politicians
      //BUSFood -> Federal offices for Food Issues
      //CPAEducation -> Pennsylvania offices for Education Issues
      //DVA059Transportation -> FairfaxCounty, Virginia office for Transportaion issues
      //DVA05911Transportation -> Hunter Mill District, FairfaxCounty, Virginia office for Transportaion issues
      //
      //Special IssueKeys not in the IssuesTable in database as an IssueKey but treated like an IssueKey:
      //
      //BUSIssuesList -> List of all issues for federal offices (US President, Senate and House)
      //CVAIssuesList -> List of all issues for Virginia
      #endregion Note: Definition of IssueKeys

      #region StateCode used for State= query string parameter
      if (string.IsNullOrEmpty(stateCode))
        stateCode = Offices.GetStateCodeFromKey(officeKey);
      if (string.IsNullOrEmpty(stateCode))
        stateCode = Elections.GetStateCodeFromKey(electionKey);
      #endregion StateCode used for State= query string parameter

      //if (db.Is_StateCode_State(stateCode))
      if (db.Is_StateCode_State_Or_National_Party_Contest(stateCode))
      {
        #region replaced
        //string Url = string.Empty;
        //Url += db.Domain_State_Or_USA(State_Code);
        ////### Removed /
        ////Url += @"/Issue.aspx";
        //Url += @"Issue.aspx";

        //Url += "&State=" + State_Code;

        //if (ElectionKey != string.Empty)
        //  Url += "&Election=" + ElectionKey;

        //if (OfficeKey != string.Empty)
        //  Url += "&Office=" + OfficeKey;

        //if (IssueKey != string.Empty)
        //  Url += "&Issue=" + HttpUtility.UrlEncode(IssueKey);
        //else
        //  //Url += "&Issue=ALLPersonal";
        //  Url += "&Issue=ALLBio";
        #endregion replaced

        if (string.IsNullOrWhiteSpace(issueKey))
          issueKey = "ALLBio";

        //Uri uri = UrlManager.GetIssuePageUri(
        //  stateCode, electionKey, officeKey, issueKey);

        Uri uri = UrlManager.GetCompareCandidatesPageUri(
          stateCode, electionKey, officeKey);

        return uri.ToString();
      }
      else
        return string.Empty;
    }

    public static string Url_Issue(
      string electionKey
      , string officeKey
      , string issueKey
      )
    {
      return db.Url_Issue(
        electionKey
        , officeKey
        , issueKey
        , string.Empty
        );
    }

 
    #endregion

    #region /Login.aspx URLs & Anchors (ok)
    #endregion

    #region /PoliticianIssue.aspx URLs & Anchors
    public static string Url_PoliticianIssue(
      string politicianKey
      , string issueKey
      , string stateCode
      )
    {
      //### Changed 
      //if (string.IsNullOrEmpty(State_Code))
      //  State_Code = db.StateCode_In_PoliticianKey(PoliticianKey);
      //if (string.IsNullOrEmpty(State_Code))
      //  State_Code = db.StateCode_In_IssueKey(IssueKey);
      if (string.IsNullOrEmpty(stateCode))
      {
        if (!string.IsNullOrEmpty(politicianKey))
          stateCode = Politicians.GetStateCodeFromKey(politicianKey);
      }
      //----

      if (!string.IsNullOrEmpty(stateCode))
      {
        return UrlManager.GetPoliticianIssuePageUri(stateCode,
          politicianKey, issueKey).ToString();
      }
      else
        return string.Empty;
    }
    public static string Url_PoliticianIssue(string politicianKey, string issueKey)
    {
      return db.Url_PoliticianIssue(politicianKey, issueKey, string.Empty);
    }

    public static string Url_PoliticianIssue_ALLPersonal_If_Issues_List_Key(
      string politicianKey
      , string issueKey
      )
    {
      if (
        (issueKey != string.Empty)
        && (issueKey != db.Issues_List(issueKey))
        )
        return db.Url_PoliticianIssue(politicianKey, issueKey);
      else
        #region Note
        //There is no Biographical Issue on the /PoliticianIssue.aspx page
        //However THERE IS a Biographical comparison on the /Issue.aspx page
        #endregion Note
        return db.Url_PoliticianIssue(politicianKey, "ALLPersonal");
      //return db.Url_PoliticianIssue("ALLBio");
    }
    //------------------


    #endregion

    #endregion / root urls & anchors on NavBarState & NavBarDefault (after State selected or domain is for single State)


    #region / root urls & anchors Multi pages

    #region /Issue.aspx or PoliticianIssue.aspx URLs & Anchors (ok)
    public static string Url_Issue_Or_PoliticianIssue(string issueKey, string politicianKey)
    {
      if (db.Is_Politician_In_Election_Upcoming_Viewable(politicianKey))
      {
        //to Issue.aspx
        //return db.Url_Issue(
        //  db.Politician_Election_Upcoming_Viewable_Row(PoliticianKey)["ElectionKey"].ToString()
        //  , Politicians.GetOfficeKey(PoliticianKey, string.Empty)
        //  , IssueKey
        //  );
        string officeKey =
          VotePage.GetPageCache().Politicians.GetOfficeKey(politicianKey);
        return db.Url_Issue(
          ElectionsPoliticians.GetFutureOfficeKeyInfoByPoliticianKey(politicianKey, true).ElectionKey,
            officeKey, issueKey);
      }
      else
      {
        //### changed
        //to PoliticianIssue.aspx
        //return db.Url_PoliticianIssue_ALLPersonal_If_Issues_List_Key(
        //  IssueKey
        //  );
        return db.Url_PoliticianIssue_ALLPersonal_If_Issues_List_Key(
          politicianKey, issueKey);
      }
    }
    #endregion

    #endregion / root urls & anchors Multi pages

    #region /Admin/ URLs & Anchors

    #region /Admin/Url/Utilities

    public static string Fix_Url_Parms(string url)
    {
      //sets first parm in a query string to ? if all seperators are &'s
      if (
        (url.IndexOf('?', 0, url.Length) == -1)//no ?
        && (url.IndexOf('&', 0, url.Length) > -1)//but one or more &
        )
      {
        int Loc = url.IndexOf('&', 0, url.Length);
        int LenAfter = url.Length - Loc - 1;
        string UrlBefore = url.Substring(0, Loc);
        string UrlAfter = url.Substring(Loc + 1, LenAfter);
        return UrlBefore + "?" + UrlAfter;
      }
      else
        return url;
    }

    public static string Url_Add_State_County_Local_Codes()
    {
      //Pass along any query string parms otherwise use Security Codes
      //string UrlParms = string.Empty;

      //if (!string.IsNullOrEmpty(db.CountyCode_ViewState()))
      //  UrlParms += "&County=" + db.CountyCode_ViewState();

      //if (!string.IsNullOrEmpty(db.LocalCode_ViewState()))
      //  UrlParms += "&Local=" + db.LocalCode_ViewState();
      //if (!string.IsNullOrEmpty(db.User_CountyCode()))
      //  UrlParms += "&County=" + db.User_CountyCode();

      //if (!string.IsNullOrEmpty(db.User_LocalCode()))
      //  UrlParms += "&Local=" + db.User_LocalCode();

      //return UrlParms;

      //Add only lower level codes
      string urlParms = string.Empty;
      switch (db.Electoral_Class(
          db.State_Code()//db.State_Code()
        , db.County_Code()
        , db.Local_Code()))
      {
        case db.ElectoralClass.State:
          if (!string.IsNullOrEmpty(db.State_Code()))
            urlParms += "&State=" + db.State_Code();
          break;
        case db.ElectoralClass.County:
          if (!string.IsNullOrEmpty(db.State_Code()))
            urlParms += "&State=" + db.State_Code();
          if (!string.IsNullOrEmpty(db.User_CountyCode()))
            urlParms += "&County=" + db.User_CountyCode();
          break;
        case db.ElectoralClass.Local:
          if (!string.IsNullOrEmpty(db.State_Code()))
            urlParms += "&State=" + db.State_Code();
          if (!string.IsNullOrEmpty(db.User_CountyCode()))
            urlParms += "&County=" + db.User_CountyCode();
          if (!string.IsNullOrEmpty(db.User_LocalCode()))
            urlParms += "&Local=" + db.User_LocalCode();
          break;
        default: //for Federal Codes U!...U4
          if (!string.IsNullOrEmpty(db.State_Code()))
            urlParms += "&State=" + db.State_Code();
          break;
      }
      return urlParms;
    }
    #endregion /Admin/Url/Utilities

    #region /Admin/Authority.aspx URLs & Anchors
    public static string Url_Admin_Authority()
    {
      string url = "/Admin/Authority.aspx";
      url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);

      //return "/Admin/Authority.aspx";
    }
    #endregion /Admin/Ballot.aspx URLs & Anchors

    #region /Admin/Ballot.aspx URLs & Anchors
    public static string Url_Admin_Ballot()
    {
      string url = "/Admin/Ballot.aspx";
      url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }
    #endregion /Admin/Ballot.aspx URLs & Anchors


    #region /Admin/Default.aspx URLs & Anchors
    //Urls
    public static string Url_Admin_Default(string stateCode, string countyCode, 
      string localCode)
    {
      string url = "/Admin/Default.aspx";
      if (stateCode != string.Empty)
        url += "&State=" + stateCode;
      if (countyCode != string.Empty)
        url += "&County=" + countyCode;
      if (localCode != string.Empty)
        url += "&Local=" + localCode;
      return db.Fix_Url_Parms(url);
    }

    public static string Url_Admin_Default_Login()
    {
      return db.Url_Admin_Default(
        db.State_Code()
        , db.User_CountyCode()
        , db.User_LocalCode()
        );
    }

    //Anchors
    public static string Anchor_Admin_Default(
      string stateCode
      , string countyCode
      , string localCode
      , string anchorText
      //, string ToolTip
      , string Target
      )
    {
      string anchor = string.Empty;
      anchor += "<a href=";

      anchor += "\"";
      //if (LocalCode != string.Empty)
      anchor += db.Url_Admin_Default(stateCode, countyCode, localCode);
      //else if (CountyCode != string.Empty)
      //  Anchor += db.Url_Admin_Default(StateCode, CountyCode);
      //else
      //  Anchor += db.Url_Admin_Default(StateCode);
      anchor += "\"";

      //if (ToolTip != string.Empty)
      //{
      //  Anchor += " title=";
      //  Anchor += "\"";
      //  Anchor += ToolTip;
      //  Anchor += "\"";
      //}
      anchor += " target=";
      anchor += "\"";
      if (Target != string.Empty)
        anchor += Target;
      else
        anchor += "_self";

      anchor += "\"";

      anchor += ">";

      //Anchor += "<center>";
      if (anchorText != string.Empty)
      {
        anchor += anchorText;
      }
      else
      {
        if (localCode != string.Empty)
          anchor += VotePage.GetPageCache()
            .LocalDistricts
            .GetLocalDistrict(stateCode, countyCode, localCode);
        else if (countyCode != string.Empty)
          anchor += CountyCache.GetCountyName(stateCode, countyCode);
        else
          anchor += StateCache.GetStateName(stateCode);
      }
      //Anchor += "</center>";

      anchor += "</a>";
      return anchor;
    }
    public static string Anchor_Admin_Default(string stateCode, string countyCode, 
      string localCode, string anchorText)
    {
      return db.Anchor_Admin_Default(
        stateCode
        , countyCode
        , localCode
        , anchorText
        , string.Empty);
    }

    //----


    #endregion /Admin/Admin.aspx URLs & Anchors

    #region /Admin/Home.aspx
    #region  Urls /Admin/Home.aspx

    #endregion Urls /Admin/Home.aspx

    #endregion /Admin/Home.aspx

    #region /Admin/Districts.aspx

    #region Urls /Admin/Districts.aspx
    public static string Url_Admin_LocalDistricts(string stateCode, string countyCode, string localCode)
    {
      string url = "/Admin/Districts.aspx";
      if (stateCode != string.Empty)
        url += "&State=" + stateCode;
      if (countyCode != string.Empty)
        url += "&County=" + countyCode;
      if (localCode != string.Empty)
        url += "&Local=" + localCode;
      return db.Fix_Url_Parms(url);
    }
    #endregion Urls /Admin/Districts.aspx

    #endregion /Admin/Districts.aspx

    #region /Admin/Elections.aspx Urls and Anchors
    public static string Url_Admin_Elections(string StateCode)
    {
      string url = "/Admin/Elections.aspx";
      if (!string.IsNullOrEmpty(StateCode))
        url += "&State=" + StateCode;
      else
        url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Elections()
    {
      return db.Url_Admin_Elections(string.Empty);
    }
    #endregion /Admin/Elections.aspx Urls and Anchors

    #region /Admin/Election.aspx URLs & Anchors
    public static string Url_Admin_Election()
    {
      return "/Admin/Election.aspx";
    }
    public static string Url_Admin_Election(
      string electionKey
      , bool isAddStateCountyLocalCodes)
    {
      string url = db.Url_Admin_Election();
      url += "&Election=" + electionKey;
      if (isAddStateCountyLocalCodes)
        url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Election(
      string electionKey)
    {
      //string Url = db.Url_Admin_Election();
      //Url += "&Election=" + ElectionKey;
      //Url += db.Url_Add_State_County_Local_Codes();
      //return db.Fix_Url_Parms(Url);

      return db.Url_Admin_Election(
       electionKey
      , true);

    }
    #endregion

    #region /Admin/ElectionOffices.aspx URLs & Anchors
    public static string Url_Admin_Election_Offices()
    {
      return "/Admin/ElectionOffices.aspx";
    }

    public static string Url_Admin_Election_Offices(string electionKey)
    {
      string Url = db.Url_Admin_Election_Offices();
      Url += "&Election=" + electionKey;
      Url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(Url);
    }
    #endregion

    #region /Admin/Issues.aspx URLs & Anchors

    public static string Url_Admin_Issues()
    {
      return "/Admin/Issues.aspx";
    }
    public static string Url_Admin_Issues_Omit(string stateCode, string issueKey, 
      bool isOmit)
    {
      string url = string.Empty;
      url += Url_Admin_Issues();
      if (!string.IsNullOrEmpty(stateCode))
        url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(issueKey))
        url += "&Issue=" + issueKey;
      if (isOmit)
        url += "&Omit=true";
      else
        url += "&Omit=false";

      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Issues(string stateCode, string issueKey)
    {
      string Url = string.Empty;
      Url += Url_Admin_Issues();
      if (!string.IsNullOrEmpty(stateCode))
        Url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(issueKey))
        Url += "&Issue=" + issueKey;

      return db.Fix_Url_Parms(Url);
    }

    public static string Anchor_Admin_Issues(string stateCode, string issueKey, 
      string anchorText)
    {
      string anchor = string.Empty;
      anchor += "<a href=";//
      anchor += "\"";
      anchor += db.Url_Admin_Issues(stateCode, issueKey);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }
    public static string Anchor_Admin_Issues_Omit(string stateCode, string issueKey, 
      string anchorText, bool isOmit)
    {
      string anchor = string.Empty;
      anchor += "<a href=";//
      anchor += "\"";
      anchor += db.Url_Admin_Issues_Omit(stateCode, issueKey, isOmit);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }

    public static string Url_Admin_Issues_Question_Omit(string stateCode, 
      string issueKey, string questionKey, bool isOmit)
    {
      string url = string.Empty;
      url += Url_Admin_Issues();
      if (!string.IsNullOrEmpty(stateCode))
        url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(issueKey))
        url += "&Issue=" + issueKey;
      if (!string.IsNullOrEmpty(questionKey))
        url += "&Question=" + questionKey;
      if (isOmit)
        url += "&Omit=true";
      else
        url += "&Omit=false";

      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Issues_Question(string stateCode, string issueKey, 
      string questionKey)
    {
      string Url = string.Empty;
      Url += Url_Admin_Issues();

      if (!string.IsNullOrEmpty(stateCode))
        Url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(issueKey))
        Url += "&Issue=" + issueKey;
      if (!string.IsNullOrEmpty(questionKey))
        Url += "&Question=" + questionKey;

      return db.Fix_Url_Parms(Url);
    }

    public static string Anchor_Admin_Issues_Question(string stateCode, string issueKey, 
      string questionKey, string anchorText)
    {
      string anchor = string.Empty;
      anchor += "<a href=";//
      anchor += "\"";
      anchor += db.Url_Admin_Issues_Question(stateCode, issueKey, questionKey);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }

    public static string Anchor_Admin_Question_Issues_Omit(string stateCode, 
      string issueKey, string questionKey, string anchorText, bool isOmit)
    {
      string anchor = string.Empty;
      anchor += "<a href=";//
      anchor += "\"";
      anchor += db.Url_Admin_Issues_Question_Omit(stateCode, issueKey, questionKey, isOmit);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }

    #endregion

    #region /Admin/IssuesReport.aspx URLs & Anchors

    public static string Url_Admin_IssuesReport(string issueLevel, string groupCode)
    {
      return "/Admin/IssuesReport.aspx"
      + "?IssueLevel=" + issueLevel
      + "&Group=" + groupCode;
    }
    #endregion

    #region /Admin/Office.aspx URLs
    //------URLs----------

    public static string Ur4AdminOffice()
    {
      return "/Admin/Office.aspx";
    }

    #region (mode: UPDATE Offices Table)

    public static string Url_Admin_Office_UPDATE(string officeKey)
    {
      string url = db.Ur4AdminOffice();
      url += "&Office=" + officeKey;
      //Url += db.xUrl_Add_ViewState_DataCodes_OfficeKey(OfficeKey);
      return db.Fix_Url_Parms(url);
    }

    #endregion (mode: UPDATE Offices Table)

    #region (mode: ADD Offices Table)

    public static string Url_Admin_Office_ADD(OfficeClass officeClass)
    {
      string url = db.Ur4AdminOffice();
      url += "&Class=" + officeClass.ToInt();
      url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }
    #endregion

    #endregion /Admin/Office.aspx URLs

    #region /Admin/Office.aspx Anchors

    #region (mode: UPDATE Offices Table)

    public static string Anchor_Admin_Office_UPDATE_Office(
      string officeKey
      , string anchorText
      , string target
      )
    {
      string anchor = string.Empty;
      anchor += "<a href=";

      anchor += "\"";
      anchor += db.Url_Admin_Office_UPDATE(officeKey);
      anchor += "\"";

      anchor += " target=";
      anchor += "\"";
      if (target != string.Empty)
        anchor += target;
      else
        anchor += "_office";
      anchor += "\"";

      anchor += ">";

      anchor += anchorText;
      anchor += "</a>";
      return anchor;
    }

    #endregion (mode: UPDATE Offices Table)

    #region (mode: ADD Offices Table)

    public static string Anchor_Admin_Office_ADD(OfficeClass officeClass, 
      string anchorText)
    {
      string anchor = string.Empty;
      anchor += "<a href=";

      anchor += "\"";
      anchor += db.Url_Admin_Office_ADD(officeClass);
      anchor += "\"";

      anchor += " target=";
      anchor += "\"";
      anchor += "_office";
      anchor += "\"";

      anchor += ">";

      anchor += anchorText;
      anchor += "</a>";
      return anchor;
    }

    #endregion (mode: ADD Offices Table)

    #endregion /Admin/Office.aspx Anchors

    #region /Admin/Offices.aspx URLs
    public static string Url_Admin_Offices()
    {
      return "/Admin/Offices.aspx";
      //Url += db.Url_Add_State_County_Local_Codes();
      //return db.Fix_Url_Parms(Url);

      //return "/Admin/Offices.aspx";
    }
    public static string Url_Admin_Offices(int officeClass)
    {
      string url = Url_Admin_Offices();
      url += "&Class=" + officeClass;
      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Offices(int officeClass, string stateCode)
    {
      string Url = Url_Admin_Offices();
      Url += "&Class=" + officeClass;
      Url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(Url);
    }
    public static string Url_Admin_Offices(
      string stateCode
      , string countyCode
      , string localCode
      )
    {
      string url = Url_Admin_Offices();
      if (!string.IsNullOrEmpty(stateCode))
        url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(countyCode))
        url += "&County=" + countyCode;
      if (!string.IsNullOrEmpty(localCode))
        url += "&Local=" + localCode;
      return db.Fix_Url_Parms(url);
    }
    public static string Url_Admin_Offices(
      string stateCode
      )
    {
      return db.Url_Admin_Offices(
      stateCode
      , string.Empty
      , string.Empty
      );
    }
    public static string Url_Admin_Offices(
      string stateCode
      , string countyCode
      )
    {
      return db.Url_Admin_Offices(
      stateCode
      , countyCode
      , string.Empty
      );
    }
    #endregion /Admin/Offices.aspx URLs

    #region /Admin/Officials.aspx URLs & Anchors

    public static string Url_Admin_Officials(string stateCode, string countyCode, 
      string localCode)
    {
      string url = "/Admin/Officials.aspx";
      if (stateCode != string.Empty)
        url += "&State=" + stateCode;
      if (countyCode != string.Empty)
        url += "&County=" + countyCode;
      if (localCode != string.Empty)
        url += "&Local=" + localCode;
      return db.Fix_Url_Parms(url);
    }

    public static string Url_Admin_Officials(string stateCode)
    {
      return db.Url_Admin_Officials(stateCode, string.Empty, string.Empty);
    }
    public static string Url_Admin_Officials()
    {
      //return "/Admin/Officials.aspx";
      string Url = "/Admin/Officials.aspx";
      Url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(Url);
    }

    #endregion /Admin/Officials.aspx URLs & Anchors

    #region /Admin/Parties.aspx URLs & Anchors
    public static string Url_Admin_Parties(
      string stateCode
      , string partyKey
      , string partyEmail
      )
    {
      string url = "/Admin/Parties.aspx";
      if (!string.IsNullOrEmpty(stateCode))
        url += "&State=" + stateCode;
      if (!string.IsNullOrEmpty(partyKey))
        url += "&Party=" + partyKey;
      if (!string.IsNullOrEmpty(partyEmail))
        url += "&Email=" + partyEmail;
      return db.Fix_Url_Parms(url);
    }

    public static string Url_Admin_Parties(
      string stateCode
      )
    {
      return db.Url_Admin_Parties(
       stateCode
      , string.Empty
      , string.Empty
      );
    }

    public static string Anchor_Admin_Parties(
      string stateCode
      , string partyKey
      , string partyEmail
      , string anchorText
      )
    {
      string anchor = string.Empty;
      anchor += "<a href=";
      anchor += "\"";
      anchor += db.Url_Admin_Parties(
        stateCode
        , partyKey
        , partyEmail
        );
      anchor += "\"";

      anchor += " target=";
      anchor += "\"";
      anchor += "_edit";
      anchor += "\"";

      anchor += ">";
      anchor += anchorText;

      anchor += "</a>";
      return anchor;
    }
    #endregion /Admin/Parties.aspx URLs & Anchors

    #region /Admin/Politician.aspx URLs

    //------URLs----------

    public static string Url_Admin_Politician()
    {
      return "/Admin/Politician.aspx";
    }

    public static string Url_Admin_Politician(
      string politicianKey
      )
    {
      //return db.Url_Admin_Politician(PoliticianKey, string.Empty, string.Empty);
      string url = db.Url_Admin_Politician();

      if (!string.IsNullOrEmpty(politicianKey))
        url += "&Id=" + politicianKey;

      return db.Fix_Url_Parms(url);
    }

    public static string Url_Admin_Politician_Office(
      string officeKey)
    {
      string url = db.Url_Admin_Politician();

      if (!string.IsNullOrEmpty(officeKey))
        url += "&Office=" + officeKey;

      return db.Fix_Url_Parms(url);
    }
    #endregion /Admin/Politician.aspx URLs

    #region /Admin/Politicians.aspx URLs
    public static string Url_Admin_Politicians()
    {
      return "/Admin/Politicians.aspx";
      //Url += db.Url_Add_State_County_Local_Codes();
      //return db.Fix_Url_Parms(Url);
    }
    public static string Url_Admin_Politicians(OfficeClass officeClass)
    {
      string url = db.Url_Admin_Politicians();
      url += "&Class=" + officeClass.ToInt();
      url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }

    public static string Url_Admin_Politicians(OfficeClass officeClass, string sort)
    {
      string Url = db.Url_Admin_Politicians();
      Url += "&Class=" + officeClass.ToInt();
      Url += "&Sort=" + sort;
      Url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(Url);
    }

    #endregion /Admin/Politicians.aspx URLs

    #region /Admin/Politicians.aspx Anchors
    #endregion /Admin/Politicians.aspx Anchors

    #region /Admin/OfficeContest.aspx Anchors

    #endregion /Admin/OfficeContest.aspx Anchors

    #region /Admin/QuestionAnswers.aspx URLs & Anchors
    public static string Url_Admin_QuestionAnswers(string issueLevel, string stateCode)
    {
      return "/Admin/QuestionAnswers.aspx"
      + "?IssueLevel=" + issueLevel
      + "&State=" + stateCode;
    }
    #endregion

    #region /Admin/Questions.aspx URLs & Anchors
    public static string Url_Admin_Questions()
    {
      return "/Admin/Questions.aspx";
    }

    public static string Url_Admin_Questions(string issueGroup, string issueKey, 
      string questionKey)
    {
      return Url_Admin_Questions()
      + "?Group=" + issueGroup
      + "&Issue=" + issueKey
      + "&Question=" + questionKey;
    }

    public static string Anchor_AdminQuestions(string issueGroup, string issueKey, 
      string questionKey, string anchorText)
    {
      string anchor = string.Empty;
      anchor += "<a href=";
      anchor += "\"";
      anchor += db.Url_Admin_Questions(issueGroup, issueKey, questionKey);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }
    #endregion

    #region /Admin/Referendum.aspx URLs & Anchors
    public static string Ur4AdminReferendums()
    {
      return "/Admin/Referendum.aspx";
    }

    public static string Ur4AdminReferendums(string electionKey)
    {
      string url = db.Ur4AdminReferendums();
      url += "&Election=" + electionKey;
      url += db.Url_Add_State_County_Local_Codes();
      return db.Fix_Url_Parms(url);
    }

    #endregion

    #region /Admin/DesignStyleSheet.aspx URLs & Anchors
    #endregion

    #endregion

    #region /Master/ URLs & Anchors

    #region /Master/Default.aspx URLs & Anchors
    public static string Url_Master_Default()
    {
      return @"/Master/Default.aspx";
    }

    #endregion

    #region /Master/AnswersEdit.aspx URLs & Anchors
    public static string Url_Master_AnswersEdit(string PoliticianKey, string QuestionKey)
    {
      return "/Master/AnswersEdit.aspx?Id=" + PoliticianKey
        + "&Question=" + QuestionKey;
    }
    public static string Anchor_Master_AnswersEdit(string PoliticianKey, string QuestionKey, string AnchorText, string Target)
    {
      string Anchor = string.Empty;
      Anchor += "<a href=";
      Anchor += "\"";
      Anchor += db.Url_Master_AnswersEdit(PoliticianKey, QuestionKey);
      Anchor += "\"";

      if (Target != string.Empty)
      {
        Anchor += " target=";
        Anchor += Target;
        Anchor += " ";
      }

      Anchor += ">";

      Anchor += "<nobr>" + AnchorText + "</nobr>";
      //Anchor += AnchorText;
      Anchor += "</a>";
      return Anchor;
    }
    #endregion

    #region /Master/PoliticianFind.aspx URLs & Anchors
    public static string Url_Master_FindPolitician(string PoliticianKey)
    {
      return "/Master/PoliticianFind.aspx?Id=" + PoliticianKey;
    }
    public static string Anchor_Master_FindPolitician(string PoliticianKey)
    {
      string Anchor = string.Empty;
      Anchor += "<a href=";
      Anchor += "\"";
      Anchor += db.Url_Master_FindPolitician(PoliticianKey);
      Anchor += "\"";

      Anchor += ">";
      Anchor += "<nobr>" + Politicians.GetFormattedName(PoliticianKey) + "</nobr>";
      Anchor += "</a>";
      return Anchor;
    }
    #endregion

    #region /Master/ImagesHeadshots.aspx URLs & Anchors
    public static string Url_Master_ImagesHeadshots(string PoliticianKey)
    {
      return "/Master/ImagesHeadshots.aspx?Id=" + PoliticianKey;
    }
    #endregion /Master/ImagesHeadshots.aspx URLs & Anchors

    #region x/Master/Parties.aspx URLs & Anchors

    #endregion x/Master/Parties.aspx URLs & Anchors
    #region /Master/Volunteers.aspx
    public static string Url_Master_Volunteers(string email)
    {
      string url = "/Master/Volunteers.aspx";
      if (!string.IsNullOrWhiteSpace(email))
        url += "?Email=" + email;
      return url;
    }
    #endregion /Master/Volunteers.aspx

    #endregion

    #region /Politician/ URLs & Anchors

    #region /Politician/Default.aspx URLs & Anchors

    public static string Politician_Id_Add_To_QueryString_Master_User()
    {
      #region Note
      //A Master User passes the same PoliticianKey in a Id QueryString from page to page
      //A Politician User never passes the Id in a QueryString
      #endregion Note
      if (
        (
        (SecurePage.IsMasterUser)
        || (SecurePage.IsPartyUser)
        )
        && (!string.IsNullOrEmpty(VotePage.QueryId))
        )
        return "&Id=" + VotePage.QueryId;
      else
        return string.Empty;
    }
    public static string PartyKey_Add_To_QueryString_Master_User()
    {
      #region Note
      //A Master User passes the same PartyKey in a QueryString from page to page
      //A Party User never passes the a QueryString
      #endregion Note
      if (
        (SecurePage.IsMasterUser)
        && (!string.IsNullOrEmpty(VotePage.QueryParty))
        )
        return "&Party=" + VotePage.QueryParty;
      else
        return string.Empty;
    }
    public static string Url_Politician_Default(string politicianKey)
    {
      string Url = @"/Politician/Default.aspx";
      if (!string.IsNullOrEmpty(politicianKey))
        Url += "&Id=" + politicianKey;
      else
        Url += db.Politician_Id_Add_To_QueryString_Master_User();
      return db.Fix_Url_Parms(Url);
    }
    public static string Url_Politician_Default()
    {
      //string Url = @"/Politician/Default.aspx";
      //Url += db.Politician_Id_Add_To_QueryString_Master_User();
      //return db.Fix_Url_Parms(Url);
      return db.Url_Politician_Default(string.Empty);
    }

    #endregion

    #region /Politician/IntroPage.aspx URLs & Anchors

    public static string Url_Politician_Intro()
    {
      return @"/Politician/IntroPage.aspx";
      //Url += db.Politician_Id_Add_To_QueryString_Master_User();
      //return db.Fix_Url_Parms(Url);
    }

    public static string Url_Politician_HappyFace_Image()
    {
      return "/images/PoliticianHappyFace.jpg"; ;
    }

    public static string Url_Politician_Intro(string PoliticianKey)
    {
      string Url = db.Url_Politician_Intro();

      if (!string.IsNullOrEmpty(PoliticianKey))
        Url += "&Id=" + PoliticianKey;
      else if (!string.IsNullOrEmpty(VotePage.QueryId))
        Url += "&Id=" + VotePage.QueryId;

      return db.Fix_Url_Parms(Url);
    }

    public static string Anchor_Politician_Intro_HappyFace(string PoliticianKey)
    {
      string Anchor = string.Empty;
      Anchor += "<a href=";
      Anchor += "\"";
      Anchor += db.Url_Politician_Intro(PoliticianKey);
      Anchor += "\"";

      Anchor += " target=";
      Anchor += "\"";
      Anchor += "_politician";
      Anchor += "\"";

      Anchor += " title=";
      Anchor += "\"";
      Anchor += "Update Politicians Intro Page";
      Anchor += "\"";

      Anchor += ">";

      Anchor += " <img src=";
      Anchor += "\"";
      //Anchor += "/images/PoliticianHappyFace.jpg";
      Anchor += Url_Politician_HappyFace_Image();
      Anchor += "\"";

      Anchor += " border=0";

      Anchor += "</a>";
      return Anchor;
    }


    #endregion

    #region /Politician/IssueQuestions.aspx URLs & Anchors
    public static string Url_Politician_IssueQuestions()
    {
      return @"/Politician/IssueQuestions.aspx";
    }
    public static string Url_Politician_IssueQuestions(
      string issueKey
      , string PoliticianKey
      )
    {
      string Url;
      //if (IssueKey != db.Issues_List(IssueKey))
      if (!db.Is_IssuesList(issueKey))
        Url = db.Url_Politician_IssueQuestions()
        + "&Issue=" + issueKey;
      else
        Url = db.Url_Politician_IssueQuestions()
          + "&Issue=" + "ALLPersonal";
      //+ "&Issue=" + "ALLBio";
      if (!string.IsNullOrEmpty(PoliticianKey))
        Url += "&Id=" + PoliticianKey;
      else
        Url += db.Politician_Id_Add_To_QueryString_Master_User();

      return db.Fix_Url_Parms(Url);
    }
    public static string Url_Politician_IssueQuestions(string issueKey)
    {
      return db.Url_Politician_IssueQuestions(
       issueKey
      , string.Empty
      );
    }
    #endregion

    #region /Politician/SearchEngineSubmit.aspx URLs & Anchors
    public static string Url_Politician_SearchEngineSubmitCompare(
      string politicianKey
      , string issueKey
      )
    {
      string Url;
      if (db.Is_Politician_In_Election_Upcoming_Viewable(politicianKey))
      {
        Url = @"/Politician/SearchEngineSubmit.aspx";
        //+ "?Id=" + PoliticianKey
        Url += "&Page=Issue";
      }
      else
      {
        //Url = @"/Politician/SearchEngineSubmit.aspx?Page=PoliticianIssue";
        Url = @"/Politician/SearchEngineSubmit.aspx";
        //+ "?Id=" + PoliticianKey
        Url += "&Page=PoliticianIssue";
      }

      if (!string.IsNullOrEmpty(issueKey))
        Url += "&Issue=" + issueKey;

      Url += db.Politician_Id_Add_To_QueryString_Master_User();

      return db.Fix_Url_Parms(Url);
    }

    public static string Url_Politician_SearchEngineSubmit_Intro_Page()
    {
      string Url = @"/Politician/SearchEngineSubmit.aspx";
      Url += "&Page=Intro";
      Url += db.Politician_Id_Add_To_QueryString_Master_User();
      return db.Fix_Url_Parms(Url);
    }
    #endregion

    #endregion

    #region /Party/ Urls and Anchors
    public static string Url_Party_Default(string State_Code, string Election_Key)
    {
      string Url = @"/Party/Default.aspx";
      if (!string.IsNullOrEmpty(State_Code))
        Url += "&State=" + State_Code;
      if (!string.IsNullOrEmpty(Election_Key))
        Url += "&Election=" + Election_Key;
      Url += db.PartyKey_Add_To_QueryString_Master_User();
      return db.Fix_Url_Parms(Url);
    }

    public static string Url_Party_Default()
    {
      return db.Url_Party_Default(string.Empty, string.Empty);
    }
    #endregion /Party/ Urls and Anchors

    // --- URLs for Images and css ---

    #region Image constants
    //public const int Image_Size_500_Profile = 500;
    //public const int Image_Size_400_Profile = 400;
    public const int Image_Size_300_Profile = 300;
    public const int Image_Size_200_Profile = 200;
    public const int Image_Size_100_Headshot = 100;
    public const int Image_Size_75_Headshot = 75;
    public const int Image_Size_50_Headshot = 50;
    public const int Image_Size_35_Headshot = 35;
    public const int Image_Size_25_Headshot = 25;
    public const int Image_Size_20_Headshot = 20;
    public const int Image_Size_15_Headshot = 15;

    #endregion Image constants

    #region Urls - Simple Image and css
    //Image
    public static string Url_Image_Banner(string DesignCode, string Extn)
    {
      return @"/images/Designs/" + DesignCode + @"/" + "Banner" + Extn;
    }
    public static string Url_Image_Banner_Admin(string DesignCode, string Extn)
    {
      return @"/images/Designs/" + DesignCode + @"/" + "BannerAdmin" + Extn;
    }
    public static string Url_Image_TagLine(string DesignCode, string Extn)
    {
      return @"/images/Designs/" + DesignCode + @"/" + "TagLine" + Extn;
    }

    #endregion Urls - Simple

    #region Urls - Url or Empty
    public static string Url_ImageBannerOrEmpty(string DesignCode)
    {
      string Extn;
      if (VotePage.IsPublicPage)
      {
        Extn = db.ExtnImageOrEmpty(db.Path_Part_Image_Banner_NoExtn(DesignCode));
        if (Extn != string.Empty)
          return db.Url_Image_Banner(DesignCode, Extn);
        else
          return string.Empty;
      }
      else
      {
        Extn = db.ExtnImageOrEmpty(db.Path_Part_Image_Banner_Admin_NoExtn(DesignCode));
        if (Extn != string.Empty)
          return db.Url_Image_Banner_Admin(DesignCode, Extn);//AdminTable Banner
        else
        {
          //Public Banner
          Extn = db.ExtnImageOrEmpty(db.Path_Part_Image_Banner_NoExtn(DesignCode));
          if (Extn != string.Empty)
            return db.Url_Image_Banner(DesignCode, Extn);
          else
            return string.Empty;
        }
      }
    }
    public static string Url_ImageTagLineOrEmpty(string DesignCode)
    {
      //return db.Url_Image_OrEmpty(db.Path_Part_Image_TagLine_NoExtn(DesignCode), db.Url_ImageTagLine_NoExtn(DesignCode));

      string Extn = db.ExtnImageOrEmpty(db.Path_Part_Image_TagLine_NoExtn(DesignCode));
      if (Extn != string.Empty)
        return db.Url_Image_TagLine(DesignCode, Extn);
      else
        return string.Empty;
    }
    #endregion Urls - Url or Empty

    #region Urls - Images which have defaults when not present

    public static string Url_Image_Politician_Original(string PoliticianKey)
    {
      string Url = string.Empty;
      Url += @"/Image.aspx?Id=";
      Url += PoliticianKey;
      Url += "&Col=ProfileOriginal";
      return Url;
    }

    public static string Url_Image_Politician(string PoliticianKey, int Image_Width)
    {
      return Url_Image_Politician(PoliticianKey, Image_Width, 0);
    }

    public static string Url_Image_Politician(string PoliticianKey, int Image_Width,
      int noPhotoWidth)
    {
      string Url = string.Empty;
      Url += @"/Image.aspx";
      Url += "?Id=";
      Url += PoliticianKey;

      Url += "&Col=";
      string columnName = ImageManager.GetPoliticianImageColumnNameByWidth(Image_Width);
      Url += columnName;

      // This handles the NoPhoto case without having to hit the db for every img href
      // on the page
      if (noPhotoWidth > 0)
      {
        if (noPhotoWidth == Image_Width)
          Url += "&Def=1"; // the short form
        else
        {
          Url += "&Def=";
          string defaultColumnName = ImageManager.GetPoliticianImageColumnNameByWidth(noPhotoWidth);
          Url += defaultColumnName;
        }
      }
      #region commented
      //switch (Image_Width)
      //{
      //  case db.Image_Size_500_Profile:
      //    Url += "Profile500";
      //    break;
      //  case db.Image_Size_400_Profile:
      //    Url += "Profile400";
      //    break;
      //  case db.Image_Size_300_Profile:
      //    Url += "Profile300";
      //    break;
      //  case db.Image_Size_200_Profile:
      //    Url += "Profile200";
      //    break;
      //  case db.Image_Size_100_Headshot:
      //    Url += "Headshot100";
      //    break;
      //  case db.Image_Size_75_Headshot:
      //    Url += "Headshot75";
      //    break;
      //  case db.Image_Size_50_Headshot:
      //    Url += "Headshot50";
      //    break;
      //  case db.Image_Size_35_Headshot:
      //    Url += "Headshot35";
      //    break;
      //  case db.Image_Size_25_Headshot:
      //    Url += "Headshot25";
      //    break;
      //  case db.Image_Size_20_Headshot:
      //    Url += "Headshot20";
      //    break;
      //  case db.Image_Size_15_Headshot:
      //    Url += "Headshot15";
      //    break;
      //}
      #endregion commented
      return Url;
    }

    public static string Url_Image_Politician_Or_NoPhoto(string politicianKey,
      int imageWidth)
    {
      // This handles the NoPhoto case without having to hit the db for every img href
      // on the page
      //if (db.Is_Valid_PoliticiansImages(PoliticianKey))
      //  return db.Url_Image_Politician(PoliticianKey, Width_Image);
      //else
      //  return db.Url_Image_NoPhoto(Width_Image);
      return db.Url_Image_Politician(politicianKey, imageWidth, imageWidth);
    }

    #endregion Urls for Images which have defaults when not present
    #endregion  URLs & Anchors ==============

    #region DropDown State List

    public static DropDownList DropDownList_Party_Load(
      DropDownList DropDownListParty
      , string StateCode
      , bool Is_Exclude_National_Parties)
    {
      string SQL;
      DropDownListParty.Items.Clear();

      ListItem DropDownParty = new ListItem();
      DropDownParty.Value = "Z";
      DropDownParty.Text = "--Select Different Party--";
      DropDownListParty.Items.Add(DropDownParty);

      #region State Parties
      SQL = string.Empty;
      SQL += " SELECT PartyKey,PartyCode,PartyName";
      SQL += " FROM Parties";
      SQL += " WHERE StateCode =" + db.SQLLit(StateCode);
      SQL += " ORDER BY PartyOrder";
      //DataTable Table_Parties = db.Table(sql.Parties(db.State_Party, StateCode));
      DataTable Table_Parties = db.Table(SQL);
      foreach (DataRow Row_Party in Table_Parties.Rows)
      {
        DropDownParty = new ListItem();
        DropDownParty.Value = Row_Party["PartyKey"].ToString();
        DropDownParty.Text = Row_Party["PartyName"].ToString() + " (" + Row_Party["PartyCode"].ToString() + ")";
        DropDownListParty.Items.Add(DropDownParty);
      }
      #endregion State Parties

      #region Non-Pary Categories
      SQL = string.Empty;
      SQL += " SELECT PartyKey,PartyCode,PartyName";
      SQL += " FROM Parties";
      SQL += " WHERE StateCode ='US'";
      SQL += " AND PartyCode = ''";
      SQL += " ORDER BY PartyOrder";
      //Table_Parties = db.Table(sql.Parties(db.No_Party, "US"));
      Table_Parties = db.Table(SQL);
      foreach (DataRow Row_Party in Table_Parties.Rows)
      {
        DropDownParty = new ListItem();
        DropDownParty.Value = Row_Party["PartyKey"].ToString();
        DropDownParty.Text = Row_Party["PartyName"].ToString();
        DropDownListParty.Items.Add(DropDownParty);
      }
      #endregion


      #region Minor National Parties
      SQL = string.Empty;
      SQL += " SELECT PartyKey,PartyCode,PartyName";
      SQL += " FROM Parties";
      SQL += " WHERE StateCode ='US'";
      SQL += " AND PartyCode != ''";
      SQL += " AND IsPartyMajor = 0";
      SQL += " ORDER BY PartyOrder";
      //Table_Parties = db.Table(sql.Parties(db.Minor_National_Party, "US"));
      Table_Parties = db.Table(SQL);
      foreach (DataRow Row_Party in Table_Parties.Rows)
      {
        DropDownParty = new ListItem();
        DropDownParty.Value = Row_Party["PartyKey"].ToString();
        DropDownParty.Text = Row_Party["PartyName"].ToString() + " (" + Row_Party["PartyCode"].ToString() + ")";
        DropDownListParty.Items.Add(DropDownParty);
      }
      #endregion Minor National Parties

      if (!Is_Exclude_National_Parties)
      {
        #region  National Parties
        SQL = string.Empty;
        SQL += " SELECT PartyKey,PartyCode,PartyName";
        SQL += " FROM Parties";
        SQL += " WHERE StateCode ='US'";
        SQL += " AND IsPartyMajor = 1";
        SQL += " ORDER BY PartyOrder";
        //Table_Parties = db.Table(sql.Parties(db.Minor_National_Party, "US"));
        Table_Parties = db.Table(SQL);
        foreach (DataRow Row_Party in Table_Parties.Rows)
        {
          DropDownParty = new ListItem();
          DropDownParty.Value = Row_Party["PartyKey"].ToString();
          DropDownParty.Text = Row_Party["PartyName"].ToString() + " (" + Row_Party["PartyCode"].ToString() + ")";
          DropDownListParty.Items.Add(DropDownParty);
        }
        #endregion National Parties
      }

      return DropDownListParty;
    }
    public static DropDownList DropDownList_Party_Load(
      DropDownList DropDownListParty
      , string StateCode
      )
    {
      return db.DropDownList_Party_Load(
       DropDownListParty
      , StateCode
      , true
      );
    }
    #endregion DropDown State List

    //---Paths------

    #region Path Utilities
    public static string ExtnImageOrEmpty_(string Path_Part_NoExtn)
    {
      string Extn;
      if (File.Exists(VotePage.GetServerPath() + Path_Part_NoExtn + ".jpg"))
        Extn = ".jpg";
      else if (File.Exists(VotePage.GetServerPath() + Path_Part_NoExtn + ".gif"))
        Extn = ".gif";
      else if (File.Exists(VotePage.GetServerPath() + Path_Part_NoExtn + ".png"))
        Extn = ".png";
      else
        Extn = string.Empty;
      return Extn;
    }
    public static string ExtnImageOrEmpty(string Path_Part_NoExtn)
    {
      return ExtnImageOrEmpty_(Path_Part_NoExtn);
    }
    #endregion Path Utilities

    #region Path Part - Image and css
    //image
    public static string Path_Part_Image_Banner_NoExtn(string DesignCode)
    {
      return @"images\Designs\" + DesignCode + @"\" + "Banner";
    }
    public static string Path_Part_Image_Banner_Admin_NoExtn(string DesignCode)
    {
      return @"images\Designs\" + DesignCode + @"\" + "BannerAdmin";
    }
    public static string Path_Part_Image_TagLine_NoExtn(string DesignCode)
    {
      return @"images\Designs\" + DesignCode + @"\" + "Tagline";
    }
    #endregion Path Part

    #region File Delete

    #endregion File Deletes

    #region HttpPostedFile SaveAs & Bitmap Save
    #endregion HttpPostedFile Save


    //------------ DB Primitives --------------

    #region DB Connection, ExecuteSQL DataTable DataRow (Rows)

    public static void ExecuteSQL(string SQL)
    {
      db.ExecuteSQL(SQL, true);
    }
    #endregion

    #region Rows
    public static int Rows(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table == null)
        return 0;
      else
        return table.Rows.Count;
    }

    public static DataRow Row(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
        return table.Rows[0];
      else
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a unique row for this Id."));
    }

    public static DataRow Row_Optional(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
        return table.Rows[0];
      else
        return null;
    }
    public static DataRow Row_First(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table.Rows.Count >= 1)
        return table.Rows[0];
      else
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find any rows."));
    }

    public static DataRow Row_First_Optional(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table.Rows.Count >= 1)
        return table.Rows[0];
      else
        return null;
    }

    public static DataRow Row_Last_Optional(string SQL)
    {
      DataTable table = db.Table(SQL);
      if (table.Rows.Count >= 1)
        return table.Rows[table.Rows.Count - 1];
      else
        return null;
    }
    #endregion

    #region simple Key and Condition dig outs

    public static string Single_Key_Str(string Table, string Column, string KeyName, string KeyValue)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName.Trim() + " = " + db.SQLLit(KeyValue.Trim());

      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        // modified to pass through nulls (Politician.Address etc)
        //return (string)table.Rows[0][Column].ToString().Trim();
        string result = table.Rows[0][Column] as string;
        if (result != null) result = result.Trim();
        return result;
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }

    public static string Single_Key_Str_Optional(string Table, string Column, string KeyName, string KeyValue)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName.Trim() + " = " + db.SQLLit(KeyValue.Trim());
      DataTable table = db.Table(SQL);
      switch (table.Rows.Count)
      {
        case 1://KeyValue
          return (string)table.Rows[0][Column].ToString().Trim();
        case 0://no row
          return string.Empty;
        default:
          return string.Empty;
      }
    }

    public static int Single_Key_Int(string Table, string Column, string KeyName, string KeyValue)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName.Trim() + " = " + db.SQLLit(KeyValue.Trim());
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        return (int)table.Rows[0][Column];
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }

    public static bool Single_Key_Bool(string Table, string Column, string KeyName, string KeyValue)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName.Trim() + " = " + db.SQLLit(KeyValue.Trim());
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        return Convert.ToBoolean(table.Rows[0][Column]);
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }

    public static DateTime Single_Key_Date(string Table, string Column, string KeyName, string KeyValue)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName.Trim() + " = " + db.SQLLit(KeyValue.Trim());
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        return (DateTime)table.Rows[0][Column];
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }

    public static string Double_Key_Str(string Table, string Column, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName1.Trim() + " = " + db.SQLLit(KeyValue1.Trim())
        + " AND " + KeyName2.Trim() + " = " + db.SQLLit(KeyValue2.Trim());
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        return (string)table.Rows[0][Column].ToString().Trim();
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }
    //public static bool Double_Key_Bool(string Table, string Column, string KeyName1, string KeyValue1, string KeyName2, int KeyValue2)
    //{
    //  string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
    //    + " WHERE " + KeyName1.Trim() + " = " + db.SQLLit(KeyValue1.Trim())
    //    + " AND " + KeyName2.Trim() + " = " + KeyValue2.ToString();
    //  DataRow Row = db.Row(SQL);
    //  if (Row != null)
    //  {
    //    return (bool)Row[Column];
    //  }
    //  else
    //  {
    //    throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
    //  }
    //}

    public static DateTime Double_Key_Date(string Table, string Column, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
        + " WHERE " + KeyName1.Trim() + " = " + db.SQLLit(KeyValue1.Trim())
        + " AND " + KeyName2.Trim() + " = " + db.SQLLit(KeyValue2.Trim());
      DataRow Row = db.Row(SQL);
      if (Row != null)
      {
        return (DateTime)Row[Column];
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }

    public static string Triple_Key_Str(string Table, string Column, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2, string KeyName3, string KeyValue3)
    {
      string SQL = "SELECT " + Column.Trim() + " FROM " + Table.Trim()
      + " WHERE " + KeyName1.Trim() + " = " + db.SQLLit(KeyValue1.Trim())
      + " AND " + KeyName2.Trim() + " = " + db.SQLLit(KeyValue2.Trim())
      + " AND " + KeyName3.Trim() + " = " + db.SQLLit(KeyValue3.Trim());
      DataTable table = db.Table(SQL);
      if (table.Rows.Count == 1)
      {
        return (string)table.Rows[0][Column].ToString().Trim();
      }
      else
      {
        throw new ApplicationException(db.DBErrorMsg(SQL, "Did not find a single row"));
      }
    }



    #endregion

    #region simple Table updates
    public static void Single_Key_Update_Str(string Table, string Column, string ColumnValue, string KeyName, string KeyValue)
    {
      //string UpdateSQL = "UPDATE " + Table
      //  + " SET " + Column + " = " + db.SQLLit(ColumnValue)
      //  + " WHERE " + KeyName + " = " + db.SQLLit(KeyValue);
      //db.ExecuteSQL(UpdateSQL);
      Db.UpdateColumnByKey(Table, Column, ColumnValue, KeyName, KeyValue);
    }
    public static void Single_Key_Update_Int(string Table, string Column, int ColumnValue, string KeyName, string KeyValue)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + ColumnValue.ToString()
        + " WHERE " + KeyName + " = " + db.SQLLit(KeyValue);
      db.ExecuteSQL(UpdateSQL);
    }

    public static void Single_Key_Update_Bool(string Table, string Column, bool ColumnValue, string KeyName, string KeyValue)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + Convert.ToUInt16(ColumnValue).ToString()
        + " WHERE " + KeyName + " = " + db.SQLLit(KeyValue);
      db.ExecuteSQL(UpdateSQL);
    }
    public static void Single_Key_Update_Date(string Table, string Column, DateTime ColumnValue, string KeyName, string KeyValue)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + db.SQLLit(Db.DbDateTime(ColumnValue))
        + " WHERE " + KeyName + " = " + db.SQLLit(KeyValue);
      db.ExecuteSQL(UpdateSQL);
    }


    public static void Double_Key_Update_Str(string Table, string Column, string ColumnValue, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + db.SQLLit(ColumnValue)
        + " WHERE " + KeyName1 + " = " + db.SQLLit(KeyValue1)
        + " AND " + KeyName2 + " = " + db.SQLLit(KeyValue2);
      db.ExecuteSQL(UpdateSQL);
    }

    public static void Triple_Key_Update_Str(string Table, string Column, string ColumnValue, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2, string KeyName3, string KeyValue3)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + db.SQLLit(ColumnValue)
        + " WHERE " + KeyName1 + " = " + db.SQLLit(KeyValue1)
        + " AND " + KeyName2 + " = " + db.SQLLit(KeyValue2)
      + " AND " + KeyName3 + " = " + db.SQLLit(KeyValue3);
      db.ExecuteSQL(UpdateSQL);
    }

    public static void Triple_Key_Update_Bool(string Table, string Column, bool ColumnValue, string KeyName1, string KeyValue1, string KeyName2, string KeyValue2, string KeyName3, string KeyValue3)
    {
      string UpdateSQL = "UPDATE " + Table
        + " SET " + Column + " = " + Convert.ToUInt16(ColumnValue).ToString()
        + " WHERE " + KeyName1 + " = " + db.SQLLit(KeyValue1)
        + " AND " + KeyName2 + " = " + db.SQLLit(KeyValue2)
      + " AND " + KeyName3 + " = " + db.SQLLit(KeyValue3);
      db.ExecuteSQL(UpdateSQL);
    }


    #endregion

    #region PageTitles

    #region StateCode

    public static string PageTitle4Questions(string StateCode, string IssueKey, string IssueLevel)
    {
      string PageTitle;

      PageTitle = db.Issues_Issue(IssueKey) + " QUESTIONS";
      switch (IssueLevel)
      {
        case "A":
          PageTitle += "<br>for ALL Offices";
          break;
        case "B":
          PageTitle += "<br>for ALL NATIONAL Offices";
          break;
        case "c":
          PageTitle += "<br>for " + StateCache.GetStateName(StateCode) + " Offices";
          break;
      }

      return PageTitle;
    }
    #endregion
    #endregion

    #region Security Table
    public static string Security_Str(string userName, string column)
    {
      if (userName != string.Empty)
        return db.Single_Key_Str("Security", column, "UserName", userName);
      else
        return string.Empty;
    }

    public static string Security_Str_Optional(string userName, string column)
    {
      if (userName != string.Empty)
        return db.Single_Key_Str_Optional("Security", column, "UserName", userName);
      else
        return string.Empty;
    }

    public static bool Security_Bool(string userName, string column)
    {
      if (userName != string.Empty)
        return db.Single_Key_Bool("Security", column, "UserName", userName);
      else
        return false;
    }

    public static bool Security_User_Is_Has_DataEntry_Authority(string userName)
    {
      return db.Security_Bool(userName, "UserIsHasDataEntryAuthority");
    }

    public static void SecurityUpdate(string userName, string column, string columnValue)
    {
      db.Single_Key_Update_Str("Security", column, columnValue, "UserName", userName);
    }
    #endregion

    #region Master Table
    //Str
    public static string Master_Str(string Column)
    {
      return db.Single_Key_Str("Master", Column, "ID", "Master");
    }
    //Bool
    public static bool Master_Bool(string Column)
    {
      return Single_Key_Bool("Master", Column, "ID", "Master");
    }

     public static int Master_Int(string Column)
    {
      return Single_Key_Int("Master", Column, "ID", "Master");
    }

    //Date
    public static DateTime Master_Date(string Column)
    {
      return Single_Key_Date("Master", Column, "ID", "Master");
    }
 
    //Str
    public static void Master_Update_Str(string Column, string ColumnValue)
    {
      string UpdateSQL = "UPDATE Master "
        + " SET " + Column + " = " + db.SQLLit(ColumnValue.ToString().Trim())
        + " WHERE ID = 'MASTER' ";
      db.ExecuteSQL(UpdateSQL);
    }
    //Bool
    public static void Master_Update_Bool(string Column, bool ColumnValue)
    {
      string SQL = "UPDATE Master "
        + " SET " + Column + " = " + Convert.ToUInt16(ColumnValue).ToString()
        + " WHERE ID = 'MASTER' ";
      db.ExecuteSQL(SQL);
    }

    #endregion

    #region States Table

    public static string States_Str(string StateCode, string Column)
    {
      //if ((StateCode != string.Empty) && (StateCode != "US"))
      if (StateCode != string.Empty)
        return db.Single_Key_Str("States", Column, "StateCode", StateCode);
      else
        return string.Empty;
    }
    public static int States_Int(string StateCode, string Column)
    {
      if ((StateCode != string.Empty) && (StateCode != "US"))
        return db.Single_Key_Int("States", Column, "StateCode", StateCode);
      else
        return 0;
    }
    public static bool States_Bool(string StateCode, string Column)
    {
      if ((StateCode != string.Empty) && (StateCode != "US"))
        return db.Single_Key_Bool("States", Column, "StateCode", StateCode);
      else
        return false;
    }
    public static DateTime States_Date(
      string StateCode
      , string Column)
    {
      if (StateCode != string.Empty)
        return db.Single_Key_Date("States", Column, "StateCode", StateCode);
      else
        return DateTime.MinValue;
    }
    public static DateTime States_HomePageUpdated(
      string StateCode)
    {
      return db.States_Date(
       StateCode
      , "HomePageUpdated");
    }

    public static void States_Update_Str(string StateCode, string Column, string ColumnValue)
    {
      db.Single_Key_Update_Str("States", Column, ColumnValue, "StateCode", StateCode);
    }
    public static void States_Update_Bool(string StateCode, string Column, bool ColumnValue)
    {
      db.Single_Key_Update_Bool("States", Column, ColumnValue, "StateCode", StateCode);
    }

    #endregion States Table

    #region OfficesAllIdentified Table

    //public static bool StatesOffices_Bool(string stateCode, OfficeClass officeClass,
    //  string column)
    //{
    //  if (stateCode != string.Empty && officeClass.IsValid())
    //    return Double_Key_Bool("StatesOffices", column, "StateCode", stateCode,
    //      "OfficeLevel", officeClass.ToInt());
    //  else
    //    return false;
    //}

    //public static bool Is_Offices_All_Identified(string stateCode, OfficeClass officeClass)
    //{
    //  //return db.StatesOffices_Bool(stateCode, officeClass, "IsOfficesAllIdentified");
    //  return OfficesAllIdentified.GetIsOfficesAllIdentified(stateCode, officeClass.ToInt());
    //}

    #endregion OfficesAllIdentified Table

    #region Domains Table
    public static string Domains(string DomainServerName, string Column)
    {
      if (DomainServerName != string.Empty)
        return db.Single_Key_Str("Domains", Column, "DomainServerName", DomainServerName);
      //return db.Single_Key_Str_Optional("Domains", Column, "DomainServerName", DomainServerName);
      else
        return string.Empty;
    }
    public static void DomainsUpdate(string DomainServerName, string Column, string ColumnValue)
    {
      db.Single_Key_Update_Str("Domains", Column, ColumnValue, "DomainServerName", DomainServerName);
    }

    public static string Domain_DesignCode_This()
    {
      //string test = db.SERVER_NAME();
      if (!string.IsNullOrEmpty(VotePage.QueryDesign))
        return VotePage.QueryDesign;
      else
        //return db.Domains(db.SERVER_NAME(), "DomainDesignCode");
        return UrlManager.CurrentDomainDesignCode;
    }
    public static string DesignCode_Domain_This()
    {
      return db.Domain_DesignCode_This();
    }

    public static string Domain_DataCode_This()
    {
      var queryData = VotePage.GetQueryString("Data").ToUpperInvariant();
      if (!string.IsNullOrEmpty(queryData))
        return queryData;
      var queryState = VotePage.QueryState;
      return !string.IsNullOrEmpty(queryState)
        ? queryState 
        : UrlManager.CurrentDomainDataCode;
    }

    public static string StateCode_Domain_This()
    {
      if (StateCache.IsValidStateCode(db.Domain_DataCode_This()))
        return db.Domain_DataCode_This();
      else
        return string.Empty;
    }

    public static string Domain_StateCode_This()
    {
      return db.StateCode_Domain_This();
    }

    #endregion

    #region DomainDesigns Table
    //Strings

    //bool
    public static bool DomainDesigns_Bool(string DomainDesignCode, string Column)
    {
      return db.Single_Key_Bool("DomainDesigns", Column, "DomainDesignCode", DomainDesignCode);
    }

    #endregion

    public static bool DomainDesigns_Bool_This(string Column)
    {
      return db.DomainDesigns_Bool(db.Domain_DesignCode_This(), Column);
    }
    public static bool Is_Include_First_Footer_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedFirstFooterAllPages");
    }
    public static bool Is_Include_Second_Footer_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedSecondFooterAllPages");
    }
    public static bool Is_Include_Email_Us_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedEmailUsAllPages");
    }
    public static bool Is_Include_Powered_By_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedPoweredByAllPages");
    }
    public static bool Is_Include_Donate_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedDonateAllPages");
    }

    public static bool Is_Include_Banner_This()
    {
      return db.DomainDesigns_Bool_This("IsIncludedBannerAllPages");
    }

    #region Organizations Table
    public static string Organizations(string OrganizationCode, string Column)
    {
      if (OrganizationCode != string.Empty)
        return db.Single_Key_Str_Optional("Organizations", Column, "OrganizationCode", OrganizationCode);
      else
        return string.Empty;
    }
    public static void OrganizationsUpdate(string OrganizationCode, string Column, string ColumnValue)
    {
      db.Single_Key_Update_Str("Organizations", Column, ColumnValue, "OrganizationCode", OrganizationCode);
    }
    #endregion

    #region LocalDistricts Table

    public static void LocalDistricts_Row_Insert_Empty(string StateCode, string CountyCode, string LocalCode)
    {
      if (db.Rows("LocalDistricts", "StateCode", StateCode, "CountyCode", CountyCode, "LocalCode", LocalCode) == 0)
      {
        string SQL = string.Empty;
        SQL += "INSERT INTO LocalDistricts";
        SQL += "(";
        SQL += "StateCode";
        SQL += ",CountyCode";
        SQL += ",LocalCode";
        SQL += ",LocalDistrict";
        SQL += ",StateLocalDistrictCode";
        SQL += ",Contact";
        SQL += ",ContactTitle";
        SQL += ",ContactEmail";
        SQL += ",Phone";
        SQL += ",AltContact";
        SQL += ",AltContactTitle";
        SQL += ",AltEMail";
        SQL += ",AltPhone";
        SQL += ",EMail";
        SQL += ",URL";
        SQL += ",BallotName";
        SQL += ",ElectionsAuthority";
        SQL += ",AddressLine1";
        SQL += ",AddressLine2";
        SQL += ",CityStateZip";
        SQL += ",Notes";
        SQL += ",EmailPage";
        SQL += ",URLDataPage";
        SQL += ",IsLocalDistrictTagForDeletion";
        SQL += ",ElectionKeyOfficialsReportStatus";
        SQL += ")";
        SQL += "VALUES";
        SQL += "(";
        SQL += db.SQLLit(StateCode);
        SQL += "," + db.SQLLit(CountyCode);
        SQL += "," + db.SQLLit(LocalCode);
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",''";
        SQL += ",0";
        SQL += ",''";
        SQL += ")";
        db.ExecuteSQL(SQL);
      }
    }

    public static void LocalDistrictsUpdate(string StateCode, string CountyCode, string LocalCode, string Column, string ColumnValue)
    {
      db.LocalDistricts_Row_Insert_Empty(StateCode, CountyCode, LocalCode);
      db.Triple_Key_Update_Str("LocalDistricts", Column, ColumnValue, "StateCode", StateCode, "CountyCode", CountyCode, "LocalCode", LocalCode);
    }
    #endregion

    #region MultiCountyDistricts Table
    public static string MultiCountyDistricts(string StateCode, string DistrictCode, string DistrictCodeAlpha, string Column)
    {
      //return db.Double_Key_Str("MultiCountyDistricts", Column, "StateCode", StateCode, "DistrictCode", DistrictCode);
      return db.Triple_Key_Str("MultiCountyDistricts", Column, "StateCode", StateCode, "DistrictCode", DistrictCode, "DistrictCodeAlpha", DistrictCodeAlpha);
    }

    public static void MultiCountyDistrictsUpdate(string StateCode, string DistrictCode, string DistrictCodeAlpha, string Column, string ColumnValue)
    {
      //db.Double_Key_Update_Str("MultiCountyDistricts", Column, ColumnValue, "StateCode", StateCode, "MultiCountyDistrictCode", MultiCountyDistrictCode);
      db.Triple_Key_Update_Str("MultiCountyDistricts", Column, ColumnValue, "StateCode", StateCode, "DistrictCode", DistrictCode, "DistrictCodeAlpha", DistrictCodeAlpha);
    }

    #endregion

    #region MultiCountyDistrictCounties Table
    #endregion

    #region JudicialDistricts Table
    public static string JudicialDistricts(string StateCode, string DistrictCode, string DistrictCodeAlpha, string Column)
    {
      //return db.Double_Key_Str("JudicialDistricts", Column, "StateCode", StateCode, "DistrictCode", DistrictCode);
      return db.Triple_Key_Str("JudicialDistricts", Column, "StateCode", StateCode, "DistrictCode", DistrictCode, "DistrictCodeAlpha", DistrictCodeAlpha);
    }

    public static void JudicialDistrictsUpdate(string StateCode, string DistrictCode, string DistrictCodeAlpha, string Column, string ColumnValue)
    {
      db.Triple_Key_Update_Str("JudicialDistricts", Column, ColumnValue, "StateCode", StateCode, "DistrictCode", DistrictCode, "DistrictCodeAlpha", DistrictCodeAlpha);
    }

    #endregion

    #region JudicialDistrictCounties Table
    #endregion
    //--- Offices

    #region Offices Table

    public static string Offices_Str(string OfficeKey, string Column)
    {
      if (OfficeKey != string.Empty)
        return db.Single_Key_Str("Offices", Column, "OfficeKey", OfficeKey);
      else
        return string.Empty;
    }
    public static string Offices_Str_Optional(string OfficeKey, string Column)
    {
      if (OfficeKey != string.Empty)
        return db.Single_Key_Str_Optional("Offices", Column, "OfficeKey", OfficeKey);
      else
        return string.Empty;
    }
    public static int Offices_Int(string OfficeKey, string Column)
    {
      if (OfficeKey != string.Empty)
        return db.Single_Key_Int("Offices", Column, "OfficeKey", OfficeKey);
      else
        return 0;
    }

    public static bool Offices_Bool(string OfficeKey, string Column)
    {
      if (OfficeKey != string.Empty)
        return db.Single_Key_Bool("Offices", Column, "OfficeKey", OfficeKey);
      else
        return false;
    }

    public static int Rows_Offices(string stateCode, string countyCode,
      string localCode, OfficeClass officeClass)
    {
      var sql = string.Empty;
      sql += " Offices ";
      sql += " WHERE Offices.StateCode = " + SQLLit(stateCode);
      if (!string.IsNullOrEmpty(countyCode))
        sql += " AND Offices.CountyCode = " + SQLLit(countyCode);
      if (!string.IsNullOrEmpty(localCode))
        sql += " AND Offices.LocalCode = " + SQLLit(localCode);
      if (officeClass != OfficeClass.Undefined)
        sql += " AND Offices.OfficeLevel = " + officeClass.ToInt();
      return Rows_Count_From(sql);
    }

    public static int Office_Positions(string officeKey)
    {
      return db.Offices_Int(officeKey, "Incumbents");
    }

    public static string Rows_Offices_Sql(string State_Code, int Office_Class)
    {
      string SQL = string.Empty;
      SQL += " SELECT";
      SQL += " Offices.OfficeKey";
      SQL += ",Offices.StateCode";
      SQL += ",Offices.OfficeLevel";
      SQL += ",Offices.OfficeOrderWithinLevel";
      SQL += ",Offices.OfficeLine1";
      SQL += ",Offices.OfficeLine2";
      SQL += ",Offices.DistrictCode";
      SQL += ",Offices.DistrictCodeAlpha";
      SQL += ",Offices.CountyCode";
      SQL += ",Offices.LocalCode";
      SQL += ",Offices.OfficeOrderWithinLevel";
      SQL += ",Offices.IsRunningMateOffice";
      SQL += ",Offices.Incumbents";
      SQL += ",Offices.VoteInstructions";
      SQL += ",Offices.VoteForWording";
      SQL += ",Offices.WriteInInstructions";
      SQL += ",Offices.WriteInWording";
      SQL += ",Offices.WriteInLines";
      SQL += ",Offices.IsInactive";
      SQL += " FROM Offices";
      SQL += " WHERE Offices.OfficeLevel = " + Office_Class.ToString();
      if (!string.IsNullOrEmpty(State_Code))
        SQL += " AND Offices.StateCode = " + db.SQLLit(State_Code);
      SQL += " ORDER BY Offices.OfficeOrderWithinLevel";
      return SQL;
    }

    public static string Rows_Offices_Sql(int Office_Class)
    {
      return db.Rows_Offices_Sql(string.Empty, Office_Class);
    }

    public static DataTable Table_Offices(int Office_Class)
    {
      return db.Table(Rows_Offices_Sql(Office_Class));
    }

    #region OfficeKey and OfficeRecs

    public static string OfficeKey(
      int officeClass
      , string StateCode
      , string CountyCode
      , string LocalCode
      , string DistrictCode
      , string DistrictCodeAlpha
      , string OfficeLine1
      , string OfficeLine2
      , string OfficeKeySuffix
      , bool Is_Special_Office
      )
    {
      //CountyCode - 3 digits
      //LocalCode - 2 digits
      //DistrictCode - 3 digits
      //DistrictCodeAlpha - 1-4 alpha chars

      //string theOffice = (
      //  OfficeLine1 + OfficeLine2).Trim();
      //theOffice = db.Str_Remove_Puctuation(theOffice);

      OfficeLine1 = db.Str_ReCase(db.Str_Replace_Puctuation_With(OfficeLine1, " ")).Trim();
      OfficeLine2 = db.Str_ReCase(db.Str_Replace_Puctuation_With(OfficeLine2, " ")).Trim();
      string theOffice = (
        OfficeLine1 + OfficeLine2);
      theOffice = db.Str_Remove_Puctuation(theOffice);

      if (theOffice != string.Empty)
      {
        string StateNameUpper = StateCache.GetStateName(StateCode).ToUpper();
        //int StateNamePos = Office.ToUpper().IndexOf(StateNameUpper, 0, Office.Length);
        int StateNamePos = theOffice.ToUpper().IndexOf(StateNameUpper, 0, theOffice.Length);
        if (StateNamePos >= 0) //State is in the Office Name - remove it
        {
          int StateNameLen = StateNameUpper.Length;
          theOffice = theOffice.Remove(StateNamePos, StateNameLen);
        }
      }

      #region for State House have Positions A and B and District Codes like 01A
      string DistrictCodeWithout0s;
      if (db.Is_Valid_Integer(DistrictCode))
      {
        int DistrictInt = Convert.ToUInt16(DistrictCode);
        DistrictCodeWithout0s = DistrictInt.ToString();
      }
      else
      {
        DistrictCodeWithout0s = DistrictCode.Trim();
      }
      #endregion

      string theOfficeKey = string.Empty;
      //theOfficeKey += StateCode.ToUpper();
      switch (officeClass.ToOfficeClass())
      {
        case OfficeClass.USPresident:
          theOfficeKey = StateCode.ToUpper();
          if (!Is_Special_Office)
            theOfficeKey += "President";
          else
            theOfficeKey += theOffice;
          break;
        case OfficeClass.USSenate:
          if (!Is_Special_Office)
            theOfficeKey = StateCode.ToUpper()
              + "USSenate" + OfficeLine2;
          else
            theOfficeKey = StateCode.ToUpper()
              + theOffice;
          break;
        case OfficeClass.USHouse:
          if (!Is_Special_Office)
            theOfficeKey = StateCode.ToUpper()
            + "USHouse"
            + DistrictCodeWithout0s;
          else
            theOfficeKey = StateCode.ToUpper()
              + theOffice;
          break;
        case OfficeClass.StateWide:
          theOfficeKey = StateCode.ToUpper()
            + theOffice;
          break;
        case OfficeClass.StateSenate:
          if (!Is_Special_Office)
            theOfficeKey = StateCode.ToUpper()
            + "StateSenate"
            + DistrictCodeWithout0s
            + DistrictCodeAlpha.Trim();
          else
            theOfficeKey = StateCode.ToUpper()
              + theOffice;
          break;
        case OfficeClass.StateHouse:
          if (!Is_Special_Office)
          {
            if (
            (StateCode.ToUpper() == "ID")
            || (StateCode.ToUpper() == "WA")
            )
              theOfficeKey = StateCode.ToUpper()
                + "StateHouse" + OfficeKeySuffix
                + DistrictCodeWithout0s
                + DistrictCodeAlpha.Trim();
            else
              theOfficeKey = StateCode.ToUpper()
              + "StateHouse"
              + DistrictCodeWithout0s
              + DistrictCodeAlpha.Trim();
          }
          else
            theOfficeKey = StateCode.ToUpper()
              + theOffice;
          break;

        case OfficeClass.StateDistrictMultiCounties:
          theOfficeKey = StateCode.ToUpper()
            + DistrictCode
            + DistrictCodeAlpha.Trim()
            + theOffice;
          break;

        case OfficeClass.CountyExecutive:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.CountyLegislative:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.CountySchoolBoard:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.CountyCommission:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.LocalExecutive:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;
        case OfficeClass.LocalLegislative:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;
        case OfficeClass.LocalSchoolBoard:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;
        case OfficeClass.LocalCommission:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;

        case OfficeClass.StateJudicial:
          theOfficeKey = StateCode.ToUpper()
            + theOffice;
          break;

        case OfficeClass.StateDistrictMultiCountiesJudicial:
          theOfficeKey = StateCode.ToUpper()
            + DistrictCode
            + DistrictCodeAlpha.Trim()
            + theOffice;
          break;
        case OfficeClass.CountyJudicial:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.LocalJudicial:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;
        case OfficeClass.StateParty:
          theOfficeKey = StateCode.ToUpper()
            + theOffice;
          break;
        case OfficeClass.StateDistrictMultiCountiesParty:
          theOfficeKey = StateCode.ToUpper()
            + DistrictCode
            + DistrictCodeAlpha.Trim()
            + theOffice;
          break;
        case OfficeClass.CountyParty:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + theOffice;
          break;
        case OfficeClass.LocalParty:
          theOfficeKey = StateCode.ToUpper()
          + CountyCode
          + LocalCode
          + theOffice;
          break;
      }
      //theOfficeKey = db.Str_Remove_SpecialChars_All_And_Spaces(theOfficeKey);
      //theOfficeKey = theOfficeKey.Replace(" ", string.Empty).Trim();
      ////Str_Remove_SpecialChars_All_And_Spaces leaves on the ' for names like O'Donnell
      //theOfficeKey = theOfficeKey.Replace("\'", string.Empty);
      theOfficeKey = db.Str_Remove_Non_Key_Chars(theOfficeKey);

      if (theOfficeKey.Length > 150)
        theOfficeKey = theOfficeKey.Substring(0, 150);

      return theOfficeKey;
    }
    public static string OfficeKey(
      int officeClass
      , string StateCode
      , string CountyCode
      , string LocalCode
      , string DistrictCode
      , string DistrictCodeAlpha
      , string OfficeLine1
      , string OfficeLine2
      , string OfficeKeySuffix
      )
    {
      return db.OfficeKey(
       officeClass
      , StateCode
      , CountyCode
      , LocalCode
      , DistrictCode
      , DistrictCodeAlpha
      , OfficeLine1
      , OfficeLine2
      , OfficeKeySuffix
      , false
      );
    }

    public static string OfficeKey(
      int officeClass
      , string StateCode
      , string CountyCode
      , string LocalCode
      , string DistrictCode
      , string DistrictCodeAlpha
      , string OfficeLine1
      , string OfficeLine2
      )
    {
      return db.OfficeKey(
        officeClass
        , StateCode, CountyCode, LocalCode, DistrictCode, DistrictCodeAlpha, OfficeLine1, OfficeLine2, string.Empty);
    }

    public static string StateCode4OfficeKey4Domain(PageCache cache, string officeKey)
    {
      switch (Offices.GetStateCodeFromKey(officeKey))
      {
        case "U1":
          return "US";
        case "U2":
          return "US";
        case "U3":
          return "US";
        case "U4":
          return "US";
        default:
          return Offices.GetStateCodeFromKey(officeKey);
      }
    }

    //---------------------------------------
    public enum Politician_Status
    {
      In_Election_Upcoming_Viewable,
      In_Election_Upcoming_Not_Viewable,
      In_Election_Upcoming_Viewable_RunningMate,
      In_Election_Upcoming_Not_Viewable_RunningMate,
      In_Election_Upcoming_Not_Created,
      Incumbent,
      Incumbent_RunningMate,
      In_Election_Previous,
      In_Election_Previous_RunningMate,
      Unknown
    }

    public static DataRow Politician_Incumbent_RunningMate_Row(string PoliticianKey)
    {
      string SQL = string.Empty;
      SQL += " SELECT ";
      SQL += " Offices.OfficeKey";
      SQL += " FROM OfficesOfficials,Offices ";
      SQL += " WHERE OfficesOfficials.RunningMateKey = " + db.SQLLit(PoliticianKey);
      SQL += " AND OfficesOfficials.OfficeKey = Offices.OfficeKey";
      DataRow Row_Politician = db.Row_First_Optional(SQL);
      if (Row_Politician != null)
        return Row_Politician;
      else
        return null;
    }

    public static DataRow Politician_Election_Previous_Row(string PoliticianKey)
    {
      string SQL = string.Empty;//xx
      SQL += " SELECT";
      SQL += " ElectionsPoliticians.ElectionKey";
      SQL += " FROM ElectionsPoliticians,Elections";
      SQL += " WHERE ElectionsPoliticians.PoliticianKey = " + db.SQLLit(PoliticianKey);
      SQL += " AND ElectionsPoliticians.ElectionKey = Elections.ElectionKey";
      SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);
      //SQL += " AND Elections.IsViewable = 0";
      SQL += " ORDER BY Elections.ElectionDate DESC";
      DataRow Row_Politician = db.Row_First_Optional(SQL);
      if (Row_Politician != null)
        return Row_Politician;
      else
        return null;
    }

    public static DataRow Politician_Election_Previous_RunningMate_Row(string PoliticianKey)
    {
      string SQL = string.Empty;//xx
      SQL += " SELECT";
      SQL += " ElectionsPoliticians.ElectionKey";
      SQL += " FROM ElectionsPoliticians,Elections";
      SQL += " WHERE ElectionsPoliticians.RunningMateKey = " + db.SQLLit(PoliticianKey);
      SQL += " AND ElectionsPoliticians.ElectionKey = Elections.ElectionKey";
      SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);
      //SQL += " AND Elections.IsViewable = 0";
      SQL += " ORDER BY Elections.ElectionDate DESC";
      DataRow Row_Politician = db.Row_First_Optional(SQL);
      if (Row_Politician != null)
        return Row_Politician;
      else
        return null;
    }

    public static DataRow Politician_Election_Upcoming_Not_Created_Row(string politicianKey)
    {
      string SQL = string.Empty;
      SQL += " SELECT ";
      SQL += " TemporaryOfficeKey";
      SQL += " FROM Politicians";
      SQL += " WHERE PoliticianKey = " + db.SQLLit(politicianKey);
      DataRow Row_Politician = db.Row_First_Optional(SQL);
      if (Row_Politician != null)
        return Row_Politician;
      else
        return null;
    }

    public static db.Politician_Status Politician_Current_Status_Type(
      PageCache cache, string politicianKey)
    {
      //if (db.Politician_Election_Upcoming_Viewable_Row(PoliticianKey) != null)
      //  return db.Politician_Status.In_Election_Upcoming_Viewable;

      if (!string.IsNullOrEmpty(cache.ElectionsPoliticians.GetFutureElectionKeyByPoliticianKey(politicianKey, true)))
        return db.Politician_Status.In_Election_Upcoming_Viewable;

      //if (db.Politician_Election_Upcoming_Not_Viewable_Row(politicianKey) != null)
      //  return db.Politician_Status.In_Election_Upcoming_Not_Viewable;

      if (!string.IsNullOrEmpty(cache.ElectionsPoliticians.GetFutureElectionKeyByPoliticianKey(politicianKey, false)))
        return db.Politician_Status.In_Election_Upcoming_Not_Viewable;

      //if (db.Politician_Election_Upcoming_Viewable_RunningMate_Row(politicianKey) != null)
      //  return db.Politician_Status.In_Election_Upcoming_Viewable_RunningMate;

      if (!string.IsNullOrEmpty(cache.ElectionsPoliticians.GetFutureElectionKeyByRunningMateKey(politicianKey, true)))
        return db.Politician_Status.In_Election_Upcoming_Viewable_RunningMate;

      //if (db.Politician_Election_Upcoming_Not_Viewable_RunningMate_Row(politicianKey) != null)
      //  return db.Politician_Status.In_Election_Upcoming_Not_Viewable_RunningMate;

      if (!string.IsNullOrEmpty(cache.ElectionsPoliticians.GetFutureElectionKeyByRunningMateKey(politicianKey, false)))
        return db.Politician_Status.In_Election_Upcoming_Not_Viewable_RunningMate;

      //if (db.Politician_Incumbent_Row(politicianKey) != null)
      //  return db.Politician_Status.Incumbent;

      if (!string.IsNullOrEmpty(cache.OfficesOfficials.GetIncumbentOfficeKeyByPoliticianKey(politicianKey)))
        return db.Politician_Status.Incumbent;

      if (db.Politician_Incumbent_RunningMate_Row(politicianKey) != null)
        return db.Politician_Status.Incumbent_RunningMate;

      if (db.Politician_Election_Previous_Row(politicianKey) != null)
        return db.Politician_Status.In_Election_Previous;

      if (db.Politician_Election_Previous_RunningMate_Row(politicianKey) != null)
        return db.Politician_Status.In_Election_Previous_RunningMate;

      if (db.Politician_Election_Upcoming_Not_Created_Row(politicianKey) != null)
        return db.Politician_Status.In_Election_Upcoming_Not_Created;

      return db.Politician_Status.Unknown;
    }

    public static string Politician_Current_Office_And_Status(string politicianKey)
    {
      return Politician_Current_Office_And_Status(VotePage.GetPageCache(),
        politicianKey);
    }

    public static string Politician_Current_Office_And_Status(PageCache cache,
      string politicianKey)
    {
      var officeStatus = cache.Politicians.GetOfficeStatus(politicianKey);
      if (!Offices.IsValid(officeStatus.OfficeKey)) return string.Empty;
      var officeName = Offices.GetLocalizedOfficeNameWithElectoralClass(cache, officeStatus.OfficeKey);
      return officeStatus.PoliticianStatus.GetOfficeStatusDescription(officeName);
    }

    public static bool Is_Politician_In_Election_Upcoming_Viewable(string politicianKey)
    {
      return Is_Politician_In_Election_Upcoming_Viewable(VotePage.GetPageCache(), politicianKey);
    }

    public static bool Is_Politician_In_Election_Upcoming_Viewable(PageCache cache,
      string politicianKey)
    {
      switch (Politician_Current_Status_Type(cache, politicianKey))
      {
        case db.Politician_Status.In_Election_Upcoming_Viewable:
          return true;
        case db.Politician_Status.In_Election_Upcoming_Not_Viewable:
          return false;
        case db.Politician_Status.In_Election_Upcoming_Viewable_RunningMate:
          return true;
        case db.Politician_Status.In_Election_Upcoming_Not_Viewable_RunningMate:
          return false;
        case db.Politician_Status.In_Election_Upcoming_Not_Created:
          return false;
        case db.Politician_Status.Incumbent:
          return false;
        case db.Politician_Status.Incumbent_RunningMate:
          return false;
        case db.Politician_Status.In_Election_Previous:
          return false;
        case db.Politician_Status.In_Election_Previous_RunningMate:
          return false;
        default:
          return false;
      }
    }

    public static string Politician_Current_Election(string politicianKey)
    {
      return Politician_Current_Election(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_Current_Election(PageCache cache,
      string politicianKey)
    {
      if (!string.IsNullOrEmpty(politicianKey) &&
        db.Is_Politician_In_Election_Upcoming_Viewable(cache, politicianKey))
      {
        return db.Elections_Str(cache.ElectionsPoliticians
          .GetFutureElectionKeyByPoliticianKey(politicianKey, true),
          "ElectionDesc");
      }
      else
        return string.Empty;
    }

    //---------------------------------------

    #endregion

    #endregion

    #region Offices UPDATE
    public static void Offices_Update_Str(string OfficeKey, string Column, string ColumnValue)
    {
      //string UpdateSQL = "UPDATE Offices";
      //UpdateSQL += " SET " + Column + " = " + db.SQLLit(ColumnValue.Trim());
      //UpdateSQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
      //db.ExecuteSQL(UpdateSQL);
      db.Single_Key_Update_Str("Offices", Column, ColumnValue, "OfficeKey", OfficeKey);
    }

    public static void Offices_Update_Bool(string OfficeKey, string Column, bool ColumnValue)
    {
      db.Single_Key_Update_Bool("Offices", Column, ColumnValue, "OfficeKey", OfficeKey);
    }
    public static void Offices_Update_Int(string OfficeKey, string Column, int ColumnValue)
    {
      db.Single_Key_Update_Int("Offices", Column, ColumnValue, "OfficeKey", OfficeKey);
    }


    #endregion

    #region Offices LOG

    public static void LogOfficeChange(string officeKey, string dataItem,
      string dataFrom, string dataTo)
    {
      DB.VoteLog.LogOfficeChanges.Insert(
        DateTime.Now,
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        officeKey,
        dataItem,
        dataFrom.Trim().ReplaceBreakTagsWithNewLines(),
        dataTo.Trim());
    }

    public static void LogOfficeChange(string officeKey, string dataItem,
      int dataFrom, int dataTo)
    {
      LogOfficeChange(officeKey, dataItem, dataFrom.ToString(), dataTo.ToString());
    }

    public static void LogOfficeChange(string officeKey, string dataItem,
      bool dataFrom, bool dataTo)
    {
      LogOfficeChange(officeKey, dataItem, dataFrom.ToString(), dataTo.ToString());
    }

    #endregion

    #region Office Rows Multiple Tables
 
    public static void Office_Delete_All_Tables_All_Rows(string officeKey,
      string deleteOrConsolidate)
    {
      #region Delete all rows in Offices, ElectionsOffices, ElectionsPoliticians, OfficesOfficials
      string SQL;

      #region LogOfficeAddsDeletes
      DB.VoteLog.LogOfficeAddsDeletes.Insert(
        DateTime.Now,
        deleteOrConsolidate.ToUpper(),
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        officeKey,
        Offices.GetStateCodeFromKey(officeKey),
        Offices.GetOfficeClass(officeKey).ToInt(),
        0,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        db.Offices_Str(officeKey, "OfficeLine1"),
        db.Offices_Str(officeKey, "OfficeLine2"),
        false,
        false,
        1,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        1);
      #endregion

      SQL = " DELETE FROM ElectionsOffices";
      SQL += " WHERE OfficeKey = " + db.SQLLit(officeKey);
      db.ExecuteSQL(SQL);

      SQL = " DELETE FROM ElectionsPoliticians";
      SQL += " WHERE OfficeKey = " + db.SQLLit(officeKey);
      db.ExecuteSQL(SQL);

      SQL = " DELETE FROM OfficesOfficials";
      SQL += " WHERE OfficeKey = " + db.SQLLit(officeKey);
      db.ExecuteSQL(SQL);

      SQL = " DELETE FROM Offices";
      SQL += " WHERE OfficeKey = " + db.SQLLit(officeKey);
      db.ExecuteSQL(SQL);
      #endregion

      #region commented out - Delete all Politicians and related data with this OfficeKey
      //SQL = "SELECT PoliticianKey";
      //SQL += " FROM Politicians";
      //SQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
      //DataTable Table_Politicians = db.Table(SQL);
      //foreach (DataRow Row_Politician in Table_Politicians.Rows)
      //{
      //  db.Politician_Delete_All_Tables_All_Rows(Row_Politician["PoliticianKey"].ToString());
      //}
      #endregion Delete all Politicians and related data with this OfficeKey

      //db.Invalidate_Office(OfficeKey);
    }

    public static void Office_Delete_All_Tables_All_Rows(string OfficeKey)
    {
      db.Office_Delete_All_Tables_All_Rows(OfficeKey, "D");
    }
    #endregion Office Rows Multiple Tables

    #region Office Name and Data
 
    public static string Office_Data(string OfficeKey)
    {
      string Office_Data = string.Empty;

      //if (db.xIs_Office_Tag_Deletion(OfficeKey))
      //  Office_Data += "<strong>Office is Tagged for Deletion</strong>";

      if (Offices.IsValid(OfficeKey))
      {
        #region Office Codes and Class
        Office_Data += "<br>StateCode:" + Offices.GetStateCodeFromKey(OfficeKey);
        Office_Data += ", CountyCode:" + Offices.GetCountyCodeFromKey(OfficeKey);
        Office_Data += ", LocalCode:" + Offices.GetLocalCodeFromKey(OfficeKey);
        Office_Data += "<br>OfficeClass:"
          + " (" + Offices.GetOfficeClass(OfficeKey).ToInt() + ") "
          + Offices.GetOfficeClassDescription(OfficeKey);
        #endregion Office Codes

        #region Office Electoral Description
        Office_Data += "<br>";
        Office_Data += Offices.GetOfficeClassDescription(
            Offices.GetOfficeClass(OfficeKey)
            , Offices.GetStateCodeFromKey(OfficeKey));
        Office_Data += "<br>";
        Office_Data += "<strong>"
          + db.Name_Office_Contest_And_Electoral(OfficeKey)
          + "</strong>";
        #endregion Office Electoral Description

        string SQL;
        #region Office Elections
        Office_Data += "<br>";
        Office_Data += "In the following ELECTIONS:";
        SQL = string.Empty;
        SQL += " ElectionsOffices";
        SQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        if (db.Rows_Count_From(SQL) > 0)
        {
          SQL = string.Empty;
          SQL += " SELECT";
          SQL += " ElectionKey";
          SQL += " FROM ElectionsOffices";
          SQL += " ElectionsOffices";
          SQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
          DataTable Elections_Table = db.Table(SQL);
          if (Elections_Table != null)
          {
            foreach (DataRow Elections_Row in Elections_Table.Rows)
              Office_Data += "<br><strong>"
                + db.Name_Election(Elections_Row["ElectionKey"].ToString())
                + "</strong>";
          }
        }
        else
        {
          Office_Data += "<br><strong>NONE</strong>";
        }
        #endregion Office Elections

        #region Office being held by a politician (OfficesOfficials)
        Office_Data += "<br>";
        Office_Data += "POLITICIAN(S) as Incumbnet to this office:";
        SQL = string.Empty;
        SQL += " OfficesOfficials";
        SQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        if (db.Rows_Count_From(SQL) > 0)
        {
          SQL = string.Empty;
          SQL += " SELECT";
          SQL += " PoliticianKey";
          SQL += " FROM OfficesOfficials";
          SQL += " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
          DataTable Politicians_Table = db.Table(SQL);
          if (Politicians_Table != null)
          {
            foreach (DataRow Politician_Row in Politicians_Table.Rows)
              Office_Data += "<br><strong>"
                + Politicians.GetFormattedName(Politician_Row["PoliticianKey"].ToString())
                + "</strong>";
          }
        }
        else
        {
          Office_Data += "<br><strong>NONE</strong>";
        }
        #endregion Office being held by a politician (OfficesOfficials)
      }
      else
        Office_Data += "<br><strong>Office does not exist</strong>";

      return Office_Data;
    }
    #endregion Office Name and Data

    //--Parties
    #region Parties
    #region Parties Table keys, Codes and Levels

    public static string PartyKey(
      string State_Code
      , string Party_Code)
    {
      return State_Code.Trim().ToUpper()
        + Party_Code.Trim().ToUpper();
    }

    #region Parties Table Get

    public static string Parties_Str(
      string PartyKey
      , string Column)
    {
      if (PartyKey != string.Empty)
        return db.Single_Key_Str_Optional("Parties", Column, "PartyKey", PartyKey);
      else
        return string.Empty;
    }

    public static bool Parties_Bool(
      string PartyKey
      , string Column)
    {
      if (PartyKey != string.Empty)
        return db.Single_Key_Bool("Parties", Column, "PartyKey", PartyKey);
      else
        return false;
    }

    public static string Parties_StateCode(
      string partyKey)
    {
      return db.Parties_Str(
       partyKey
      , "StateCode");
    }
    #endregion Parties Table Get

    #region Parties Table Update
    public static void Parties_Update_Str(
      string PartyKey
      , string Column
      , string Value_Str
      )
    {
      string UpdateSQL = "UPDATE Parties";
      UpdateSQL += " SET " + Column + " = " + db.SQLLit(Value_Str.Trim());
      UpdateSQL += " WHERE PartyKey = " + db.SQLLit(PartyKey);
      db.ExecuteSQL(UpdateSQL);
    }
    #endregion Parties Table

    #region PartiesEmails Table
    public static string PartiesEmails_Str(
      string Party_Email
      , string Column
      )
    {
      if (Party_Email != string.Empty)
        return db.Single_Key_Str_Optional(
          "PartiesEmails"
          , Column
          , "PartyEmail"
          , Party_Email
          );
      else
        return string.Empty;
    }
    public static void PartiesEmails_Update_Str(
      string Party_Email
      , string Column
      , string Value_Str
      )
    {
      string UpdateSQL = "UPDATE PartiesEmails";
      UpdateSQL += " SET " + Column
        + " = " + db.SQLLit(Value_Str.Trim());
      //+ " = " + db.SQLLit(db.Str_Remove_SpecialChars_All(Value_Str.Trim()));
      UpdateSQL += " WHERE PartyEmail = "
        + db.SQLLit(Party_Email);
      db.ExecuteSQL(UpdateSQL);
    }

    public static bool Is_Valid_PartiesEmails(string PartyEmail)
    {
      if (!string.IsNullOrEmpty(PartyEmail))
      {
        if (db.Rows("PartiesEmails", "PartyEmail", PartyEmail) == 1)
          return true;
        else
          return false;
      }
      else
        return false;
    }

    #endregion PartiesEmails Table


    #endregion PartiesEmails Table Parties Table keys, Codes and Levels
    #endregion Parties

    //--- Referendums

    #region OfficesOfficials bool
    public static bool Is_Valid_Office_Politician(string OfficeKey, string PoliticianKey)
    {
      if (db.Rows(sql.OfficesOfficials_Office_Politician(OfficeKey, PoliticianKey)) > 0)
        return true;
      else
        return false;
    }

    public static bool Is_Incumbent(string OfficeKey, string PoliticianKey)
    {
      string sql = string.Empty;
      sql += " OfficesOfficials";
      sql += " WHERE OfficeKey =" + db.SQLLit(OfficeKey);
      sql += " AND PoliticianKey =" + db.SQLLit(PoliticianKey);

      int rows = db.Rows_Count_From(sql);
      if (rows == 0)
        return false;
      else
        return true;
    }

    #endregion

    #region OfficesOfficials SELECT
    public static string OfficesOfficials_Str(string OfficeKey, string Column)
    {
      return db.Single_Key_Str_Optional("OfficesOfficials", Column, "OfficeKey", OfficeKey);
    }
    #endregion

    #region OfficesOfficials UPDATE

    public static void OfficesOfficialsUpdate(string OfficeKey, string PoliticianKey, string Column, string ColumnValue)
    {
      db.Double_Key_Update_Str("OfficesOfficials", Column, ColumnValue, "OfficeKey", OfficeKey, "PoliticianKey", PoliticianKey);
    }
    #endregion

    #region OfficesOfficials LOG

    public static void Log_OfficesOfficials_Add_Or_Delete(string addOrDelete,
      string officeKey, string politicianKey)
    {
      //string SQL = "INSERT INTO LogOfficeOfficialAddsDeletes"
      //  + "("
      //  + "DateStamp"
      //  + ",AddOrDelete"
      //  + ",UserSecurity"
      //  + ",UserName"
      //  + ",PoliticianKey"
      //  + ",StateCode"
      //  + ",OfficeKey"
      //  + ")"
      //  + " VALUES("
      //  + db.SQLLit(Db.DbNow)
      //  + "," + db.SQLLit(addOrDelete)
      //  + "," + db.SQLLit(db.User_Security())
      //  + "," + db.SQLLit(db.User_Name())
      //  + "," + db.SQLLit(politicianKey)
      //  //+ "," + db.SQLLit(db.StateCode4OfficeKey(OfficeKey))
      //  + "," + db.SQLLit(db.StateCode_In_OfficeKey(officeKey))
      //  + "," + db.SQLLit(officeKey)
      //  + ")";
      //db.ExecuteSQL(SQL);
      DB.VoteLog.LogOfficeOfficialAddsDeletes.Insert(
        DateTime.Now,
        addOrDelete,
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        politicianKey,
        Offices.GetStateCodeFromKey(officeKey),
        string.Empty,
        string.Empty,
        officeKey);
    }

    public static void Log_OfficesOfficials_Change(string politicianKey,
      string officeKey, string stateCode, string dataItem,
      string dataFrom, string dataTo)
    {
      DB.VoteLog.LogOfficeOfficialChanges.Insert(
        DateTime.Now,
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        politicianKey,
        officeKey,
        stateCode,
        string.Empty,
        string.Empty,
        dataItem,
        dataFrom,
        dataTo);
    }
    #endregion

    #region OfficesOfficials INSERT
    public static void OfficesOfficials_INSERT(string OfficeKey, string PoliticianKey)
    {
      string SQL = string.Empty;
      SQL += " INSERT INTO OfficesOfficials ";
      SQL += "(";
      SQL += "OfficeKey";
      SQL += ",StateCode";
      SQL += ",PoliticianKey";
      SQL += ",DataLastUpdated";
      SQL += ",UserSecurity";
      SQL += ",UserName";
      SQL += ")";
      SQL += " VALUES ";
      SQL += "(";
      SQL += db.SQLLit(OfficeKey);
      SQL += "," + db.SQLLit(Offices.GetStateCodeFromKey(OfficeKey));
      SQL += "," + db.SQLLit(PoliticianKey);
      SQL += "," + db.SQLLit(Db.DbNow);
      SQL += "," + db.SQLLit(SecurePage.UserSecurityClass);
      SQL += "," + db.SQLLit(SecurePage.UserName);
      SQL += ")";

      //db.ExecuteSQL(sql.OfficesOfficials_Insert(
      //  OfficeKey
      //  , PoliticianKey));
      db.ExecuteSQL(SQL);

      db.Log_OfficesOfficials_Add_Or_Delete(
        "A"
        , OfficeKey
        , PoliticianKey
        );
    }
    #endregion

    #region OfficesOfficials DELETE
    public static void OfficesOfficials_Delete(string OfficeKey)
    {
      string SQL = string.Empty;
      SQL += " DELETE FROM OfficesOfficials ";
      SQL += " WHERE OfficesOfficials.OfficeKey = " + db.SQLLit(OfficeKey);
      //db.ExecuteSQL(sql.OfficesOfficials_Delete(OfficeKey));
      db.ExecuteSQL(SQL);
      db.Log_OfficesOfficials_Add_Or_Delete(
        "D"
        , OfficeKey
        , string.Empty
        );
    }
    public static void OfficesOfficials_Delete(string OfficeKey, string PoliticianKey)
    {
      if (db.Rows(sql.OfficesOfficials_Office_Politician(OfficeKey, PoliticianKey)) > 0)
      {
        string SQL = string.Empty;
        SQL += " DELETE FROM OfficesOfficials ";
        SQL += " WHERE OfficesOfficials.OfficeKey = " + db.SQLLit(OfficeKey);
        SQL += " AND OfficesOfficials.PoliticianKey = " + db.SQLLit(PoliticianKey);
        //db.ExecuteSQL(sql.OfficesOfficials_Delete(OfficeKey, PoliticianKey));
        db.ExecuteSQL(SQL);
        db.Log_OfficesOfficials_Add_Or_Delete(
          "D"
          , OfficeKey
          , PoliticianKey
          );
      }
    }
    #endregion

    //--- Politicians Tables

    #region Politicians Table

    public static string Politician_Key(
      string stateCode
      , string lName
      , string fName
      , string middle
      , string suffix
      )
    {
      // We can safely simplify these because the later filtering will remove
      // all non-ascii and non-alphas.
      //LName = db.ToUpper1stChar(db.Str_Remove_Non_Key_Chars(LName));
      //FName = db.ToUpper1stChar(db.Str_Remove_Non_Key_Chars(FName));
      //Middle = db.ToUpper1stChar(db.Str_Remove_Non_Key_Chars(Middle));
      //Suffix = db.Str_Remove_Non_Key_Chars(Suffix);
      lName = db.ToUpper1stChar(lName);
      fName = db.ToUpper1stChar(fName);
      middle = db.ToUpper1stChar(middle);

      string thePoliticianKey =
        stateCode
        + lName
        + fName
        + middle
        + suffix;

      // These changes insure that the key is all ascii alpha characters.
      // I.e, no numerics, no accented characters and no punctuation.
      thePoliticianKey = thePoliticianKey.ToAscii();
      thePoliticianKey = // replace all non-letters with empty string
        (new Regex(@"\P{L}")).Replace(thePoliticianKey, match => String.Empty);

      return thePoliticianKey;
    }

    public static string PoliticianName2Part4Google(string PoliticianKey)
    {
      //Just two parts. 
      //Part 1 - either a complete first name, or complete middle name, or complete nickname
      //Part 2 - Last Name
      //DataRow PoliticianRow = db.Row_Optional(sql.PoliticianName(PoliticianKey));
      //if (PoliticianRow != null)
      if (Politicians.IsValid(PoliticianKey))
      {
        bool boolPart1 = false;
        string Part1 = string.Empty;
        string thePoliticianName;
        if (Politicians.GetFirstName(PoliticianKey, string.Empty) != string.Empty)
        {
          //thePoliticianName += db.Politician_FName(PoliticianKey);
          string FirstName = Politicians.GetFirstName(PoliticianKey, string.Empty).Replace(".", string.Empty);
          if (FirstName.Length > 1)
          {
            boolPart1 = true;
            Part1 = FirstName;
          }
        }
        if (!boolPart1)
        {
          string MiddleName = Politicians.GetMiddleName(PoliticianKey, string.Empty).Replace(".", string.Empty);
          if (MiddleName.Length > 1)
          {
            boolPart1 = true;
            Part1 = MiddleName;
          }
        }
        if (!boolPart1)
        {
          string Nickname =
            Politicians.GetNickname(PoliticianKey, string.Empty)
            .Replace("\"", string.Empty);
          if (Nickname.Length > 1)
          {
            Part1 = Nickname;
          }
        }
        thePoliticianName = Part1;

        string politicianName = Politicians.GetLastName(PoliticianKey, string.Empty);
        if (politicianName != string.Empty)
          thePoliticianName += " " + politicianName;

        return thePoliticianName;
      }
      else
        return string.Empty;
    }

    public static string PoliticianNameNickName4Google(string PoliticianKey)
    {
      //If there is a nickname use just the Nickname and last name
      //DataRow PoliticianRow = db.Row_Optional(sql.PoliticianName(PoliticianKey));
      //if (PoliticianRow != null)
      string nickname =
        Politicians.GetNickname(PoliticianKey, string.Empty)
        .Replace("\"", string.Empty);
      if (Politicians.IsValid(PoliticianKey))
      {
        if (nickname.Length > 1)
        {
          return nickname + " " + Politicians.GetLastName(PoliticianKey, string.Empty);
        }
        else
          return string.Empty;
      }
      else
        return string.Empty;
    }

    #region Politicians Get

    #region Politicians Columns
    public enum Politician_Column
    {
      Password,
      PasswordHint,
      TemporaryOfficeKey,
      StateCode,
      FName,
      MName,
      Nickname,
      LName,
      Suffix,
      AddOn,
      EmailAddrVoteUSA,
      EmailAddr,
      StateEmailAddr,
      WebAddr,
      StateWebAddr,
      Phone,
      StatePhone,
      Gender,
      PartyKey,
      Address,
      CityStateZip,
      StateAddress,
      StateCityStateZip,
      CampaignName,
      CampaignAddr,
      CampaignCityStateZip,
      CampaignPhone,
      CampaignEmail,
      LDSEmailAddr,
      LDSWebAddr,
      LDSPhone,
      LDSAddress,
      LDSCityStateZip,
      GeneralStatement,
      Personal,
      Education,
      Profession,
      Military,
      Civic,
      Political,
      Religion,
      Accomplishments,
      FacebookWebAddress,
      WikipediaWebAddress,
      YouTubeWebAddress,
      FlickrWebAddress,
      TwitterWebAddress,
      RSSFeedWebAddress,
      VimeoWebAddress
    }

    public static string Politician_Column_Name(
      db.Politician_Column Politician_Column
      )
    {
      switch (Politician_Column)
      {
        case db.Politician_Column.Password:
          return "Password";
        case db.Politician_Column.PasswordHint:
          return "PasswordHint";
        case db.Politician_Column.TemporaryOfficeKey:
          return "TemporaryOfficeKey";
        case db.Politician_Column.StateCode:
          return "StateCode";
        case db.Politician_Column.FName:
          return "FName";
        case db.Politician_Column.MName:
          return "MName";
        case db.Politician_Column.Nickname:
          return "Nickname";
        case db.Politician_Column.LName:
          return "LName";
        case db.Politician_Column.Suffix:
          return "Suffix";
        case db.Politician_Column.AddOn:
          return "AddOn";
        case db.Politician_Column.EmailAddrVoteUSA:
          return "EmailAddrVoteUSA";
        case db.Politician_Column.EmailAddr:
          return "EmailAddr";
        case db.Politician_Column.StateEmailAddr:
          return "StateEmailAddr";
        case db.Politician_Column.WebAddr:
          return "WebAddr";
        case db.Politician_Column.StateWebAddr:
          return "StateWebAddr";
        case db.Politician_Column.Phone:
          return "Phone";
        case db.Politician_Column.StatePhone:
          return "StatePhone";
        case db.Politician_Column.Gender:
          return "Gender";
        case db.Politician_Column.PartyKey:
          return "PartyKey";
        case db.Politician_Column.Address:
          return "Address";
        case db.Politician_Column.CityStateZip:
          return "CityStateZip";
        case db.Politician_Column.StateAddress:
          return "StateAddress";
        case db.Politician_Column.StateCityStateZip:
          return "StateCityStateZip";
        case db.Politician_Column.CampaignName:
          return "CampaignName";
        case db.Politician_Column.CampaignAddr:
          return "CampaignAddr";
        case db.Politician_Column.CampaignCityStateZip:
          return "CampaignCityStateZip";
        case db.Politician_Column.CampaignPhone:
          return "CampaignPhone";
        case db.Politician_Column.CampaignEmail:
          return "CampaignEmail";
        case db.Politician_Column.GeneralStatement:
          return "GeneralStatement";
        case db.Politician_Column.Personal:
          return "Personal";
        case db.Politician_Column.Education:
          return "Education";
        case db.Politician_Column.Profession:
          return "Profession";
        case db.Politician_Column.Military:
          return "Military";
        case db.Politician_Column.Civic:
          return "Civic";
        case db.Politician_Column.Political:
          return "Political";
        case db.Politician_Column.Religion:
          return "Religion";
        case db.Politician_Column.Accomplishments:
          return "Accomplishments";
        case db.Politician_Column.FacebookWebAddress:
          return "FacebookWebAddress";
        case db.Politician_Column.WikipediaWebAddress:
          return "YouTubeWebAddress";
        case db.Politician_Column.YouTubeWebAddress:
          return "WikipediaWebAddress";
        case db.Politician_Column.FlickrWebAddress:
          return "FlickrWebAddress";
        case db.Politician_Column.TwitterWebAddress:
          return "TwitterWebAddress";
        case db.Politician_Column.RSSFeedWebAddress:
          return "RSSFeedWebAddress";
        default:
          return string.Empty;
      }
    }

    public static string Politician_Column_Description(
      db.Politician_Column Politician_Column
      )
    {
      switch (Politician_Column)
      {
        case db.Politician_Column.Password:
          return "Password";
        case db.Politician_Column.PasswordHint:
          return "Password Hint";
        case db.Politician_Column.TemporaryOfficeKey:
          return "Office Key";
        case db.Politician_Column.StateCode:
          return "State Code";
        case db.Politician_Column.FName:
          return "First Name";
        case db.Politician_Column.MName:
          return "Middle Name";
        case db.Politician_Column.Nickname:
          return "Nick Name";
        case db.Politician_Column.LName:
          return "Last Name";
        case db.Politician_Column.Suffix:
          return "Name Suffix";
        case db.Politician_Column.AddOn:
          return "Additional Name Info";
        case db.Politician_Column.EmailAddrVoteUSA:
          return "VoteUSA Email Address";
        case db.Politician_Column.EmailAddr:
          return "Candidate Email Address";
        case db.Politician_Column.StateEmailAddr:
          return "State Email Address";
        case db.Politician_Column.WebAddr:
          return "Candidate Website Address";
        case db.Politician_Column.StateWebAddr:
          return "State Website Address";
        case db.Politician_Column.Phone:
          return "Candidate Phone";
        case db.Politician_Column.StatePhone:
          return "State Phone";
        case db.Politician_Column.Gender:
          return "Gender";
        case db.Politician_Column.PartyKey:
          return "Party Key";
        case db.Politician_Column.Address:
          return "Street Address";
        case db.Politician_Column.CityStateZip:
          return "City, State Zip";
        case db.Politician_Column.StateAddress:
          return "State Street Address";
        case db.Politician_Column.StateCityStateZip:
          return "State City, State Zip";
        case db.Politician_Column.CampaignName:
          return "Campaign Name";
        case db.Politician_Column.CampaignAddr:
          return "Campaign Address";
        case db.Politician_Column.CampaignCityStateZip:
          return "Campaign City State Zip";
        case db.Politician_Column.CampaignPhone:
          return "Campaign Phone";
        case db.Politician_Column.CampaignEmail:
          return "Campaign Email";
        case db.Politician_Column.GeneralStatement:
          return "General Statement";
        case db.Politician_Column.Personal:
          return "Personal";
        case db.Politician_Column.Education:
          return "Education";
        case db.Politician_Column.Profession:
          return "Profession";
        case db.Politician_Column.Military:
          return "Military";
        case db.Politician_Column.Civic:
          return "Civic";
        case db.Politician_Column.Political:
          return "Political";
        case db.Politician_Column.Religion:
          return "Religion";
        case db.Politician_Column.Accomplishments:
          return "Accomplishments";
        case db.Politician_Column.FacebookWebAddress:
          return "Facebook Address";
        case db.Politician_Column.WikipediaWebAddress:
          return "Wikipedia Address";
        case db.Politician_Column.YouTubeWebAddress:
          return "YouTubeWeb Address";
        case db.Politician_Column.FlickrWebAddress:
          return "Flickr WebAddress";
        case db.Politician_Column.TwitterWebAddress:
          return "Twitter WebAddress";
        case db.Politician_Column.RSSFeedWebAddress:
          return "RSSFeed WebAddress";
        default:
          return string.Empty;
      }
    }
    #endregion Politicians Columns

    #region Politician Column Values
    public static string Politicians_Str(string politicianKey, string columnName)
    {
      return Politicians_Str(politicianKey, Politicians.GetColumn(columnName));
    }

    public static string Politicians_Str(string politicianKey, Politicians.Column column)
    {
      object value = Politicians.GetColumn(column, politicianKey);
      if (value == null) return string.Empty;
      return value as string;
    }

    public static string Politician_PartyCode(string politicianKey)
    {
      return Politician_PartyCode(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_PartyCode(PageCache cache, string politicianKey)
    {
      string partyKey = cache.Politicians.GetPartyKey(politicianKey);
      if (!string.IsNullOrEmpty(partyKey))
        return cache.Parties.GetPartyCode(partyKey);
      else
        return db.No_PartyCode;
    }

    public static string Politician_Office(string politicianKey)
    {
      return Offices.FormatOfficeName(
        VotePage.GetPageCache().Politicians.GetOfficeKey(politicianKey));
    }

    //---- Int
    public static int Politicians_Int(string PoliticianKey, string Column)
    {
      if (PoliticianKey != string.Empty)
        return db.Single_Key_Int("Politicians", Column, "PoliticianKey", PoliticianKey);
      else
        return 0;
    }

    public static DateTime Politicians_Date(string PoliticianKey, string Column)
    {
      return db.Single_Key_Date("Politicians", Column, "PoliticianKey", PoliticianKey);
    }

    public static string Politician(string politicianKey, db.Politician_Column column)
    {
      return Politician(VotePage.GetPageCache(), politicianKey, column);
    }

    public static string Politician(PageCache cache,
      string politicianKey, db.Politician_Column column)
    {
      switch (column)
      {
        case db.Politician_Column.Password:
          return Politicians.GetPassword(politicianKey, string.Empty);

        case db.Politician_Column.PasswordHint:
          return Politicians.GetPasswordHint(politicianKey, string.Empty);

        case db.Politician_Column.TemporaryOfficeKey:
          return Politicians.GetTemporaryOfficeKey(politicianKey, string.Empty);

        case db.Politician_Column.StateCode:
          return Politicians.GetStateCode(politicianKey, string.Empty);

        case db.Politician_Column.FName:
          return cache.Politicians.GetFirstName(politicianKey);

        case db.Politician_Column.MName:
          return Politicians.GetMiddleName(politicianKey, string.Empty);

        case db.Politician_Column.Nickname:
          return Politicians.GetNickname(politicianKey, string.Empty);

        case db.Politician_Column.LName:
          return cache.Politicians.GetLastName(politicianKey);

        case db.Politician_Column.Suffix:
          return Politicians.GetSuffix(politicianKey, string.Empty);

        case db.Politician_Column.AddOn:
          return Politicians.GetAddOn(politicianKey, string.Empty);

        case db.Politician_Column.EmailAddrVoteUSA:
          return Politicians.GetEmailVoteUSA(politicianKey, string.Empty);

        case db.Politician_Column.EmailAddr:
          return Politicians.GetEmail(politicianKey, string.Empty);

        case db.Politician_Column.StateEmailAddr:
          return Politicians.GetStateEmail(politicianKey, string.Empty);

        case db.Politician_Column.WebAddr:
          return Politicians.GetWebAddress(politicianKey, string.Empty);

        case db.Politician_Column.StateWebAddr:
          return Politicians.GetStateWebAddress(politicianKey, string.Empty);

        case db.Politician_Column.Phone:
          return Politicians.GetPhone(politicianKey, string.Empty);

        case db.Politician_Column.StatePhone:
          return Politicians.GetStatePhone(politicianKey, string.Empty);

        case db.Politician_Column.Gender:
          return Politicians.GetGender(politicianKey, string.Empty);

        case db.Politician_Column.PartyKey:
          return cache.Politicians.GetPartyKey(politicianKey);

        case db.Politician_Column.Address:
          return Politicians.GetAddress(politicianKey, string.Empty);

        case db.Politician_Column.CityStateZip:
          return Politicians.GetCityStateZip(politicianKey, string.Empty);

        case db.Politician_Column.StateAddress:
          return Politicians.GetStateAddress(politicianKey, string.Empty);

        case db.Politician_Column.StateCityStateZip:
          return Politicians.GetStateCityStateZip(politicianKey, string.Empty);

        case db.Politician_Column.CampaignName:
          return Politicians.GetCampaignName(politicianKey, string.Empty);

        case db.Politician_Column.CampaignAddr:
          return Politicians.GetCampaignAddress(politicianKey, string.Empty);

        case db.Politician_Column.CampaignCityStateZip:
          return Politicians.GetCampaignCityStateZip(politicianKey, string.Empty);

        case db.Politician_Column.CampaignPhone:
          return Politicians.GetCampaignPhone(politicianKey, string.Empty);

        case db.Politician_Column.CampaignEmail:
          return Politicians.GetCampaignEmail(politicianKey, string.Empty);

        case db.Politician_Column.GeneralStatement:
          return cache.PoliticiansBio.GetGeneralStatement(politicianKey);

        case db.Politician_Column.Personal:
          return cache.PoliticiansBio.GetPersonal(politicianKey);

        case db.Politician_Column.Education:
          return cache.PoliticiansBio.GetEducation(politicianKey);

        case db.Politician_Column.Profession:
          return cache.PoliticiansBio.GetProfession(politicianKey);

        case db.Politician_Column.Military:
          return cache.PoliticiansBio.GetMilitary(politicianKey);

        case db.Politician_Column.Civic:
          return cache.PoliticiansBio.GetCivic(politicianKey);

        case db.Politician_Column.Political:
          return cache.PoliticiansBio.GetPolitical(politicianKey);

        case db.Politician_Column.Religion:
          return cache.PoliticiansBio.GetReligion(politicianKey);

        case db.Politician_Column.Accomplishments:
          return cache.PoliticiansBio.GetAccomplishments(politicianKey);

        default:
          return string.Empty;
      }
    }
    #endregion Politician Column Values

    //------------------------
    #region politician no data strings
    public const string No_Website = "no website";
    public const string No_Phone = "no phone";
    public const string No_PartyCode = "";
    public const string No_Address = "no address";
    public const string No_Response = "no response";
    #endregion politician no data strings
    //------------------------F
    #region Web Addresses & Anchors

    public static string Politician_WebAddress_Public_Text_Or_Empty(
      PageCache cache, string politicianId)
    {
      string webAddress = cache.Politicians.GetPublicWebAddress(politicianId);
      if (!string.IsNullOrEmpty(webAddress))
      {
        webAddress = db.Str_Remove_Http(webAddress);
        webAddress = db.Str_Remove_MailTo(webAddress);
      }

      return webAddress;
    }

    public static string Politician_WebAddress_Public_Text_Or_No_Website(
      PageCache cache, string politicianId)
    {
      string webAddress = db.Politician_WebAddress_Public_Text_Or_Empty(
       cache, politicianId);

      if (!string.IsNullOrEmpty(webAddress))
        return webAddress.ReplaceNewLinesWithBreakTags();
      else
        return string.Empty;
    }

    public static string Politician_WebAddress_Public_Anchor(string politicianId,
      string anchorText, string toolTip, string target)
    {
      return Politician_WebAddress_Public_Anchor(VotePage.GetPageCache(),
        politicianId, anchorText, toolTip, target);
    }

    public static string Politician_WebAddress_Public_Anchor(PageCache cache,
      string politicianId, string anchorText, string toolTip, string target)
    {
      //string anchor = db.No_Website;
      string anchor = db.Politician_WebAddress_Public_Text_Or_No_Website(cache, politicianId);

      //if (db.Politician_WebAddress_Public_Text_Or_No_Website(cache, politicianId) !=
      //  db.No_Website)
      if (
        (!string.IsNullOrEmpty(anchor))
        && (anchor != db.No_Website)
        )
      {
        #region Canidate website
        anchor = "<a href=";
        anchor += "\"" +
          VotePage.NormalizeUrl(db.Politician_WebAddress_Public_Text_Or_Empty(cache, politicianId));
        anchor += "\"";

        if (toolTip != string.Empty)
        {
          anchor += " title=";
          anchor += "\"";
          anchor += db.Str_Remove_Single_And_Double_Quotes(toolTip);
          anchor += "\"";
          anchor += " ";
        }

        #region Target
        anchor += " Target=";
        anchor += "\"";
        if (target.Trim() != string.Empty)
          anchor += target;
        else
          anchor += "view";
        anchor += "\"";
        #endregion Target

        anchor += ">";

        if (anchorText != string.Empty)
          anchor += anchorText;
        else
          anchor += db.Politician_WebAddress_Public_Text_Or_Empty(cache, politicianId);

        anchor += "</a>";
        #endregion Canidate website
      }
      else
      {
        //Anchor = db.No_Website;
        anchor = string.Empty;
      }

      return anchor;
    }

    public static string Generic_WebAddress_Anchor(
      string Web_Address
      , string Anchor_Text
      , string ToolTip
      , string Target)
    {
      string Anchor = "<a href=";
      Anchor += "\"" + VotePage.NormalizeUrl(Web_Address);
      Anchor += "\"";

      if (ToolTip != string.Empty)
      {
        Anchor += " title=";
        Anchor += "\"";
        Anchor += db.Str_Remove_Single_And_Double_Quotes(ToolTip);
        Anchor += "\"";
        Anchor += " ";
      }

      if (Target.Trim() != string.Empty)
      {
        Anchor += " Target=";
        Anchor += "\"";
        Anchor += Target;
        Anchor += "\"";
      }

      Anchor += ">";

      if (Anchor_Text != string.Empty)
        Anchor += Anchor_Text;
      else
        Anchor += Web_Address;

      Anchor += "</a>";

      return Anchor;
    }

    public static string Social_Media_Anchors(string Politician_Key)
    {
      return Social_Media_Anchors(VotePage.GetPageCache(), Politician_Key);
    }

    public static string Social_Media_Anchors(PageCache cache, string politicianKey)
    {
      return db.RenderToString(SocialMedia.GetAnchors(cache, politicianKey));

    }

    #endregion Web Addresses & Anchors
 
    #region Phone

    public static string Politician_Phone_Any_For_Textbox(PageCache cache, string politicianKey)
    {
      return cache.Politicians.GetPublicPhone(politicianKey);
    }

    public static string Politician_Phone_Any_For_Label(string politicianKey)
    {
      return Politician_Phone_Any_For_Label(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_Phone_Any_For_Label(PageCache cache,
      string politicianKey)
    {
      string phone = db.Politician_Phone_Any_For_Textbox(cache, politicianKey);

      if (!string.IsNullOrEmpty(phone))
        return phone.ReplaceNewLinesWithBreakTags();
      else
        return db.No_Phone;
    }

    #endregion Phone
    //------------------------
    #region Address

    public static string Politician_Address_Any_For_Textbox(
      string politicianKey)
    {
      return Politician_Address_Any_For_Textbox(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_Address_Any_For_Textbox(PageCache cache,
      string politicianKey)
    {
      return cache.Politicians.GetPublicAddress(politicianKey);
    }

    public static string Politician_Address_Any_For_Label(
      string politicianKey)
    {
      return Politician_Address_Any_For_Label(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_Address_Any_For_Label(PageCache cache,
      string politicianKey)
    {
      string address = db.Politician_Address_Any_For_Textbox(cache, politicianKey);

      if (!string.IsNullOrEmpty(address))
        return address.ReplaceNewLinesWithBreakTags();
      else
        return db.No_Address;
    }

    public static string Politician_CityStateZip_Any_For_Textbox(string politicianKey)
    {
      return Politician_CityStateZip_Any_For_Textbox(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_CityStateZip_Any_For_Textbox(PageCache cache,
      string politicianKey)
    {
      return cache.Politicians.GetPublicCityStateZip(politicianKey);
    }

    public static string Politician_CityStateZip_Any_For_Label(string politicianKey)
    {
      return Politician_CityStateZip_Any_For_Label(VotePage.GetPageCache(), politicianKey);
    }

    public static string Politician_CityStateZip_Any_For_Label(PageCache cache,
      string politicianKey)
    {
      //Need a street address to show any City,State
      if (db.Politician_Address_Any_For_Textbox(cache, politicianKey) != string.Empty)
        return "<br>" + db.Politician_CityStateZip_Any_For_Textbox(cache,
          politicianKey);
      else
        //No Address is shown in the address line
        return string.Empty;
    }
    #endregion Address
    //------------------------
    #endregion Politicians Get

    #region Politicians UPDATE
    #region Politicians UPDATE Str

    // We set a maximum response length to be applied to these columns:
    //
    // Politicians.GeneralStatement
    // Politicians.Personal
    // Politicians.Education
    // Politicians.Profession
    // Politicians.Military
    // Politicians.Civic
    // Politicians.Political
    // Politicians.Religion
    // Politicians.Accomplishments
    //
    // If the length is exceeded, we truncate and append a message.

    const int PoliticiansResponseLengthMax = 2000;
    const string PoliticiansResponseLengthExceededMessage =
      " [Response was truncated to maximum response length of {0} characters.]";

    static string PoliticiansLimitStringLength(string original)
    {
      string result = original;
      if (result.Length > PoliticiansResponseLengthMax)
        result = result.Remove(PoliticiansResponseLengthMax) +
          string.Format(PoliticiansResponseLengthExceededMessage, PoliticiansResponseLengthMax);
      return result;
    }

    public static void Politicians_Update_Str(
      string PoliticianKey
      , string Column
      , string ColumnValue)
    {
      db.Single_Key_Update_Str("Politicians", Column, ColumnValue, "PoliticianKey", PoliticianKey);
    }
    public static void Politicians_Update_Password(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Password", ColumnValue);
    }
    public static void Politicians_Update_PasswordHint(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "PasswordHint", ColumnValue);
    }

    public static void Politicians_Update_TemporaryOfficeKey(string PoliticianKey,
      string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "TemporaryOfficeKey", ColumnValue);
    }

    public static void Politicians_Update_StateCode(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StateCode", ColumnValue);
    }
    public static void Politicians_Update_FName(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "FName", ColumnValue);
    }
    public static void Politicians_Update_MName(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "MName", ColumnValue);
    }
    public static void Politicians_Update_Nickname(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Nickname", ColumnValue);
    }
    public static void Politicians_Update_LName(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LName", ColumnValue);
    }
    public static void Politicians_Update_Suffix(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Suffix", ColumnValue);
    }
    public static void Politicians_Update_AddOn(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "AddOn", ColumnValue);
    }
    public static void Politicians_Update_EmailAddrVoteUSA(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "EmailAddrVoteUSA", ColumnValue);
    }
    public static void Politicians_Update_EmailAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "EmailAddr", ColumnValue);
    }
    public static void Politicians_Update_StateEmailAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StateEmailAddr", ColumnValue);
    }
    public static void Politicians_Update_WebAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "WebAddr", ColumnValue);
    }
    public static void Politicians_Update_StateWebAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StateWebAddr", ColumnValue);
    }
    public static void Politicians_Update_Phone(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Phone", ColumnValue);
    }
    public static void Politicians_Update_StatePhone(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StatePhone", ColumnValue);
    }
    public static void Politicians_Update_Gender(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Gender", ColumnValue);
    }
    public static void Politicians_Update_PartyKey(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "PartyKey", ColumnValue);
    }
    public static void Politicians_Update_Address(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Address", ColumnValue);
    }
    public static void Politicians_Update_CityStateZip(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CityStateZip", ColumnValue);
    }
    public static void Politicians_Update_StateAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StateAddress", ColumnValue);
    }
    public static void Politicians_Update_StateCityStateZip(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "StateCityStateZip", ColumnValue);
    }
    public static void Politicians_Update_CampaignName(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CampaignName", ColumnValue);
    }
    public static void Politicians_Update_CampaignAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CampaignAddr", ColumnValue);
    }
    public static void Politicians_Update_CampaignCityStateZip(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CampaignCityStateZip", ColumnValue);
    }
    public static void Politicians_Update_CampaignPhone(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CampaignPhone", ColumnValue);
    }
    public static void Politicians_Update_CampaignEmail(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "CampaignEmail", ColumnValue);
    }
    //LDS
    public static void Politicians_Update_LDSEmailAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LDSEmailAddr", ColumnValue);
    }

    public static void Politicians_Update_LDSWebAddr(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LDSWebAddr", ColumnValue);
    }
    public static void Politicians_Update_LDSPhone(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LDSPhone", ColumnValue);
    }
    public static void Politicians_Update_LDSAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LDSAddress", ColumnValue);
    }
    public static void Politicians_Update_LDSCityStateZip(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "LDSCityStateZip", ColumnValue);
    }
    public static void Politicians_Update_GeneralStatement(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "GeneralStatement",
        PoliticiansLimitStringLength(ColumnValue));
    }

    public static void Politicians_Update_Personal(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Personal",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Education(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Education",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Profession(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Profession",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Military(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Military",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Civic(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Civic",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Political(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Political",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Religion(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Religion",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_Accomplishments(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "Accomplishments",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_FacebookWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "FacebookWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_WikipediaWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "WikipediaWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_YouTubeWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "YouTubeWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_FlickrWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "FlickrWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_TwitterWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "TwitterWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_RSSFeedWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "RSSFeedWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    public static void Politicians_Update_VimeoWebAddress(
      string PoliticianKey
      , string ColumnValue)
    {
      db.Politicians_Update_Str(PoliticianKey, "VimeoWebAddress",
        PoliticiansLimitStringLength(ColumnValue));
    }
    #endregion Politicians UPDATE Str

    #region Politicians UPDATE Int
    public static void Politicians_Update_Int(string PoliticianKey, string Column, int ColumnValue)
    {
      db.Single_Key_Update_Int("Politicians", Column, ColumnValue, "PoliticianKey", PoliticianKey);
    }
    public static int Politicians_Update_DataUpdatedCount(string politicianKey)
    {
      return db.Politicians_Int(politicianKey, "DataUpdatedCount");
    }
    public static void Politician_Update_Increment_Count_Data_Updated(string PoliticianKey)
    {
      int DataUpdatedCount = db.Politicians_Update_DataUpdatedCount(PoliticianKey);
      DataUpdatedCount++;
      db.Politicians_Update_Int(PoliticianKey, "DataUpdatedCount", DataUpdatedCount);
    }
    #endregion Politicians UPDATE Int

    #region Politicians UPDATE Date
    public static void Politicians_Update_Date(string PoliticianKey, string Column, DateTime ColumnValue)
    {
      db.Single_Key_Update_Date("Politicians", Column, ColumnValue, "PoliticianKey", PoliticianKey);
    }
    public static void Politician_Update_DataLastUpdated(string PoliticianKey)
    {
      db.Politicians_Update_Date(PoliticianKey, "DataLastUpdated", DateTime.Now);
    }
    #endregion Politicians UPDATE Date

    public static void Politician_Update_Str(
       string PoliticianKey
      , db.Politician_Column Column
      , string Str_New_Value
      )
    {
      switch (Column)
      {
        case db.Politician_Column.Password:
          db.Politicians_Update_Password(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.PasswordHint:
          db.Politicians_Update_PasswordHint(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.TemporaryOfficeKey:
          db.Politicians_Update_TemporaryOfficeKey(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StateCode:
          db.Politicians_Update_StateCode(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.FName:
          db.Politicians_Update_FName(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.MName:
          db.Politicians_Update_MName(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Nickname:
          db.Politicians_Update_Nickname(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LName:
          db.Politicians_Update_LName(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Suffix:
          db.Politicians_Update_Suffix(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.AddOn:
          db.Politicians_Update_AddOn(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.EmailAddrVoteUSA:
          db.Politicians_Update_EmailAddrVoteUSA(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.EmailAddr:
          db.Politicians_Update_EmailAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StateEmailAddr:
          db.Politicians_Update_StateEmailAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.WebAddr:
          db.Politicians_Update_WebAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StateWebAddr:
          db.Politicians_Update_StateWebAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Phone:
          db.Politicians_Update_Phone(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StatePhone:
          db.Politicians_Update_StatePhone(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Gender:
          db.Politicians_Update_Gender(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.PartyKey:
          db.Politicians_Update_PartyKey(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Address:
          db.Politicians_Update_Address(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CityStateZip:
          db.Politicians_Update_CityStateZip(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StateAddress:
          db.Politicians_Update_StateAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.StateCityStateZip:
          db.Politicians_Update_StateCityStateZip(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CampaignName:
          db.Politicians_Update_CampaignName(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CampaignAddr:
          db.Politicians_Update_CampaignAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CampaignCityStateZip:
          db.Politicians_Update_CampaignCityStateZip(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CampaignPhone:
          db.Politicians_Update_CampaignPhone(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.CampaignEmail:
          db.Politicians_Update_CampaignEmail(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LDSEmailAddr:
          db.Politicians_Update_LDSEmailAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LDSWebAddr:
          db.Politicians_Update_LDSWebAddr(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LDSPhone:
          db.Politicians_Update_LDSPhone(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LDSAddress:
          db.Politicians_Update_LDSAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.LDSCityStateZip:
          db.Politicians_Update_LDSCityStateZip(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.GeneralStatement:
          db.Politicians_Update_GeneralStatement(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Personal:
          db.Politicians_Update_Personal(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Education:
          db.Politicians_Update_Education(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Profession:
          db.Politicians_Update_Profession(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Military:
          db.Politicians_Update_Military(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Civic:
          db.Politicians_Update_Civic(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Political:
          db.Politicians_Update_Political(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Religion:
          db.Politicians_Update_Religion(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.Accomplishments:
          db.Politicians_Update_Accomplishments(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.FacebookWebAddress:
          db.Politicians_Update_FacebookWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.WikipediaWebAddress:
          db.Politicians_Update_WikipediaWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.YouTubeWebAddress:
          db.Politicians_Update_YouTubeWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.FlickrWebAddress:
          db.Politicians_Update_FlickrWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.TwitterWebAddress:
          db.Politicians_Update_TwitterWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.RSSFeedWebAddress:
          db.Politicians_Update_RSSFeedWebAddress(PoliticianKey, Str_New_Value);
          break;
        case db.Politician_Column.VimeoWebAddress:
          db.Politicians_Update_VimeoWebAddress(PoliticianKey, Str_New_Value);
          break;
        default:
          break;
      }
    }

    public static void Politician_Update_Post(string politicianKey)
    {
      db.Politician_Update_Increment_Count_Data_Updated(politicianKey);
      db.Politician_Update_DataLastUpdated(politicianKey);
      //db.Invalidate_Politician(politicianKey);
    }

    public static string Politician_Update_Transaction_Str(string politicianKey,
      db.Politician_Column column, string newValue)
    {
      #region Log the change
 
      DB.VoteLog.LogPoliticianChanges.Insert(
        DateTime.Now,
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        politicianKey,
        db.Politician_Column_Name(column),
        db.Politician(politicianKey, column).ToStringOrNull(),
        newValue.ToStringOrNull().Trim());
      #endregion Log the change

      db.Politician_Update_Str(politicianKey, column, newValue);

      db.Politician_Update_Post(politicianKey);

      return db.Politician_Column_Description(column);
    }
    #endregion Politicians UPDATE

    #endregion Politicians Table

    #region Insert Politician
    public static void Politician_Insert(
      string PoliticianKey
      , string OfficeKey
      , string StateCode
      , string FName
      , string MName
      , string LName
      , string Suffix
      , string AddOn
      , string Nickname
      , string PartyKey
      )
    {
      #region Fix Name Parts
      //First
      //FName = db.Str_Fix_Name(FName);
      FName = Validation.FixGivenName(FName);

      //Middle
      //if (!string.IsNullOrEmpty(MName))
      //  MName = db.Str_Fix_Name(MName);
      MName = Validation.FixGivenName(MName);

      //Nick name
      //if (!string.IsNullOrEmpty(Nickname))
      //  Nickname = db.Str_Fix_Name(Nickname);
      Nickname = Validation.FixNickname(Nickname);

      //Last
      //LName = db.Str_Fix_Name(LName);
      LName = Validation.FixLastName(LName);

      //Suffix
      //if (!string.IsNullOrEmpty(Suffix))
      //  Suffix = db.Str_Fix_Name_Suffix(Suffix);
      Suffix = Validation.FixNameSuffix(Suffix);
      #endregion Fix Name Parts

      string Unique_Password = db.MakeUniquePassword();

      string SQL = string.Empty;

      Politicians.Insert(
        politicianKey: PoliticianKey, 
        password: Unique_Password, 
        passwordHint: string.Empty, 
        temporaryOfficeKey: OfficeKey, 
        liveOfficeKey: string.Empty, 
        liveOfficeStatus: string.Empty, 
        liveElectionKey: string.Empty, 
        stateCode: Politicians.GetStateCodeFromKey(PoliticianKey), 
        firstName: FName, 
        middleName: MName, 
        nickname: Nickname, 
        lastName: LName, 
        alphaName: LName.StripAccents(),
        vowelStrippedName: LName.StripVowels(),
        suffix: Suffix, 
        addOn: AddOn, 
        emailVoteUSA: string.Empty, 
        email: null, 
        stateEmail: string.Empty, 
        lastEmailCode: string.Empty, 
        webAddress: null, 
        stateWebAddress: string.Empty, 
        phone: null, 
        statePhone: string.Empty, 
        gender: string.Empty, 
        partyKey: PartyKey, 
        address: null, 
        cityStateZip: null, 
        stateAddress: string.Empty, 
        stateCityStateZip: string.Empty, 
        campaignName: string.Empty, 
        campaignAddress: string.Empty, 
        campaignCityStateZip: string.Empty, 
        campaignPhone: string.Empty, 
        campaignEmail: string.Empty, 
        stateData: string.Empty, 
        LDSStateCode: string.Empty, 
        LDSTypeCode: string.Empty, 
        LDSDistrictCode: string.Empty, 
        LDSLegIDNum: string.Empty, 
        LDSPoliticianName: string.Empty, 
        LDSEmail: string.Empty, 
        LDSWebAddress: string.Empty, 
        LDSPhone: string.Empty, 
        LDSGender: string.Empty, 
        LDSPartyCode: string.Empty, 
        LDSAddress: string.Empty, 
        LDSCityStateZip: string.Empty, 
        LDSVersion: string.Empty, 
        LDSUpdateDate: VoteDb.DateTimeMin, 
        introLetterSent: VoteDb.DateTimeMin, 
        generalStatement: string.Empty, 
        personal: string.Empty, 
        education: string.Empty, 
        profession: string.Empty, 
        military: string.Empty, 
        civic: string.Empty, 
        political: string.Empty, 
        religion: string.Empty, 
        accomplishments: string.Empty, 
        isHasBioData: false, 
        isNotRespondedEmailSent: false, 
        dataLastUpdated: VoteDb.DateTimeMin, 
        dataUpdatedCount: 0, 
        datePictureUploaded: VoteDb.DateTimeMin, 
        isLDSIncumbent: false, 
        answers: 0, dateOfBirth: 
        VoteDb.DateTimeMin, 
        facebookWebAddress: string.Empty, 
        wikipediaWebAddress: string.Empty, 
        youTubeWebAddress: string.Empty, 
        flickrWebAddress: string.Empty, 
        twitterWebAddress: string.Empty, 
        RSSFeedWebAddress: string.Empty, 
        vimeoWebAddress: string.Empty, 
        googlePlusWebAddress: string.Empty, 
        linkedInWebAddress: string.Empty, 
        pinterestWebAddress: string.Empty, 
        bloggerWebAddress: string.Empty,
        webstagramWebAddress: string.Empty,
        ballotPediaWebAddress: string.Empty);

      DB.VoteLog.LogPoliticianAdds.Insert(
        DateTime.Now,
        SecurePage.UserSecurityClass,
        SecurePage.UserName,
        PoliticianKey,
        Unique_Password,
        OfficeKey,
        StateCode,
        string.Empty,
        string.Empty,
        string.Empty,
        FName,
        MName,
        LName,
        Suffix,
        Nickname,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty);
    }
    #endregion Insert Politician

    #region Delete Politician
    public static void Politician_Delete(string politicianKey)
    {
      string sqlDelete;

      #region Politicians Table
      sqlDelete = "DELETE FROM Politicians WHERE PoliticianKey ="
        + db.SQLLit(politicianKey);
      db.ExecuteSQL(sqlDelete);
      #endregion Politicians Table

      #region PoliticiansImages Table
      //SQLDELETE = "DELETE FROM PoliticiansImages WHERE PoliticianKey ="
      //  + db.SQLLit(PoliticianKey);
      //db.ExecuteSQL(SQLDELETE);
      PoliticiansImagesData.DeleteByPoliticianKey(politicianKey);
      PoliticiansImagesBlobs.DeleteByPoliticianKey(politicianKey);
      CommonCacheInvalidation.ScheduleInvalidation("politicianimage", politicianKey);
      #endregion PoliticiansImages Table

      #region Answers Table
      sqlDelete = "DELETE FROM Answers WHERE PoliticianKey ="
        + db.SQLLit(politicianKey);
      db.ExecuteSQL(sqlDelete);
      #endregion Answers Table

      #region ElectionsPoliticians Table
      sqlDelete = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey ="
        + db.SQLLit(politicianKey);
      db.ExecuteSQL(sqlDelete);
      #endregion ElectionsPoliticians Table

      #region OfficesOfficials Table
      sqlDelete = "DELETE FROM OfficesOfficials WHERE PoliticianKey ="
        + db.SQLLit(politicianKey);
      db.ExecuteSQL(sqlDelete);
      #endregion OfficesOfficials Table

      #region LDS PoliticiansCommittees Table
      //SQLDELETE = "DELETE FROM PoliticiansCommittees WHERE PoliticianKey ="
      //  + db.SQLLit(PoliticianKey);
      //db.ExecuteSQL(SQLDELETE);
      #endregion LDS PoliticiansCommittees Table

      #region LogElectionPoliticianAddsDeletes Table
      //SQLDELETE = "DELETE FROM LogElectionPoliticianAddsDeletes WHERE PoliticianKey ="
      //  + db.SQLLit(PoliticianKey);
      //db.ExecuteSQL(SQLDELETE);
      DB.VoteLog.LogElectionPoliticianAddsDeletes.DeleteByPoliticianKey(politicianKey);
      #endregion LogElectionPoliticianAddsDeletes Table

      #region LogPoliticianAdds Table
      //sqlDelete = "DELETE FROM LogPoliticianAdds WHERE PoliticianKey ="
      //  + db.SQLLit(politicianKey);
      //db.ExecuteSQL(sqlDelete);
      DB.VoteLog.LogPoliticianAdds.DeleteByPoliticianKey(politicianKey);
      #endregion LogPoliticianAdds Table

      #region LogPoliticianChanges Table
      //sqlDelete = "DELETE FROM LogPoliticianChanges WHERE PoliticianKey ="
      //  + db.SQLLit(politicianKey);
      //db.ExecuteSQL(sqlDelete);
      DB.VoteLog.LogPoliticianChanges.DeleteByPoliticianKey(politicianKey);
      #endregion LogPoliticianChanges Table

      #region LogPoliticianAnswers Table
      //sqlDelete = "DELETE FROM LogPoliticianAnswers WHERE PoliticianKey ="
      //  + db.SQLLit(politicianKey);
      //db.ExecuteSQL(sqlDelete);
      DB.VoteLog.LogPoliticianAnswers.DeleteByPoliticianKey(politicianKey);
      #endregion LogPoliticianAnswers Table


      //db.Invalidate_Politician(politicianKey);
      //db.Cache_Remove_PoliticianIssue_Politician(politicianKey);
    }
    #endregion Delete Politician

    #region Politician Multiple Tables
    public static void Politician_Delete_All_Tables_All_Rows(string PoliticianKey)
    {
      string sql_delete = "DELETE FROM Politicians WHERE PoliticianKey = "
        + db.SQLLit(PoliticianKey);
      db.ExecuteSQL(sql_delete);

      //LDS Committees
      //sql_delete = "DELETE FROM PoliticiansCommittees WHERE PoliticianKey = "
      //  + db.SQLLit(PoliticianKey);
      //db.ExecuteSQL(sql_delete);

      sql_delete = "DELETE FROM Answers WHERE PoliticianKey = "
        + db.SQLLit(PoliticianKey);
      db.ExecuteSQL(sql_delete);

      sql_delete = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey = "
        + db.SQLLit(PoliticianKey);
      db.ExecuteSQL(sql_delete);

      sql_delete = "DELETE FROM OfficesOfficials WHERE PoliticianKey = "
        + db.SQLLit(PoliticianKey);
      db.ExecuteSQL(sql_delete);

      //db.Invalidate_Politician(PoliticianKey);
      //db.Cache_Remove_PoliticianIssue_Politician(PoliticianKey);
    }
    #endregion Politician Multiple Tables

    #region Politician Utilities
    public static bool Is_Update_Politician_To_Data(
      DateTime From_Date
      , bool Is_Has_Data_From
      , DateTime To_Date
      , bool Is_Has_Data_To
      )
    {
      bool Is_Update_Data = false;
      if (Is_Has_Data_From)
      {
        #region Data From Politicain exists
        if (!Is_Has_Data_To)
        {
          #region No Data To Politician exists - copy it
          Is_Update_Data = true;
          #endregion No Data To Politician exists - copy it
        }
        else if (
          (Is_Has_Data_To)
          && (From_Date > To_Date)
          )
        {
          #region To Data exists but From Data is older
          Is_Update_Data = true;
          #endregion To Data exists but From Data is older
        }
        #endregion Data From Politicain exists
      }
      return Is_Update_Data;
    }

    public static void Politicians_Column_Consolidate(
      string PoliticianKey_From,
      string PoliticianKey_To,
      string Column
      )
    {
      Politicians_Column_Consolidate(
        PoliticianKey_From,
        PoliticianKey_To,
        Column,
        false);
    }

    public static void Politicians_Column_Consolidate(
      string PoliticianKey_From,
      string PoliticianKey_To,
      string Column,
      bool isEmptySignificant
      // for columns like Politician.Address, null indicates no value and
      // empty is an actual value that overrides the defaults.
      )
    {
      string Data_From = db.Politicians_Str(PoliticianKey_From, Column);
      string Data_To = db.Politicians_Str(PoliticianKey_To, Column);

      DateTime Date_From = db.Politicians_Date(PoliticianKey_From, "DataLastUpdated");
      DateTime Date_To = db.Politicians_Date(PoliticianKey_To, "DataLastUpdated");

      bool Is_Has_Data_From = !string.IsNullOrEmpty(Data_From);
      if (isEmptySignificant && Data_From == string.Empty)
        Is_Has_Data_From = true;

      bool Is_Has_Data_To = !string.IsNullOrEmpty(Data_To);
      if (isEmptySignificant && Data_To == string.Empty)
        Is_Has_Data_To = true;

      if (db.Is_Update_Politician_To_Data(
           Date_From
          , Is_Has_Data_From
          , Date_To
          , Is_Has_Data_To
          )
          )
      {
        db.Politicians_Update_Str(
         PoliticianKey_To
         , Column
         , Data_From
         );
      }
    }
    public static void PoliticiansImages_Consolidate_Image_Column(
     string PoliticianKey_From
     , string PoliticianKey_To
     , string columnName
     )
    {
      byte[] Image_Blob_From;
      byte[] Image_Blob_To;
      //if (db.Is_Valid_PoliticiansImages(PoliticianKey_From))
      //  Image_Blob_From = db.PoliticiansImages_Image(PoliticianKey_From, columnName);

      //var column = PoliticiansImagesView.GetColumn(columnName);
      //Image_Blob_From =
      //  PoliticiansImagesView.GetColumn(column, PoliticianKey_From) as byte[];

      var column = PoliticiansImagesBlobs.GetColumn(columnName);
      Image_Blob_From =
        PoliticiansImagesBlobs.GetColumn(column, PoliticianKey_From) as byte[];

      //if (db.Is_Valid_PoliticiansImages(PoliticianKey_To))
      //  Image_Blob_To = db.PoliticiansImages_Image(PoliticianKey_To, columnName);

      //Image_Blob_To =
      //  PoliticiansImagesView.GetColumn(column, PoliticianKey_To) as byte[];

      Image_Blob_To =
        PoliticiansImagesBlobs.GetColumn(column, PoliticianKey_To) as byte[];

      //only if FROM has image and TO is null
      if (
        (Image_Blob_From != null)
        && (Image_Blob_To == null)
        )
      {
        //db.PoliticiansImages_Update_Image(
        //    PoliticianKey_To
        //    , columnName
        //    , Image_Blob_From
        //    );
        PoliticiansImagesData.GuaranteePoliticianKeyExists(PoliticianKey_To);
        PoliticiansImagesBlobs.GuaranteePoliticianKeyExists(PoliticianKey_To);
        PoliticiansImagesBlobs.UpdateColumn(column, Image_Blob_From, PoliticianKey_To);
      }
    }
    public static void Consolidate_Politicians(
      string PoliticianKey_From
      , string PoliticianKey_To
      )
    {
      #region Inits
      //string PoliticianKey_From = Textbox_PoliticianKey_From.Text.Trim();
      //string PoliticianKey_To = Textbox_PoliticianKey_To.Text.Trim();
      string SQLUPDATE;
      string SQL;
      DataTable Table;
      DateTime Date_From;
      DateTime Date_To;
      byte[] Image_Blob_From;
      byte[] Image_Blob_To;
      bool Is_Has_Data_From;
      bool Is_Has_Data_To;
      string StateCode_To = Politicians.GetStateCode(PoliticianKey_To);
      #endregion Inits

      #region Update Receiving Politician's Data

      #region Politicians Table
      #region String Data
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "EmailAddrVoteUSA");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "EmailAddr", true);
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StateEmailAddr");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LastEmailCode");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "WebAddr", true);
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StateWebAddr");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Phone", true);
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StatePhone");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Gender");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "PartyKey");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Address", true);
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CityStateZip", true);
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StateAddress");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StateCityStateZip");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CampaignName");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CampaignAddr");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CampaignCityStateZip");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CampaignPhone");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "CampaignEmail");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "StateData");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSStateCode");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSTypeCode");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSDistrictCode");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSLegIDNum");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSPoliticianName");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSEmailAddr");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSWebAddr");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSPhone");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSGender");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSPartyCode");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSAddress");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSCityStateZip");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "LDSVersion");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "GeneralStatement");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Personal");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Education");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Profession");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Military");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Civic");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Political");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Religion");
      db.Politicians_Column_Consolidate(PoliticianKey_From
        , PoliticianKey_To, "Accomplishments");
      #endregion String Data

      #region Last Updated
      Date_From = db.Politicians_Date(
       PoliticianKey_From, "DataLastUpdated"
       );
      Date_To = db.Politicians_Date(
       PoliticianKey_To, "DataLastUpdated"
       );
      if (Date_From > Date_To)
      {
        db.Politicians_Update_Date(
          PoliticianKey_To
        , "DataLastUpdated"
        , Date_From);
      }
      #endregion Last Updated

      #endregion Politicians Table

      #region PoliticiansImages Table
      #region Note
      //From politician row must exist in PoliticiansImages Table
      //TO politician does not have to exist because it
      //is created on the fly.
      #endregion Note
      if (db.Is_Valid_PoliticiansImages(PoliticianKey_From))
      {
        #region ProfileOriginal
        Image_Blob_From =
          PoliticiansImagesBlobs.GetProfileOriginal(PoliticianKey_From);
        Date_From =
          PoliticiansImagesData.GetProfileOriginalDate(PoliticianKey_From,
          DateTime.MinValue);


        if (db.Is_Valid_PoliticiansImages_ProfileOriginal(PoliticianKey_To))
        {
          Image_Blob_To =
            PoliticiansImagesBlobs.GetProfileOriginal(PoliticianKey_To);
          Date_To = PoliticiansImagesData.GetProfileOriginalDate(PoliticianKey_To,
            DateTime.MinValue);
        }
        else
        {
          Image_Blob_To = null;
          Date_To = DateTime.MinValue;
        }

        Is_Has_Data_From = false;
        if (Image_Blob_From != null)
          Is_Has_Data_From = true;

        Is_Has_Data_To = false;
        if (Image_Blob_To != null)
          Is_Has_Data_To = true;

        if (db.Is_Update_Politician_To_Data(
             Date_From
            , Is_Has_Data_From
            , Date_To
            , Is_Has_Data_To
            )
            )
        {
          #region Consolidate ProfileOriginal
          db.PoliticiansImages_Consolidate_Image_Column(
              PoliticianKey_From
              , PoliticianKey_To
              , "ProfileOriginal"
              );

          PoliticiansImagesData.GuaranteePoliticianKeyExists(PoliticianKey_To);
          PoliticiansImagesBlobs.GuaranteePoliticianKeyExists(PoliticianKey_To);

          //string profileOriginalContentType =
          //  PoliticiansImagesView.GetProfileOriginalContentType(
          //   PoliticianKey_From, string.Empty);
          //PoliticiansImagesView.UpdateProfileOriginalContentType(
          //   profileOriginalContentType, PoliticianKey_To);

          DateTime profileOriginalDate =
            PoliticiansImagesData.GetProfileOriginalDate(PoliticianKey_From,
            DateTime.MinValue);
          PoliticiansImagesData.UpdateProfileOriginalDate(profileOriginalDate,
            PoliticianKey_To);

          //Size profileOriginalSize = PoliticiansImagesView
          //  .GetProfileOriginalSize(PoliticianKey_From);
          //PoliticiansImagesView.UpdateProfileOriginalSize(
          //   profileOriginalSize, PoliticianKey_To);

          //Profile300
          db.PoliticiansImages_Consolidate_Image_Column(
           PoliticianKey_From
           , PoliticianKey_To
           , "Profile300"
           );
          //Profile200
          db.PoliticiansImages_Consolidate_Image_Column(
          PoliticianKey_From
          , PoliticianKey_To
          , "Profile200"
          );
          #endregion Consolidate ProfileOriginal
        }

        #region Last Updated
        Date_From =
          PoliticiansImagesData.GetProfileOriginalDate(PoliticianKey_From,
          DateTime.MinValue);
        Date_To =
          PoliticiansImagesData.GetProfileOriginalDate(PoliticianKey_To,
          DateTime.MinValue);
        if (Date_From > Date_To)
        {
          PoliticiansImagesData.UpdateProfileOriginalDate(Date_From, PoliticianKey_To);
        }
        #endregion Last Updated

        #endregion ProfileOriginal

        //#region HeadshotOriginal

        ////Image_Blob_From = db.PoliticiansImages_Image(PoliticianKey_From, "HeadshotOriginal");
        //////Date_From = db.PoliticiansImages_Date(PoliticianKey_From, "HeadshotDate");
        //Date_From =
        //  PoliticiansImagesView.GetHeadshotDate(PoliticianKey_From, DateTime.MinValue);


        ////if (db.Is_Valid_PoliticiansImages(PoliticianKey_To))
        //if (db.Is_Valid_PoliticiansImages_HeadshotOriginal(PoliticianKey_To))
        //{
        //  //Image_Blob_To = db.PoliticiansImages_Image(PoliticianKey_To, "HeadshotOriginal");
        //  ////Date_To = db.PoliticiansImages_Date(PoliticianKey_To, "HeadshotDate");
        //  Date_To =
        //    PoliticiansImagesView.GetHeadshotDate(PoliticianKey_To, DateTime.MinValue);
        //}
        //else
        //{
        //  //Image_Blob_To = null;
        //  Date_To = DateTime.MinValue;
        //}

        //Is_Has_Data_From = false;
        //if (Image_Blob_From != null)
        //  Is_Has_Data_From = true;

        //Is_Has_Data_To = false;
        //if (Image_Blob_To != null)
        //  Is_Has_Data_To = true;

        //if (db.Is_Update_Politician_To_Data(
        //     Date_From
        //    , Is_Has_Data_From
        //    , Date_To
        //    , Is_Has_Data_To
        //    )
        //    )
        //{
        //  #region Consolidate HeadshotOriginal
        //  //db.PoliticiansImages_Consolidate_Image_Column(
        //  //    PoliticianKey_From
        //  //    , PoliticianKey_To
        //  //    , "HeadshotOriginal"
        //  //    );

        //  ////HeadshotDate
        //  //db.PoliticiansImages_Update_Date(
        //  //  PoliticianKey_To
        //  //, "HeadshotDate"
        //  //, db.PoliticiansImages_Date(
        //  //    PoliticianKey_From
        //  //    , "HeadshotDate"
        //  //    )
        //  //    );

        //  DateTime headshotDate =
        //    PoliticiansImagesView.GetHeadshotDate(PoliticianKey_From, DateTime.MinValue);
        //  PoliticiansImagesView.UpdateHeadshotDate(headshotDate, PoliticianKey_To);

        //  ////HeadshotWidth
        //  //db.PoliticiansImages_Update_Int(
        //  //  PoliticianKey_To
        //  //, "HeadshotWidth"
        //  //, db.PoliticiansImages_Int(
        //  //    PoliticianKey_From
        //  //    , "HeadshotWidth"
        //  //    )
        //  //    );

        //  ////HeadshotHeight
        //  //db.PoliticiansImages_Update_Int(
        //  //  PoliticianKey_To
        //  //, "HeadshotHeight"
        //  //, db.PoliticiansImages_Int(
        //  //    PoliticianKey_From
        //  //    , "HeadshotHeight"
        //  //    )
        //  //    );

        //  //Size headshotSize =
        //  //  PoliticiansImagesView.GetHeadshotSize(PoliticianKey_From);
        //  //PoliticiansImagesView.UpdateHeadshotSize(headshotSize, PoliticianKey_To);

        //  #endregion Consolidate HeadshotOriginal

        //  #region Last Updated
        //  //Date_From = db.PoliticiansImages_Date(
        //  // PoliticianKey_From, "HeadshotDate"
        //  // );
        //  //Date_To = db.PoliticiansImages_Date(
        //  // PoliticianKey_To, "HeadshotDate"
        //  // );
        //  Date_From =
        //    PoliticiansImagesView.GetHeadshotDate(PoliticianKey_From, DateTime.MinValue);
        //  Date_To =
        //    PoliticiansImagesView.GetHeadshotDate(PoliticianKey_To, DateTime.MinValue);
        //  if (Date_From > Date_To)
        //  {
        //    //db.PoliticiansImages_Update_Date(
        //    //  PoliticianKey_To
        //    //, "HeadshotDate"
        //    //, Date_From);
        //    PoliticiansImagesView.UpdateHeadshotDate(Date_From, PoliticianKey_To);
        //  }
        //  #endregion Last Updated
        //}
        ////Headshot100
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot100"
        //);
        ////Headshot75
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot75"
        //);
        ////Headshot50
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot50"
        //);
        ////Headshot35
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot35"
        //);
        ////Headshot25
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot25"
        //);
        ////Headshot20
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot20"
        //);
        ////Headshot15
        //db.PoliticiansImages_Consolidate_Image_Column(
        //PoliticianKey_From
        //, PoliticianKey_To
        //, "Headshot15"
        //);
        //#endregion HeadshotOriginal
        CommonCacheInvalidation.ScheduleInvalidation("politicianimage", PoliticianKey_To);
      }
      #endregion PoliticiansImages Table

      #region Answers Table
      SQL = "SELECT * FROM Answers WHERE PoliticianKey = " + db.SQLLit(PoliticianKey_From);
      Table = db.Table(SQL);
      foreach (DataRow Row in Table.Rows)
      {
        //Consolidating into politician has no answer for this question
        if (db.Rows("Answers"
          , "PoliticianKey", PoliticianKey_To
          , "QuestionKey", Row["QuestionKey"].ToString()) == 0)
        {
          SQLUPDATE = "UPDATE Answers"
          + " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
          + " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From)
          + " AND QuestionKey =" + db.SQLLit(Row["QuestionKey"].ToString());
          db.ExecuteSQL(SQLUPDATE);
        }
      }
      #endregion Answers Table

      #region ElectionsPoliticians Table
      SQLUPDATE = "UPDATE ElectionsPoliticians"
       + " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
         + " ,StateCode =" + db.SQLLit(StateCode_To)
       + " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      db.ExecuteSQL(SQLUPDATE);

      SQLUPDATE = "UPDATE ElectionsPoliticians"
      + " SET RunningMateKey =" + db.SQLLit(PoliticianKey_To)
      + " WHERE RunningMateKey =" + db.SQLLit(PoliticianKey_From);
      db.ExecuteSQL(SQLUPDATE);
      #endregion ElectionsPoliticians Table

      #region OfficesOfficials Table
      SQLUPDATE = "UPDATE OfficesOfficials"
      + " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
        + " ,StateCode =" + db.SQLLit(StateCode_To)
      + " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      db.ExecuteSQL(SQLUPDATE);

      SQLUPDATE = "UPDATE OfficesOfficials"
      + " SET RunningMateKey =" + db.SQLLit(PoliticianKey_To)
      + " WHERE RunningMateKey =" + db.SQLLit(PoliticianKey_From);
      db.ExecuteSQL(SQLUPDATE);
      #endregion OfficesOfficials Table

      #region LDS PoliticiansCommittees Table
      //SQLUPDATE = "UPDATE PoliticiansCommittees"
      //+ " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
      //+ " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      //db.ExecuteSQL(SQLUPDATE);
      #endregion LDS PoliticiansCommittees Table

      #region LogElectionPoliticianAddsDeletes Table
      //SQLUPDATE = "UPDATE LogElectionPoliticianAddsDeletes"
      //+ " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
      //  + " ,StateCode =" + db.SQLLit(StateCode_To)
      //+ " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      //db.ExecuteSQL(SQLUPDATE);

      DB.VoteLog.LogElectionPoliticianAddsDeletes.UpdateStateCodeByPoliticianKey(
        StateCode_To, PoliticianKey_From);
      DB.VoteLog.LogElectionPoliticianAddsDeletes.UpdatePoliticianKeyByPoliticianKey(
        PoliticianKey_To, PoliticianKey_From);
      #endregion LogElectionPoliticianAddsDeletes Table

      #region LogPoliticianAdds Table
      //SQLUPDATE = "UPDATE LogPoliticianAdds"
      //+ " SET PoliticianKey =" + db.SQLLit(PoliticianKey)
      //  + " ,StateCode =" + db.SQLLit(StateCode_To)
      //+ " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      //db.ExecuteSQL(SQLUPDATE);
      DB.VoteLog.LogPoliticianAdds.UpdateStateCodeByPoliticianKey(StateCode_To,
        PoliticianKey_From);
      DB.VoteLog.LogPoliticianAdds.UpdatePoliticianKeyByPoliticianKey(PoliticianKey_To,
        PoliticianKey_From);
      #endregion LogPoliticianAdds Table

      #region LogPoliticianChanges Table
      //SQLUPDATE = "UPDATE LogPoliticianChanges"
      //+ " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
      //+ " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      //db.ExecuteSQL(SQLUPDATE);
      DB.VoteLog.LogPoliticianChanges.UpdatePoliticianKeyByPoliticianKey(
        PoliticianKey_To, PoliticianKey_From);
      #endregion LogPoliticianChanges Table

      #region LogPoliticianAnswers Table
      //SQLUPDATE = "UPDATE LogPoliticianAnswers"
      //+ " SET PoliticianKey =" + db.SQLLit(PoliticianKey_To)
      //+ " WHERE PoliticianKey =" + db.SQLLit(PoliticianKey_From);
      //db.ExecuteSQL(SQLUPDATE);
      DB.VoteLog.LogPoliticianAnswers.UpdatePoliticianKeyByPoliticianKey(
        PoliticianKey_To, PoliticianKey_From);
      #endregion LogPoliticianAnswers Table

      #endregion Update Receiving Politician's Data

      db.Politician_Delete(PoliticianKey_From);
    }
    #endregion Politician Utilities

    //Log


    #region ElectionKey
    public static string ElectionKey_New_Format(string ElectionKeyOld)
    {
      //Converts old ElectionKey format to new ElectionKey format
      if (string.IsNullOrEmpty(ElectionKeyOld))
      {
        return string.Empty;
      }
      else
      {
        #region Note
        //If first two chars are a State or Federal Code it is in the new ElectionKey format
        //Old ElectionKey format looks like: 20081104GSC000000ALL
        #endregion Note
        string ElectionKeyNew;
        if (!StateCache.IsValidStateOrFederalCode(ElectionKeyOld.Substring(0, 2).ToUpper(), false))
        {
          if (ElectionKeyOld.Length >= Elections.ElectionKeyLengthStateOrFederal)
          {

            ElectionKeyNew = ElectionKeyOld.Substring(9, 2).ToUpper();//StateCode
            ElectionKeyNew += ElectionKeyOld.Substring(0, 8);//YYYYMMDD
            ElectionKeyNew += ElectionKeyOld.Substring(8, 1).ToUpper();//Type

            if (ElectionKeyOld.Length == 18)
              ElectionKeyNew += ElectionKeyOld.Substring(17, 1).ToUpper();//Nationa Party Code
            else if (ElectionKeyOld.Length >= 21)
            {
              if (ElectionKeyOld.Substring(17, 3).ToUpper() == "ALL")
                ElectionKeyNew += "A";
              else
                ElectionKeyNew += ElectionKeyOld.Substring(19, 1).ToUpper();
            }
            else
              ElectionKeyNew += "A";

            if (ElectionKeyOld.Length >= 17)
            {
              #region CountyCode
              if (ElectionKeyOld.Substring(11, 3) != "000")
              {
                ElectionKeyNew += ElectionKeyOld.Substring(11, 3);
                //LocalCode
                if (ElectionKeyOld.Substring(14, 2) != "00")
                  ElectionKeyNew += ElectionKeyOld.Substring(14, 2);
              }
              #endregion CountyCode
            }

            //if (db.Is_Valid_Election(ElectionKeyNew))
            return ElectionKeyNew.ToUpper();
            //else
            //  return string.Empty;
          }
          else
            return string.Empty;
        }
        else
          return ElectionKeyOld;//Valid ElectionKey - Old ElectionKey is the New ElectionKey
      }
    }
    #endregion ElectionKey Build, convert from old format

    #region ElectionKey convert for Federal, State, County, Local

    public static string ElectionKey_Federal(
      string ElectionKey
      , string OfficeKey
      )
    {
      if (
        (!string.IsNullOrEmpty(ElectionKey))
        && (!string.IsNullOrEmpty(OfficeKey))
        && (db.Is_Electoral_Federal(OfficeKey))
        )
      {
        string ElectionKey_Federal = "U";

        ElectionKey_Federal += Offices.GetOfficeClass(OfficeKey).ToInt();

        if (ElectionKey.Length >= Elections.ElectionKeyLengthStateOrFederal)
          ElectionKey_Federal +=
            ElectionKey.Substring(2, Elections.ElectionKeyLengthStateOrFederal - 2);

        return ElectionKey_Federal;
      }
      else
        return string.Empty;
    }

    public static string ElectionKey_State(string ElectionKey)
    {
      if (
        (!string.IsNullOrEmpty(ElectionKey))
        && (ElectionKey.Length >= Elections.ElectionKeyLengthStateOrFederal)
        )
        return ElectionKey.Substring(0, Elections.ElectionKeyLengthStateOrFederal);
      else
        return string.Empty;
    }

    public static string ElectionKey_State(string ElectionKey, string StateCode)
    {
      if (
        (ElectionKey.Length >= 12)
        && (StateCode.Length == 2)
        )
      {
        return StateCode + ElectionKey.Substring(2, 10);
      }
      else
        return string.Empty;
    }

    public static string ElectionKey_County(
      string ElectionKeyAny
      , string OfficeKey
      )
    {
      #region Note
      //Used to insert ElectionsOffices rows
      //ElectionKeyCounty is empty for State level offices
      //ElectionKeyCounty is ElectionKeyState + CountyCode
      //for County offices and Local offices
      #endregion Note
      if (
        (!string.IsNullOrEmpty(ElectionKeyAny))
        && (!string.IsNullOrEmpty(OfficeKey))
        && (db.Is_OfficeKey_County(OfficeKey) || (db.Is_OfficeKey_Local(OfficeKey)))
        )
      {
        return
          db.ElectionKey_State(
            ElectionKeyAny
            , Offices.GetStateCodeFromKey(OfficeKey)
            )
          + Offices.GetCountyCodeFromKey(OfficeKey);

      }
      else
        return string.Empty;
    }

    public static string ElectionKey_Local(
      string ElectionKeyAny
      , string OfficeKey
      )
    {
      #region Note
      //Used to insert ElectionsOffices rows
      //ElectionKeyLocal is empty for State and County level offices
      //ElectionKeyLocal is ElectionKeyState + CountyCode + LocalCode
      //for Local offices only
      #endregion Note
      if (
        (!string.IsNullOrEmpty(ElectionKeyAny))
        && (!string.IsNullOrEmpty(OfficeKey))
        && (db.Is_OfficeKey_Local(OfficeKey))
        )
      {
        return db.ElectionKey_State(
            ElectionKeyAny
          , Offices.GetStateCodeFromKey(OfficeKey))
          + Offices.GetCountyCodeFromKey(OfficeKey)
          + Offices.GetLocalCodeFromKey(OfficeKey);
      }
      else
        return string.Empty;
    }

    #endregion ElectionKey convert for Federal, State, County, Local

    #region ElectionKey US Pres, Senate, House
    public static string ElectionKey_USPres(string ElectionKey)
    {
      if (ElectionKey != string.Empty)
      {
        ElectionKey = db.ElectionKey_State(ElectionKey);
        ElectionKey = ElectionKey.Remove(0, 2);
        ElectionKey = ElectionKey.Insert(0, "U1");
        return ElectionKey;
      }
      else
        return string.Empty;
    }
    public static string ElectionKey_USSenate(string ElectionKey)
    {
      if (ElectionKey != string.Empty)
      {
        ElectionKey = db.ElectionKey_State(ElectionKey);
        ElectionKey = ElectionKey.Remove(0, 2);
        ElectionKey = ElectionKey.Insert(0, "U2");
        return ElectionKey;
      }
      else
        return string.Empty;
    }
    public static string ElectionKey_USHouse(string ElectionKey)
    {
      if (ElectionKey != string.Empty)
      {
        ElectionKey = db.ElectionKey_State(ElectionKey);
        ElectionKey = ElectionKey.Remove(0, 2);
        ElectionKey = ElectionKey.Insert(0, "U3");
        return ElectionKey;
      }
      else
        return string.Empty;
    }

    #endregion ElectionKey US Pres, Senate, House

    #region ElectionKey Upcoming, Previous, Viewable

    public static string ElectionKey_Previous_Most_Recent(string StateCode)
    {
      string SQL = string.Empty;
      SQL += "SELECT";
      SQL += " ElectionKey";
      SQL += " FROM vote.Elections";
      SQL += " WHERE ElectionDate < " + db.SQLLit(Db.DbToday);
      SQL += " AND StateCode = " + db.SQLLit(StateCode);
      SQL += " ORDER BY ElectionDate DESC";
      DataRow rowElection = db.Row_First(SQL);
      return (rowElection["ElectionKey"].ToString());
    }
    #endregion ElectionKey Upcoming, Previous, Viewable


    //-- Elections

    #region Elections Table
 
    public static string Elections_Str(string electionKey, string columnName)
    {
      //if (db.Is_Valid_Election(electionKey))
      //  return db.Single_Key_Str("Elections", columnName, "ElectionKey", electionKey);
      //else
      //  return string.Empty;

      // This version only hits the DB once per call, not twice
      return Elections_Str(electionKey, Elections.GetColumn(columnName));
    }

    public static string Elections_Str(string electionKey, Elections.Column column)
    {
      object value = Elections.GetColumn(column, electionKey);
      if (value == null) return string.Empty;
      else return value as string;
    }


    public static string Elections4Navbar(string ElectionKey, string Column)
    {
      //For cases where a County Elections row does not exist
      if (db.Is_Valid_Election(ElectionKey))
        return db.Single_Key_Str("Elections", Column, "ElectionKey", ElectionKey);
      else
        return db.Single_Key_Str("Elections", Column, "ElectionKey", db.ElectionKey_State(ElectionKey));
    }

    public static string Elections_ElectionDesc(string ElectionKey)
    {
      return db.Elections_Str(ElectionKey, "ElectionDesc");
    }

    public static string Name_Election(string ElectionKey)
    {
      if (
        (ElectionKey != string.Empty)
        && (db.Is_Valid_Election(ElectionKey))
        )
        return db.Elections_Str(ElectionKey, "ElectionDesc");
      else
        return string.Empty;
    }
    #endregion

    //-- ElectionKey Information

    #region Elections Bool
    public static bool Is_Election_Upcoming_Viewable_State(string StateCode)
    {
      if (db.Rows(sql.Elections_Upcoming_Viewable_G_O_S_P(StateCode)) >= 1)//there is at least 1 upcoming election
        return true;
      else
        return false;
    }

    #endregion

    #region ElectionsOffices Table
    public static int Rows_ElectionsOffices(string ElectionKey)
    {
      string SQL = "ElectionsOffices";
      SQL += " WHERE ElectionKey = " + db.SQLLit(ElectionKey);
      return db.Rows_Count_From(SQL);
    }

    public static bool Is_Election_Has_Office_Contests(string ElectionKey)
    {
      if (db.Rows_ElectionsOffices(ElectionKey) > 0)
        return true;
      else
        return false;
    }

    #endregion ElectionsOffices Table


    #region ElectionsOffices SELECT

    public static bool Is_Valid_Election_Office(string ElectionKey, string OfficeKey)
    {
      if (db.Rows("ElectionsOffices", "ElectionKey", ElectionKey, "OfficeKey", OfficeKey) == 1)
        return true;
      else
        return false;
    }
    public static bool Is_Valid_ElectionsOffices(string ElectionKey, string OfficeKey)
    {
      return db.Is_Valid_Election_Office(ElectionKey, OfficeKey);
    }
    #endregion ElectionsOffices SELECT

    #region ElectionsOffices UPDATE
 
    public static void ElectionsOffices_Update_OfficeLevel(string OfficeKey, int OfficeLevel)
    {
      string SQLUPDATE = "UPDATE ElectionsOffices"
      + " SET OfficeLevel =" + OfficeLevel.ToString()
      + " WHERE OfficeKey =" + db.SQLLit(OfficeKey);
      db.ExecuteSQL(SQLUPDATE);
    }
    public static void ElectionsOffices_Update_DistrictCode(string OfficeKey, string DistrictCode)
    {
      string SQLUPDATE = "UPDATE ElectionsOffices"
      + " SET DistrictCode =" + db.SQLLit(DistrictCode)
      + " WHERE OfficeKey =" + db.SQLLit(OfficeKey);
      db.ExecuteSQL(SQLUPDATE);
    }
    #endregion

    #region ElectionsOffices INSERT

    public static void ElectionsOffices_INSERT(
      string Election_Key
      , string officeKey
      , string District_Code
      )
    {
      if (!db.Is_Valid_ElectionsOffices(
        Election_Key
        , officeKey))
      {

        if (db.Is_Electoral_District(officeKey))
        {
          #region District Offices only
          if (string.IsNullOrEmpty(District_Code))
            throw new ApplicationException(
              "The office class requires DistrictCode");
          #endregion District Offices only
        }
        else
        {
          #region Non-District Offices
          if (!string.IsNullOrEmpty(District_Code))
            throw new ApplicationException(
              "The office class has a DistrictCode, but should be empty");
          #endregion Non-District Offices
        }

        //if (db.Is_Valid_ElectionsOffices(
        //  Election_Key
        //  , officeKey))
        //  throw new ApplicationException("An Office Contest already exists"
        //    + " in the ElectionsOffices Table with ElectionKey:" + Election_Key
        //    + " OfficeKey:" + officeKey);

        string SQL = string.Empty;
        SQL += "INSERT INTO ElectionsOffices";
        SQL += "(";
        SQL += " ElectionKey";
        SQL += ",OfficeKey";
        SQL += ",ElectionKeyState";
        SQL += ",ElectionKeyFederal";
        SQL += ",ElectionKeyCounty";
        SQL += ",ElectionKeyLocal";
        SQL += ",StateCode";
        SQL += ",CountyCode";
        SQL += ",LocalCode";
        SQL += ",DistrictCode";
        SQL += ",OfficeLevel";
        SQL += ")VALUES(";
        SQL += db.SQLLit(Election_Key);
        SQL += "," + db.SQLLit(officeKey);
        SQL += "," + db.SQLLit(db.ElectionKey_State(Election_Key));
        SQL += "," + db.SQLLit(db.ElectionKey_Federal(Election_Key, officeKey));
        SQL += "," + db.SQLLit(db.ElectionKey_County(Election_Key, officeKey));
        SQL += "," + db.SQLLit(db.ElectionKey_Local(Election_Key, officeKey));
        SQL += "," + db.SQLLit(Offices.GetStateCodeFromKey(Election_Key));
        SQL += "," + db.SQLLit(Elections.GetCountyCodeFromKey(Election_Key));
        SQL += "," + db.SQLLit(Elections.GetLocalCodeFromKey(Election_Key));
        SQL += "," + db.SQLLit(District_Code);
        SQL += "," + Offices.GetOfficeClass(officeKey).ToInt();
        SQL += ")";
        db.ExecuteSQL(SQL);
      }
    }
    #endregion ElectionsOffices INSERT

    #region ElectionsPoliticians UPDATE
    public static void ElectionsPoliticians_Update_Bool(string ElectionKey, string OfficeKey, string PoliticianKey, string Column, bool ColumnValue)
    {
      db.Triple_Key_Update_Bool("ElectionsPoliticians", Column, ColumnValue, "ElectionKey", ElectionKey, "OfficeKey", OfficeKey, "PoliticianKey", PoliticianKey);
    }

    public static void Set_IsWinner_For_Election(
      string electionKey,
      string officeKey,
      string politicianKey,
      bool isWinner
      )
    {
      #region Note
      //ElectionsPoliticians.IsWinner for an office contest is set
      //normally set when winners are identified by OfficeWinner.aspx.
      //But old elections can also be set because it does not
      //affect the currently elected officials.
      //
      //OfficesOfficials rows are only inserted and deleted 
      //if the election is the most recent previous election.
      //in OfficeWinner.aspx form
      //to identify the currently elected officials (incumbents)
      #endregion Note
      if (isWinner)
      {
        db.ElectionsPoliticians_Update_Bool(
          electionKey,
          officeKey,
          politicianKey,
          "IsWinner",
          true
          );
      }
      else
      {
        db.ElectionsPoliticians_Update_Bool(
          electionKey,
          officeKey,
          politicianKey,
          "IsWinner",
          false
          );
      }
    }

    #endregion ElectionsPoliticians UPDATE


    //-- Issues, Questions Answers Tables

    #region Issues Table
 
    public static string Issues_Str(string IssueKey, string Column)
    {
      if (
        (IssueKey != string.Empty)
        && (!db.Is_IssueKey_IssuesList(IssueKey))
        )
        return db.Single_Key_Str("Issues", Column, "IssueKey", IssueKey);
      else
        return string.Empty;
    }

    public static string Issues_Issue(string IssueKey)
    {
      if (!string.IsNullOrEmpty(IssueKey))
        return db.Issues_Str(IssueKey, "Issue");
      else
        return string.Empty;
    }

    public static int Issues_Int(string IssueKey, string Column)
    {
      if (IssueKey != string.Empty)
        return db.Single_Key_Int("Issues", Column, "IssueKey", IssueKey);
      else
        return 0;
    }
    public static int Issues_IssueOrder(string IssueKey)
    {
      return db.Issues_Int(IssueKey, "IssueOrder");
    }

    public static bool Issues_Bool(string IssueKey, string Column)
    {
      if (IssueKey != string.Empty)
        return db.Single_Key_Bool("Issues", Column, "IssueKey", IssueKey);
      else
        return false;
    }
    public static bool Is_Issue_Omit(string IssueKey)
    {
      if (db.Issues_Bool(IssueKey, "IsIssueOmit"))
        return true;
      else
        return false;
    }

    public static bool Is_IssueKey_IssuesList(string IssueKey)
    {
      //if ((IssueKey.Length == 13) && (IssueKey.Substring(3, 10).ToUpper() == "IssuesList"))
      if (
        (IssueKey.Length == 13)
        && (IssueKey.Substring(3, 10).ToUpper() == "ISSUESLIST")
        )
        return true;
      else
        return false;
    }

    public static string Issue_Desc(string issueKey)
    {
      return Issue_Desc(VotePage.GetPageCache(), issueKey);
    }

    public static string Issue_Desc(PageCache cache, string issueKey)
    {
      if (issueKey == db.Issues_List(issueKey))
        return "List of Issues";
      else if (issueKey.ToUpper() == "ALLBIO")
        return "Biographical Information";
      else
        return cache.Issues.GetIssue(issueKey);// +" Issues";
    }

    public static void Issues_Update_Str(string IssueKey, string Column, string ColumnValue)
    {
      db.Single_Key_Update_Str("Issues", Column, ColumnValue, "IssueKey", IssueKey);
    }
    public static void Issues_Update_Issue(string IssueKey, string ColumnValue)
    {
      db.Issues_Update_Str(IssueKey, "Issue", ColumnValue);
    }

    public static void Issues_Update_Bool(string IssueKey, string Column, bool ColumnValue)
    {
      db.Single_Key_Update_Bool("Issues", Column, ColumnValue, "IssueKey", IssueKey);
    }
    public static void Issues_Update_IsIssueOmit(string IssueKey, bool ColumnValue)
    {
      db.Issues_Update_Bool(IssueKey, "IsIssueOmit", ColumnValue);
    }

    public static void Issues_Update_Int(string IssueKey, string Column, int ColumnValue)
    {
      db.Single_Key_Update_Int("Issues", Column, ColumnValue, "IssueKey", IssueKey);
    }
    public static void Issues_Update_IssueOrder(string IssueKey, int ColumnValue)
    {
      db.Issues_Update_Int(IssueKey, "IssueOrder", ColumnValue);
    }

    public static string IssueLevel_Issue(string IssueKey)
    {
      if (IssueKey.Length > 0)
        return IssueKey.Substring(0, 1).ToUpper();
      else
        return string.Empty;
    }

    public static string IssueLevel_Office(PageCache cache, string officeKey)
    {
      if (Offices.GetOfficeClass(cache, officeKey) <= OfficeClass.USHouse)
        return "B";
      return Offices.GetOfficeClass(cache, officeKey) <= OfficeClass.StateHouse 
        ? "C" 
        : "D";
    }

    public static string IssueGroup_IssueKey(string IssueKey)
    {
      if (IssueKey.Length >= 3)
        return IssueKey.Substring(1, 2).ToUpper();
      else
        return string.Empty;
    }

    public static string Issues_List_Office(string officeKey)
    {
      return Issues_List_Office(VotePage.GetPageCache(), officeKey);
    }

    public static string Issues_List_Office(PageCache cache, string officeKey)
    {
      string issueLevel = db.IssueLevel_Office(cache, officeKey);
      string stateCode;
      if (issueLevel == "B")
        stateCode = "US";
      else //State Level office
        stateCode = db.StateCode4OfficeKey4Domain(cache, officeKey);//US or StateCode
      return issueLevel + stateCode + "IssuesList";
    }

    public static string Issues_List(string IssueKey)
    {
      if (!string.IsNullOrEmpty(IssueKey))
      {
        string IssueLevel = db.IssueLevel_Issue(IssueKey);
        string StateCode = db.IssueGroup_IssueKey(IssueKey);//LL, US or StateCode
        return IssueLevel + StateCode + "IssuesList";
      }
      else
        return string.Empty;
    }

    public static bool Is_IssuesList(string IssueKey)
    {
      if (IssueKey == db.Issues_List(IssueKey))
        return true;
      else
        return false;
    }

    #endregion

    #region Questions Table
    public static bool Is_Valid_Question(string QuestionKey)
    {
      //if (db.Row_Optional(sql.QuestionKey(QuestionKey)) != null)
      string SQL = " SELECT";
      SQL += " Questions.QuestionKey";
      SQL += " FROM Questions";
      SQL += " WHERE Questions.QuestionKey =" + db.SQLLit(QuestionKey);
      if (db.Row_Optional(SQL) != null)
        return true;
      else
        return false;
    }

    public static string Questions_Str(string QuestionKey, string Column)
    {
      if (QuestionKey != string.Empty)
        return db.Single_Key_Str("Questions", Column, "QuestionKey", QuestionKey);
      else
        return string.Empty;
    }
    public static string Questions_Question(string QuestionKey)
    {
      return db.Questions_Str(QuestionKey, "Question");
    }
    public static bool Questions_Bool(string QuestionKey, string Column)
    {
      if (QuestionKey != string.Empty)
        return db.Single_Key_Bool("Questions", Column, "QuestionKey", QuestionKey);
      else
        return false;
    }
    public static bool Is_Question_Omit(string QuestionKey)
    {
      if (db.Questions_Bool(QuestionKey, "IsQuestionOmit"))
        return true;
      else
        return false;
    }
    public static int Questions_Int(string QuestionKey, string Column)
    {
      if (QuestionKey != string.Empty)
        return db.Single_Key_Int("Questions", Column, "QuestionKey", QuestionKey);
      else
        return 0;
    }
    public static int Questions_QuestionOrder(string QuestionKey)
    {
      return db.Questions_Int(QuestionKey, "QuestionOrder");
    }

    public static void Questions_Update_Str(string QuestionKey, string Column, string ColumnValue)
    {
      db.Single_Key_Update_Str("Questions", Column, ColumnValue, "QuestionKey", QuestionKey);
    }

    public static void Questions_Update_Question(string QuestionKey, string ColumnValue)
    {
      db.Questions_Update_Str(QuestionKey, "Question", ColumnValue);
    }

    public static void Questions_Update_Bool(string QuestionKey, string Column, bool ColumnValue)
    {
      db.Single_Key_Update_Bool("Questions", Column, ColumnValue, "QuestionKey", QuestionKey);
    }
    public static void Questions_Update_IsQuestionOmit(string QuestionKey, bool ColumnValue)
    {
      db.Questions_Update_Bool(QuestionKey, "IsQuestionOmit", ColumnValue);
    }
    public static void Questions_Update_Int(string QuestionKey, string Column, int ColumnValue)
    {
      db.Single_Key_Update_Int("Questions", Column, ColumnValue, "QuestionKey", QuestionKey);
    }
    public static void Questions_Update_QuestionOrder(string QuestionKey, int ColumnValue)
    {
      db.Questions_Update_Int(QuestionKey, "QuestionOrder", ColumnValue);
    }

    #endregion Questions Table

    #region Answers Table
    public const int Max_Answer_Length_2000 = 2000;
    //public const int Max_Answer_Length_1000 = 1000;

    public static string Answers(string PoliticianKey, string QuestionKey, string Column)
    {
      return db.Double_Key_Str("Answers", Column, "PoliticianKey", PoliticianKey, "QuestionKey", QuestionKey);
    }
    public static DateTime AnswersDate(string PoliticianKey, string QuestionKey, string Column)
    {
      if ((PoliticianKey != string.Empty) && (QuestionKey != string.Empty))
        return db.Double_Key_Date("Answers", Column, "PoliticianKey", PoliticianKey, "QuestionKey", QuestionKey);
      else
        return DateTime.MinValue;
    }

    public static string Answers_Optional(
      string PoliticianKey
      , string QuestionKey
      , string Column)
    {
      if (db.Rows("Answers"
        , "PoliticianKey", PoliticianKey
        , "QuestionKey", QuestionKey) == 1)
        return db.Answers(PoliticianKey, QuestionKey, Column);
      else
        return string.Empty;
    }

    public static DateTime AnswersDate_Optional(
      string PoliticianKey
      , string QuestionKey, string Column)
    {
      if (db.Rows("Answers", "PoliticianKey", PoliticianKey, "QuestionKey", QuestionKey) == 1)
        return db.AnswersDate(PoliticianKey, QuestionKey, Column);
      else
        return DateTime.MinValue;
    }


    public static string Answer(string PoliticianKey, string QuestionKey)
    {
      return db.Answers_Optional(PoliticianKey, QuestionKey, "Answer");
    }
    public static string Answer_Source(string PoliticianKey, string QuestionKey)
    {
      return db.Answers_Optional(PoliticianKey, QuestionKey, "Source");
    }
    public static DateTime Answer_Date(
      string PoliticianKey
      , string QuestionKey)
    {
      return db.AnswersDate_Optional(
        PoliticianKey
        , QuestionKey, "DateStamp");
    }


    public static string Answer_Truncate_To_Max_Chars(string Answer)
    {
      if (Answer.Length > db.Max_Answer_Length_2000)
      {
        Answer = Answer.Remove(db.Max_Answer_Length_2000);
        Answer += " [Response was truncated to maximum response length of "
          + db.Max_Answer_Length_2000.ToString()
          + " characters.] ";
      }
      return Answer;
    }

    public static string Answer_Issue_Question(string politicianKey,
      string questionKey, bool includeLName, bool includeSource, bool includeDateStamp)
    {
      const int maxLengthSource = 45;

      string answer = db.Answer(politicianKey, questionKey);

      if (answer != string.Empty)
      {
        #region Answer in database
        if (db.SCRIPT_NAME().ToLower() == "/politicianissue.aspx" ||
          db.SCRIPT_NAME().ToLower() == "/issue.aspx")
        {
          #region public pages
          answer = db.Answer_Truncate_To_Max_Chars(answer);

          #region Name
          if (includeLName)
            answer =
              "<span class=\"last-name\">" +
              //db.Politicians_Str(politicianKey, "LName") +
              Politicians.GetLastName(politicianKey, string.Empty) +
              ":</span> " +
              answer;
          #endregion Name

          #region Source
          string source = db.Answer_Source(politicianKey, questionKey);
          if (source != string.Empty && includeSource)
          {
            #region Note
            //IE won't break in middle of a long string 
            //with no delimiters, but Firefox will.
            //causing an issue table to exceed 940px
            //So breaks are forced at the / when the
            //source is too long.
            #endregion Note

            //If Source url longer then MaxLengthSource chars
            if (source.Length > maxLengthSource)
            {
              if (source.IndexOf("/", 0) != -1)
              {
                //If there is a / break at /
                int Loc = source.IndexOf("/", 0);
                source = source.Insert(Loc + 1, "<br>");
              }
              else
              {
                //break at Max length
                source = source.Insert(maxLengthSource, "<br>");
              }
            }

            answer += "<br><span class=\"source\"><span>Source:</span> " +
              source + "</span>";
          }
          #endregion Source

          #region Date
          //DateTime Date = Convert.ToDateTime(AnswerRow["DateStamp"]);
          DateTime date = db.Answer_Date(politicianKey, questionKey);
          //int Hour = DateTest.Hour;

          //if ((Convert.ToDateTime(AnswerRow["DateStamp"]) != Convert.ToDateTime("1/1/1900"))
          if (date != Convert.ToDateTime("1/1/1900") && includeDateStamp)
          {
            answer += " Date: ";
            //if (Convert.ToInt16(Date.Hour) == 0) //no HH:MM:SS
            answer += date.ToString("MM/dd/yyyy");
            //else
            //  Answer += Date.ToString();
          }
          #endregion Date

          return answer;
          #endregion public pages
        }
        else
        {
          #region  /Politician/Answer.aspx
          return answer;
          #endregion  /Politician/Answer.aspx
        }
        #endregion Answer in database
      }
      else
      {
        #region No Answer in database

        if (politicianKey != "NoRunningMate" &&
          (db.SCRIPT_NAME().ToLower() == "/politicianissue.aspx" ||
          db.SCRIPT_NAME().ToLower() == "/issue.aspx"))
        {
          #region public pages
          if (includeLName)
            return
              "<span class=\"last-name\">" +
              //db.Politicians_Str(politicianKey, "LName") +
              Politicians.GetLastName(politicianKey, string.Empty) +
              ":<span> " + db.No_Response;
          else
            return db.No_Response;
          #endregion public pages
        }
        else
        {
          #region  /Politician/Answer.aspx
          return string.Empty;
          #endregion  /Politician/Answer.aspx
        }
        #endregion No Answer in database
      }
    }

    public static string Answer_Issue_Question(string PoliticianKey, string QuestionKey)
    {
      return db.Answer_Issue_Question(PoliticianKey, QuestionKey, false, false, false);
    }

    #endregion Answers Table

    //------- Zip Addresses & Tables
    #region Zip Addresses & Tables


    #endregion Zip Addresses & Tables

    //------------- Design ---------------------------
    #region Design Forms ====================================


    #region Design Textboxes (Default and Custom)

    public static void Throw_Exception_TextBox_Html(TextBox TextBox)
    {
      if (db.Is_TextBox_Html(TextBox))
        throw new ApplicationException("Text in a textbox appears to be HTML because it contains an opening or closing HTML tag (< or />). Please remove and try again.");
    }
    public static void Throw_Exception_TextBox_Script(TextBox TextBox)
    {
      if (db.Is_Str_Script(TextBox.Text))
        throw new ApplicationException("Text in the textbox is illegal.");
    }
    public static void Throw_Exception_If_Html_Or_Script(string Str)
    {
      if (db.Is_Str_Html_Or_Illegal(Str))
        throw new ApplicationException(
          "The text has Html or illegal tags.");
    }
    public static void Throw_Exception_TextBox_Html_Or_Script(TextBox TextBox)
    {
      db.Throw_Exception_TextBox_Html(TextBox);
      db.Throw_Exception_TextBox_Script(TextBox);
    }

     //-----------------------------------


    #endregion Design Textboxes

    #region Misc
    public static string PageTitleDesign(string PageDesc, string UserDesignCode)
    {
      string Title = PageDesc;
      if (SecurePage.IsMasterUser)//only show DesignCode and StateCode4Data for Masters
      {
        //Title += "<br>for Design Code: " + db.DomainDesigns_Str(UserDesignCode, "DomainStateDataCode");
        Title += "<br>for Design Code: " + UserDesignCode;
      }
      return Title;
    }
    #endregion Misc

    #endregion Design Forms ====================================

    #region Page Title Elements
    //Election
    public static string PageTitle_Election(string electionKey)
    {
      //if (db.Is_Valid_Election(ElectionKey))
      //{
      //  return db.Elections_Str(ElectionKey, "ElectionDesc");
      //}
      //else
      //  throw new ApplicationException("Bad Elections Table ElectionKey:" + ElectionKey);
      //---------------
      if (db.Is_Valid_Election(electionKey))
        return db.Elections_Str(electionKey, "ElectionDesc");
      else
      {
        string ElectionKey_State = db.ElectionKey_State(
          electionKey
        , Elections.GetStateCodeFromKey(electionKey)
        );
        if (db.Is_Valid_Election(ElectionKey_State))
          return db.Elections_Str(electionKey, "ElectionDesc");
        else
          //throw new ApplicationException("Bad Elections Table ElectionKey:" + ElectionKey);
          return "No Election for Election Id";
      }
    }

    public static string PageTitle_QuestionAnswers(string stateCode, string issueLevel)
    {
      string pageTitle = "Move Questions and Answers";
      pageTitle += "<br>";
      switch (issueLevel)
      {
        case "A":
          pageTitle += "for ALL Candidates";
          break;
        case "B":
          pageTitle += "for NATIONAL Office Candidates";
          break;
        case "C":
          if (StateCache.IsValidStateCode(stateCode))
          {
            pageTitle += "for "
              + StateCache.GetStateName(stateCode).ToUpper()
              + " Office Candidates";
          }
          else
          {
            throw new ApplicationException("States Table needs a row for StateCode:" + stateCode);
            //return PageTitle;
          }
          break;
        case "D":
          if (StateCache.IsValidStateCode(stateCode))
          {
            pageTitle += "for "
              + StateCache.GetStateName(stateCode).ToUpper()
              + " Office Candidates";
          }
          else
          {
            throw new ApplicationException("States Table needs a row for StateCode:" + stateCode);
          }
          break;
      }

      return pageTitle;
    }

    #endregion Page Title Elements

    #region HTML elements (table tr td checkbox)

    #region Add HTML tr to HTML table

    public static HtmlTableRow Add_Tr_To_Table_Return_Tr(HtmlTable htmlTable, string rowClass, string align)
    {
      //<tr Class="RowClass">
      HtmlTableRow htmlTr = new HtmlTableRow();
      if (rowClass != string.Empty)
        htmlTr.Attributes["Class"] = rowClass;
      if (align != string.Empty)
        htmlTr.Attributes["align"] = align;
      //</tr>
      htmlTable.Rows.Add(htmlTr);
      return htmlTr;
    }

    public static HtmlTableRow Add_Tr_To_Table_Return_Tr(HtmlTable htmlTable, string rowClass)
    {
      return db.Add_Tr_To_Table_Return_Tr(htmlTable, rowClass, string.Empty);
    }

    public static HtmlTableRow Add_Tr_To_Table_Return_Tr(HtmlTable htmlTable)
    {
      return db.Add_Tr_To_Table_Return_Tr(htmlTable, string.Empty, string.Empty);
    }

    #endregion Add HTML tr to HTML table

    #region Add HTML td to HTML tr

    public static void Add_Td_To_Tr(
      HtmlTableRow htmlTr
      , string text
      , string tdClass
      , string align
      , string width
      , int colspan
      )
    {
      //<td Class="TdClass">
      HtmlTableCell htmlTableCell = new HtmlTableCell();
      htmlTableCell.InnerHtml = text;
      if (tdClass != string.Empty)
        htmlTableCell.Attributes["class"] = tdClass;
      if (align != string.Empty)
        htmlTableCell.Attributes["align"] = align;
      if (width != string.Empty)
        htmlTableCell.Attributes["width"] = width;
      if (colspan != 0)
        htmlTableCell.Attributes["colspan"] = colspan.ToString();
      //</td>
      htmlTr.Cells.Add(htmlTableCell);
      return;
    }

    public static void Add_Td_To_Tr(HtmlTableRow htmlTr, string text, string tdClass, string align, int colspan = 0)
    {
      //<td Class="TdClass">
      HtmlTableCell htmlTableCell = new HtmlTableCell();
      htmlTableCell.InnerHtml = text;
      if (tdClass != string.Empty)
        htmlTableCell.Attributes["class"] = tdClass;
      if (align != string.Empty)
        htmlTableCell.Attributes["align"] = align;
      if (colspan != 0)
        htmlTableCell.Attributes["colspan"] = colspan.ToString();
      //</td>
      htmlTr.Cells.Add(htmlTableCell);
      return;
    }

    public static void Add_Td_To_Tr(HtmlTableRow htmlTr, string text, string tdClass, int colspan)
    {
      db.Add_Td_To_Tr(htmlTr, text, tdClass, string.Empty, colspan);
    }

    public static void Add_Td_To_Tr(HtmlTableRow htmlTr, string text, string tdClass)
    {
      db.Add_Td_To_Tr(htmlTr, text, tdClass, string.Empty, 0);
    }

    #endregion Add HTML td to HTML tr

    #endregion HTML elements (table tr td checkbox)

    #region PoliticiansImages Table

    public static bool Is_Valid_PoliticiansImages(
      string politicianKey
      )
    {
      return PoliticiansImagesData.PoliticianKeyExists(politicianKey);
    }
    public static bool Is_Valid_PoliticiansImages_ProfileOriginal(
      string politicianKey
      )
    {
      if (
        (db.Is_Valid_PoliticiansImages(politicianKey))
        && (db.PoliticiansImages_ProfileOriginal(politicianKey) != null)
        )
        return true;
      else
        return false;
    }

    #region Select PoliticiansImages

    #region Images

    public static byte[] PoliticiansImages_Image(string politicianKey, string columnName)
    {
      var column = PoliticiansImagesBlobs.GetColumn(columnName);
      return PoliticiansImagesBlobs.GetColumn(column, politicianKey) as byte[];
    }

    public static byte[] PoliticiansImages_ProfileOriginal(string politicianKey)
    {
      return db.PoliticiansImages_Image(politicianKey, "ProfileOriginal");
    }
    #endregion Images
    #endregion Select PoliticiansImages

    #endregion PoliticiansImages Table

    //Reports

    #region Election Reports

    #region Html Table Attributes

    public static void Html_Table_Attributes_Report(ref HtmlTable htmlTable)
    {
      htmlTable.Attributes["cellspacing"] = "0";
      htmlTable.Attributes["cellpadding"] = "0";
      htmlTable.Attributes["border"] = "0";
    }

    public static void Html_Table_Attributes_Report(ref HtmlTable htmlTable
      , db.ReportUser reportUser)
    {
      db.Html_Table_Attributes_Report(ref htmlTable);
      if (reportUser == db.ReportUser.Public)
        htmlTable.Attributes["class"] = "tablePage";
      else
        htmlTable.Attributes["class"] = "tableAdmin";
    }

    #endregion Html Table Attributes

    #endregion Election Reports

    #region Elected Officials Reports
    #region Officials Report CURRENT
 
    #endregion Officials Report CURRENT

    #region Election Winners Identified
    public static string Elections_Winners_Identified(string stateCode)
    {
      #region date of last General Election
      string sql = " SELECT ElectionDate";
      sql += " FROM Elections";
      sql += " WHERE StateCode = " + db.SQLLit(stateCode);
      sql += " AND CountyCode = '' AND LocalCode=''";
      sql += " AND ElectionType = 'G'";
      sql += " AND ElectionDate < " + db.SQLLit(Db.DbToday);
      sql += " ORDER BY ElectionDate DESC";

      DataRow rowGeneralElection = db.Row_First(sql);
      DateTime dateLastGeneralElection = Convert.ToDateTime(rowGeneralElection["ElectionDate"].ToString());
      #endregion date of last General Election

      #region List Elections since last General Election
      sql = " SELECT ElectionDesc,IsWinnersIdentified";
      sql += " FROM Elections";
      sql += " WHERE StateCode = " + db.SQLLit(stateCode);
      sql += " AND CountyCode = '' AND LocalCode=''";
      sql += " AND ElectionDate >= '" + dateLastGeneralElection.ToString("yyyy/MM/dd") + "'";
      sql += " AND ElectionDate < " + db.SQLLit(Db.DbToday);
      sql += " AND IsViewable = 1";
      DataTable tableElections = db.Table(sql);
      string electionsWinnersIdentified = string.Empty;
      foreach (DataRow rowElection in tableElections.Rows)
      {
        electionsWinnersIdentified += "<br>";
        if (Convert.ToBoolean(rowElection["IsWinnersIdentified"]))
          electionsWinnersIdentified += "Winners <span style=color:green>HAVE</span> been Identified";
        else
          electionsWinnersIdentified += "Winners have <span style=color:red><strong>NOT</strong></span> been Identified";
        electionsWinnersIdentified += " - " + rowElection["ElectionDesc"].ToString();
      }
      #endregion List Elections since last General Election

      return electionsWinnersIdentified;
    }
    #endregion Election Winners Identified

    #endregion Elected Officials Reports

    #region Offices Reports

    #region Offices Reports Methods /Admin/Offices.aspx and /Admin/Office.aspx

    public static string Link_Text_Add_Office(OfficeClass officeClass, string stateCode, string countyCode, string localCode)
    {
      if (officeClass.IsStateOrFederal())
      {
        //ADD Virginia Statewide Non-Judicial Offices [i.e Goverernor...]
        return "ADD "
          + StateCache.GetStateName(stateCode)
          + " " + db.Name_Office_Contest_And_Electoral_Plus_Offices(officeClass, stateCode, countyCode, localCode);
      }
      else if (officeClass.IsCounty())
      {
        //ADD Fairfax County - Executive Offices

        //return "ADD "
        //  + db.Name_County(StateCode, CountyCode)
        //  + " - " + db.Name_Office_Contest_And_Electoral_Plus_Offices(Office_Class, StateCode, CountyCode, LocalCode);
        return "ADD "
          //+ db.Name_County(StateCode, CountyCode)
          //+ " - " 
          + db.Name_Office_Contest_And_Electoral_Plus_Offices(officeClass, stateCode, countyCode, localCode);
      }
      else if (officeClass.IsLocal())
      {
        //ADD Sully District, Fairfax County Local and Town Executive Offices

        //return "ADD "
        //  + db.Name_Local(StateCode, CountyCode, LocalCode) + ", "
        //  + db.Name_County(StateCode, CountyCode)
        //  + " - "
        //  + db.Name_Office_Contest_And_Electoral_Plus_Offices(Office_Class, StateCode, CountyCode, LocalCode);
        return "ADD "
          //+ db.Name_Local(StateCode, CountyCode, LocalCode) 
          //+ ", "
          //+ db.Name_County(StateCode, CountyCode)
          //+ " - "
         + db.Name_Office_Contest_And_Electoral_Plus_Offices(officeClass, stateCode, countyCode, localCode);
      }
      else
        return string.Empty;
    }
    public static string Link_Text_Add_Office(OfficeClass officeClass, string stateCode, string countyCode)
    {
      return db.Link_Text_Add_Office(officeClass, stateCode, countyCode, string.Empty);
    }
    public static string Link_Text_Add_Office(OfficeClass officeClass, string stateCode)
    {
      return db.Link_Text_Add_Office(officeClass, stateCode, string.Empty, string.Empty);
    }
    public static void TrAddOfficesAnchor(ref HtmlTable htmlOfficesTable, OfficeClass officeClass, string stateCode, string countyCode, string localCode)
    {
      HtmlTableRow officeHtmlTr = db.Add_Tr_To_Table_Return_Tr(htmlOfficesTable, "trReportDetail");
      if (officeClass.IsStateOrFederal())
      {
        db.Add_Td_To_Tr(officeHtmlTr
        , db.Anchor_Admin_Office_ADD(
            officeClass
            , db.Link_Text_Add_Office(officeClass, stateCode))
        , "tdReportDetail"
        , 2);
      }
      else if (officeClass.IsCounty())
      {
        db.Add_Td_To_Tr(officeHtmlTr
          , db.Anchor_Admin_Office_ADD(
              officeClass, db.Link_Text_Add_Office(officeClass, stateCode, countyCode))
          , "tdReportDetail"
          , 2);
      }
      else if (officeClass.IsLocal())
      {
        db.Add_Td_To_Tr(officeHtmlTr
          , db.Anchor_Admin_Office_ADD(
              officeClass, db.Link_Text_Add_Office(officeClass, stateCode, countyCode, localCode))
          , "tdReportDetail"
          , 2);
      }
    }
    public static void TrAddOfficesAnchor(ref HtmlTable htmlOfficesTable, OfficeClass officeClass, string stateCode, string countyCode)
    {
      db.TrAddOfficesAnchor(ref  htmlOfficesTable, officeClass, stateCode, countyCode, string.Empty);
    }
    public static void TrAddOfficesAnchor(ref HtmlTable htmlOfficesTable, OfficeClass officeClass, string stateCode)
    {
      db.TrAddOfficesAnchor(ref  htmlOfficesTable, officeClass, stateCode, string.Empty, string.Empty);
    }

    #endregion Offices Reports Methods /Admin/Offices.aspx and /Admin/Office.aspx

    public static string sql_Offices_Select()
    {
      string sql = string.Empty;
      sql += " SELECT ";
      sql += " Offices.OfficeKey ";
      sql += ",Offices.StateCode ";
      sql += ",Offices.OfficeLevel ";
      sql += ",Offices.OfficeOrderWithinLevel ";
      sql += ",Offices.OfficeLine1 ";
      sql += ",Offices.OfficeLine2 ";
      sql += ",Offices.DistrictCode ";
      sql += ",Offices.DistrictCodeAlpha ";
      sql += ",Offices.CountyCode ";
      sql += ",Offices.LocalCode ";
      sql += ",Offices.OfficeOrderWithinLevel ";
      sql += ",Offices.IsRunningMateOffice ";
      sql += ",Offices.Incumbents ";
      sql += ",Offices.VoteInstructions ";
      sql += ",Offices.VoteForWording ";
      sql += ",Offices.WriteInInstructions ";
      sql += ",Offices.WriteInWording ";
      sql += ",Offices.WriteInLines ";
      sql += ",Offices.IsInactive ";
      sql += " FROM Offices ";
      //SQL += " WHERE Offices.IsOfficeTagForDeletion = 0";
      return sql;
    }

    public static string sql_Offices_ByOrder_ByDistrictCode(string stateCode, int officeClass)
    {
      string sql = sql_Offices_Select();
      sql += " WHERE Offices.StateCode = " + db.SQLLit(stateCode);
      sql += " AND Offices.OfficeLevel = " + officeClass.ToString();
      sql += " ORDER BY Offices.OfficeOrderWithinLevel";
      //SQL += " ,CONVERT(int,Offices.DistrictCode)";
      sql += ",Offices.DistrictCode";
      return sql;
    }

    public static string sql_Offices_ByDistrictCode(string stateCode, int officeClass)
    {
      string sql = sql_Offices_Select();
      sql += " WHERE Offices.StateCode = " + db.SQLLit(stateCode);
      sql += " AND Offices.OfficeLevel = " + officeClass.ToString();
      //SQL += " ORDER BY CONVERT(int,Offices.DistrictCode)";
      sql += " ORDER BY Offices.DistrictCode";
      return sql;
    }

    public static string sql_Offices_ByOrder(string stateCode, int officeClass)
    {
      string sql = sql_Offices_Select();
      sql += " WHERE Offices.StateCode = " + db.SQLLit(stateCode);
      sql += " AND Offices.OfficeLevel = " + officeClass.ToString();
      sql += " ORDER BY Offices.OfficeOrderWithinLevel";
      return sql;
    }

    public static bool Is_Office_Class_Open(string stateCode, string countyCode,
      string localCode, OfficeClass officeClass)
    {
      return db.Rows_Offices(stateCode, countyCode, localCode, officeClass) > 0 ||
        !OfficesAllIdentified.GetIsOfficesAllIdentified(stateCode, 
        officeClass.ToInt(), countyCode, localCode);
    }

    public static bool Is_Office_Class_Open(string stateCode, OfficeClass officeClass)
    {
      return db.Is_Office_Class_Open(stateCode, string.Empty, string.Empty,
        officeClass);
    }

    #endregion Offices Reports

    public static void Unreferenced() {}
  }
}
