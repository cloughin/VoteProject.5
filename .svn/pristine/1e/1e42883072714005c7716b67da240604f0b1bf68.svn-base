using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace Vote.QuestionsTablePage
{
  /// <summary>
  /// Summary description for IssueQuestionsTable.
  /// </summary>
  public class QuestionsTable : VotePage
  {
    #region WebControls
    protected System.Web.UI.WebControls.Label Msg;
    //protected System.Web.UI.WebControls.Label Label1;
    //protected System.Web.UI.WebControls.Label LabelIssueTitle;
    protected System.Web.UI.WebControls.RadioButtonList RadioButtonListOmit;
    protected System.Web.UI.WebControls.RadioButtonList RadiobuttonlistDelete;
    protected System.Web.UI.WebControls.TextBox Question;
    protected System.Web.UI.WebControls.Label LabelQuestionsTable;
    //protected System.Web.UI.WebControls.Label LabelQuestionOmitForElection;
    //protected System.Web.UI.WebControls.Label LabelQuestionTagForDeletion;
    protected System.Web.UI.WebControls.Label PageTitle;
    //protected System.Web.UI.WebControls.Label LabelIssueOrder;
    protected System.Web.UI.WebControls.TextBox QuestionOrder;
    //protected System.Web.UI.WebControls.Label Label5;
    //protected System.Web.UI.WebControls.Label Label6;
    //protected System.Web.UI.WebControls.Label Label2;
    //protected System.Web.UI.WebControls.Label Label3;
    //protected System.Web.UI.HtmlControls.HtmlGenericControl SiteCss;
    protected System.Web.UI.WebControls.Button ButtonAdd;
    protected System.Web.UI.WebControls.Button ButtonUpdate;
    protected System.Web.UI.WebControls.Button ButtonClear;
    protected System.Web.UI.WebControls.Button ButtonDeleteTaggedQuestions;
    protected System.Web.UI.WebControls.HyperLink HyperLinkReport;
    #endregion

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      //
      // CODEGEN: This call is required by the ASP.NET Web Form Designer.
      //
      InitializeComponent();
      base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

    protected void CheckOrder()
    {
      if (QuestionOrder.Text.Trim() == string.Empty)//create an order as last in list
      {
        int QuestionsCount = db.Rows(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));
        int RowNumber = (QuestionsCount + 1) * 10;
        QuestionOrder.Text = RowNumber.ToString();
      }
      if (!db.Is_Valid_Integer(QuestionOrder.Text.Trim()))
        throw new ApplicationException("The Order needs to be a whole number.");
    }
    protected void CheckQuestion()
    {
      if (Question.Text == string.Empty)
        throw new ApplicationException("Question field was empty.");
    }
    protected void CheckQuestionNotExist()
    {
      string SQL = "SELECT Question FROM Questions"
      + " WHERE Question = " + db.SQLLit(Question.Text.Trim())
      + " AND SUBSTRING(QuestionKey,1,1) = " + db.SQLLit(ViewState["IssueLevel"].ToString());
      int QuestionRows = db.Rows(SQL);
      if (QuestionRows > 0)
        throw new ApplicationException("This is a duplicate question.");
    }

    protected void Check4Answers(string QuestionKey)
    {
      int Answers = db.Rows(sql.Answers4Question(QuestionKey));
      if (Answers > 0)
        throw new ApplicationException(
          "[" + db.Questions_Str(QuestionKey, "Question") + "]"
          + " was not deleted."
          + " There are " + Answers.ToString() + " Answers for this question."
          + " You need to move the answers to a different question."
          + " Click the [Move Questions Answers] Button to do this.");
    }

    private void LoadControls()
    {
      //DataRow QuestionRow = db.Row(sql.Question(ViewState["QuestionKey"].ToString()));
      string SQL = string.Empty;
      SQL += " SELECT ";
      SQL += " Questions.QuestionKey ";
      SQL += " ,Questions.IssueKey ";
      SQL += " ,Questions.QuestionOrder ";
      SQL += " ,Questions.Question ";
      SQL += " ,Questions.IsQuestionOmit ";
      SQL += " FROM Questions ";
      SQL += " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
      DataRow QuestionRow = db.Row(SQL);

      Question.Text = QuestionRow["Question"].ToString();
      QuestionOrder.Text = QuestionRow["QuestionOrder"].ToString();

      if ((bool)QuestionRow["IsQuestionOmit"])
        RadioButtonListOmit.SelectedValue = "Yes";
      else
        RadioButtonListOmit.SelectedValue = "No";

      //if ((bool)QuestionRow["xIsQuestionTagForDeletion"])
      //  RadiobuttonlistDelete.SelectedValue = "Yes";
      //else
      //  RadiobuttonlistDelete.SelectedValue = "No";
    }
    private void ClearControls()
    {
      Question.Text = string.Empty;
      QuestionOrder.Text = string.Empty;
      RadioButtonListOmit.SelectedValue = "No";
      RadiobuttonlistDelete.SelectedValue = "No";
    }

    private string EditRadioButtonListOmit()
    {
      if (RadioButtonListOmit.SelectedValue == "Yes")
        return "1";
      else
        return "0";
    }

    private void ShowQuestions()
    {
      string QuestionsHTMLTable = string.Empty;
      QuestionsHTMLTable += "<table cellspacing=0 cellpadding=0>";

      #region Heading
      QuestionsHTMLTable += "<tr>";

      QuestionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      QuestionsHTMLTable += "O D";
      QuestionsHTMLTable += "</td>";

      QuestionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      QuestionsHTMLTable += "Order";
      QuestionsHTMLTable += "</td>";

      QuestionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      QuestionsHTMLTable += "Question (Answers)";
      QuestionsHTMLTable += "</td>";

      QuestionsHTMLTable += "</tr>";
      #endregion

      DataTable QuestionsTable = db.Table(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));

      if (QuestionsTable.Rows.Count > 0)
      {
        foreach (DataRow QuestionRow in QuestionsTable.Rows)
        {
          QuestionsHTMLTable += "<tr>";

          string OmitAndDelete = string.Empty;
          if ((bool)QuestionRow["IsQuestionOmit"] == true)
            OmitAndDelete += " O";
          //if ((bool)QuestionRow["xIsQuestionTagForDeletion"] == true)
          //  OmitAndDelete += " D";

          QuestionsHTMLTable += "<td class=tdReportDetail>";
          QuestionsHTMLTable += OmitAndDelete;
          QuestionsHTMLTable += "</td>";

          QuestionsHTMLTable += "<td class=tdReportDetail>";
          QuestionsHTMLTable += QuestionRow["QuestionOrder"].ToString();
          QuestionsHTMLTable += "</td>";

          string SQL = "Answers ";
          SQL += " WHERE Answers.QuestionKey = " + db.SQLLit(QuestionRow["QuestionKey"].ToString());
          //int Answers = db.Rows_Sql(sql.Answers4Question(QuestionRow["QuestionKey"].ToString()));
          int Answers = db.Rows_Count_From(SQL);
          QuestionsHTMLTable += "<td class=tdReportDetail>";
          //QuestionsHTMLTable += db.Anchor("/Admin/Questions.aspx"
          //  + "?Question=" + QuestionRow["QuestionKey"].ToString()
          //  + "&Issue=" + ViewState["IssueKey"].ToString(),
          //  QuestionRow["Question"].ToString()
          //  + " (" + Answers.ToString() + ")"
          //  );
          QuestionsHTMLTable += db.Anchor_AdminQuestions(
            ViewState["IssuesGroup"].ToString()
            , ViewState["IssueKey"].ToString()
          , QuestionRow["QuestionKey"].ToString()
          , QuestionRow["Question"].ToString() + " (" + Answers.ToString() + ")"
          );

          QuestionsHTMLTable += "</td>";

          QuestionsHTMLTable += "</tr>";
          ViewState["HighestOrder"] = QuestionRow["QuestionOrder"];
        }
      }
      else
      {
        QuestionsHTMLTable += "<tr>";
        QuestionsHTMLTable += "<td  class=tdReportDetail colspan=3>";
        QuestionsHTMLTable += "No Questions";
        QuestionsHTMLTable += "</td>";
        QuestionsHTMLTable += "</tr>";

        ViewState["HighestOrder"] = 0;
      }
      QuestionsHTMLTable += "</table>";
      LabelQuestionsTable.Text = QuestionsHTMLTable;
    }

    protected void RadioButtonListOmit_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (Question.Text == string.Empty)
          throw new ApplicationException("You need to select a question before you can change its status.");

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        string UpdateSQL = "UPDATE Questions SET "
          + " IsQuestionOmit =" + EditRadioButtonListOmit()
          + " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        db.ExecuteSql(UpdateSQL);
        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") will be omitted on all pages.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void RadiobuttonlistDelete_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (Question.Text == string.Empty)
          throw new ApplicationException("You need to select a question before you can change its status.");

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        //string UpdateSQL = "UPDATE Questions SET "
        //  + " xIsQuestionTagForDeletion =" + EditIsRadiobuttonlistDelete()
        //  + " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        //db.ExecuteSQL(UpdateSQL);
        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") is tagged for deletion.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void ButtonUpdate_Click1(object sender, EventArgs e)
    {
      try
      {
        #region Check TextBoxes for Illegal Stuff
        db.Throw_Exception_TextBox_Script(QuestionOrder);
        db.Throw_Exception_TextBox_Html(QuestionOrder);

        db.Throw_Exception_TextBox_Script(Question);
        db.Throw_Exception_TextBox_Html(Question);

        #endregion Check TextBoxes for Illegal Stuff

        #region Edit Checks for Add and Update
        CheckOrder();
        CheckQuestion();
        #endregion

        #region Remove Issue.aspx cached pages for the Issue
        #region commented out
        //switch (ViewState["IssueLevel"].ToString())
        //{
        //  case db.AllOffices:
        //  //Reasons & Objectives remove all pages with an IssueKey = ALLPersonal
        //    db.Cache_RemoveIssuePages4IssueLevel(ViewState["IssueLevel"].ToString());
        //    break;
        //  case db.NationalOffices:
        //    break;
        //  case db.StateOffices:
        //    break;
        //  case db.CountyOffices://not implemented
        //    break;
        //}
        #endregion
        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());
        #endregion

        #region Update QUESTION
        string UpdateSQL = "UPDATE Questions SET "
          + " Question = " + db.SQLLit(Question.Text.Trim())
          + ",QuestionOrder = " + db.SQLLit(QuestionOrder.Text.Trim())
          //+ ",IsQuestionOmit =" + EditRadioButtonListOmit()
          //+ ",xIsQuestionTagForDeletion =" + EditIsRadiobuttonlistDelete()
          + "   WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        db.ExecuteSql(UpdateSQL);
        #endregion

        ClearControls();

        ButtonUpdate.Visible = false;
        ButtonClear.Visible = true;
        ButtonAdd.Visible = true;

        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") was UPDATED.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonClear_Click(object sender, EventArgs e)
    {
      try
      {
        ClearControls();
        ButtonUpdate.Visible = false;
        ButtonAdd.Visible = true;
        Msg.Text = db.Msg("Enter a question to Add. The Order is optional.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonAdd_Click1(object sender, EventArgs e)
    {
      try
      {
        #region Check TextBoxes for Illegal Stuff
        db.Throw_Exception_TextBox_Script(QuestionOrder);
        db.Throw_Exception_TextBox_Html(QuestionOrder);

        db.Throw_Exception_TextBox_Script(Question);
        db.Throw_Exception_TextBox_Html(Question);

        #endregion Check TextBoxes for Illegal Stuff

        #region Edit Checks for Add and Update
        CheckOrder();
        CheckQuestion();
        CheckQuestionNotExist();
        #endregion

        ViewState["QuestionKey"] = ViewState["IssueKey"].ToString() + db.MakeUnique6Digits();

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        #region Add the Question
        string InsertSQL = "INSERT INTO Questions ("
          + "QuestionKey"
          + ",IssueKey"
          + ",Question"
          //+ ",AnswerLines"
          + ",QuestionOrder"
          + ")"
          + " VALUES("
          + db.SQLLit(ViewState["QuestionKey"].ToString())
          + "," + db.SQLLit(ViewState["IssueKey"].ToString())
          + "," + db.SQLLit(Question.Text.ReplaceNewLinesWithEmptyString())
          //+ ",20"
          + "," + QuestionOrder.Text.ToString()
          + ")";
        db.ExecuteSql(InsertSQL);
        #endregion

        ClearControls();

        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") was ADDED.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonRenumber_Click1(object sender, EventArgs e)
    {
      try
      {
        DataTable QuestionsTable = db.Table(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));
        if (QuestionsTable.Rows.Count > 0)
        {
          int Count = 10;
          foreach (DataRow QuestionRow in QuestionsTable.Rows)
          {
            string UpdateSQL = "UPDATE Questions SET "
              + " QuestionOrder = " + Count.ToString()
              + " WHERE QuestionKey= " + db.SQLLit(QuestionRow["QuestionKey"].ToString());
            db.ExecuteSql(UpdateSQL);
            Count += 10;
          }
        }

        ShowQuestions();
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonMoveQuestion_Click1(object sender, EventArgs e)
    {
      //Response.Redirect("/Admin/QuestionAnswers.aspx"
      //  + "?IssueLevel=" + ViewState["IssueLevel"].ToString()
      //  + "&Group=" + ViewState["IssuesGroup"].ToString()
      //  );
      Response.Redirect(db.Url_Admin_QuestionAnswers(
        ViewState["IssueLevel"].ToString()
      , ViewState["IssuesGroup"].ToString()));
    }
    protected void ButtonDeleteTaggedQuestions_Click1(object sender, EventArgs e)
    {
      try
      {
        DataTable Questions2DeleteTable = db.Table(sql.Question4Issue2Delete(
            ViewState["IssueKey"].ToString()));
        foreach (DataRow Question2DeleteRow in Questions2DeleteTable.Rows)
        {
          Check4Answers(Question2DeleteRow["QuestionKey"].ToString());
          string SQL = "DELETE FROM Questions WHERE QuestionKey = "
            + db.SQLLit(Question2DeleteRow["QuestionKey"].ToString());
          db.ExecuteSql(SQL);
        }
        ShowQuestions();
        Msg.Text = db.Ok("All questions tagged for deletion have been physically deleted in the database.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      if (!IsPostBack)
      {
        #region Security Check and Values for ViewState["StateCode"] ViewState["CountyCode"] ViewState["LocalCode"]

        ViewState["StateCode"] = db.State_Code();
        ViewState["CountyCode"] = db.County_Code();
        ViewState["LocalCode"] = db.Local_Code();
        if (!db.Is_User_Security_Ok())
          SecurePage.HandleSecurityException();

        #endregion Security Check and Values for ViewState["StateCode"] ViewState["CountyCode"] ViewState["LocalCode"]

        #region ViewState Values
        ViewState["IssueLevel"] = string.Empty;// A = All Offices, B = National Issues, C = State Issues
        ViewState["IssuesGroup"] = string.Empty;//Level A = LL - indicating all politicians; Level B = US; Level C and higher = StateCode
        ViewState["IssueKey"] = string.Empty;
        ViewState["QuestionKey"] = string.Empty;

        #region ViewState["IssuesGroup"] ViewState["IssueKey"] ViewState["IssueLevel"] ViewState["QuestionKey"] QueryString
        if (!string.IsNullOrEmpty(GetQueryString("Group")))
          ViewState["IssuesGroup"] = GetQueryString("Group");

        if (!string.IsNullOrEmpty(QueryIssue))
        {
          ViewState["IssueKey"] = QueryIssue;
          ViewState["IssueLevel"] = db.Issues_Str(ViewState["IssueKey"].ToString(), "IssueLevel");
        }

        if (!string.IsNullOrEmpty(QueryQuestion))
          ViewState["QuestionKey"] = QueryQuestion;
        #endregion
        #endregion ViewState Values

        #region Additional Security Checks
        if (
          (ViewState["IssuesGroup"].ToString() == string.Empty)
          || (ViewState["IssueKey"].ToString() == string.Empty)
          )
          HandleFatalError("The IssueGroup and/or IssueKey is missing");
        #endregion Security Checks

        try
        {
          #region Page Title
          //PageTitle.Text = db.Issues_Str(ViewState["IssueKey"].ToString(), "Issue") + " QUESTIONS";
          //if (ViewState["IssueLevel"].ToString() == "A")
          //  PageTitle.Text += "<br>for ALL Offices";
          //else if (ViewState["IssueLevel"].ToString() == "B")
          //  PageTitle.Text += "<br>for ALL NATIONAL Offices";
          //else if (ViewState["IssueLevel"].ToString() == "c")
          //  PageTitle.Text += "<br>for " + db.States_Str(ViewState["IssuesGroup"].ToString(), "State") + " Offices";
          #endregion

          PageTitle.Text = db.PageTitle4Questions(ViewState["IssuesGroup"].ToString()
            , ViewState["IssueKey"].ToString()
            , ViewState["IssueLevel"].ToString());

          HyperLinkReport.NavigateUrl = db.Url_Admin_IssuesReport(
            ViewState["IssueLevel"].ToString()
          , ViewState["IssuesGroup"].ToString());



          if ((ViewState["QuestionKey"] as string) == string.Empty)
          {
            #region From: /Admin/Issues.aspx
            ClearControls();
            ButtonUpdate.Visible = false;
            #endregion
          }
          else
          {
            #region From: Table of Questions at bottom of this page
            LoadControls();
            Msg.Text = db.Msg("You can now either: (1) change the Order or Question"
              + " and click Update"
              + " or (2) chage the Status by clicking a radio button"
            + " or (3) click Clear to clear the order and topic question in preparation to Add a Question.");

            ButtonUpdate.Visible = true;
            ButtonAdd.Visible = false;
            #endregion
          }

          ShowQuestions();
        }
        catch (Exception ex)
        {
          #region
          Msg.Text = db.Fail(ex.Message);
          db.Log_Error_Admin(ex);
          #endregion
        }
      }
    }

    #region Dead code


    //private string EditIsRadiobuttonlistDelete()
    //{
    //  if (RadiobuttonlistDelete.SelectedValue == "Yes")
    //    return "1";
    //  else
    //    return "0";
    //}

    //protected void Page_PreRender(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (Session["ErrNavBarAdmin"].ToString() != string.Empty)
    //      Msg.Text = db.Fail(Session["ErrNavBarAdmin"].ToString());
    //  }
    //  catch /*(Exception ex)*/
    //  {
    //  }
    //}

    #endregion Dead code


  }
}
