using System;
using System.Data;
using DB.Vote;

namespace Vote.Master
{
  public partial class DefaultPage : SecurePage
  {

    protected void RadiobuttonlistTestMode_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (RadiobuttonlistTestMode.SelectedValue == "T")
        {
          db.Master_Update_Bool("IsTestMode", true);
          Msg.Text = db.Msg("Test Mode have been set ON.");
        }
        else
        {
          db.Master_Update_Bool("IsTestMode", false);
          Msg.Text = db.Msg("Test Mode have been set OFF.");
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void RadioButtonListPermitElectionDeletions_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        //if (db.User_Name().ToLower() == "ron")
        if (SecurePage.IsSuperUser)
        {
          if (RadioButtonListPermitElectionDeletions.SelectedValue == "T")
          {
            db.Master_Update_Bool("IsElectionDeletionPermitted", true);
            Msg.Text = db.Msg("Elections can now be deleted. After deleting an election remember to reset the radio button.");
          }
          else
          {
            db.Master_Update_Bool("IsElectionDeletionPermitted", false);
            Msg.Text = db.Msg("Deletion of Elections will now NOT BE PERMITTED.");
          }
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonCleanElections_Click1(object sender, EventArgs e)
    {
      try
      {
        //ElectionsPoliticians Clean up - delete all rows without a cooresponding row in Offices and Politicians Tables
        Response.Write("<br>ElectionsPoliticians rows deleted because no Politician or Office Row(s) in Politicians and offices Table for: ");
        string SQL = "SELECT ElectionKey,PoliticianKey,OfficeKey FROM ElectionsPoliticians ORDER BY ElectionKey DESC, PoliticianKey,OfficeKey, OrderOnBallot";
        DataTable ElectionsPoliticiansTable = db.Table(SQL);
        foreach (DataRow ElectionsPoliticiansRowA in ElectionsPoliticiansTable.Rows)
        {
          int Rows = db.Rows("Politicians", "PoliticianKey", ElectionsPoliticiansRowA["PoliticianKey"].ToString());
          if (Rows != 1)
          {
            SQL = "DELETE FROM ElectionsPoliticians"
              + " WHERE ElectionKey = " + db.SQLLit(ElectionsPoliticiansRowA["ElectionKey"].ToString())
              + " AND PoliticianKey = " + db.SQLLit(ElectionsPoliticiansRowA["PoliticianKey"].ToString());
            db.ExecuteSQL(SQL);
            Response.Write("<br>" + ElectionsPoliticiansRowA["ElectionKey"].ToString() + " / " + ElectionsPoliticiansRowA["PoliticianKey"].ToString());
          }
          Rows = db.Rows("Offices", "OfficeKey", ElectionsPoliticiansRowA["OfficeKey"].ToString());
          if (Rows != 1)
          {
            SQL = "DELETE FROM ElectionsPoliticians"
              + " WHERE ElectionKey = " + db.SQLLit(ElectionsPoliticiansRowA["ElectionKey"].ToString())
              + " AND OfficeKey = " + db.SQLLit(ElectionsPoliticiansRowA["OfficeKey"].ToString());
            db.ExecuteSQL(SQL);
            Response.Write("<br>" + ElectionsPoliticiansRowA["ElectionKey"].ToString() + " / " + ElectionsPoliticiansRowA["OfficeKey"].ToString());
          }
        }
        //ElectionsOffices Clean up
        Response.Write("<br><br>ElectionsOffices rows deleted because no Office Row(s) in Offices Table for following Election/OfficeKeys: ");
        SQL = "SELECT ElectionKey,OfficeKey FROM ElectionsOffices ORDER BY ElectionKey DESC,OfficeKey";
        DataTable ElectionsOfficesTable = db.Table(SQL);
        foreach (DataRow ElectionsOfficesRowA in ElectionsOfficesTable.Rows)
        {
          int Rows = db.Rows("Offices", "OfficeKey", ElectionsOfficesRowA["OfficeKey"].ToString());
          if (Rows != 1)
          {
            SQL = "DELETE FROM ElectionsOffices"
              + " WHERE ElectionKey = " + db.SQLLit(ElectionsOfficesRowA["ElectionKey"].ToString())
              + " AND OfficeKey = " + db.SQLLit(ElectionsOfficesRowA["OfficeKey"].ToString());
            db.ExecuteSQL(SQL);
            Response.Write("<br>" + ElectionsOfficesRowA["ElectionKey"].ToString() + " / " + ElectionsOfficesRowA["OfficeKey"].ToString());
          }
        }
        Msg.Text = db.Ok("Done!");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonRestructure_Click1(object sender, EventArgs e)
    {
      string SQL = string.Empty;
      string SQLUPDATE = string.Empty;
      string SQLDELETE = string.Empty;
      string ElectionKey = string.Empty;
      string NewElectionKey = string.Empty;
      string ElectionKey_Federal = string.Empty;
      //int Office_Class = 0;
      try
      {
        Server.ScriptTimeout = 6000;//6000 sec = 100 min

        //			ElectionsOffices Changes
        #region 1) Delete level 1-3 Offices with StateCode in ElectionKey
#if false
          SQL = "SELECT * FROM ElectionsOffices";
          Office_Class = 0;
          string StateCodeInKey = string.Empty;
          DataTable ElectionsOfficesTable = db.Table(SQL);
          foreach (DataRow ElectionOfficeRow in ElectionsOfficesTable.Rows)
          {
            Office_Class = db.Office_Class(ElectionOfficeRow["OfficeKey"].ToString());
            if (Office_Class <= 3)
            {
              StateCodeInKey = ElectionOfficeRow["ElectionKey"].ToString().Substring(9, 2).ToUpper();
              if (
                (StateCodeInKey == ElectionOfficeRow["StateCode"].ToString())
                && (ElectionOfficeRow["StateCode"].ToString() != "U1")
                )
              {
                SQLDELETE = "DELETE FROM ElectionsOffices"
                  + " WHERE ElectionKey = " + db.SQLLit(ElectionOfficeRow["ElectionKey"].ToString())
                  + " AND OfficeKey = " + db.SQLLit(ElectionOfficeRow["OfficeKey"].ToString());
                db.ExecuteSQL(SQLDELETE);
              }
            }
          }
          Msg.Text += "Done 1) Delete level 1-3 Offices with StateCode in ElectionKey";
#endif
        #endregion

        #region 2) Change all ElectionKey to replace any U1-U6 with StateCode -&- Copy ElectionKey to ElectionKey4USReports but Change all ElectionKey4USReports to replace StateCode with U1-U6
#if false
          Office_Class = 0;
          SQL = "SELECT * FROM ElectionsOffices";
          DataTable ElectionsOfficesTable = db.Table(SQL);
          foreach (DataRow ElectionOfficeRow in ElectionsOfficesTable.Rows)
          {
            Office_Class = db.Office_Class(ElectionOfficeRow["OfficeKey"].ToString());
            NewElectionKey = db.ElectionKey_State(ElectionOfficeRow["ElectionKey"].ToString(), ElectionOfficeRow["StateCode"].ToString());
            ElectionKey_Federal = NewElectionKey;
            ElectionKey_Federal = ElectionKey_Federal.Remove(9, 2);//StateCode
            ElectionKey_Federal = ElectionKey_Federal.Insert(9, "U");
            ElectionKey_Federal = ElectionKey_Federal.Insert(10, Office_Class.ToString());
            SQLUPDATE = "UPDATE ElectionsOffices "
              + " SET ElectionKey = " + db.SQLLit(NewElectionKey)
              + ",ElectionKeyFederal = " + db.SQLLit(ElectionKey_Federal)
              + " WHERE ElectionKey = " + db.SQLLit(ElectionOfficeRow["ElectionKey"].ToString())
              + " AND OfficeKey = " + db.SQLLit(ElectionOfficeRow["OfficeKey"].ToString());
            db.ExecuteSQL(SQLUPDATE);
          }
          Msg.Text += "<br>Done 2) Change all ElectionKey to replace any U1-U6 with StateCode -&- Copy ElectionKey to ElectionKey4USReports but Change all ElectionKey4USReports to replace StateCode with U1-U6";
#endif
        #endregion


        //ElectionsPoliticians Changes
        #region 3) Change all ElectionKey to replace any U1-U6 with StateCode -&&- Copy ElectionKey to ElectionKey4USReports  but Change all ElectionKey4USReports to replace StateCode with U1-U6
#if false
          Office_Class = 0;
          SQL = "SELECT * FROM ElectionsPoliticians";
          DataTable ElectionsPoliticiansTable = db.Table(SQL);
          foreach (DataRow ElectionPoliticianRow in ElectionsPoliticiansTable.Rows)
          {
            Office_Class = db.Office_Class(ElectionPoliticianRow["OfficeKey"].ToString());
            NewElectionKey = db.ElectionKey_State(ElectionPoliticianRow["ElectionKey"].ToString(), ElectionPoliticianRow["StateCode"].ToString());
            ElectionKey_Federal = NewElectionKey;
            ElectionKey_Federal = ElectionKey_Federal.Remove(9, 2);//StateCode
            ElectionKey_Federal = ElectionKey_Federal.Insert(9, "U");
            ElectionKey_Federal = ElectionKey_Federal.Insert(10, Office_Class.ToString());
            SQLUPDATE = "UPDATE ElectionsPoliticians "
              + " SET ElectionKey = " + db.SQLLit(NewElectionKey)
              + ",ElectionKeyFederal = " + db.SQLLit(ElectionKey_Federal)
              + " WHERE ElectionKey = " + db.SQLLit(ElectionPoliticianRow["ElectionKey"].ToString())
              + " AND OfficeKey = " + db.SQLLit(ElectionPoliticianRow["OfficeKey"].ToString())
              + " AND PoliticianKey = " + db.SQLLit(ElectionPoliticianRow["PoliticianKey"].ToString());
            db.ExecuteSQL(SQLUPDATE);
          }
          Msg.Text += "<br>Done 3) Change all ElectionKey to replace any U1-U6 with StateCode -&&- Copy ElectionKey to ElectionKey4USReports  but Change all ElectionKey4USReports to replace StateCode with U1-U6";
#endif
        #endregion

      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message
          + "<br>" + SQLUPDATE);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonClearDebugFile_Click(object sender, EventArgs e)
    {
      try
      {
        //string SQL = "TRUNCATE TABLE LogDebug";
        //db.ExecuteSQL(SQL);
        DB.VoteLog.LogDebug.TruncateTable();

        Msg.Text = db.Ok(@"LogDebug Table was truncated.");

      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void RadioButtonListDebugMode_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (RadioButtonListDebugMode.SelectedValue == "T")
        {
          db.Master_Update_Bool("IsDebugMode", true);
          Msg.Text = db.Msg("Debug Mode have been set ON.");
        }
        else
        {
          db.Master_Update_Bool("IsDebugMode", false);
          Msg.Text = db.Msg("Debug Mode have been set OFF.");
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonCleanData_Click(object sender, EventArgs e)
    {
      try
      {
        Server.ScriptTimeout = 60000;// = 1000 min = 16 hrs
        string SQL = string.Empty;

        #region Offices Table
        SQL = "UPDATE Offices set DistrictCode = '' WHERE LTRIM(DistrictCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Offices set DistrictCodeAlpha = '' WHERE LTRIM(DistrictCodeAlpha) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Offices set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Offices set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion Offices Table

        #region OfficesOfficials Table
        SQL = "UPDATE OfficesOfficials set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE OfficesOfficials set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion OfficesOfficials Table

        #region Elections Table
        SQL = "UPDATE Elections set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Elections set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion Elections Table

        #region ElectionsOffices Table
        SQL = "UPDATE ElectionsOffices set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE ElectionsOffices set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion ElectionsOffices Table

        #region Ballots Table
        SQL = "UPDATE Ballots set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion Ballots Table

        #region Issues Table
        SQL = "UPDATE Issues set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Issues set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion Issues Table

        #region JudicialDistrictCounties Table
        SQL = "UPDATE JudicialDistrictCounties set DistrictCode = '' WHERE LTRIM(DistrictCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE JudicialDistrictCounties set DistrictCodeAlpha = '' WHERE LTRIM(DistrictCodeAlpha) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE JudicialDistrictCounties set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion JudicialDistrictCounties Table

        #region Referendums Table
        SQL = "UPDATE Referendums set CountyCode = '' WHERE LTRIM(CountyCode) = ''";
        db.ExecuteSQL(SQL);

        SQL = "UPDATE Referendums set LocalCode = '' WHERE LTRIM(LocalCode) = ''";
        db.ExecuteSQL(SQL);
        #endregion Referendums Table

        Msg.Text = db.Ok("Done");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonOneShot_Click(object sender, EventArgs e)
    {
      try
      {

        //foreach (string stateCode in StateCache.All51StateCodes)
        //{
        //  string electionKeyMostRecent = db.ElectionKey_Previous_Most_Recent(stateCode);
        //  string sql = string.Empty;
        //  sql += " select PoliticianKey,OfficeKey from ElectionsPoliticians";
        //  sql += " where ElectionKey = " + db.SQLLit(electionKeyMostRecent);
        //  sql += " order by OfficeKey asc";
        //  DataTable tableElectionsPoliticians = db.Table(sql);
        //  foreach (DataRow rowElectionsPoliticians in tableElectionsPoliticians.Rows)
        //  //DataRow rowElectionsPoliticians = db.Row_First(sql);
        //  {
        //    if(db.Is_Incumbent(rowElectionsPoliticians["PoliticianKey"].ToString(),
        //      rowElectionsPoliticians["OfficeKey"].ToString()))
        //    {
        //      db.ElectionsPoliticians_Update_Bool(
        //        electionKeyMostRecent,
        //        rowElectionsPoliticians["OfficeKey"].ToString(),
        //        rowElectionsPoliticians["PoliticianKey"].ToString(),
        //        "IsIncumbent",
        //        true
        //        );
        //    }
        //      else
        //    {
        //      db.ElectionsPoliticians_Update_Bool(
        //        electionKeyMostRecent,
        //        rowElectionsPoliticians["OfficeKey"].ToString(),
        //        rowElectionsPoliticians["PoliticianKey"].ToString(),
        //        "IsIncumbent",
        //        false
        //        );
        //    }
        //  }

        //  Msg.Text = db.Ok("<br>Done");
        //}
      }
      catch (Exception ex)
      {
        #region

        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonCleanCodes_Click(object sender, EventArgs e)
    {
      try
      {
        Server.ScriptTimeout = 60000;// = 1000 min = 16 hrs
        string SQL = string.Empty;

        SQL = "update offices set countycode = '',localdistrictcode = '' where officelevel >= 0 AND officelevel <= 7";
        db.ExecuteSQL(SQL);

        SQL = "update offices set localdistrictcode = '' where officelevel >= 8 AND officelevel <= 11";
        db.ExecuteSQL(SQL);

        SQL = "update offices set countycode = '' ,localdistrictcode = '' where officelevel >= 16 AND officelevel <= 17";
        db.ExecuteSQL(SQL);

        SQL = "update offices set localdistrictcode = '' where officelevel =18 ";
        db.ExecuteSQL(SQL);

        SQL = "update offices set countycode = '' ,localdistrictcode = '' where officelevel >= 20 AND officelevel <= 21";
        db.ExecuteSQL(SQL);

        SQL = "update offices set localdistrictcode = '' where officelevel =22 ";
        db.ExecuteSQL(SQL);

        Msg.Text = db.Ok("Done");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonDeletePolitician_Click(object sender, EventArgs e)
    {
      try
      {
        db.Throw_Exception_TextBox_Html_Or_Script(TextBoxDeletePoliticianKey);

        db.Politician_Delete(TextBoxDeletePoliticianKey.Text.Trim());

        Msg.Text = db.Ok("Politician with PoliticianKey: "
          + TextBoxDeletePoliticianKey.Text.Trim()
        + " was deleted in all tables.");

        TextBoxDeletePoliticianKey.Text = string.Empty;
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonEditPolitician_Click(object sender, EventArgs e)
    {
      try
      {
        db.Throw_Exception_TextBox_Html_Or_Script(TextBoxEditPoliticianKey);
        if (!Politicians.IsValid(TextBoxEditPoliticianKey.Text.Trim()))
          throw new ApplicationException("The PoliticianKey is invalid");

        HyperLinkEditPolitician.Enabled = true;
        HyperLinkEditPolitician.NavigateUrl =
          db.Url_Politician_Intro(TextBoxEditPoliticianKey.Text.Trim());
        HyperLinkEditPolitician.Text = "Edit "
          + Politicians.GetFormattedName(TextBoxEditPoliticianKey.Text.Trim());

        Msg.Text = db.Msg("Click the link in the Politician(s) Maintenace Section to edit "
          + Politicians.GetFormattedName(TextBoxEditPoliticianKey.Text.Trim()));

        //can't use because target needs to be _edit
        //Response.Redirect(db.Url_Politician_Intro(TextBoxEditPoliticianKey.Text.Trim()));

      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonDeleteBadPoliticianRows_Click(object sender, EventArgs e)
    {
      try
      {
        int count = 0;
        DataTable PoliticiansTable = db.Table("SELECT * from Politicians");
        foreach (DataRow PoliticianRow in PoliticiansTable.Rows)
        {
          string politicianKey = PoliticianRow["PoliticianKey"].ToString();
          //string sql = string.Empty;
          //sql =
          //"Select Count(*) FROM Offices"
          //+ " WHERE OfficeKey =" + db.SQLLit(PoliticianRow["OfficeKey"].ToString());

          //if (db.Rows_Sql
          //  (
          //    "Select Count(*) FROM Offices"
          //    + " WHERE OfficeKey =" + db.SQLLit(PoliticianRow["OfficeKey"].ToString())
          //  ) == 0)
          string officeKey = PageCache.Politicians.GetOfficeKey(politicianKey);
          if (db.Rows("Offices", "OfficeKey", officeKey) == 0)
          {
            db.Politician_Delete(politicianKey);
            count++;
          }
        }

        Msg.Text = db.Ok(count.ToString() + " Politicians Deleted.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
 
    protected void ButtonDeleteOffice_Click(object sender, EventArgs e)
    {
      try
      {
        string sql_delete = string.Empty;
        string sql_count = string.Empty;
        string Msg_Return = string.Empty;
        string OfficeKey = TextBoxOfficeKey.Text.Trim();
        OfficeClass Office_Class = Offices.GetOfficeClass(OfficeKey);
        if (TextBoxOfficeKey.Text.Trim() == string.Empty)
        {
          throw new ApplicationException("The OfficeKey textbox is empty.");
        }
        if (!Offices.CanAddOfficesToOfficeClass(OfficeKey))
        {
          throw new ApplicationException("This office is not allowed to be deleted.");
        }
        //sql_count = "SELECT COUNT(*) FROM Offices WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        Msg_Return += "<br>"
          + db.Rows("Offices", "OfficeKey", OfficeKey).ToString()
          + " Offices Rows deleted.";

        sql_delete = "DELETE FROM Offices WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        db.ExecuteSQL(sql_delete);
        //---------

        //sql_count = "SELECT COUNT(*) FROM OfficesOfficials WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        Msg_Return += "<br>"
          + db.Rows("OfficesOfficials", "OfficeKey", OfficeKey).ToString()
          + " OfficesOfficials Rows deleted.";

        sql_delete = "DELETE FROM OfficesOfficials WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        db.ExecuteSQL(sql_delete);
        //---------

        //sql_count = "SELECT COUNT(*) FROM ElectionsOffices WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        Msg_Return += "<br>"
          + db.Rows("ElectionsOffices", "OfficeKey", OfficeKey).ToString()
          + " ElectionsOffices Rows deleted.";

        sql_delete = "DELETE FROM ElectionsOffices WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        db.ExecuteSQL(sql_delete);
        //---------

        //sql_count = "SELECT COUNT(*) FROM ElectionsPoliticians WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        Msg_Return += "<br>"
          + db.Rows("ElectionsPoliticians", "OfficeKey", OfficeKey).ToString()
          + " ElectionsPoliticians Rows deleted.";

        sql_delete = "DELETE FROM ElectionsPoliticians WHERE OfficeKey = " + db.SQLLit(OfficeKey);
        db.ExecuteSQL(sql_delete);


        Msg.Text = db.Ok(Msg_Return);
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }
    protected void RadioButtonListMasterControls_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (RadioButtonListMasterControls.SelectedValue == "T")
        {
          db.Master_Update_Bool("IsMasterControlsVisible", true);
          Msg.Text = db.Msg("Master Form Controls are set VISIBLE.");
        }
        else
        {
          db.Master_Update_Bool("IsMasterControlsVisible", false);
          Msg.Text = db.Msg("Master Form Controls are set NOT VISIBLE.");
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void RadioButtonList_Zip_Lookup_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (RadioButtonList_Zip_Lookup.SelectedValue == "T")
        {
          db.Master_Update_Bool("IsZipLookupUseDbTables", true);
          Msg.Text = db.Msg("Internally developed database tables will be used"
          + " to convert addresses into legislative districts.");
        }
        else
        {
          db.Master_Update_Bool("IsZipLookupUseDbTables", false);
          Msg.Text = db.Msg("LDS API will be used"
          + " to convert addresses into legislative districts.");
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonBadPoliticianOfficeKeys_Click(object sender, EventArgs e)
    {
      try
      {
        string sqlText = "SELECT * FROM Politicians";
        DataTable politiciansTable = db.Table(sqlText);
        foreach (DataRow politicianRow in politiciansTable.Rows)
        {
          string politicianKey = politicianRow["PoliticianKey"].ToString();
          string officeKey =
            PageCache.Politicians.GetOfficeKey(politicianKey);
          string sql_Office = "SELECT OfficeKey FROM Offices"
          + " WHERE OfficeKey=" + db.SQLLit(officeKey);
          DataRow officeRow = db.Row_Optional(sql_Office);
          if (officeRow == null)
          {
            #region commented replaced
            //string sql_delete = "DELETE FROM Politicians WHERE PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            //sql_delete = "DELETE FROM PoliticiansCommittees WHERE PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            //sql_delete = "DELETE FROM Answers WHERE PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            //sql_delete = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            //sql_delete = "DELETE FROM OfficesOfficials WHERE PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            //db.Invalidate_Politician(PoliticianRow["PoliticianKey"].ToString());
            //db.Cache_Remove_PoliticianIssue_Politician(PoliticianRow["PoliticianKey"].ToString());
            #endregion commented replaced
            db.Politician_Delete_All_Tables_All_Rows(politicianKey);

            Msg.Text += "<br>Politician for: " + politicianKey
            + " rows deleted in: Politicians, Answers,ElectionsPoliticians";
          }
        }
        Msg.Text = db.Ok("Done" + Msg.Text);
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void Button_Delete_Politicians_Report_Click(object sender, EventArgs e)
    {
      try
      {
        int count = 0;
        string politiciansList = string.Empty;
        string sqlText = "SELECT * FROM Politicians";
        DataTable politiciansTable = db.Table(sqlText);
        foreach (DataRow politicianRow in politiciansTable.Rows)
        {
          string politicianKey = politicianRow["PoliticianKey"].ToString();
          string officeKey =
            PageCache.Politicians.GetOfficeKey(politicianKey);
          string sqlOfficeText = "SELECT OfficeKey FROM Offices"
          + " WHERE OfficeKey=" + db.SQLLit(officeKey);
          DataRow officeRow = db.Row_Optional(sqlOfficeText);
          if (officeRow == null)
          {
            politiciansList += "<br>Politician in Politicians Table for PoliticianKey: "
              + politicianKey
              + " has no Office Row for OfficeKey: "
              + officeKey;
            count++;
          }
        }
        Msg.Text = db.Msg(politiciansList
          + "<br>Politicians to be deleted:" + count.ToString());
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    #region Bulk Updates of Election Reports

    #region Set Elections Reports Not Current

    #region Current Elections
    //protected void ButtonNotCurrentElectionsUS_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode = 'U1')";
    //    SQL += " OR (Elections.StateCode = 'U2')";
    //    SQL += " OR (Elections.StateCode = 'U3')";
    //    SQL += " OR (Elections.StateCode = 'U4'))";
    //    SQL += " AND Elections.ElectionDate >= " + db.SQLLit(Db.DbToday);

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }

    //    Msg.Text = db.Ok("All US President, US Senate & US House Upcoming Election reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentElectionsStates_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode <> 'U1')";
    //    SQL += " OR (Elections.StateCode <> 'U2')";
    //    SQL += " OR (Elections.StateCode <> 'U3')";
    //    SQL += " OR (Elections.StateCode <> 'U4'))";
    //    SQL += " AND Elections.ElectionDate >= " + db.SQLLit(Db.DbToday);
    //    SQL += " AND Elections.CountyCode = ''";

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }
    //    Msg.Text = db.Ok("All reports of Upcoming Elections for all 51 States were set as not current.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail("All the State Reports. " + ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentElectionsCounties_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    try
    //    {
    //      string SQL = string.Empty;
    //      SQL += " SELECT Elections.ElectionKey";
    //      SQL += " FROM Elections,ReportsElections";
    //      SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //      SQL += " AND ((Elections.StateCode <> 'U1')";
    //      SQL += " OR (Elections.StateCode <> 'U2')";
    //      SQL += " OR (Elections.StateCode <> 'U3')";
    //      SQL += " OR (Elections.StateCode <> 'U4'))";
    //      SQL += " AND Elections.ElectionDate >= " + db.SQLLit(Db.DbToday);
    //      SQL += " AND Elections.CountyCode <> ''";
    //      SQL += " AND Elections.LocalCode = ''";

    //      DataTable ElectionsTable = db.Table(SQL);
    //      foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //      {
    //        db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //      }
    //      Msg.Text = db.Ok("ElectionReport.aspx Pages for Upcoming Elections for All Counties in the 50 States have been set to NOT CURRENT!");
    //    }
    //    catch (Exception ex)
    //    {
    //      #region
    //      Msg.Text = db.Fail("All the State Reports. " + ex.Message);
    //      db.Log_Error_Admin(ex);
    //      #endregion
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentUpcomingElectionsLocals_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    try
    //    {
    //      string SQL = string.Empty;
    //      SQL += " SELECT Elections.ElectionKey";
    //      SQL += " FROM Elections,ReportsElections";
    //      SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //      SQL += " AND ((Elections.StateCode <> 'U1')";
    //      SQL += " OR (Elections.StateCode <> 'U2')";
    //      SQL += " OR (Elections.StateCode <> 'U3')";
    //      SQL += " OR (Elections.StateCode <> 'U4'))";
    //      SQL += " AND Elections.ElectionDate >= " + db.SQLLit(Db.DbToday);
    //      SQL += " AND Elections.CountyCode <> ''";
    //      SQL += " AND Elections.LocalCode <> ''";

    //      DataTable ElectionsTable = db.Table(SQL);
    //      foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //      {
    //        db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //      }
    //      Msg.Text = db.Ok("ElectionReport.aspx Pages for Upcoming Elections for All Locals in the 51 States have been set to NOT CURRENT!");
    //    }
    //    catch (Exception ex)
    //    {
    //      #region
    //      Msg.Text = db.Fail("All the State Reports. " + ex.Message);
    //      db.Log_Error_Admin(ex);
    //      #endregion
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    #endregion Current Elections

    #region Previous Elections
    //protected void ButtonNotCurrentPreviousElectionsUS_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode = 'U1')";
    //    SQL += " OR (Elections.StateCode = 'U2')";
    //    SQL += " OR (Elections.StateCode = 'U3')";
    //    SQL += " OR (Elections.StateCode = 'U4'))";
    //    SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }

    //    Msg.Text = db.Ok("All US President, US Senate & US House Previous Election reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentPreviousElectionsStates_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode <> 'U1')";
    //    SQL += " OR (Elections.StateCode <> 'U2')";
    //    SQL += " OR (Elections.StateCode <> 'U3')";
    //    SQL += " OR (Elections.StateCode <> 'U4'))";
    //    SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);
    //    SQL += " AND Elections.CountyCode = ''";

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }
    //    Msg.Text = db.Ok("All reports of Previous Elections for all 51 States were set as not current.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail("All the State Reports. " + ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentPreviousElectionsCounties_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode <> 'U1')";
    //    SQL += " OR (Elections.StateCode <> 'U2')";
    //    SQL += " OR (Elections.StateCode <> 'U3')";
    //    SQL += " OR (Elections.StateCode <> 'U4'))";
    //    SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);
    //    SQL += " AND Elections.CountyCode <> ''";
    //    SQL += " AND Elections.LocalCode = ''";

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }
    //    Msg.Text = db.Ok("ElectionReport.aspx Pages for Previous Elections for All Counties in the 50 States have been set to NOT CURRENT!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentPreviousElectionsLocals_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT Elections.ElectionKey";
    //    SQL += " FROM Elections,ReportsElections";
    //    SQL += " WHERE Elections.ElectionKey = ReportsElections.ElectionKey";
    //    SQL += " AND ((Elections.StateCode <> 'U1')";
    //    SQL += " OR (Elections.StateCode <> 'U2')";
    //    SQL += " OR (Elections.StateCode <> 'U3')";
    //    SQL += " OR (Elections.StateCode <> 'U4'))";
    //    SQL += " AND Elections.ElectionDate < " + db.SQLLit(Db.DbToday);
    //    SQL += " AND Elections.CountyCode <> ''";
    //    SQL += " AND Elections.LocalCode <> ''";

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //    {
    //      db.ReportsElections_Update_Bool(ElectionsRow["ElectionKey"].ToString(), "IsReportCurrent", false);
    //    }
    //    Msg.Text = db.Ok("ElectionReport.aspx Pages for Previous Elections for All Locals in the 50 States have been set to NOT CURRENT!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    #endregion Previous Elections

    //protected void ButtonNotCurrentAll_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = "UPDATE ReportsElections";
    //    SQL += " SET IsReportCurrent = 0";
    //    db.ExecuteSQL(SQL);
    //    Msg.Text = db.Ok("All reports in ReportsElections Table are now NOT current.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    #endregion Set Elections Reports Not Current

    #region Common Updates
    //protected void Elections_Bulk_Update(string sql_Elections)
    //{
    //  Server.ScriptTimeout = 12000;//12000 sec = 200 min

    //  DataTable ElectionsTable = db.Table(sql_Elections);
    //  foreach (DataRow ElectionsRow in ElectionsTable.Rows)
    //  {
    //    DataRow ReportsElectionsRow = db.Row_Optional(sql_ReportsElections(ElectionsRow["ElectionKey"].ToString()));

    //    // We create a new cache per election, so the cache doesn't get too big
    //    PageCache tempCache = PageCache.GetTemporary();

    //    //string test = sql_ReportsElections(ElectionsRow["ElectionKey"].ToString());

    //    if (ReportsElectionsRow == null ||
    //      !Convert.ToBoolean(ReportsElectionsRow["IsReportCurrent"]))
    //      db.Report_Election_Update(tempCache, ElectionsRow["ElectionKey"].ToString());
    //  }
    //}

    //protected void Elections_Bulk_Update_Federal(bool IsUpcoming)
    //{
    //  Elections_Bulk_Update(
    //    sql_Elections_Federal(IsUpcoming)
    //    );
    //}
    //protected void Elections_Bulk_Update_State(string StateCode, bool IsUpcoming)
    //{
    //  Elections_Bulk_Update(
    //    sql_Elections_State(StateCode, IsUpcoming)
    //    );
    //}
    //protected void Elections_Bulk_Update_County(string StateCode, string CountyCode, bool IsUpcoming)
    //{
    //  Elections_Bulk_Update(
    //    sql_Elections_County(StateCode, CountyCode, IsUpcoming)
    //    );
    //}
    //protected void Elections_Bulk_Update_Local(string StateCode, string CountyCode, string LocalCode, bool IsUpcoming)
    //{
    //  Elections_Bulk_Update(
    //    sql_Elections_Local(StateCode, CountyCode, LocalCode, IsUpcoming)
    //    );
    //}
    #endregion Common Updates

    #region Election Reports

    //#region Upcoming Elections

    //protected void ButtonUSRpt_Click1(object sender, EventArgs e)
    //{
    //  Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //  Elections_Bulk_Update_Federal(true);//true = upcoming

    //  db.Master_Update_Date("BulkUpdateElectionsUpcomingUS", DateTime.Now);
    //  Label_BulkUpdateElectionsUpcomingUS.Text
    //    = db.Master_Date_Str("BulkUpdateElectionsUpcomingUS");

    //  Msg.Text = db.Ok("US President, US Senate & US House UPCOMING Elections Updated."
    //     + System.DateTime.Now.ToString());
    //}

    //protected void ButtonAllStatesRpt_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      Elections_Bulk_Update_State(
    //        StateRow["StateCode"].ToString()
    //        , true);
    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " UPCOMING Elections Updated."
    //         + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsUpcomingStates", DateTime.Now);
    //    Label_BulkUpdateElectionsUpcomingStates.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsUpcomingStates");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail("All the State Reports did not complete. " + ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //protected void ButtonAllCountiesRpt_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    //County Elections Reports only for UPCOMING elections
    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString().Trim()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        Elections_Bulk_Update_County(
    //          StateRow["StateCode"].ToString()
    //          , CountyRow["CountyCode"].ToString()
    //          , true);
    //      }
    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " COUNTY UPCOMING Elections Updated."
    //         + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsUpcomingCounties", DateTime.Now);
    //    Label_BulkUpdateElectionsUpcomingCounties.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsUpcomingCounties");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonAllLocalsRptUpcoming_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    //County Elections Reports only for UPCOMING elections
    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString().Trim()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        DataTable LocalsTable = db.Table(sql.LocalDistricts(
    //          StateRow["StateCode"].ToString()
    //        , CountyRow["CountyCode"].ToString()));
    //        foreach (DataRow LocalRow in LocalsTable.Rows)
    //        {
    //          Elections_Bulk_Update_Local(
    //            StateRow["StateCode"].ToString()
    //            , CountyRow["CountyCode"].ToString()
    //            , LocalRow["LocalCode"].ToString()
    //            , true);
    //        }
    //      }
    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " LOCAL UPCOMING Elections Updated."
    //         + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsUpcomingLocals", DateTime.Now);
    //    Label_BulkUpdateElectionsUpcomingLocals.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsUpcomingLocals");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //#endregion Upcoming Elections

    //#region Previous Elections

    //protected void ButtonUSRptPrevious_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    Elections_Bulk_Update_Federal(false);//false = not upcoming = previous

    //    db.Master_Update_Date("BulkUpdateElectionsPreviousUS", DateTime.Now);
    //    Label_BulkUpdateElectionsPreviousUS.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsPreviousUS");

    //    Msg.Text = db.Ok("US President, US Senate & US House PREVIOUS Elections Updated."
    //      + System.DateTime.Now.ToString());
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonAllStatesRptPrevious_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      Elections_Bulk_Update_State(
    //        StateRow["StateCode"].ToString()
    //        , false);//false = not upcoming = previous

    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " PREVIOUS Elections Updated."
    //        + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsPreviousStates", DateTime.Now);
    //    Label_BulkUpdateElectionsPreviousStates.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsPreviousStates");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail("All the State Reports did not complete. " + ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //protected void ButtonAllCountiesRptPrevious_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    //County Elections Reports only for PREVIOUS elections
    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString().Trim()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        Elections_Bulk_Update_County(
    //          StateRow["StateCode"].ToString()
    //          , CountyRow["CountyCode"].ToString()
    //          , false);
    //      }
    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " COUNTY PREVIOUS Elections Updated."
    //         + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsPreviousCounties", DateTime.Now);
    //    Label_BulkUpdateElectionsPreviousCounties.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsPreviousCounties");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonAllLocalsRptPrevious_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    //County Elections Reports only for PREVIOUS elections
    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString().Trim()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        DataTable LocalsTable = db.Table(sql.LocalDistricts(
    //          StateRow["StateCode"].ToString()
    //        , CountyRow["CountyCode"].ToString()));
    //        foreach (DataRow LocalRow in LocalsTable.Rows)
    //        {
    //          Elections_Bulk_Update_Local(
    //            StateRow["StateCode"].ToString()
    //            , CountyRow["CountyCode"].ToString()
    //            , LocalRow["LocalCode"].ToString()
    //            , false);
    //        }
    //      }
    //      Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //        + " LOCAL PREVIOUS Elections Updated."
    //         + System.DateTime.Now.ToString();
    //    }

    //    db.Master_Update_Date("BulkUpdateElectionsPreviousLocals", DateTime.Now);
    //    Label_BulkUpdateElectionsPreviousLocals.Text
    //      = db.Master_Date_Str("BulkUpdateElectionsPreviousLocals");

    //    Msg.Text = db.Ok(Msg.Text);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //#endregion Previous Elections

    #endregion Election Reports

    #endregion Bulk Updates of Election Reports

    #region Bulk Updates of Elected Officials Reports

    //#region Set Elected Officials Reports Not Current
    //protected void ButtonNotCurrentOfficialsFederal_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT ReportsOfficials.StateCode";
    //    SQL += " FROM ReportsOfficials";
    //    SQL += " WHERE (ReportsOfficials.StateCode = 'U1')";
    //    SQL += " OR (ReportsOfficials.StateCode = 'U2')";
    //    SQL += " OR (ReportsOfficials.StateCode = 'U3')";
    //    SQL += " OR (ReportsOfficials.StateCode = 'U4')";

    //    DataTable ReportsOfficialsTable = db.Table(SQL);
    //    foreach (DataRow ReportsOfficialsRow in ReportsOfficialsTable.Rows)
    //    {
    //      db.ReportsOfficials_Update_Bool(
    //        ReportsOfficialsRow["StateCode"].ToString()
    //        , string.Empty
    //        , string.Empty
    //        , "IsReportCurrent"
    //        , false);
    //    }

    //    Msg.Text = db.Ok("All US President, US Senate & US House Elected Officials reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonNotCurrentOfficialsStates_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT ReportsOfficials.StateCode";
    //    SQL += " FROM ReportsOfficials";
    //    SQL += " WHERE (ReportsOfficials.StateCode <> 'U1')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U2')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U3')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U4')";
    //    SQL += " AND ReportsOfficials.StateCode <> ''";
    //    SQL += " AND ReportsOfficials.CountyCode = ''";

    //    DataTable ReportsOfficialsTable = db.Table(SQL);
    //    foreach (DataRow ReportsOfficialsRow in ReportsOfficialsTable.Rows)
    //    {
    //      db.ReportsOfficials_Update_Bool(
    //        ReportsOfficialsRow["StateCode"].ToString()
    //        , string.Empty
    //        , string.Empty
    //        , "IsReportCurrent"
    //        , false);
    //    }

    //    Msg.Text = db.Ok("All States' Elected Officials reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonNotCurrentOfficialsCounties_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT ReportsOfficials.StateCode";
    //    SQL += ",ReportsOfficials.CountyCode";
    //    SQL += " FROM ReportsOfficials";
    //    SQL += " WHERE (ReportsOfficials.StateCode <> 'U1')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U2')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U3')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U4')";
    //    SQL += " AND ReportsOfficials.StateCode <> ''";
    //    SQL += " AND ReportsOfficials.CountyCode <> ''";
    //    SQL += " AND ReportsOfficials.LocalCode = ''";

    //    DataTable ReportsOfficialsTable = db.Table(SQL);
    //    foreach (DataRow ReportsOfficialsRow in ReportsOfficialsTable.Rows)
    //    {
    //      db.ReportsOfficials_Update_Bool(
    //        ReportsOfficialsRow["StateCode"].ToString()
    //        , ReportsOfficialsRow["CountyCode"].ToString()
    //        , string.Empty
    //        , "IsReportCurrent"
    //        , false);
    //    }

    //    Msg.Text = db.Ok("All Counties' Elected Officials reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonNotCurrentOfficialsLocals_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string SQL = string.Empty;
    //    SQL += " SELECT ReportsOfficials.StateCode";
    //    SQL += ",ReportsOfficials.CountyCode";
    //    SQL += " FROM ReportsOfficials";
    //    SQL += " WHERE (ReportsOfficials.StateCode <> 'U1')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U2')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U3')";
    //    SQL += " AND (ReportsOfficials.StateCode <> 'U4')";
    //    SQL += " AND ReportsOfficials.StateCode <> ''";
    //    SQL += " AND ReportsOfficials.CountyCode <> ''";
    //    SQL += " AND ReportsOfficials.LocalCode <> ''";

    //    DataTable ReportsOfficialsTable = db.Table(SQL);
    //    foreach (DataRow ReportsOfficialsRow in ReportsOfficialsTable.Rows)
    //    {
    //      db.ReportsOfficials_Update_Bool(
    //        ReportsOfficialsRow["StateCode"].ToString()
    //        , ReportsOfficialsRow["CountyCode"].ToString()
    //        , string.Empty
    //        , "IsReportCurrent"
    //        , false);
    //    }

    //    Msg.Text = db.Ok("All Locals' Elected Officials reports were set as not current.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonNotCurrentOfficialsAll_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.ExecuteSQL("UPDATE ReportsOfficials SET IsReportCurrent = 0");

    //    Msg.Text = db.Ok("All Federal, State, County and Local District Officials Reports have been set as NOT CURRENT!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //#endregion Set Elected Officials Reports Not Current

    //#region Elected Officials Reports
    //protected void ButtonOfficialsRptUpdateFederal_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    if (!db.Is_Report_Current_Officials("U1"))
    //      db.Report_Officials_Update(PageCache, "U1"); //US Senate
    //    if (!db.Is_Report_Current_Officials("U2"))
    //      db.Report_Officials_Update(PageCache, "U2"); //US Senate
    //    if (!db.Is_Report_Current_Officials("U3"))
    //      db.Report_Officials_Update(PageCache, "U3"); //US House
    //    if (!db.Is_Report_Current_Officials("U4"))
    //      db.Report_Officials_Update(PageCache, "U4"); //State Governors

    //    db.Master_Update_Date("BulkUpdateOfficialsUS", DateTime.Now);
    //    //Label_BulkUpdateOfficialsUS.Text
    //    //  = db.Master_Date_Str("BulkUpdateOfficialsUS");

    //    Msg.Text = db.Ok("Officials.aspx Pages for Elected Officials for US President, US Senate, US House and Governors are done!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonOfficialsRptUpdateState_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Msg.Text = string.Empty;
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      if (!db.Is_Report_Current_Officials(StateRow["StateCode"].ToString()))
    //      {
    //        db.Report_Officials_Update(PageCache, StateRow["StateCode"].ToString());

    //        Msg.Text += "<br>" + StateCache.GetStateName(StateRow["StateCode"].ToString())
    //          + " ELECTED OFFICIALS Report Updated.";
    //      }
    //    }

    //    db.Master_Update_Date("BulkUpdateOfficialsStates", DateTime.Now);
    //    //Label_BulkUpdateOfficialsStates.Text
    //    //  = db.Master_Date_Str("BulkUpdateOfficialsStates");

    //    Msg.Text = db.Ok(Msg.Text + "<br>Officials.aspx Pages - Elected Officials for All States are done!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonOfficialsRptUpdateCounties_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Msg.Text = string.Empty;
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        string sql_Offices = string.Empty;
    //        //sql_Offices += "SELECT StateCode";
    //        sql_Offices += " Offices";
    //        sql_Offices += " WHERE StateCode = " + db.SQLLit(StateRow["StateCode"].ToString());
    //        sql_Offices += " AND CountyCode = " + db.SQLLit(CountyRow["CountyCode"].ToString());
    //        sql_Offices += " AND LocalCode = ''";
    //        //Only for Counties with offices defined
    //        if (db.Rows_Count_From(sql_Offices) > 0)
    //        {
    //          //Do only if Not current
    //          if (!db.Is_Report_Current_Officials(
    //            StateRow["StateCode"].ToString()
    //            , CountyRow["CountyCode"].ToString())
    //            )
    //          {
    //            db.Report_Officials_Update(PageCache,
    //              StateRow["StateCode"].ToString(),
    //              CountyRow["CountyCode"].ToString(),
    //              string.Empty); //LocalCode
    //            Msg.Text += "<br>" + db.Name_Electoral(
    //                StateRow["StateCode"].ToString()
    //                , CountyRow["CountyCode"].ToString()
    //                , string.Empty)
    //              + " ELECTED OFFICIALS Report Updated.";
    //          }
    //        }
    //      }
    //    }

    //    db.Master_Update_Date("BulkUpdateOfficialsCounties", DateTime.Now);
    //    //Label_BulkUpdateOfficialsCounties.Text
    //    //  = db.Master_Date_Str("BulkUpdateOfficialsCounties");

    //    Msg.Text = db.Ok(Msg.Text + "<br>Officials.aspx Pages - Elected Officials for All Counties (where offices are defined) in all States are done!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonOfficialsRptUpdateLocals_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    Msg.Text = string.Empty;
    //    Server.ScriptTimeout = 60000;//6000 sec = 100 min

    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateRow in StatesTable.Rows)
    //    {
    //      DataTable CountiesTable = db.Table(sql.Counties(StateRow["StateCode"].ToString()));
    //      foreach (DataRow CountyRow in CountiesTable.Rows)
    //      {
    //        DataTable LocalsTable = db.Table(
    //          sql.LocalDistricts(
    //            StateRow["StateCode"].ToString()
    //            , CountyRow["CountyCode"].ToString()));
    //        foreach (DataRow LocalRow in LocalsTable.Rows)
    //        {
    //          //Do only if Not current
    //          string sql_Offices = string.Empty;
    //          //sql_Offices += "SELECT StateCode";
    //          sql_Offices += " Offices";
    //          sql_Offices += " WHERE StateCode = " + db.SQLLit(StateRow["StateCode"].ToString());
    //          sql_Offices += " AND CountyCode = " + db.SQLLit(CountyRow["CountyCode"].ToString());
    //          sql_Offices += " AND LocalCode = " + db.SQLLit(LocalRow["LocalCode"].ToString());
    //          //Only for Counties with offices defined
    //          if (db.Rows_Count_From(sql_Offices) > 0)
    //          {
    //            if (!db.Is_Report_Current_Officials(
    //            StateRow["StateCode"].ToString()
    //            , CountyRow["CountyCode"].ToString()
    //            , LocalRow["LocalCode"].ToString()
    //            ))
    //            {
    //              db.Report_Officials_Update(PageCache,
    //                StateRow["StateCode"].ToString(),
    //                CountyRow["CountyCode"].ToString(),
    //                LocalRow["LocalCode"].ToString());
    //              Msg.Text += "<br>" + db.Name_Electoral(
    //                  StateRow["StateCode"].ToString()
    //                  , CountyRow["CountyCode"].ToString()
    //                  , LocalRow["LocalCode"].ToString())
    //                + " ELECTED OFFICIALS Report Updated.";
    //            }
    //          }
    //        }
    //      }
    //    }

    //    db.Master_Update_Date("BulkUpdateOfficialsLocals", DateTime.Now);
    //    //Label_BulkUpdateOfficialsLocals.Text
    //    //  = db.Master_Date_Str("BulkUpdateOfficialsLocals");

    //    Msg.Text = db.Ok(Msg.Text + "<br>Officials.aspx Pages - Elected Officials for All Locals (where offices are defined) in all States are done!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //#endregion Elected Officials Reports

    #endregion Bulk Updates of Elected Officials Reports

    #region Database Fixes

    protected void ButtonUpdateAnswers_Click(object sender, EventArgs e)
    {
      try
      {
        string SQL = string.Empty;
        DataTable AnswersTable = null;

        SQL = "SELECT *";
        SQL += " FROM Answers";
        SQL += " WHERE DateStamp = '1/1/1900'";
        AnswersTable = db.Table(SQL);
        foreach (DataRow AnswerRow in AnswersTable.Rows)
        {
          string Sql_Select = string.Empty;
          Sql_Select += "select ElectionKey";
          Sql_Select += " from ElectionsPoliticians";
          Sql_Select += " where PoliticianKey = " + db.SQLLit(AnswerRow["PoliticianKey"].ToString());
          Sql_Select += " order by ElectionKey desc";
          DataRow ElectionsPoliticiansRow = db.Row_First_Optional(Sql_Select);
          if (ElectionsPoliticiansRow != null)
          {
            string ElectionKey = ElectionsPoliticiansRow["ElectionKey"].ToString();
            string YYYY = ElectionKey.Substring(2, 4);
            string MM = ElectionKey.Substring(6, 2).ToUpper();
            string DD = ElectionKey.Substring(8, 2);
            int iMM = Convert.ToUInt16(MM);
            if (iMM > 1)
              iMM--;
            MM = iMM.ToString();
            if (MM.Length == 1)
              MM = MM.PadLeft(2, '0');
            string Date = MM + "/" + DD + "/" + YYYY;


            string Sql_Update = string.Empty;
            Sql_Update = "UPDATE Answers";
            Sql_Update += " SET DateStamp=" + db.SQLLit(Date);
            Sql_Update += ",Source='Candidate Website'";
            Sql_Update += " WHERE QuestionKey=" + db.SQLLit(AnswerRow["QuestionKey"].ToString());
            Sql_Update += " AND PoliticianKey =" + db.SQLLit(AnswerRow["PoliticianKey"].ToString());
            Sql_Update += " AND DateStamp = '1/1/1900'";
            db.ExecuteSQL(Sql_Update);
          }
        }

#if false
        SQL = "SELECT QuestionKey,IssueKey";
        SQL += " FROM Answers";
        SQL += " WHERE IssueKey = ''";
        AnswersTable = db.Table(SQL);
        foreach (DataRow AnswerRow in AnswersTable.Rows)
        {
          int Len = AnswerRow["QuestionKey"].ToString().Length;
          string IssueKey = AnswerRow["QuestionKey"].ToString().Substring(0, Len - 6);
          string Sql_Update = string.Empty;
          Sql_Update = "UPDATE Answers";
          Sql_Update += " SET IssueKey=" + db.SQLLit(IssueKey);
          Sql_Update += " WHERE QuestionKey=" + db.SQLLit(AnswerRow["QuestionKey"].ToString());
          Sql_Update += " AND IssueKey=''";
          db.ExecuteSQL(Sql_Update);
        }
#endif
        Msg.Text = db.Ok("Answers Table Updated.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonFix2_Click(object sender, EventArgs e)
    {
      try
      {
        #region Deletes all ElectionsOffices rows where there is no matching OfficeKey in Offices Table
        int Elections_Rows_Deleted = 0;
        string SQL = "SELECT * FROM ElectionsOffices";
        DataTable ElectionsOfficesTable = db.Table(SQL);
        foreach (DataRow ElectionsOfficesRow in ElectionsOfficesTable.Rows)
        {
          string OfficeKey = ElectionsOfficesRow["OfficeKey"].ToString();
          if (!Offices.OfficeKeyExists(OfficeKey))
          {
            //SQL = "SELECT COUNT(*)";
            //SQL += " FROM ElectionsOffices";
            //SQL += " WHERE ElectionsOffices.OfficeKey = "
            //  + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
            Elections_Rows_Deleted += db.Rows("ElectionsOffices"
            , "OfficeKey", OfficeKey);

            string sql_delete = "DELETE FROM ElectionsOffices WHERE OfficeKey ="
              + db.SQLLit(OfficeKey);
            db.ExecuteSQL(sql_delete);
          }
        }
        Msg.Text = db.Ok(Elections_Rows_Deleted + " ElectionsOffices Rows deleted.");

        #endregion Deletes all ElectionsOffices rows where there is no matching OfficeKey in Offices Table
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonFix3_Click(object sender, EventArgs e)
    {
      try
      {
        #region Deletes all ElectionsPoliticians rows where there is no matching OfficeKey in Offices Table
        int ElectionsPoliticians_Rows_Deleted = 0;
        string SQL = "SELECT * FROM ElectionsPoliticians";
        DataTable ElectionsPoliticiansTable = db.Table(SQL);
        foreach (DataRow ElectionsPoliticiansRow in ElectionsPoliticiansTable.Rows)
        {
          string OfficeKey = ElectionsPoliticiansRow["OfficeKey"].ToString();
          if (!Offices.OfficeKeyExists(OfficeKey))
          {
            //SQL = "SELECT COUNT(*)";
            //SQL += " FROM ElectionsPoliticians";
            //SQL += " WHERE ElectionsPoliticians.OfficeKey = "
            //  + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
            ElectionsPoliticians_Rows_Deleted += db.Rows("ElectionsPoliticians"
            , "OfficeKey", OfficeKey);

            string sql_delete = "DELETE FROM ElectionsPoliticians WHERE OfficeKey ="
              + db.SQLLit(OfficeKey);
            db.ExecuteSQL(sql_delete);
          }
        }
        Msg.Text = db.Ok(ElectionsPoliticians_Rows_Deleted + " ElectionsPoliticians Rows deleted with non-matching OfficeKey.");

        #endregion Deletes all ElectionsPoliticians rows where there is no matching OfficeKey in Offices Table
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonFix4_Click(object sender, EventArgs e)
    {
      try
      {
        #region Deletes all ElectionsPoliticians rows where there is no matching PoliticianKey in Politicians Table
        int ElectionsPoliticians_Rows_Deleted_ForPoliticians = 0;
        string SQL = "SELECT * FROM ElectionsPoliticians";
        DataTable ElectionsPoliticiansTable = db.Table(SQL);
        foreach (DataRow ElectionsPoliticiansRow in ElectionsPoliticiansTable.Rows)
        {
          string PoliticianKey = ElectionsPoliticiansRow["PoliticianKey"].ToString();
          if (!Politicians.IsValid(ElectionsPoliticiansRow["PoliticianKey"].ToString()))
          {
            //SQL = "SELECT COUNT(*)";
            //SQL += " FROM ElectionsPoliticians";
            //SQL += " WHERE ElectionsPoliticians.PoliticianKey = "
            //  + db.SQLLit(ElectionsPoliticiansRow["PoliticianKey"].ToString());
            ElectionsPoliticians_Rows_Deleted_ForPoliticians += db.Rows("ElectionsPoliticians"
            , "PoliticianKey", ElectionsPoliticiansRow["PoliticianKey"].ToString());

            string sql_delete = "DELETE FROM ElectionsPoliticians WHERE PoliticianKey ="
              + db.SQLLit(ElectionsPoliticiansRow["PoliticianKey"].ToString());
            db.ExecuteSQL(sql_delete);
          }
        }
        Msg.Text = db.Ok(ElectionsPoliticians_Rows_Deleted_ForPoliticians.ToString() + " ElectionsPoliticians Rows deleted with non-matching PoliticianKey.");

        #endregion Deletes all ElectionsPoliticians rows where there is no matching PoliticianKey in Politicians Table
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonFix5_Click(object sender, EventArgs e)
    {
      try
      {
        #region Deletes all OfficesOfficials rows where there is no matching OfficeKey in Offices Table
        #region replaced
        //int OfficesOfficials_Rows_Deleted = 0;
        //string SQL = "SELECT * FROM OfficesOfficials";
        //DataTable OfficesOfficialsTable = db.Table(SQL);
        //foreach (DataRow OfficesOfficialsRow in OfficesOfficialsTable.Rows)
        //{
        //  string OfficeKey = OfficesOfficialsRow["OfficeKey"].ToString();
        //  if (OfficesOfficialsRow["OfficeKey"].ToString().Trim() != string.Empty)
        //  {
        //    if (!db.Is_Valid_Office(OfficesOfficialsRow["OfficeKey"].ToString()))
        //    {
        //      //SQL = "SELECT COUNT(*)";
        //      //SQL += " FROM OfficesOfficials";
        //      //SQL += " WHERE OfficesOfficials.OfficeKey = "
        //      //  + db.SQLLit(OfficesOfficialsRow["OfficeKey"].ToString());
        //      //OfficesOfficials_Rows_Deleted += db.Rows_Sql(SQL);
        //      OfficesOfficials_Rows_Deleted += db.Rows("OfficesOfficials"
        //      , "OfficeKey", OfficesOfficialsRow["OfficeKey"].ToString());

        //      string sql_delete = "DELETE FROM OfficesOfficials WHERE OfficeKey ="
        //        + db.SQLLit(OfficesOfficialsRow["OfficeKey"].ToString());
        //      db.ExecuteSQL(sql_delete);
        //    }
        //  }
        //}
        //Msg.Text = db.Ok(OfficesOfficials_Rows_Deleted.ToString() + " OfficesOfficials Rows deleted with non-matching OfficeKey.");
        #endregion replaced

        Server.ScriptTimeout = 60000;// = 1000 min = 16 hrs

        int Delete_Count = 0;
        string sql_OfficesOfficials = "select OfficeKey from OfficesOfficials";
        DataTable OfficesOfficials_Table = db.Table(sql_OfficesOfficials);
        foreach (DataRow OfficesOfficials_Row in OfficesOfficials_Table.Rows)
        {
          if (OfficesOfficials_Row["OfficeKey"].ToString().Trim() != string.Empty)
          {
            if (!Offices.OfficeKeyExists(OfficesOfficials_Row["OfficeKey"].ToString()))
            {
              db.OfficesOfficials_Delete(OfficesOfficials_Row["OfficeKey"].ToString());
              Msg.Text += "<br>Deleted:" + OfficesOfficials_Row["OfficeKey"].ToString();
              Delete_Count++;
            }
          }
        }
        Msg.Text += db.Ok("<br>" + Delete_Count.ToString() + " OfficesOfficials Rows deleted with non-matching OfficeKey.");

        #endregion Deletes all OfficesOfficials rows where there is no matching OfficeKey in Offices Table
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonFix6_Click(object sender, EventArgs e)
    {
      try
      {
        string Msg_Return = string.Empty;
        string sql_update = string.Empty;
        #region Update ElectionKeyCounty, ElectionKeyLocal,ElectionKeyFederal in ElectionsOffices & ElectionsPoliticians Tables
        //ElectionsOffices & ElectionsPoliticians
        //Set ElectionKey_State = ElectionKey

        #region ElectionsOffices
        string SQL = "SELECT * FROM ElectionsOffices";
        DataTable ElectionsOfficesTable = db.Table(SQL);
        foreach (DataRow ElectionsOfficesRow in ElectionsOfficesTable.Rows)
        {
          sql_update = "UPDATE ElectionsOffices SET ElectionKeyState ="
            + db.SQLLit(db.ElectionKey_State(ElectionsOfficesRow["ElectionKey"].ToString()));
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_County = string.Empty;
          if (ElectionsOfficesRow["CountyCode"].ToString().Trim() != string.Empty)
            ElectionKey_County = ElectionsOfficesRow["ElectionKeyState"].ToString()
              + ElectionsOfficesRow["CountyCode"].ToString();
          else
            ElectionKey_County = string.Empty;

          sql_update = "UPDATE ElectionsOffices SET ElectionKeyCounty =" + db.SQLLit(ElectionKey_County);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_Local = string.Empty;
          if (ElectionsOfficesRow["LocalCode"].ToString().Trim() != string.Empty)
            ElectionKey_Local = ElectionsOfficesRow["ElectionKeyState"].ToString()
              + ElectionsOfficesRow["CountyCode"].ToString()
              + ElectionsOfficesRow["LocalCode"].ToString();
          else
            ElectionKey_Local = string.Empty;

          sql_update = "UPDATE ElectionsOffices SET ElectionKeyLocal =" + db.SQLLit(ElectionKey_Local);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_Federal = string.Empty;
          OfficeClass Office_Class = Offices.GetOfficeClass(ElectionsOfficesRow["OfficeKey"].ToString());
          if (Office_Class.IsFederal())
            switch (Office_Class)
            {
              case OfficeClass.USPresident:
                ElectionKey_Federal = db.ElectionKey_USPres(ElectionsOfficesRow["ElectionKeyState"].ToString());
                break;
              case OfficeClass.USSenate:
                ElectionKey_Federal = db.ElectionKey_USSenate(ElectionsOfficesRow["ElectionKeyState"].ToString());
                break;
              case OfficeClass.USHouse:
                ElectionKey_Federal = db.ElectionKey_USHouse(ElectionsOfficesRow["ElectionKeyState"].ToString());
                break;
            }
          else
            ElectionKey_Federal = string.Empty;

          sql_update = "UPDATE ElectionsOffices SET ElectionKeyFederal =" + db.SQLLit(ElectionKey_Federal);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);
        }
        Msg_Return += "<br> ElectionKeyCounty, ElectionKeyLocal,ElectionKeyFederal Updated in ElectionsOffices";
        #endregion ElectionsOffices

        #region ElectionsPoliticians
        SQL = "SELECT * FROM ElectionsPoliticians";
        DataTable ElectionsPoliticiansTable = db.Table(SQL);
        foreach (DataRow ElectionsPoliticiansRow in ElectionsPoliticiansTable.Rows)
        {
          sql_update = "UPDATE ElectionsPoliticians SET ElectionKeyState ="
            + db.SQLLit(db.ElectionKey_State(ElectionsPoliticiansRow["ElectionKey"].ToString()));
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_County = string.Empty;
          if (ElectionsPoliticiansRow["CountyCode"].ToString().Trim() != string.Empty)
            ElectionKey_County = ElectionsPoliticiansRow["ElectionKeyState"].ToString()
              + ElectionsPoliticiansRow["CountyCode"].ToString();
          else
            ElectionKey_County = string.Empty;

          sql_update = "UPDATE ElectionsPoliticians SET ElectionKeyCounty =" + db.SQLLit(ElectionKey_County);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_Local = string.Empty;
          if (ElectionsPoliticiansRow["LocalCode"].ToString().Trim() != string.Empty)
            ElectionKey_Local = ElectionsPoliticiansRow["ElectionKeyState"].ToString()
              + ElectionsPoliticiansRow["CountyCode"].ToString()
              + ElectionsPoliticiansRow["LocalCode"].ToString();
          else
            ElectionKey_Local = string.Empty;

          sql_update = "UPDATE ElectionsPoliticians SET ElectionKeyLocal =" + db.SQLLit(ElectionKey_Local);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);

          string ElectionKey_Federal = string.Empty;
          OfficeClass Office_Class = Offices.GetOfficeClass(ElectionsPoliticiansRow["OfficeKey"].ToString());
          if (Office_Class.IsFederal())
            switch (Office_Class)
            {
              case OfficeClass.USPresident:
                ElectionKey_Federal = db.ElectionKey_USPres(ElectionsPoliticiansRow["ElectionKeyState"].ToString());
                break;
              case OfficeClass.USSenate:
                ElectionKey_Federal = db.ElectionKey_USSenate(ElectionsPoliticiansRow["ElectionKeyState"].ToString());
                break;
              case OfficeClass.USHouse:
                ElectionKey_Federal = db.ElectionKey_USHouse(ElectionsPoliticiansRow["ElectionKeyState"].ToString());
                break;
            }
          else
            ElectionKey_Federal = string.Empty;

          sql_update = "UPDATE ElectionsPoliticians SET ElectionKeyFederal =" + db.SQLLit(ElectionKey_Federal);
          sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
          sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
          db.ExecuteSQL(sql_update);
        }
        Msg_Return += "<br> ElectionKeyCounty, ElectionKeyLocal,ElectionKeyFederal Updated in ElectionsPoliticians";
        #endregion ElectionsPoliticians
        #endregion Set ElectionKey_County, ElectionKeyLocal,ElectionKeyFederal in ElectionsOffices & ElectionsPoliticians Tables

        #region Updates ElectionKey for County and Local elections on ElectionsOffices & ElectionsPoliticians
        //if ElectionKey_County, ElectionKeyLocal not empty Set ElectionKey = ElectionKeyLocal 
        //if ElectionKey_County not empty Set ElectionKey = ElectionKey_County 
        #region ElectionsOffices
        string Debug_ElectionKey = string.Empty;
        string Debug_Office = string.Empty;
        SQL = "SELECT * FROM ElectionsOffices";
        ElectionsOfficesTable = db.Table(SQL);
        foreach (DataRow ElectionsOfficesRow in ElectionsOfficesTable.Rows)
        {
          if (
            (ElectionsOfficesRow["ElectionKeyCounty"].ToString().Trim() != string.Empty)
            && (ElectionsOfficesRow["ElectionKeyLocal"].ToString().Trim() != string.Empty)
            )
          {
            sql_update = "UPDATE ElectionsOffices SET ElectionKey =" + db.SQLLit(ElectionsOfficesRow["ElectionKeyLocal"].ToString().Trim());
            sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
            sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
            Debug_ElectionKey = ElectionsOfficesRow["ElectionKey"].ToString();
            Debug_Office = ElectionsOfficesRow["OfficeKey"].ToString();
            db.ExecuteSQL(sql_update);
          }
          else if (
            (ElectionsOfficesRow["ElectionKeyCounty"].ToString().Trim() != string.Empty)
            && (ElectionsOfficesRow["ElectionKeyLocal"].ToString().Trim() == string.Empty)
            )
          {
            sql_update = "UPDATE ElectionsOffices SET ElectionKey =" + db.SQLLit(ElectionsOfficesRow["ElectionKeyCounty"].ToString().Trim());
            sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsOfficesRow["ElectionKey"].ToString());
            sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsOfficesRow["OfficeKey"].ToString());
            Debug_ElectionKey = ElectionsOfficesRow["ElectionKey"].ToString();
            Debug_Office = ElectionsOfficesRow["OfficeKey"].ToString();
            db.ExecuteSQL(sql_update);
          }
        }
        Msg_Return += "<br> ElectionKey updated for county and local elections in ElectionsOffices";
        #endregion ElectionsOffices

        #region ElectionsPoliticians
        SQL = "SELECT * FROM ElectionsPoliticians";
        ElectionsPoliticiansTable = db.Table(SQL);
        foreach (DataRow ElectionsPoliticiansRow in ElectionsPoliticiansTable.Rows)
        {
          if (
            (ElectionsPoliticiansRow["ElectionKeyCounty"].ToString().Trim() != string.Empty)
            && (ElectionsPoliticiansRow["ElectionKeyLocal"].ToString().Trim() != string.Empty)
            )
          {
            sql_update = "UPDATE ElectionsPoliticians SET ElectionKey =" + db.SQLLit(ElectionsPoliticiansRow["ElectionKeyLocal"].ToString().Trim());
            sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
            sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
            db.ExecuteSQL(sql_update);
          }
          else if (
            (ElectionsPoliticiansRow["ElectionKeyCounty"].ToString().Trim() != string.Empty)
            && (ElectionsPoliticiansRow["ElectionKeyLocal"].ToString().Trim() == string.Empty)
            )
          {
            sql_update = "UPDATE ElectionsPoliticians SET ElectionKey =" + db.SQLLit(ElectionsPoliticiansRow["ElectionKeyCounty"].ToString().Trim());
            sql_update += " WHERE ElectionKey=" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
            sql_update += " AND OfficeKey=" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
            db.ExecuteSQL(sql_update);
          }
        }
        Msg_Return += "<br> ElectionKey updated for county and local elections in ElectionsPoliticians";
        #endregion ElectionsPoliticians

        #endregion Updates ElectionKey for County and Local elections on ElectionsOffices & ElectionsPoliticians

        Msg.Text = db.Ok(Msg_Return);

      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void ButtonFix7_Click(object sender, EventArgs e)
    {
      try
      {
        string Msg_Return = string.Empty;
        #region Deletes all Elections, ElectionsOffices and ElectionsPoliticians rows where there are no 1) ElectionsOffices rows (on the ballot) and 2) no Referendum rows for the ElectionKey
        int Elections_Rows_Deleted = 0;
        //int Referendums_Rows_Deleted = 0;
        string SQL = "SELECT * FROM Elections";
        SQL += " Where (SUBSTRING(ElectionKey,1,2) <> 'U1')";
        SQL += " And (SUBSTRING(ElectionKey,1,2) <> 'U2')";
        SQL += " and (SUBSTRING(ElectionKey,1,2) <> 'U3')";
        SQL += " and (SUBSTRING(ElectionKey,1,2) <> 'U4')";
        DataTable ElectionsTable = db.Table(SQL);
        foreach (DataRow ElectionsRow in ElectionsTable.Rows)
        {
          SQL = "ElectionsOffices WHERE ElectionsOffices.ElectionKey = "
            + db.SQLLit(ElectionsRow["ElectionKey"].ToString());
          int ElectionsOffices_Rows = db.Rows_Count_From(SQL);

          int Referendum_Rows = db.Rows("Referendums"
          , "ElectionKey", ElectionsRow["ElectionKey"].ToString());

          if ((ElectionsOffices_Rows == 0) && (Referendum_Rows == 0))
          {
            string sql_delete = "DELETE FROM Elections WHERE ElectionKey ="
              + db.SQLLit(ElectionsRow["ElectionKey"].ToString());
            db.ExecuteSQL(sql_delete);

            //sql_delete = "DELETE FROM ReportsElections WHERE ElectionKey ="
            //  + db.SQLLit(ElectionsRow["ElectionKey"].ToString());
            //db.ExecuteSQL(sql_delete);

            sql_delete = "DELETE FROM ElectionsPoliticians WHERE ElectionKey ="
              + db.SQLLit(ElectionsRow["ElectionKey"].ToString());
            db.ExecuteSQL(sql_delete);

            sql_delete = "DELETE FROM ElectionsOffices WHERE ElectionKey ="
              + db.SQLLit(ElectionsRow["ElectionKey"].ToString());
            db.ExecuteSQL(sql_delete);

            Elections_Rows_Deleted++;

            Msg_Return += "<br>Election rows deleted for: " + ElectionsRow["ElectionKey"].ToString();
          }

        }
        Msg_Return += "<br>" + Elections_Rows_Deleted.ToString() + " Elections Deleted and removing all Elections, ElectionsOffices, ElectionsPoliticians, ReportsElections Table rows for these elections.";
        #endregion Delete all Elections rows where there are no ElectionsOffices rows for the ElectionKey

        Msg.Text = db.Ok(Msg_Return);
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    #endregion Database Fixes

    protected void ButtonSetAllViewable_Click(object sender, EventArgs e)
    {
      try
      {
        string SQL = string.Empty;
        SQL += " UPDATE Elections";
        SQL += " SET IsViewable = 1";
        SQL += " WHERE ElectionDate <= " + db.SQLLit(Db.DbToday);
        db.ExecuteSQL(SQL);

        Msg.Text = db.Ok("All previous elections have been set to being VIEWABLE.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    //protected void ButtonDeleteReportsElections_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string Msg_Return = string.Empty;
    //    string SQL = "SELECT electionkey FROM ReportsElections";
    //    SQL += " Where (SUBSTRING(ElectionKey,1,2) <> 'U1')";
    //    SQL += " And (SUBSTRING(ElectionKey,1,2) <> 'U2')";
    //    SQL += " and (SUBSTRING(ElectionKey,1,2) <> 'U3')";
    //    SQL += " and (SUBSTRING(ElectionKey,1,2) <> 'U4')";
    //    DataTable ReportsElectionsTable = db.Table(SQL);
    //    foreach (DataRow ReportsElectionsRow in ReportsElectionsTable.Rows)
    //    {
    //      //SQL = "SELECT COUNT(*)";
    //      //SQL += " FROM ElectionsPoliticians";
    //      //SQL += " WHERE ElectionsPoliticians.ElectionKey = "
    //      //  + db.SQLLit(ReportsElectionsRow["ElectionKey"].ToString());
    //      //int ElectionsPoliticians_Rows = db.Rows_Sql(SQL);
    //      //if (ElectionsPoliticians_Rows == 0)
    //      if (db.Rows("ElectionsPoliticians"
    //        , "ElectionKey", ReportsElectionsRow["ElectionKey"].ToString()) == 0)
    //      {
    //        string sql_delete = "DELETE FROM ReportsElections WHERE ElectionKey ="
    //          + db.SQLLit(ReportsElectionsRow["ElectionKey"].ToString());
    //        db.ExecuteSQL(sql_delete);
    //        Msg_Return += "<br>ReportsElections rows deleted for: " + ReportsElectionsRow["ElectionKey"].ToString();
    //      }
    //    }


    //    Msg.Text = db.Ok(Msg_Return);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    protected void ButtonDeleteUserErrorLogs_Click(object sender, EventArgs e)
    {
      try
      {
        string SQL = string.Empty;

        //SQL = "truncate table LogErrorsAdmin";
        //db.ExecuteSQL(SQL);
        DB.VoteLog.LogErrorsAdmin.TruncateTable();

        //SQL = "truncate table Log301Redirect";
        //db.ExecuteSQL(SQL);
        DB.VoteLog.Log301Redirect.TruncateTable();

        //SQL = "truncate table Log302Redirect";
        //db.ExecuteSQL(SQL);
        DB.VoteLog.Log302Redirect.TruncateTable();

        //SQL = "truncate table Log404PageNotFound";
        //db.ExecuteSQL(SQL);
        DB.VoteLog.Log404PageNotFound.TruncateTable();

        Msg.Text = db.Ok("The Log Tables have been truncated.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    //protected void TextBox_New_Custom_Design_TextChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (db.Is_Valid_Domain_Design(TextBox_New_Custom_Design.Text.Trim()))
    //      throw new ApplicationException("This Design Code already exists");

    //    #region Insert row in DomainDesigns
    //    string sql_Insert_DomainDesigns = string.Empty;
    //    sql_Insert_DomainDesigns += "INSERT INTO DomainDesigns";
    //    sql_Insert_DomainDesigns += " (DomainDesignCode)";
    //    sql_Insert_DomainDesigns += " VALUES";
    //    sql_Insert_DomainDesigns += " (";
    //    sql_Insert_DomainDesigns += db.SQLLit(TextBox_New_Custom_Design.Text.Trim());
    //    sql_Insert_DomainDesigns += ")";
    //    db.ExecuteSQL(sql_Insert_DomainDesigns);
    //    #endregion Insert row in DomainDesigns

    //    #region Add Directory at /images/Designs
    //    db.Directory_Create(db.Path_Part_Image_Custom(TextBox_New_Custom_Design.Text.Trim()));
    //    #endregion Add Directory at /images/Designs

    //    db.Master_Update_Str("DesignCodeLinksLine", db.DesignCodeLinks());
    //    LabelDomainDesigns.Text = db.Master_Str("DesignCodeLinksLine");

    //    Msg.Text = db.Ok("The new Design Code has been created. You can now edit it using the Custom Design Link.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    protected void RadioButtonList_Log_301_404_Errors_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (RadioButtonList_Log_301_404_Errors.SelectedValue == "T")
        {
          db.Master_Update_Bool("IsLog301And404Errors", true);
          Msg.Text = db.Msg("Logging of 301, 404 and unhandled errors has been set ON.");
        }
        else
        {
          db.Master_Update_Bool("IsLog301And404Errors", false);
          Msg.Text = db.Msg("Logging of 301, 404 and unhandled errors has been set OFF.");
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    //protected void TextBox_Add_Organization_TextChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (db.Is_Valid_Organization(TextBox_Add_Organization.Text.Trim()))
    //      throw new ApplicationException("This Organization Code already exists");

    //    #region Insert row in Organizations
    //    string sql_Insert_OrganizationCode = string.Empty;
    //    sql_Insert_OrganizationCode += "INSERT INTO Organizations";
    //    sql_Insert_OrganizationCode += " (OrganizationCode)";
    //    sql_Insert_OrganizationCode += " VALUES";
    //    sql_Insert_OrganizationCode += " (";
    //    sql_Insert_OrganizationCode += db.SQLLit(TextBox_Add_Organization.Text.Trim());
    //    sql_Insert_OrganizationCode += ")";
    //    db.ExecuteSQL(sql_Insert_OrganizationCode);
    //    #endregion Insert row in Organizations

    //    db.Master_Update_Str("OrganizationCodeLinksLine", db.OrganizationCodeLinks());
    //    LabelDomainOrganizations.Text = db.Master_Str("OrganizationCodeLinksLine");

    //    Msg.Text = db.Ok("The new Organization Code has been created. You can now enter information about the organization using the oranization link above.");

    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    protected void Button_Update_ElectionsOffices_Click(object sender, EventArgs e)
    {
      try
      {
        string SQL = " SELECT OfficeKey,DistrictCode";
        SQL += " FROM Offices";
        SQL += " WHERE OfficeLevel = 3";
        SQL += " OR OfficeLevel = 5";
        SQL += " OR OfficeLevel = 6";
        SQL += " OR OfficeLevel = 7";
        SQL += " OR OfficeLevel = 17";
        SQL += " OR OfficeLevel = 21";
        SQL += " GROUP BY OfficeKey,DistrictCode";
        DataTable Table_Offices = db.Table(SQL);
        foreach (DataRow Row_Offices in Table_Offices.Rows)
        {
          db.ElectionsOffices_Update_DistrictCode(
            Row_Offices["OfficeKey"].ToString()
          , Row_Offices["DistrictCode"].ToString()
          );
        }

        Msg.Text += db.Ok("<br>Done");
      }
      catch (Exception ex)
      {
        #region

        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void Button_Update_Politician_Names_Click(object sender, EventArgs e)
    {
      try
      {
        string sql = "SELECT PoliticianKey, FName, MName, Nickname, LName, LName, Suffix, AddOn FROM Politicians";
        DataTable Table_Politicians = db.Table(sql);
        foreach (DataRow Row_Politician in Table_Politicians.Rows)
        {
          //FName
          if (Row_Politician["FName"].ToString().Length > 0)
          {
            string FName = Row_Politician["FName"].ToString();
            //FName = db.Str_Remove_SpecialChars_All_Except_Spaces(FName);
            //FName = db.Str_ReCase(FName);
            //FName = db.Str_Fix_Name_First_Char(FName);
            Validation.FixGivenName(FName);
            db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "FName", FName);
          }

          //MName
          if (Row_Politician["MName"].ToString().Length > 0)
          {
            string MName = Row_Politician["MName"].ToString();
            //MName = db.Str_Remove_SpecialChars_All_Except_Spaces(MName);
            //MName = db.Str_ReCase(MName);
            //MName = db.Str_Fix_Name_First_Char(MName);
            Validation.FixGivenName(MName);
            db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "MName", MName);
          }

          //Nickname
          if (Row_Politician["Nickname"].ToString().Length > 0)
          {
            string Nickname = Row_Politician["Nickname"].ToString();
            //Nickname = db.Str_Remove_SpecialChars_All_Except_Spaces(Nickname);
            //Nickname = db.Str_ReCase(Nickname);
            Validation.FixNickname(Nickname);
            db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "Nickname", Nickname);
          }

          //LName
          if (Row_Politician["LName"].ToString().Length > 0)
          {
            string LName = Row_Politician["LName"].ToString();
            //LName = db.Str_Remove_SpecialChars_All_Except_Spaces(LName);
            //LName = db.Str_ReCase(LName);
            Validation.FixLastName(LName);
            db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "LName", LName);
          }

          //Suffix
          if (Row_Politician["Suffix"].ToString().Length > 0)
          {
            string Suffix = Row_Politician["Suffix"].ToString();
            //Suffix = db.Str_Remove_Non_Key_Chars(Suffix);
            //Suffix = db.Str_Fix_Name_Suffix(Suffix);
            //if (db.Is_Valid_Name_Suffix(Suffix))
            //{
            //  db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "Suffix", Suffix);
            //}
            //else
            //{
            //  db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "Suffix", string.Empty);
            //}
            Validation.FixNameSuffix(Suffix);
            db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "Suffix", Suffix);
          }

          //AddOn
          // no editing
          //if (Row_Politician["AddOn"].ToString().Length > 0)
          //{
          //  string AddOn = Row_Politician["AddOn"].ToString();
          //  AddOn = db.Str_Remove_SpecialChars_All_Except_Spaces(AddOn);
          //  db.Politicians_Update_Str(Row_Politician["PoliticianKey"].ToString(), "AddOn", AddOn);
          //}

        }
        Msg.Text += db.Ok("<br>Done");
      }
      catch (Exception ex)
      {
        #region

        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void Button_Remake_Party_Email_Passwords_Click(object sender, EventArgs e)
    {
      try
      {
        string sql = "Select PartyEmail from PartiesEmails";
        DataTable Table_Emails = db.Table(sql);
        foreach (DataRow Row_Email in Table_Emails.Rows)
        {
          string Unique_Password = db.MakeUniquePassword();
          string UpdateSQL = "UPDATE PartiesEmails"
          + " SET PartyPassword = " + db.SQLLit(Unique_Password)
          + " WHERE PartyEmail = " + db.SQLLit(Row_Email["PartyEmail"].ToString());
          db.ExecuteSQL(UpdateSQL);
        }
        Msg.Text += db.Ok("<br>Done");
      }
      catch (Exception ex)
      {
        #region

        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void Button_Add_User_Click(object sender, EventArgs e)
    {
      try
      {
        string sql_Security_Insert = string.Empty;
        sql_Security_Insert += "INSERT INTO Security";
        sql_Security_Insert += "(";
        sql_Security_Insert += "UserName";
        sql_Security_Insert += ",UserPassword";
        sql_Security_Insert += ",UserSecurity";
        sql_Security_Insert += ",UserDesignCode";
        sql_Security_Insert += ",UserOrganizationCode";
        sql_Security_Insert += ")";
        sql_Security_Insert += "VALUES";
        sql_Security_Insert += "(";
        sql_Security_Insert += db.SQLLit(TextBox_UserName.Text.Trim());
        sql_Security_Insert += "," + db.SQLLit(TextBox_Password.Text.Trim());
        sql_Security_Insert += ",'MASTER'";
        sql_Security_Insert += ",'Vote-USA'";
        sql_Security_Insert += ",'VOTEUSA'";
        sql_Security_Insert += ")";
        db.ExecuteSQL(sql_Security_Insert);

        Msg.Text = db.Ok("The volunteer user has been added.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    //#region Checkboxes for Navbars
    //protected void CheckBox_Omit_Anchor_Global_Election_Report_CheckedChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (CheckBox_Omit_Anchor_Global_Election_Report.Checked)
    //    {
    //      db.Master_Update_Is_Omit_Anchor_Global_Election_Report(true);
    //      Msg.Text = db.Ok("The Election Report Anchor"
    //      + " on all pages will be OMITTED.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Is_Omit_Anchor_Global_Election_Report(false);
    //      Msg.Text = db.Ok("The Election Report Anchor"
    //      + " on all pages will NOT BE OMITTED.");
    //    }
    //    db.Cache_Remove_All();
    //    //Labels_Set_Cache_All();
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void CheckBox_Omit_Anchor_Global_Elected_Report_CheckedChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (CheckBox_Omit_Anchor_Global_Elected_Report.Checked)
    //    {
    //      db.Master_Update_Is_Omit_Anchor_Global_Elected_Report(true);
    //      Msg.Text = db.Ok("The Elected Officials Anchor"
    //      + " on all pages will be OMITTED.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Is_Omit_Anchor_Global_Elected_Report(false);
    //      Msg.Text = db.Ok("The Elected Officials Anchor"
    //      + " on all pages will NOT BE OMITTED.");
    //    }
    //    db.Cache_Remove_All();
    //    //Labels_Set_Cache_All();
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void CheckBox_Omit_Navbar_Federal_CheckedChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (CheckBox_Omit_Navbar_Federal.Checked)
    //    {
    //      db.Master_Update_Is_Omit_Navbar_Federal(true);
    //      Msg.Text = db.Ok("The Federal Navbar"
    //      + " on all pages will be OMITTED.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Is_Omit_Navbar_Federal(false);
    //      Msg.Text = db.Ok("The Federal Navbar"
    //      + " on all pages will NOT BE OMITTED.");
    //    }
    //    db.Cache_Remove_All();
    //    //Labels_Set_Cache_All();
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void CheckBox_Omit_Navbar_State_CheckedChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (CheckBox_Omit_Navbar_State.Checked)
    //    {
    //      db.Master_Update_Is_Omit_Navbar_State(true);
    //      Msg.Text = db.Ok("The State Navbar"
    //      + " on all pages will be OMITTED.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Is_Omit_Navbar_State(false);
    //      Msg.Text = db.Ok("The State Navbar"
    //      + " on all pages will NOT BE OMITTED.");
    //    }
    //    db.Cache_Remove_All();
    //    //Labels_Set_Cache_All();
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void CheckBox_Omit_Anchors_Sample_Ballot_CheckedChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (CheckBox_Omit_Anchors_Sample_Ballot.Checked)
    //    {
    //      db.Master_Update_Is_Omit_Anchors_Sample_Ballot(true);
    //      Msg.Text = db.Ok("The Sample Ballot Image Anchors"
    //      + " on all pages will be OMITTED.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Is_Omit_Anchors_Sample_Ballot(false);
    //      Msg.Text = db.Ok("The Sample Ballot Image Anchors"
    //      + " on all pages will NOT BE OMITTED.");
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //#endregion Checkboxes for Navbars

    #region Methods for Button_ZipAddresses_Click

    //protected void Internal_DataTable_ZipStreetsUnique_Add_Row(
    //  ref DataTable ZipStreetsUnique
    //  , DataRow Row_ZipStreets
    //  )
    //{
    //  #region Note
    //  //For a bulk insert where duplicate keys are ignored
    //  //the uniqueness of the unique keys need not be checked
    //  #endregion Note
    //  ZipStreetsUnique.Rows.Add(
    //      Row_ZipStreets["StateCode"].ToString().Trim()
    //    , Row_ZipStreets["CityNameKey"].ToString().Trim()
    //    , Row_ZipStreets["StreetPre"].ToString().Trim()
    //    , Row_ZipStreets["Street"].ToString().Trim()
    //    , Row_ZipStreets["StreetType"].ToString().Trim()
    //    , Row_ZipStreets["StreetDirection"].ToString().Trim()
    //    );
    //}
    //protected void Internal_DataTable_ZipStreets_Add_Row(
    //  ref DataTable ZipStreetsRanges
    //  , DataRow Row_ZipStreetsTemp
    //  , string StreetNumberLow
    //  , string StreetNumberHigh
    //  )
    //{
    //  #region Note
    //  //For a bulk insert where duplicate keys are ignored
    //  //the uniqueness of the unique keys need not be checked
    //  #endregion Note
    //  ZipStreetsRanges.Rows.Add(
    //      Row_ZipStreetsTemp["StateCode"].ToString().Trim()
    //    , Row_ZipStreetsTemp["CityNameKey"].ToString().Trim()
    //    , Row_ZipStreetsTemp["StreetPre"].ToString().Trim()
    //    , Row_ZipStreetsTemp["Street"].ToString().Trim()
    //    , Row_ZipStreetsTemp["StreetType"].ToString().Trim()
    //    , Row_ZipStreetsTemp["StreetDirection"].ToString().Trim()
    //    , Row_ZipStreetsTemp["UpdateKey"].ToString().Trim()
    //    , Row_ZipStreetsTemp["PreferredLastLineKey"].ToString().Trim()
    //    , StreetNumberLow
    //    , StreetNumberHigh
    //    , Row_ZipStreetsTemp["Zip5"].ToString().Trim()
    //    , Row_ZipStreetsTemp["Zip4Low"].ToString().Trim()
    //    , Row_ZipStreetsTemp["Zip4High"].ToString().Trim()
    //    );
    //}
    //protected void Internal_DataTable_ZipStreetsNumbers_Add_Row(
    //  ref DataTable ZipStreetsNumbers
    //  , DataRow Row_ZipStreets
    //  , string Postal_Number
    //  , string Zip4
    //  )
    //{
    //  #region Note
    //  //For a bulk insert where duplicate keys are ignored
    //  //the uniqueness of the unique keys need not be checked
    //  #endregion Note
    //  ZipStreetsNumbers.Rows.Add(
    //      Row_ZipStreets["UpdateKey"].ToString().Trim()
    //    , Postal_Number
    //    , Row_ZipStreets["Zip5"].ToString().Trim()
    //    , Zip4.PadLeft(4, '0')
    //    );
    //}

    //protected void Internal_DataTable_ZipAptSuites_Add_Row(
    //  ref DataTable ZipAptSuites
    //  , DataRow Row_ZipStreets
    //  , string Postal_Number
    //  , string Zip4
    //  )
    //{
    //  #region Note
    //  //For a bulk insert where duplicate keys are ignored
    //  //the uniqueness of the unique keys need not be checked
    //  //as what used to be done with:
    //  //if (
    //  // (Rows_ZipAptSuites_PrimaryKey_Db(Row_ZipStreets, Postal_Number) == 0)
    //  // && (Is_Unique_ZipAptSuites_PrimaryKey_Internal(
    //  //       ref ZipAptSuites, Row_ZipStreets, Postal_Number))
    //  // )
    //  //{
    //  #endregion Note
    //  ZipAptSuites.Rows.Add(
    //    Row_ZipStreets["UpdateKey"].ToString()
    //    , Row_ZipStreets["AptSuiteType"].ToString()
    //    , Postal_Number
    //    , Row_ZipStreets["Zip5"].ToString()
    //    , Zip4.PadLeft(4, '0')
    //    );
    //}

    //protected void Internal_DataTable_ZipStreetsTemp_Add_Row(
    //  ref DataTable ZipStreetsTemp
    //  , DataRow Row_ZipStreetsDownloaded
    //  )
    //{
    //  #region Get CityNameKey for the PreferredLastLineKey
    //  string CityNameKey = db.Single_Key_Str_Optional(
    //    "ZipCities"
    //    , "CityNameKey"
    //    , "PreferredLastLineKey"
    //    , Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString()
    //    );
    //  #endregion Get CityNameKey for the PreferredLastLineKey

    //  if (!string.IsNullOrEmpty(CityNameKey))
    //  {
    //    #region Note
    //    //2,991 rows out of 1,142,600 ZipStreetsDownloaded
    //    //did not have a matching PreferredLastLineKey
    //    //in the ZipCities Table
    //    //These row are skipped.
    //    //.26% of all the downloaded streets.
    //    #endregion Note
    //    ZipStreetsTemp.Rows.Add(
    //      Row_ZipStreetsDownloaded["UpdateKey"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["State"].ToString().Trim()
    //      , CityNameKey
    //      , Row_ZipStreetsDownloaded["StPreDirAbbr"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["StName"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["StSuffixAbbr"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["StPostDirAbbr"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["RecordType"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressPrimaryLowNumber"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressPrimaryHighNumber"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressPrimaryEvenOdd"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressSecAbbr"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressSecLowNumber"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressSecHighNumber"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["AddressSecOddEven"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["ZipCode"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["Plus4Low"].ToString().Trim()
    //      , Row_ZipStreetsDownloaded["Plus4High"].ToString().Trim()
    //      );
    //  }
    //}


    //protected void One_ZipStreets_Row(
    //  ref DataTable ZipStreetsUnique
    //  , ref DataTable ZipStreetsRanges
    //  , ref DataTable ZipStreetsNumbers
    //  , ref DataTable ZipAptSuites
    //  , DataRow Row_ZipStreetsTemp
    //  )
    //{
    //  #region Note
    //  //ZipStreetsNumbers & ZipAptSuites Tables
    //  //are not loaded because they take too much
    //  //disc space.
    //  //Later they may be reinstated to produce 
    //  //a unique mailing address for every 
    //  //address in the USA
    //  #endregion Note
    //  string Error_UpdateKey = Row_ZipStreetsTemp["UpdateKey"].ToString();
    //  try
    //  {
    //    if (
    //      (Row_ZipStreetsTemp["Zip5"].ToString().Length == 5)
    //      && (db.Is_Digits(Row_ZipStreetsTemp["Zip5"].ToString()))
    //      && (Row_ZipStreetsTemp["Zip4Low"].ToString().Length == 4)
    //      && (db.Is_Digits(Row_ZipStreetsTemp["Zip4Low"].ToString()))
    //      && (Row_ZipStreetsTemp["Zip4High"].ToString().Length == 4)
    //      && (db.Is_Digits(Row_ZipStreetsTemp["Zip4High"].ToString()))
    //      )
    //    {
    //      #region One Good ZipStreetsTemp row

    //      #region Note
    //      //ZipStreetsNumbers & ZipAptSuites Tables
    //      //are not loaded because they take too much
    //      //disc space.
    //      //Later they may be reinstated to produce 
    //      //a unique mailing address for every 
    //      //address in the USA
    //      //
    //      //
    //      //Address and Apt Numbers can be in these Formats:
    //      //[DDD]
    //      //[0000000DDD]
    //      //[DDD-][DDD]
    //      //[AAA-][DDD]
    //      //[DDD-][0000000DDD]
    //      //[DDD][A]
    //      //[0000000DDD][A]
    //      //[DDD] [D/D]
    //      //[0000000DDD] [D/D]
    //      //[DDD] [D/D][A]
    //      //[0000000DDD] [D/D][A]

    //      //[A][DDD]
    //      //[A][0000000DDD]
    //      //[A][DDD-][DDD]
    //      //[A][DDD-][0000000DDD]
    //      //[A][DDD][A]
    //      //[A][0000000DDD][A]
    //      //[A][DDD] [D/D]
    //      //[A][0000000DDD] [D/D]
    //      //[A][DDD] [D/D][A]
    //      //[A][0000000DDD] [D/D][A]          
    //      //
    //      //A = Alphabetic
    //      //D = Digit
    //      //
    //      //
    //      //VA has only 3 addresses with no street number but a suite number
    //      //For these the building name is only available
    //      //So this case will be ignored because adding the building name 
    //      //would consume too much storage in the ZipStreetsTemp Table (40 varchar)
    //      //
    //      //Rural Addresses, general delivery, firms and highrises
    //      //have no steet number (1718 in VA) 
    //      //and all but 3 in VA have no Apt or Suite numbers
    //      //The address will be only a Street Name, City and Zip
    //      //
    //      //And for these there in only one Zip4 code
    //      #endregion Note

    //      #region replaced
    //      //#region Add Row ZipStreetsUnique + ZipStreetsRanges

    //      //Internal_DataTable_ZipStreetsUnique_Add_Row(
    //      //      ref  ZipStreetsUnique
    //      //      , Row_ZipStreetsTemp
    //      //      );

    //      //Internal_DataTable_ZipStreets_Add_Row(
    //      //     ref  ZipStreetsRanges
    //      //     , Row_ZipStreetsTemp
    //      //     );

    //      //#endregion Add Row ZipStreetsUnique + ZipStreetsRanges

    //      //if (string.IsNullOrEmpty(Row_ZipStreetsTemp["StreetNumberLow"].ToString()))
    //      //{
    //      //  #region no street number

    //      //  Internal_DataTable_ZipStreetsUnique_Add_Row(
    //      //        ref  ZipStreetsUnique
    //      //        , Row_ZipStreetsTemp
    //      //        );

    //      //  Internal_DataTable_ZipStreets_Add_Row(
    //      //       ref  ZipStreetsRanges
    //      //       , Row_ZipStreetsTemp
    //      //       );
    //      //  if (CheckBox_ZipStreetNumbers_ZipAptSuites.Checked)
    //      //  {
    //      //    #region ZipStreetsNumbers & ZipAptSuites
    //      //    #region Note
    //      //    //ZipStreetsNumbers & ZipAptSuites Tables
    //      //    //are not loaded because they take too much
    //      //    //disc space.
    //      //    //Later they may be reinstated to produce 
    //      //    //a unique mailing address for every 
    //      //    //address in the USA
    //      //    #endregion Note
    //      //    Internal_DataTable_ZipStreetsNumbers_Add_Row(
    //      //          ref  ZipStreetsNumbers
    //      //          , Row_ZipStreetsTemp
    //      //          , Row_ZipStreetsTemp["StreetNumberLow"].ToString()
    //      //          , Row_ZipStreetsTemp["Zip4Low"].ToString()
    //      //          );
    //      //    #endregion ZipStreetsNumbers & ZipAptSuites
    //      //  }

    //      //  #endregion no street number
    //      //}
    //      //else
    //      #endregion replaced

    //      #region Street number range
    //      string Number_Street_Low_Str = string.Empty;
    //      string Number_Street_High_Str = string.Empty;
    //      if (!string.IsNullOrEmpty(Row_ZipStreetsTemp["StreetNumberLow"].ToString()))
    //      {

    //        #region Street number range
    //        string Alpha_Before_Street_Low = string.Empty;
    //        string Alpha_After_Street_Low = string.Empty;
    //        string Range_Before_Street_Low = string.Empty;
    //        string Fraction_After_Street_Low = string.Empty;
    //        db.Postal_Address_Number_Breakdown(
    //               Row_ZipStreetsTemp["StreetNumberLow"].ToString()
    //              , ref  Alpha_Before_Street_Low
    //              , ref  Alpha_After_Street_Low
    //              , ref  Range_Before_Street_Low
    //              , ref  Fraction_After_Street_Low
    //              , ref  Number_Street_Low_Str
    //              );
    //        Int64 Number_Street_Low_Int = 0;
    //        if (Number_Street_Low_Str != string.Empty)
    //          Number_Street_Low_Int = Convert.ToInt64(Number_Street_Low_Str);

    //        string Alpha_Before_Street_High = string.Empty;
    //        string Alpha_After_Street_High = string.Empty;
    //        string Range_Before_Street_High = string.Empty;
    //        string Fraction_After_Street_High = string.Empty;
    //        db.Postal_Address_Number_Breakdown(
    //               Row_ZipStreetsTemp["StreetNumberHigh"].ToString()
    //              , ref  Alpha_Before_Street_High
    //              , ref  Alpha_After_Street_High
    //              , ref  Range_Before_Street_High
    //              , ref  Fraction_After_Street_High
    //              , ref  Number_Street_High_Str
    //              );
    //        Int64 Number_Street_High_Int = 0;
    //        if (Number_Street_High_Str != string.Empty)
    //          Number_Street_High_Int = Convert.ToInt64(Number_Street_High_Str);
    //        #endregion Street number range

    //        if (CheckBox_ZipStreetNumbers_ZipAptSuites.Checked)
    //        {
    //          #region Increment Zip4 for Street numbers
    //          bool Is_Increment_Zip4 = false;
    //          if (Row_ZipStreetsTemp["Zip4Low"].ToString()
    //            != Row_ZipStreetsTemp["Zip4High"].ToString()
    //            )
    //            Is_Increment_Zip4 = true;

    //          //Street numbers can be assigned odd (O), even (E) or sequential (B) for block
    //          int Street_Number_And_Zip4_Increment = 2;
    //          //int Zip4_Increment = 2;
    //          if (Row_ZipStreetsTemp["StreetEvenOdd"].ToString().ToUpper() == "B")
    //          {
    //            Street_Number_And_Zip4_Increment = 1;
    //            //Zip4_Increment = 1;
    //          }
    //          #endregion Increment Zip4 for Street numbers

    //          #region Low range start for Street Zip4
    //          string Zip4_Str = Row_ZipStreetsTemp["Zip4Low"].ToString();
    //          int Zip4_Integer = Convert.ToInt16(Row_ZipStreetsTemp["Zip4Low"].ToString());
    //          #endregion Low range start for Street Zip4

    //          #region Street Number increment
    //          //Convert non-integer numbers to integer to establish range
    //          db.IncrementPostalAddresses Increment_Street_By =
    //            Non_Integer_Postal_Number_Range(
    //                 Number_Street_Low_Str
    //                , Alpha_Before_Street_Low
    //                , Range_Before_Street_Low
    //                , Alpha_After_Street_Low
    //                , Number_Street_High_Str
    //                , Alpha_Before_Street_High
    //                , Range_Before_Street_High
    //                , Alpha_After_Street_High
    //                , ref Number_Street_Low_Int
    //                , ref Number_Street_High_Int
    //                );
    //          #endregion Street Number increment

    //          #region Loop for each Street Number for each ZipStreetsTemp Row
    //          for (Int64 StreetNumber64 = Number_Street_Low_Int;
    //            StreetNumber64 <= Number_Street_High_Int;
    //            StreetNumber64 = StreetNumber64 + Street_Number_And_Zip4_Increment)
    //          {
    //            #region One street number

    //            string Postal_Number = db.Postal_Address_Number_Assemble(
    //               Alpha_Before_Street_Low
    //              , Alpha_After_Street_Low
    //              , Range_Before_Street_Low
    //              , Fraction_After_Street_Low
    //              , StreetNumber64.ToString()
    //              );

    //            #region Note
    //            //In the ZipStreetsTemp Table for Highrise and Firms (H & F)
    //            //there is a row for the highrise
    //            //and an additional row for the range of appartments in that highrise.
    //            //Both are added so that apartment highrise addresses can 
    //            //be used to for address lookup purposes.             
    //            #endregion Note

    //            #region replaced
    //            //#region Single Address for street number (no Apts or Suites)

    //            //if (Is_Bulk_Load_Tables)
    //            //{
    //            //  #region Bulk Load
    //            //  Internal_DataTable_ZipStreetsNumbers_Add_Row(
    //            //        ref  ZipStreetsNumbers
    //            //        , Row_ZipStreetsTemp
    //            //        , Postal_Number
    //            //        , Zip4_Str
    //            //        );

    //            //  #endregion Bulk Load
    //            //}
    //            //else
    //            //{
    //            //  #region Insert or Update row by row
    //            //  ZipAddresses_Insert_Or_Update(
    //            //     Row_ZipStreetsTemp
    //            //    , Postal_Number
    //            //    , Zip4_Str
    //            //    );
    //            //  #endregion Insert or Update row by row
    //            //}
    //            //#endregion Single Address for street number (no Apts or Suites)
    //            #endregion replaced

    //            #region Bulk Load
    //            Internal_DataTable_ZipStreetsNumbers_Add_Row(
    //                  ref  ZipStreetsNumbers
    //                  , Row_ZipStreetsTemp
    //                  , Postal_Number
    //                  , Zip4_Str
    //                  );

    //            #endregion Bulk Load

    //            if (!string.IsNullOrEmpty(Row_ZipStreetsTemp["AptSuiteNumberLow"].ToString()))
    //            {
    //              #region Addresses for Apartments or Suites for the single street number

    //              #region Note
    //              //Address and Apt Numbers can be in these Formats:
    //              //[DDD]
    //              //[0000000DDD]
    //              //[DDD-][DDD]
    //              //[DDD-][0000000DDD]
    //              //[DDD][A]
    //              //[0000000DDD][A]
    //              //[DDD] [D/D]
    //              //[0000000DDD] [D/D]
    //              //[DDD] [D/D][A]
    //              //[0000000DDD] [D/D][A]

    //              //[A][DDD]
    //              //[A][0000000DDD]
    //              //[A][DDD-][DDD]
    //              //[A][DDD-][0000000DDD]
    //              //[A][DDD][A]
    //              //[A][0000000DDD][A]
    //              //[A][DDD] [D/D]
    //              //[A][0000000DDD] [D/D]
    //              //[A][DDD] [D/D][A]
    //              //[A][0000000DDD] [D/D][A]  
    //              //
    //              //A = Alphabetic
    //              //D = Digit
    //              #endregion Note

    //              #region Apartments or Suites number range
    //              string Alpha_Before_Apt_Low = string.Empty;
    //              string Alpha_After_Apt_Low = string.Empty;
    //              string Range_Before_Apt_Low = string.Empty;
    //              string Fraction_After_Apt_Low = string.Empty;
    //              string Number_Apt_Low_Str = string.Empty;
    //              db.Postal_Address_Number_Breakdown(
    //                     Row_ZipStreetsTemp["AptSuiteNumberLow"].ToString()
    //                    , ref  Alpha_Before_Apt_Low
    //                    , ref  Alpha_After_Apt_Low
    //                    , ref  Range_Before_Apt_Low
    //                    , ref  Fraction_After_Apt_Low
    //                    , ref  Number_Apt_Low_Str
    //                    );
    //              Int64 Number_Apt_Low_Int = 0;
    //              if (Number_Apt_Low_Str != string.Empty)
    //                Number_Apt_Low_Int = Convert.ToInt64(Number_Apt_Low_Str);

    //              string Alpha_Before_Apt_High = string.Empty;
    //              string Alpha_After_Apt_High = string.Empty;
    //              string Range_Before_Apt_High = string.Empty;
    //              string Fraction_After_Apt_High = string.Empty;
    //              string Number_Apt_High_Str = string.Empty;
    //              db.Postal_Address_Number_Breakdown(
    //                     Row_ZipStreetsTemp["AptSuiteNumberHigh"].ToString()
    //                    , ref  Alpha_Before_Apt_High
    //                    , ref  Alpha_After_Apt_High
    //                    , ref  Range_Before_Apt_High
    //                    , ref  Fraction_After_Apt_High
    //                    , ref  Number_Apt_High_Str
    //                    );
    //              Int64 Number_Apt_High_Int = 0;
    //              if (Number_Apt_High_Str != string.Empty)
    //                Number_Apt_High_Int = Convert.ToInt64(Number_Apt_High_Str);
    //              #endregion Apartments or Suites number range

    //              #region Increment Zip4 for Apt and Suite numbers
    //              bool Is_Increment_Zip4_Apt = false;
    //              if (Row_ZipStreetsTemp["Zip4Low"].ToString()
    //                != Row_ZipStreetsTemp["Zip4High"].ToString()
    //                )
    //                Is_Increment_Zip4_Apt = true;

    //              //Apt and Suite numbers can be assigned odd (O), even (E) or sequential (B) for block
    //              //int Apt_Number_Increment = 2;
    //              int Apt_Zip4_Increment = 2;
    //              if (Row_ZipStreetsTemp["AptSuiteEvenOdd"].ToString().ToUpper() == "B")
    //              {
    //                //Apt_Number_Increment = 1;
    //                Apt_Zip4_Increment = 1;
    //              }
    //              #endregion Increment Zip4 for Apt and Suite numbers

    //              #region Low range start for Apt or Suite Zip4
    //              string Apt_Zip4_Str = Row_ZipStreetsTemp["Zip4Low"].ToString();
    //              int Apt_Zip4_Integer = Convert.ToInt16(Row_ZipStreetsTemp["Zip4Low"].ToString());
    //              #endregion Low range start for Apt or Suite Zip4

    //              #region Apt number increment
    //              db.IncrementPostalAddresses Increment_Apt_By = Non_Integer_Postal_Number_Range(
    //                     Number_Apt_Low_Str
    //                    , Alpha_Before_Apt_Low
    //                    , Range_Before_Apt_Low
    //                    , Alpha_After_Apt_Low
    //                    , Number_Apt_High_Str
    //                    , Alpha_Before_Apt_High
    //                    , Range_Before_Apt_High
    //                    , Alpha_After_Apt_High
    //                    , ref Number_Apt_Low_Int
    //                    , ref Number_Apt_High_Int
    //                    );
    //              #endregion Apt number increment

    //              #region Loop for each Apt or Suite Number for single address
    //              for (Int64 Apt_Number64 = Number_Apt_Low_Int;
    //                Apt_Number64 <= Number_Apt_High_Int;
    //                Apt_Number64 = Apt_Number64 + Apt_Zip4_Increment)
    //              {
    //                #region One Apt or Suite Number

    //                string Postal_Apt_Number = db.Postal_Address_Number_Assemble(
    //                   Alpha_Before_Apt_Low
    //                  , Alpha_After_Apt_Low
    //                  , Range_Before_Apt_Low
    //                  , Fraction_After_Apt_Low
    //                  , Number_Apt_Low_Str
    //                  );

    //                #region replaced
    //                //if (Is_Bulk_Load_Tables)
    //                //{
    //                //  #region Bulk Load Apt or Suites
    //                //  Internal_DataTable_ZipAptSuites_Add_Row(
    //                //    ref ZipAptSuites
    //                //    , Row_ZipStreetsTemp
    //                //    , Postal_Apt_Number
    //                //    , Apt_Zip4_Str
    //                //    );
    //                //  #endregion Bulk Load Apt or Suites
    //                //}
    //                //else
    //                //{
    //                //  #region Insert or Update ZipAptSuites Db Table
    //                //  xZipAptSuites_Insert_Or_Update(
    //                //     Row_ZipStreetsTemp
    //                //    , Postal_Apt_Number
    //                //    , Apt_Zip4_Str
    //                //    );
    //                //  #endregion Insert or Update ZipAptSuites Db Table
    //                //}
    //                #endregion replaced

    //                #region Bulk Load Apt or Suites
    //                Internal_DataTable_ZipAptSuites_Add_Row(
    //                  ref ZipAptSuites
    //                  , Row_ZipStreetsTemp
    //                  , Postal_Apt_Number
    //                  , Apt_Zip4_Str
    //                  );
    //                #endregion Bulk Load Apt or Suites

    //                Increment_Non_Integer_Postal_Number(
    //                  Increment_Apt_By
    //                  , Apt_Zip4_Increment
    //                  , ref  Number_Apt_Low_Int
    //                  , ref  Number_Apt_Low_Str
    //                  , ref  Alpha_Before_Apt_Low
    //                  , ref  Range_Before_Apt_Low
    //                  , ref  Alpha_After_Apt_Low
    //                  );

    //                #endregion One Apt or Suite Number
    //              }
    //              #endregion Loop for each Apt or Suite Number for single address

    //              #region Zip4 increment
    //              if (Is_Increment_Zip4_Apt)
    //                Apt_Zip4_Integer = Apt_Zip4_Integer + Apt_Zip4_Increment;
    //              Apt_Zip4_Str = Apt_Zip4_Integer.ToString();
    //              #endregion Zip4 increment

    //              #endregion Apartments or Suites for the single street number
    //            }

    //            #region Increment Postal Street number for integer & non-integer numbers
    //            Increment_Non_Integer_Postal_Number(
    //              Increment_Street_By
    //              , Street_Number_And_Zip4_Increment
    //              , ref  Number_Street_Low_Int
    //              , ref  Number_Street_Low_Str
    //              , ref  Alpha_Before_Street_Low//
    //              , ref  Range_Before_Street_Low//
    //              , ref  Alpha_After_Street_Low//
    //              );
    //            #endregion Increment Postal Street number for integer & non-integer numbers

    //            if (Is_Increment_Zip4)
    //              Zip4_Integer = Zip4_Integer + Street_Number_And_Zip4_Increment;
    //            Zip4_Str = Zip4_Integer.ToString();
    //            #endregion One street number
    //          }
    //          #endregion Loop for each Street Number for each ZipStreetsTemp Row
    //        }

    //      }
    //      #endregion Street number range

    //      #region ZipStreetsUnique Row
    //      Internal_DataTable_ZipStreetsUnique_Add_Row(
    //            ref  ZipStreetsUnique
    //            , Row_ZipStreetsTemp
    //            );
    //      #endregion ZipStreetsUnique Row

    //      #region ZipStreetsRanges Row
    //      if (string.IsNullOrEmpty(Row_ZipStreetsTemp["StreetNumberLow"].ToString()))
    //      {
    //        #region No street numbers
    //        Internal_DataTable_ZipStreets_Add_Row(
    //             ref  ZipStreetsRanges
    //             , Row_ZipStreetsTemp
    //             , string.Empty
    //             , string.Empty
    //             );
    //        #endregion No street numbers
    //      }
    //      else
    //      {
    //        #region Street numbers
    //        Internal_DataTable_ZipStreets_Add_Row(
    //             ref  ZipStreetsRanges
    //             , Row_ZipStreetsTemp
    //             , Number_Street_Low_Str
    //             , Number_Street_High_Str
    //             );
    //        #endregion Street numbers
    //      }
    //      #endregion ZipStreetsRanges Row

    //      #region replaced above - Add Row ZipStreetsUnique + ZipStreetsRanges
    //      //Internal_DataTable_ZipStreetsUnique_Add_Row(
    //      //      ref  ZipStreetsUnique
    //      //      , Row_ZipStreetsTemp
    //      //      );

    //      //Internal_DataTable_ZipStreets_Add_Row(
    //      //     ref  ZipStreetsRanges
    //      //     , Row_ZipStreetsTemp
    //      //     );
    //      #endregion replaced above - Add Row ZipStreetsUnique + ZipStreetsRanges

    //      #endregion One Good ZipStreetsTemp Row
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message + "One_ZipStreets_Row:::ZipStreetsTemp UpdateKey:::" + Error_UpdateKey);
    //    db.Log_Error_Admin(ex
    //      , ex.Message + "One_ZipStreets_Row:::ZipStreetsTemp UpdateKey:::" + Error_UpdateKey
    //      );
    //    #endregion
    //  }
    //}

    //protected db.IncrementPostalAddresses Non_Integer_Postal_Number_Range(
    //  string Number_Low_Str
    //  , string Alpha_Before_Low
    //  , string Range_Before_Low
    //  , string Alpha_After_Low
    //  , string Number_High_Str
    //  , string Alpha_Before_High
    //  , string Range_Before_High
    //  , string Alpha_After_High
    //  , ref Int64 Number_Low_Int
    //  , ref Int64 Number_High_Int
    //  )
    //{
    //  #region Note
    //  //Apt or Suite Number could be a character and/or numbers
    //  //Incrementing through the range of Apt or suite numbers
    //  //can be done on any part of the Apt number
    //  //like the alpha before, the number, the range, or the alpha after
    //  //
    //  //This method uses the parts of low and high range 
    //  //of the Postal number
    //  //and returns the postal number part being incremented
    //  //and the low and high integer equivilant
    //  #endregion Note

    //  #region Convert non-integer Street or Apt numbers to integer to establish addresses range

    //  db.IncrementPostalAddresses Increment_By = db.IncrementPostalAddresses.By_Number;
    //  if (Number_Low_Str != Number_High_Str)
    //  {
    //    //range of numbers
    //    Increment_By = db.IncrementPostalAddresses.By_Number;
    //    Number_Low_Int = Convert.ToInt64(Number_Low_Str);
    //    Number_High_Int = Convert.ToInt64(Number_High_Str);
    //  }
    //  else if (Alpha_Before_Low != Alpha_Before_High)
    //  {
    //    //range of characters before number <
    //    Increment_By = db.IncrementPostalAddresses.By_Alpha_Before;
    //    Number_Low_Int = Convert.ToInt64(db.Str_First_Char_Value(Alpha_Before_Low));
    //    Number_High_Int = Convert.ToInt64(db.Str_First_Char_Value(Alpha_Before_High));
    //  }
    //  else if (Range_Before_Low != Range_Before_High)
    //  {
    //    //range of characters with a "-" before number
    //    Increment_By = db.IncrementPostalAddresses.By_Range_Before;
    //    Number_Low_Int = Convert.ToInt64(db.Str_First_Char_Value(Range_Before_Low));
    //    Number_High_Int = Convert.ToInt64(db.Str_First_Char_Value(Range_Before_High));
    //  }
    //  else if (Alpha_After_Low != Alpha_After_High)
    //  {
    //    //range of characters after number
    //    Increment_By = db.IncrementPostalAddresses.By_Alpha_After;
    //    Number_Low_Int = Convert.ToInt64(db.Str_First_Char_Value(Alpha_After_Low));
    //    Number_High_Int = Convert.ToInt64(db.Str_First_Char_Value(Alpha_After_High));
    //  }

    //  #endregion Convert non-integer Apt numbers to integer to establish addresses range

    //  return Increment_By;
    //}

    //protected void Increment_Non_Integer_Postal_Number(
    //  db.IncrementPostalAddresses Increment_Postal_Addresses_Part
    //  , int Increment_By
    //  , ref Int64 Number_Int
    //  , ref string Number_Str
    //  , ref string Alpha_Before_Str
    //  , ref string Range_Before_Str
    //  , ref string Alpha_After_Str
    //  )
    //{
    //  if (Increment_Postal_Addresses_Part == db.IncrementPostalAddresses.By_Number)
    //  {
    //    //Number_Int++;
    //    Number_Int = Number_Int + Increment_By;
    //    Number_Str = Number_Int.ToString();
    //  }
    //  else if (Increment_Postal_Addresses_Part == db.IncrementPostalAddresses.By_Alpha_Before)//<
    //  {
    //    Alpha_Before_Str =
    //      db.Increment_String_Char_First(Alpha_Before_Str, Increment_By);
    //  }
    //  else if (Increment_Postal_Addresses_Part == db.IncrementPostalAddresses.By_Range_Before)
    //  {
    //    Range_Before_Str =
    //      db.Increment_String_Char_First(Range_Before_Str, Increment_By);
    //  }
    //  else if (Increment_Postal_Addresses_Part == db.IncrementPostalAddresses.By_Alpha_After)
    //  {
    //    Alpha_After_Str =
    //      db.Increment_String_Char_First(Alpha_After_Str, Increment_By);
    //  }
    //}
    //protected void Log_Rows_Processed(string TableName, Int64 RowsProcessed)
    //{
    //  string SQL = "INSERT INTO ZipTableRowsProcessedLog";
    //  SQL += "(";
    //  SQL += " TableName";
    //  SQL += ",RowsProcessed";
    //  SQL += ",DateTime";
    //  SQL += ")";
    //  SQL += " VALUES ";
    //  SQL += "(";
    //  SQL += db.SQLLit(TableName);
    //  SQL += "," + RowsProcessed;
    //  SQL += "," + db.SQLLit(Db.DbNow);
    //  SQL += ")";
    //  db.ExecuteSQL(SQL);
    //}
    //protected void Log_State_Maintenance(
    //  string StateCode
    //  , string MaintenanceDesc
    //  , Int64 RowsProcessed
    //  )
    //{
    //  string sql = "INSERT INTO ZipStatesMaintenanceLog";
    //  sql += "(";
    //  sql += " StateCode";
    //  sql += ",MaintenanceDesc";
    //  sql += ",RowsProcessed";
    //  sql += ",DateTime";
    //  sql += ")";
    //  sql += " VALUES ";
    //  sql += "(";
    //  sql += db.SQLLit(StateCode);
    //  sql += "," + db.SQLLit(MaintenanceDesc);
    //  sql += "," + RowsProcessed;
    //  sql += "," + db.SQLLit(Db.DbNow);
    //  sql += ")";
    //  db.ExecuteSQL(sql);
    //}
    #endregion Methods for Button_ZipAddresses_Click

//    protected void Button_ZipCities_Click(object sender, EventArgs e)
//    {
//      string SQL_Debug = string.Empty;
//      try
//      {
//        #region Inits
//        Server.ScriptTimeout = 60000;//60000 sec = 1000 min = 16 hours
//        string From = string.Empty;
//        string sql = string.Empty;
//        DateTime Start_Time = DateTime.Now;
//        DataTable Table_ZipCitiesDownloaded = null;

//        #region reinstate when completely debugged
//#if false
//        db.ExecuteSQL("truncate TABLE ZipCitiesDownloaded");
//#endif
//        #endregion

//        #endregion Inits

//        if (!CheckBox_Skip_ZipCities.Checked)
//        {
//          #region Load (Insert or Update) ZipCities Table
//          #region Table_ZipCitiesDownloaded
//          sql = "Select"
//           + " ZipCode"
//           + ",PreferredLastLineKey"
//           + ",State"
//           + ",City"
//           + ",PrimaryRecord"
//           + ",StateFIPS,StateANSI"
//           + ",CountyFIPS"
//           + ",CountyANSI"
//           + " from ZipCitiesDownloaded"
//           ;
//          Table_ZipCitiesDownloaded = db.Table(sql);
//          #endregion Table_ZipCitiesDownloaded

//          #region Log Started
//          Log_State_Maintenance(
//               "xx"
//              , "Started Initial Load of ZipCities Tables"
//                  + " Tables"
//            //, Convert.ToInt64(0)
//              , 0
//              );
//          #endregion Log Started

//          foreach (DataRow Row_ZipCitiesDownloaded in Table_ZipCitiesDownloaded.Rows)
//          {
//            if (
//              (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["ZipCode"].ToString()))
//              && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["State"].ToString()))
//              && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["City"].ToString()))
//              && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString()))
//             )
//            {
//              #region Insert or Update ZipCities Table
//              From = "ZipCities WHERE PreferredLastLineKey="
//                + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString().Trim());
//              if (db.Rows_Count_From(From) == 0)
//              {
//                string SQL = "INSERT INTO ZipCities ";
//                SQL += "(";
//                SQL += "StateCode";
//                SQL += ",CityNameKey";
//                SQL += ",PreferredLastLineKey";
//                SQL += ",Zip5";
//                SQL += ",StateFIPS";
//                SQL += ",StateANSI";
//                SQL += ",CountyFIPS";
//                SQL += ",CountyANSI";
//                SQL += ")";
//                SQL += " VALUES ";
//                SQL += "(";
//                SQL += db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["ZipCode"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["StateFIPS"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["StateANSI"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CountyFIPS"].ToString().Trim());
//                SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CountyANSI"].ToString().Trim());
//                SQL += ")";

//                SQL_Debug = SQL;

//                db.ExecuteSQL(SQL);
//              }
//              else
//              {
//                string UpdateSQL = "UPDATE ZipCities";
//                UpdateSQL += " SET StateFIPS=" + db.SQLLit(Row_ZipCitiesDownloaded["StateFIPS"].ToString());
//                UpdateSQL += " ,StateANSI=" + db.SQLLit(Row_ZipCitiesDownloaded["StateANSI"].ToString());
//                UpdateSQL += " ,CountyFIPS=" + db.SQLLit(Row_ZipCitiesDownloaded["CountyFIPS"].ToString());
//                UpdateSQL += " ,CountyANSI=" + db.SQLLit(Row_ZipCitiesDownloaded["CountyANSI"].ToString());
//                UpdateSQL += " WHERE PreferredLastLineKey=" + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString())
//                 ;

//                SQL_Debug = UpdateSQL;

//                db.ExecuteSQL(UpdateSQL);
//              }
//              #endregion Insert or Update ZipCities Table
//            }
//          }

//          #region Log Final Progress
//          Log_State_Maintenance(
//               "xx"
//              , "Completed Initial Load of ZipCities"
//                  + " Tables"
//            //, Convert.ToInt64(Table_ZipCitiesDownloaded.Rows.Count)
//              , Table_ZipCitiesDownloaded.Rows.Count
//              );
//          #endregion Log Final Progress
//          #endregion Load (Insert or Update) ZipCities Table
//        }

//        if (!CheckBox_Skip_ZipCitiesNames.Checked)
//        {
//          #region Load (Insert or Update) ZipCitiesNames Table
//          #region Table_ZipCitiesDownloaded
//          sql = "SELECT";
//          sql += " PreferredLastLineKey";
//          sql += ",State";
//          sql += ",City";
//          sql += ",CityAliasAbbreviation";
//          sql += ",CityAliasName";
//          sql += ",CityStateKey";
//          sql += ",PrimaryRecord";
//          sql += ",CityMixedCase";
//          sql += ",CityAliasMixedCase";
//          sql += ",StateFIPS";
//          sql += ",StateANSI";
//          sql += ",CountyFIPS";
//          sql += ",CountyANSI";
//          sql += " FROM ZipCitiesDownloaded";
//          Table_ZipCitiesDownloaded = db.Table(sql);
//          #endregion Table_ZipCitiesDownloaded

//          #region Log Started
//          Log_State_Maintenance(
//               "xx"
//              , "Started Initial Load of ZipCitiesNames Tables"
//                  + " Tables"
//            //, Convert.ToInt64(0)
//              , 0
//              );
//          #endregion Log Started

//          foreach (DataRow Row_ZipCitiesDownloaded in Table_ZipCitiesDownloaded.Rows)
//          {
//            From = "ZipCities WHERE PreferredLastLineKey="
//              + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString());
//            if (db.Rows_Count_From(From) == 1)
//            {
//              #region Valid City in ZipCities
//              #region Insert/Update PreferredLastLineKey,StateCode,City
//              if (
//                (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["State"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["City"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["City"].ToString()))
//               )
//              {
//                #region Insert or Update
//                From = "ZipCitiesNames WHERE StateCode="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                  + " AND City="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString());
//                if (db.Rows_Count_From(From) == 0)
//                {
//                  string SQL = "INSERT INTO ZipCitiesNames ";
//                  SQL += "(";
//                  SQL += "StateCode";
//                  SQL += ",City";
//                  SQL += ",CityNameKey";
//                  SQL += ",PreferredLastLineKey";
//                  SQL += ",CityMixedCase";
//                  SQL += ")";
//                  SQL += " VALUES ";
//                  SQL += "(";
//                  SQL += db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityMixedCase"].ToString());
//                  SQL += ")";

//                  SQL_Debug = SQL;

//                  db.ExecuteSQL(SQL);
//                }
//                else
//                {
//                  string UpdateSQL = "UPDATE ZipCitiesNames"
//                   + " SET PreferredLastLineKey=" + db.SQLLit(Row_ZipCitiesDownloaded["PreferredLastLineKey"].ToString())
//                   + " ,CityMixedCase=" + db.SQLLit(Row_ZipCitiesDownloaded["CityMixedCase"].ToString())
//                   + " WHERE StateCode=" + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                   + " AND City=" + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString())
//                   ;

//                  SQL_Debug = UpdateSQL;

//                  db.ExecuteSQL(UpdateSQL);
//                }
//                #endregion Insert or Update
//              }
//              #endregion Insert/Update PreferredLastLineKey,StateCode,City

//              #region Insert/Update CityStateKey,StateCode,CityAliasAbbreviation
//              if (
//                (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["State"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["CityAliasAbbreviation"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["CityStateKey"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["City"].ToString()))
//               )
//              {
//                From = "ZipCitiesNames WHERE StateCode="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                  + " AND City="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasAbbreviation"].ToString());
//                if (db.Rows_Count_From(From) == 0)
//                {
//                  string SQL = "INSERT INTO ZipCitiesNames ";
//                  SQL += "(";
//                  SQL += "StateCode";
//                  SQL += ",City";
//                  SQL += ",CityNameKey";
//                  SQL += ",PreferredLastLineKey";
//                  SQL += ",CityMixedCase";
//                  SQL += ")";
//                  SQL += " VALUES ";
//                  SQL += "(";
//                  SQL += db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasAbbreviation"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityStateKey"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasMixedCase"].ToString());
//                  SQL += ")";

//                  SQL_Debug = SQL;

//                  db.ExecuteSQL(SQL);
//                }
//                else
//                {
//                  string UpdateSQL = "UPDATE ZipCitiesNames"
//                   + " SET PreferredLastLineKey=" + db.SQLLit(Row_ZipCitiesDownloaded["CityStateKey"].ToString())
//                   + " ,CityMixedCase=" + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasMixedCase"].ToString())
//                   + " WHERE StateCode=" + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                   + " AND City=" + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasAbbreviation"].ToString())
//                   ;

//                  SQL_Debug = UpdateSQL;

//                  db.ExecuteSQL(UpdateSQL);
//                }
//              }
//              #endregion Insert/Update CityStateKey,StateCode,CityAliasAbbreviation

//              #region Insert/Update CityStateKey,StateCode,CityAliasName
//              if (
//                (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["State"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["CityAliasName"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["CityStateKey"].ToString()))
//                && (!string.IsNullOrEmpty(Row_ZipCitiesDownloaded["City"].ToString()))
//               )
//              {
//                From = "ZipCitiesNames WHERE StateCode="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                  + " AND City="
//                  + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasName"].ToString());
//                if (db.Rows_Count_From(From) == 0)
//                {
//                  string SQL = "INSERT INTO ZipCitiesNames ";
//                  SQL += "(";
//                  SQL += "StateCode";
//                  SQL += ",City";
//                  SQL += ",CityNameKey";
//                  SQL += ",PreferredLastLineKey";
//                  SQL += ",CityMixedCase";
//                  SQL += ")";
//                  SQL += " VALUES ";
//                  SQL += "(";
//                  SQL += db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasName"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["City"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityStateKey"].ToString());
//                  SQL += "," + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasMixedCase"].ToString());
//                  SQL += ")";

//                  SQL_Debug = SQL;

//                  db.ExecuteSQL(SQL);
//                }
//                else
//                {
//                  string UpdateSQL = "UPDATE ZipCitiesNames"
//                   + " SET PreferredLastLineKey=" + db.SQLLit(Row_ZipCitiesDownloaded["CityStateKey"].ToString())
//                   + " ,CityMixedCase=" + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasMixedCase"].ToString())
//                   + " WHERE StateCode=" + db.SQLLit(Row_ZipCitiesDownloaded["State"].ToString())
//                   + " AND City=" + db.SQLLit(Row_ZipCitiesDownloaded["CityAliasName"].ToString())
//                   ;

//                  SQL_Debug = UpdateSQL;

//                  db.ExecuteSQL(UpdateSQL);
//                }
//              }
//              #endregion Insert/Update CityStateKey,StateCode,CityAliasName
//              #endregion Valid City in ZipCities
//            }
//            else
//            {
//              #region No Valid City in ZipCities
//              throw new ApplicationException("No Valid PreferredLastLineKey in ZipCities:::" + From);
//              #endregion No Valid City in ZipCities
//            }
//          }
//          //---
//          #region Log Final Progress
//          Log_State_Maintenance(
//               "xx"
//              , "Completed Initial Load of ZipCitiesNames"
//                  + " Tables"
//            //, Convert.ToInt64(Table_ZipCitiesDownloaded.Rows.Count)
//              , Table_ZipCitiesDownloaded.Rows.Count
//              );
//          #endregion Log Final Progress

//          #endregion Load (Insert or Update) ZipCitiesNames Table
//        }

//        Table_ZipCitiesDownloaded.Dispose();

//        #region reinstate when completely debugged
//#if false
//        db.ExecuteSQL("truncate TABLE ZipCitiesDownloaded");
//#endif
//        #endregion

//        Msg.Text = db.Ok("<br>Done Time:"
//          + db.Str_Run_Time(Start_Time, DateTime.Now));
//      }
//      catch (Exception ex)
//      {
//        #region

//        Msg.Text = db.Fail(ex.Message + ":::SQL_Debug:::" + SQL_Debug);
//        db.Log_Error_Admin(ex);
//        #endregion
//      }

//    }

    //protected void Button_ZipAddresses_Click(object sender, EventArgs e)
    //{
    //  string SQL_Debug = string.Empty;
    //  string Error_UpdateKey = string.Empty;
    //  try
    //  {
    //    #region Inits
    //    Server.ScriptTimeout = 600000;//600000 sec = 10000 min = 160 hours
    //    //string StateCode = string.Empty;
    //    string sql = string.Empty;
    //    DateTime Start_Time = DateTime.Now;
    //    Int64 ZipStreetsDownloaded_Rows_Count = 0;
    //    Int64 ZipStreetsDownloaded_Rows_Count_Bulk_Rows = 0;
    //    Int64 ZipStreets_Rows_Count = 0;
    //    Int64 ZipStreets_Rows_Count_Bulk_Rows = 0;
    //    int Bulk_Insert_Rows = 1000;
    //    string From = string.Empty;
    //    db.ExecuteSQL("truncate TABLE ZipTableRowsProcessedLog");
    //    #endregion Inits

    //    #region Note
    //    //G General delivery = include every row (832 rows for VA)
    //    //  All have Street = 'GENERAL DELIVERY'

    //    //H Highrise = only include one with same (218,565 rows for VA)
    //    //    StPreDirAbbr
    //    //  StName
    //    //  sTsUFFIXaBBR
    //    //  sTpOSTdIRaBBR
    //    //  AddressPrimaryLow	

    //    //    Plus4Low = Plus4High: use 1st because it doesn't matter

    //    //F Firm = only include one with same (10,361 rows for VA)
    //    //    StPreDirAbbr
    //    //  StName
    //    //  sTsUFFIXaBBR
    //    //  sTpOSTdIRaBBR
    //    //  AddressPrimaryLow	

    //    //    Plus4Low = Plus4High: use 1st because it doesn't matter

    //    //S Street = include every row (882,182 rows for VA)

    //    //P PO Box = only include one with same ZipCode (17,027 rows for VA)
    //    //  Plus4Low = Plus4High: use 0001 
    //    //  All have Street = 'PO BOX'

    //    //R Rural Route = include every row (16,624 rows for VA)

    //    //M Multi-carrier = there are none in ZipStreetsDownloaded (0 rows for VA)

    //    //(1,145,591 rows in ZipStreetsDownloaded for VA)        
    //    #endregion Note

    //    if (!CheckBox_Skip_ZipSteets.Checked)
    //    {
    //      #region Load ZipStreetsTemp using ZipStreetsDownloaded

    //      #region Loads ZipStreetsTemp

    //      #region Log Started ZipStreetsDownloaded
    //      Log_Rows_Processed(
    //        "Started ZipStreetsDownloaded"
    //        //, Convert.ToInt64(0)
    //        , 0
    //        );
    //      #endregion Log Started ZipStreetsDownloaded

    //      db.ExecuteSQL("truncate TABLE ZipStreetsTemp");

    //      #region Create Internal DataTables for ZipStreetsTemp for single State
    //      DataTable ZipStreetsTemp = new DataTable();
    //      ZipStreetsTemp.Columns.Add("UpdateKey", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StateCode", typeof(string));
    //      ZipStreetsTemp.Columns.Add("CityNameKey", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetPre", typeof(string));
    //      ZipStreetsTemp.Columns.Add("Street", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetType", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetDirection", typeof(string));
    //      ZipStreetsTemp.Columns.Add("PreferredLastLineKey", typeof(string));
    //      ZipStreetsTemp.Columns.Add("AddressType", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetNumberLow", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetNumberHigh", typeof(string));
    //      ZipStreetsTemp.Columns.Add("StreetEvenOdd", typeof(string));
    //      ZipStreetsTemp.Columns.Add("AptSuiteType", typeof(string));
    //      ZipStreetsTemp.Columns.Add("AptSuiteNumberLow", typeof(string));
    //      ZipStreetsTemp.Columns.Add("AptSuiteNumberHigh", typeof(string));
    //      ZipStreetsTemp.Columns.Add("AptSuiteEvenOdd", typeof(string));
    //      ZipStreetsTemp.Columns.Add("Zip5", typeof(string));
    //      ZipStreetsTemp.Columns.Add("Zip4Low", typeof(string));
    //      ZipStreetsTemp.Columns.Add("Zip4High", typeof(string));
    //      #endregion Create Internal DataTables for ZipStreetsTemp for single State

    //      #region Note
    //      //Need to build an internal table of just the UpdateKey and StateCode
    //      //Because CA ran out of memory
    //      #endregion Note
    //      DataTable Table_ZipStreetsDownloaded_UpdateKey = null;

    //      #region Select Table_ZipStreetsDownloaded_UpdateKey
    //      sql = string.Empty;
    //      sql = "SELECT";
    //      //sql += " ZipCode";
    //      sql += " UpdateKey";
    //      //sql += ",RecordType";
    //      sql += ",State";
    //      //sql += ",StPreDirAbbr";
    //      //sql += ",StName";
    //      //sql += ",StSuffixAbbr";
    //      //sql += ",StPostDirAbbr";
    //      //sql += ",AddressPrimaryLowNumber";
    //      //sql += ",AddressPrimaryHighNumber";
    //      //sql += ",AddressPrimaryEvenOdd";
    //      //sql += ",AddressSecAbbr";
    //      //sql += ",AddressSecLowNumber";
    //      //sql += ",AddressSecHighNumber";
    //      //sql += ",AddressSecOddEven";
    //      //sql += ",Plus4Low";
    //      //sql += ",Plus4High";
    //      //sql += ",PreferredLastLineKey";
    //      sql += " FROM ZipStreetsDownloaded";

    //      #region for testing

    //      //Has a street number with alpha: 651C1 and 651C2
    //      //sql += " WHERE (UpdateKey ='X208302271')";

    //      //sql += " WHERE (RecordType = 'S')";//Street
    //      //sql += " AND (StName='PARK GARDEN')OR (StName='HOOT OWL')";

    //      //sql += " WHERE (RecordType = 'P')";//Post Office Box
    //      //sql += " AND (ZipCode = '20108'";
    //      //sql += " OR ZipCode = '23316'";
    //      //sql += " OR ZipCode = '23884')";

    //      //sql += " WHERE (RecordType = 'H')";//Highrise
    //      //sql += " AND ((StName='INDIAN SPRINGS')OR (StName='PENNIMAN')OR (StName='MATOAKA'))";

    //      //sql += " WHERE (RecordType = 'H')";//Highrise
    //      //sql += " AND zipcode = '22406'";
    //      //sql += " AND StName ='MCKENDREE'";

    //      //sql += " WHERE (RecordType = 'H')";//Highrise
    //      //sql += " AND zipcode = '23224'";
    //      //sql += " AND StName='CHALFONT'";

    //      //sql += " where (UpdateKey = 'X216887419')";
    //      //sql += " or (UpdateKey = 'X216826677')";
    //      //sql += " or (UpdateKey = 'X216249084')";
    //      //sql += " or (UpdateKey = 'X216249089')";
    //      //sql += " or (UpdateKey = 'X216826709')";
    //      //sql += " or (UpdateKey = 'X216380545')";


    //      //sql += " WHERE (RecordType = 'F')";//Firm
    //      //sql += " AND ((StName='MATHIS')OR (StName='DISMAL RIVER')OR (StName='PROVIDENCE'))";

    //      //sql += " WHERE (RecordType = 'R')";//Rural Route
    //      //sql += " AND (ZipCode = '20135')";

    //      //sql += " WHERE (RecordType = 'G')";//General Delivery
    //      //sql += " AND (ZipCode = '20108'";
    //      //sql += " OR ZipCode = '23316'";
    //      //sql += " OR ZipCode = '23884')";

    //      //3545 ZipStreetsTemp rows

    //      //sql += " where ZipCode = '20109'";
    //      #endregion for testing

    //      Table_ZipStreetsDownloaded_UpdateKey = db.Table(sql);
    //      #endregion Select Table_ZipStreetsDownloaded_UpdateKey
    //      //
    //      #region Log Started
    //      Log_State_Maintenance(
    //           Table_ZipStreetsDownloaded_UpdateKey.Rows[0]["State"].ToString()
    //          , "Started Initial Load of ZipStreetsTemp Table"
    //        //, Convert.ToInt64(0)
    //           , 0
    //         );
    //      #endregion Log Started

    //      foreach (DataRow Row_ZipStreetsDownloaded_UpdateKey in Table_ZipStreetsDownloaded_UpdateKey.Rows)
    //      {
    //        #region ZipStreetsDownloaded Row

    //        sql = string.Empty;
    //        sql = "SELECT";
    //        sql += " ZipCode";
    //        sql += ",UpdateKey";
    //        sql += ",RecordType";
    //        sql += ",State";
    //        sql += ",StPreDirAbbr";
    //        sql += ",StName";
    //        sql += ",StSuffixAbbr";
    //        sql += ",StPostDirAbbr";
    //        sql += ",AddressPrimaryLowNumber";
    //        sql += ",AddressPrimaryHighNumber";
    //        sql += ",AddressPrimaryEvenOdd";
    //        sql += ",AddressSecAbbr";
    //        sql += ",AddressSecLowNumber";
    //        sql += ",AddressSecHighNumber";
    //        sql += ",AddressSecOddEven";
    //        sql += ",Plus4Low";
    //        sql += ",Plus4High";
    //        sql += ",PreferredLastLineKey";
    //        sql += " FROM ZipStreetsDownloaded";
    //        sql += " WHERE UpdateKey = " + db.SQLLit(Row_ZipStreetsDownloaded_UpdateKey["UpdateKey"].ToString());

    //        DataRow Row_ZipStreetsDownloaded = db.Row(sql);

    //        Error_UpdateKey = Row_ZipStreetsDownloaded["UpdateKey"].ToString();

    //        #region Add row to internal table
    //        Internal_DataTable_ZipStreetsTemp_Add_Row(
    //              ref  ZipStreetsTemp
    //              , Row_ZipStreetsDownloaded
    //              );
    //        #endregion Add row to internal table

    //        if (ZipStreetsDownloaded_Rows_Count_Bulk_Rows == Bulk_Insert_Rows)
    //        {
    //          #region Bulk Insert
    //          #region Bulk Insert ZipStreetsTemp
    //          db.Bulk_Insert(
    //            db.Connection
    //            , ZipStreetsTemp
    //            , "ZipStreetsTemp"
    //            );

    //          ZipStreetsTemp.Clear();

    //          #endregion Bulk Insert ZipStreetsTemp

    //          #region Log ZipStreetsTemp Rows Processed
    //          Log_Rows_Processed(
    //            "ZipStreetsDownloaded"
    //            //, Convert.ToInt64(ZipStreetsDownloaded_Rows_Count));
    //          , ZipStreetsDownloaded_Rows_Count
    //          );

    //          #endregion Log ZipStreetsTemp Rows Processed

    //          ZipStreetsDownloaded_Rows_Count_Bulk_Rows = 0;
    //          #endregion Bulk Insert
    //        }

    //        #region Increment ZipStreetsDownloaded Counts
    //        ZipStreetsDownloaded_Rows_Count++;
    //        ZipStreetsDownloaded_Rows_Count_Bulk_Rows++;
    //        #endregion Increment ZipStreetsDownloaded Counts

    //        #endregion ZipStreetsDownloaded Row
    //      }

    //      #region Bulk Insert ZipStreetsTemp of remaining
    //      db.Bulk_Insert(
    //        db.Connection
    //        , ZipStreetsTemp
    //        , "ZipStreetsTemp"
    //        );

    //      ZipStreetsTemp.Clear();
    //      #endregion Bulk Insert ZipStreetsTemp of remaining

    //      #region Log Completed
    //      Log_State_Maintenance(
    //           Table_ZipStreetsDownloaded_UpdateKey.Rows[0]["State"].ToString()
    //          , "Completed Initial Load of ZipStreetsTemp Table"
    //        //, Convert.ToInt64(ZipStreetsDownloaded_Rows_Count)
    //          , ZipStreetsDownloaded_Rows_Count
    //          );
    //      #endregion Log Completed

    //      #region free memory
    //      ZipStreetsTemp.Clear();//internal tables
    //      Table_ZipStreetsDownloaded_UpdateKey.Clear();//internal tables

    //      ZipStreetsTemp.Dispose();//internal tables
    //      Table_ZipStreetsDownloaded_UpdateKey.Dispose();//internal tables
    //      #endregion free memory

    //      #endregion Loads ZipStreetsTemp

    //      #region Log Completed ZipStreetsDownloaded
    //      Log_Rows_Processed(
    //        "Completed ZipStreetsDownloaded"
    //        , 0
    //        );
    //      #endregion Log ZipStreetsTemp Rows Completed
    //      #endregion Load ZipStreetsTemp using ZipStreetsDownloaded
    //    }

    //    //xxxxxxxxxxxxxxxxxxxxxxxx
    //    #region Loads ZipStreetsUnique,ZipStreetsRanges

    //    #region Create Internal DataTables

    //    DataTable ZipStreetsUnique = new DataTable();
    //    ZipStreetsUnique.Columns.Add("StateCode", typeof(string));
    //    ZipStreetsUnique.Columns.Add("CityNameKey", typeof(string));
    //    ZipStreetsUnique.Columns.Add("StreetPre", typeof(string));
    //    ZipStreetsUnique.Columns.Add("Street", typeof(string));
    //    ZipStreetsUnique.Columns.Add("StreetType", typeof(string));
    //    ZipStreetsUnique.Columns.Add("StreetDirection", typeof(string));

    //    DataTable ZipStreetsRanges = new DataTable();
    //    ZipStreetsRanges.Columns.Add("StateCode", typeof(string));
    //    ZipStreetsRanges.Columns.Add("CityNameKey", typeof(string));
    //    ZipStreetsRanges.Columns.Add("StreetPre", typeof(string));
    //    ZipStreetsRanges.Columns.Add("Street", typeof(string));
    //    ZipStreetsRanges.Columns.Add("StreetType", typeof(string));
    //    ZipStreetsRanges.Columns.Add("StreetDirection", typeof(string));
    //    ZipStreetsRanges.Columns.Add("UpdateKey", typeof(string));
    //    ZipStreetsRanges.Columns.Add("PreferredLastLineKey", typeof(string));
    //    ZipStreetsRanges.Columns.Add("StreetNumberLow", typeof(string));
    //    ZipStreetsRanges.Columns.Add("StreetNumberHigh", typeof(string));
    //    ZipStreetsRanges.Columns.Add("Zip5", typeof(string));
    //    ZipStreetsRanges.Columns.Add("Zip4Low", typeof(string));
    //    ZipStreetsRanges.Columns.Add("Zip4High", typeof(string));

    //    //if (CheckBox_ZipStreetNumbers_ZipAptSuites.Checked)
    //    //{
    //    #region ZipStreetsNumbers & ZipAptSuites
    //    #region Note
    //    //ZipStreetsNumbers & ZipAptSuites Tables
    //    //are not loaded because they take too much
    //    //disc space.
    //    //Later they may be reinstated to produce 
    //    //a unique mailing address for every 
    //    //address in the USA
    //    #endregion Note
    //    DataTable ZipStreetsNumbers = new DataTable();
    //    ZipStreetsNumbers.Columns.Add("UpdateKey", typeof(string));
    //    ZipStreetsNumbers.Columns.Add("StreetNumber", typeof(string));
    //    ZipStreetsNumbers.Columns.Add("Zip5", typeof(string));
    //    ZipStreetsNumbers.Columns.Add("Zip4", typeof(string));

    //    DataTable ZipAptSuites = new DataTable();
    //    ZipAptSuites.Columns.Add("UpdateKey", typeof(string));
    //    ZipAptSuites.Columns.Add("AptSuiteType", typeof(string));
    //    ZipAptSuites.Columns.Add("AptSuiteNumber", typeof(string));
    //    ZipAptSuites.Columns.Add("Zip5", typeof(string));
    //    ZipAptSuites.Columns.Add("Zip4", typeof(string));
    //    #endregion ZipStreetsNumbers & ZipAptSuites
    //    //}

    //    //
    //    #endregion Create Internal DataTables

    //    #region  Table_ZipStreets_UpdateKey
    //    #region commented out
    //    //sql += ",CityNameKey";
    //    //sql += ",StreetPre";
    //    //sql += ",Street";
    //    //sql += ",StreetType";
    //    //sql += ",StreetDirection";
    //    //sql += ",PreferredLastLineKey";
    //    //sql += ",AddressType";
    //    //sql += ",StreetNumberLow";
    //    //sql += ",StreetNumberHigh";
    //    //sql += ",StreetEvenOdd";
    //    //sql += ",AptSuiteType";
    //    //sql += ",AptSuiteNumberLow";
    //    //sql += ",AptSuiteNumberHigh";
    //    //sql += ",AptSuiteEvenOdd";
    //    //sql += ",Zip5";
    //    //sql += ",Zip4Low";
    //    //sql += ",Zip4High";
    //    #endregion commented out
    //    sql = "Select";
    //    sql += " UpdateKey";
    //    sql += ",StateCode";
    //    sql += " from ZipStreetsTemp";
    //    #region for testing

    //    //sql += " WHERE (UpdateKey ='X206731459')";

    //    //Has a street number with alpha: 651C1 and 651C2
    //    //sql += " WHERE (UpdateKey ='X208302271')";

    //    //ZipStreetsTemp 58
    //    //ZipZddresses 1999
    //    //ZipAptSuits 0
    //    //sql += " WHERE (AddressType = 'S')";//Street
    //    //sql += " AND (Street='PARK GARDEN')OR (Street='HOOT OWL')";

    //    //sql += " WHERE (AddressType = 'S')";//Street
    //    //sql += " AND Street='PARK GARDEN'";

    //    //sql += " WHERE (AddressType = 'P')";//Post Office Box
    //    //sql += " AND Zip5 = '23316'";

    //    //ZipStreet rows 379 
    //    //ZipZddresses 4777
    //    //ZipAptSuits 0      //sql += " WHERE (AddressType = 'P')";//Post Office Box
    //    //sql += " AND (Zip5 = '20108'";
    //    //sql += " OR Zip5 = '23316'";
    //    //sql += " OR Zip5 = '23884')";

    //    //ZipStreet rows 32 
    //    //ZipZddresses 14
    //    //ZipAptSuits 69      //sql += " WHERE (AddressType = 'H')";//Highrise
    //    //sql += " AND ((Street='INDIAN SPRINGS')OR (Street='PENNIMAN')OR (Street='MATOAKA'))";

    //    //27 ZipStreet rows
    //    //ZipZddresses 2
    //    //ZipAptSuits 46
    //    //sql += " WHERE (AddressType = 'H')";//Highrise
    //    //sql += " AND Zip5 = '22406'";
    //    //sql += " AND Street ='MCKENDREE'";

    //    //23 ZipStreet rows
    //    //ZipZddresses 7
    //    //ZipAptSuits 176      //sql += " WHERE (AddressType = 'H')";//Highrise
    //    //sql += " AND Zip5 = '23224'";
    //    //sql += " AND Street='CHALFONT'";

    //    //-----------------

    //    //sql += " where (UpdateKey = 'X216887419')";
    //    //sql += " or (UpdateKey = 'X216826677')";
    //    //sql += " or (UpdateKey = 'X216249084')";
    //    //sql += " or (UpdateKey = 'X216249089')";
    //    //sql += " or (UpdateKey = 'X216826709')";
    //    //sql += " or (UpdateKey = 'X216380545')";


    //    //sql += " WHERE (AddressType = 'F')";//Firm
    //    //sql += " AND ((Street='MATHIS')OR (Street='DISMAL RIVER')OR (Street='PROVIDENCE'))";

    //    //sql += " WHERE (AddressType = 'R')";//Rural Route
    //    //sql += " AND (Zip5 = '20135')";

    //    //sql += " WHERE (AddressType = 'G')";//General Delivery
    //    //sql += " AND (Zip5 = '20108'";
    //    //sql += " OR Zip5 = '23316'";
    //    //sql += " OR Zip5 = '23884')";

    //    //3545 ZipStreetsTemp rows
    //    //ZipZddresses 80,566
    //    //ZipAptSuits 60,659     
    //    //sql += " where zip5 = '20109'";
    //    //sql += " order by addresstype";

    //    //sql += " where UpdateKey = 'X217588141'";
    //    #endregion for testing

    //    //DataTable Table_ZipStreets_UpdateKey = db.Table(SQL_ZipStreets());
    //    DataTable Table_ZipStreets_UpdateKey = db.Table(sql);
    //    #endregion  Table_ZipStreets_UpdateKey

    //    #region Logs Started ZipStreetsTemp
    //    Log_State_Maintenance(
    //          Table_ZipStreets_UpdateKey.Rows[0]["StateCode"].ToString()
    //          , "Started Initial Load of ZipStreetsUnique, ZipStreetsRanges"
    //      //+ ", ZipStreetsNumbers, ZipAptSuites Tables"
    //        , 0
    //        );

    //    Log_Rows_Processed(
    //      "Started ZipStreetsTemp"
    //      , 0
    //      );
    //    #endregion Logs Started ZipStreetsTemp

    //    foreach (DataRow Row_ZipStreets_UpdateKey in Table_ZipStreets_UpdateKey.Rows)
    //    {
    //      //---------------
    //      string SQL = "Select";
    //      SQL += " UpdateKey";
    //      SQL += ",StateCode";
    //      SQL += ",CityNameKey";
    //      SQL += ",StreetPre";
    //      SQL += ",Street";
    //      SQL += ",StreetType";
    //      SQL += ",StreetDirection";
    //      SQL += ",PreferredLastLineKey";
    //      SQL += ",AddressType";
    //      SQL += ",StreetNumberLow";
    //      SQL += ",StreetNumberHigh";
    //      SQL += ",StreetEvenOdd";
    //      SQL += ",AptSuiteType";
    //      SQL += ",AptSuiteNumberLow";
    //      SQL += ",AptSuiteNumberHigh";
    //      SQL += ",AptSuiteEvenOdd";
    //      SQL += ",Zip5";
    //      SQL += ",Zip4Low";
    //      SQL += ",Zip4High";
    //      SQL += " FROM ZipStreetsTemp";
    //      SQL += " WHERE UpdateKey = " + db.SQLLit(Row_ZipStreets_UpdateKey["UpdateKey"].ToString());
    //      //--------------

    //      #region Row_ZipStreetsTemp

    //      DataRow Row_ZipStreetsTemp = db.Row(SQL);

    //      #region Note
    //      //Some of the Zip4 and Zip5 codes were found to be bad.
    //      //These columns need to be all digits.
    //      //Example: addresskey = 'X205393311' had 76ND for Zip4Low and Zip4High
    //      //So any input with bad data is skipped
    //      #endregion Note

    //      #region One Good ZipStreetsTemp Row - Add to Internal Tables

    //      Error_UpdateKey = Row_ZipStreets_UpdateKey["UpdateKey"].ToString();

    //      One_ZipStreets_Row(
    //        ref ZipStreetsUnique
    //        , ref ZipStreetsRanges
    //        , ref ZipStreetsNumbers
    //        , ref ZipAptSuites
    //        , Row_ZipStreetsTemp
    //        );

    //      #endregion One Good ZipStreetsTemp Row - Add to Internal Tables

    //      if (ZipStreets_Rows_Count_Bulk_Rows == Bulk_Insert_Rows)
    //      {
    //        #region Bulk Insert ZipStreetsUnique,ZipStreetsRanges
    //        db.Bulk_Insert(
    //          db.Connection
    //          , ZipStreetsUnique
    //          , "ZipStreetsUnique"
    //          );

    //        db.Bulk_Insert(
    //          db.Connection
    //          , ZipStreetsRanges
    //          , "ZipStreetsRanges"
    //          );

    //        #region ZipStreetsNumbers, ZipAptSuites
    //        #region Note
    //        //ZipStreetsNumbers & ZipAptSuites Tables
    //        //are not loaded because they take too much
    //        //disc space.
    //        //Later they may be reinstated to produce 
    //        //a unique mailing address for every 
    //        //address in the USA
    //        #endregion Note
    //        //db.Bulk_Insert(
    //        //  db.Connection
    //        //  , ref ZipStreetsNumbers
    //        //  , "ZipStreetsNumbers"
    //        //  );

    //        //db.Bulk_Insert(
    //        //  db.Connection
    //        //  , ref ZipAptSuites
    //        //  , "ZipAptSuites"
    //        //  );
    //        #endregion ZipStreetsNumbers, ZipAptSuites
    //        #endregion Bulk Insert ZipStreetsUnique,ZipStreetsRanges

    //        #region Clear Internal Tables for next bulk insert
    //        ZipStreetsUnique.Clear();
    //        ZipStreetsRanges.Clear();

    //        #region May reinstate later
    //        //ZipStreetsNumbers.Clear();
    //        //ZipAptSuites.Clear();
    //        #endregion May reinstate later
    //        #endregion Clear Internal Tables for next bulk insert

    //        #region Log ZipStreetsTemp Rows Processed
    //        Log_Rows_Processed(
    //          "ZipStreetsTemp"
    //          //, Convert.ToInt64(ZipStreets_Rows_Count)
    //          , ZipStreets_Rows_Count
    //          );
    //        #endregion Log ZipStreetsTemp Rows Processed

    //        ZipStreets_Rows_Count_Bulk_Rows = 0;
    //      }

    //      #region Increment ZipStreetsTemp Counts
    //      ZipStreets_Rows_Count++;
    //      ZipStreets_Rows_Count_Bulk_Rows++;
    //      #endregion Increment ZipStreetsTemp Counts

    //      #endregion Row_ZipStreetsTemp
    //    }

    //    #region Bulk Insert of REMAINING

    //    db.Bulk_Insert(
    //      db.Connection
    //      , ZipStreetsUnique
    //      , "ZipStreetsUnique"
    //      );

    //    db.Bulk_Insert(
    //      db.Connection
    //      , ZipStreetsRanges
    //      , "ZipStreetsRanges"
    //      );

    //    #region May reinstate later
    //    //db.Bulk_Insert(
    //    //  db.Connection
    //    //  , ref ZipStreetsNumbers
    //    //  , "ZipStreetsNumbers"
    //    //  );

    //    //db.Bulk_Insert(
    //    //  db.Connection
    //    //  , ref ZipAptSuites
    //    //  , "ZipAptSuites"
    //    //  );
    //    #endregion May reinstate later

    //    #region Log ZipStreetsTemp Rows Processed
    //    ZipStreetsUnique.Clear();
    //    ZipStreetsRanges.Clear();
    //    #region May reinstate later
    //    //ZipStreetsNumbers.Clear();
    //    //ZipAptSuites.Clear();
    //    #endregion May reinstate later
    //    #endregion Log ZipStreetsTemp Rows Processed

    //    #endregion Bulk Insert of REMAINING

    //    #region Log ZipStreetsTemp Rows Processed
    //    Log_Rows_Processed(
    //      "ZipStreetsTemp"
    //      , ZipStreets_Rows_Count
    //      );

    //    Log_Rows_Processed(
    //      "Completed ZipStreetsTemp"
    //      , ZipStreets_Rows_Count
    //      );
    //    #endregion Log ZipStreetsTemp Rows Processed

    //    #region Log Completed
    //    Log_State_Maintenance(
    //      //StateCode
    //         Table_ZipStreets_UpdateKey.Rows[0]["StateCode"].ToString()
    //        , "Completed Initial Load of ZipStreetsUnique, ZipStreetsRanges"
    //      //+ ", ZipStreetsNumbers, ZipAptSuites Tables"
    //        , ZipStreets_Rows_Count
    //        );
    //    #endregion Log Completed

    //    #region release memory for Tables
    //    ZipStreetsUnique.Clear();
    //    ZipStreetsRanges.Clear();
    //    ZipStreetsUnique.Dispose();
    //    ZipStreetsRanges.Dispose();
    //    Table_ZipStreets_UpdateKey.Clear();
    //    Table_ZipStreets_UpdateKey.Dispose();

    //    #region May reinstate later
    //    //ZipStreetsNumbers.Clear();
    //    //ZipAptSuites.Clear();
    //    //ZipStreetsNumbers.Dispose();
    //    //ZipAptSuites.Dispose();
    //    #endregion May reinstate later
    //    #endregion release memory for Tables

    //    #endregion Loads ZipStreetsUnique,ZipStreetsRanges

    //    Msg.Text = db.Ok("<br>Done Time:"
    //         + db.Str_Run_Time(Start_Time, DateTime.Now));
    //  }
    //  catch (Exception ex)
    //  {
    //    #region

    //    Msg.Text = db.Fail(ex.Message + "Button_ZipAddresses_Click:::ZipStreetsTemp UpdateKey:::" + Error_UpdateKey);
    //    db.Log_Error_Admin(ex
    //      , ex.Message + "Button_ZipAddresses_Click:::ZipStreetsTemp UpdateKey:::" + Error_UpdateKey
    //      );
    //    #endregion
    //  }
    //}

    protected void ButtonDeleteEmailAddress_Click(object sender, EventArgs e)
    {
      try
      {
        bool deletedEmail = false;
        string sql = string.Empty;
        DataRow Row_Politician = null;

        sql = string.Empty;
        sql += " SELECT PoliticianKey";
        sql += " FROM Politicians";
        sql += " WHERE EmailAddr = " + db.SQLLit(TextBoxEmailAddr.Text.Trim());
        Row_Politician = db.Row_First_Optional(sql);
        if (Row_Politician != null)
        {
          sql = string.Empty;
          sql += " UPDATE Politicians";
          sql += " SET EmailAddr = ''";
          sql += " WHERE PoliticianKey = " + db.SQLLit(Row_Politician["PoliticianKey"].ToString());
          db.ExecuteSQL(sql);
          deletedEmail = true;
        }
        else
        {
          sql = string.Empty;
          sql += " SELECT PoliticianKey";
          sql += " FROM Politicians";
          sql += " WHERE StateEmailAddr = " + db.SQLLit(TextBoxEmailAddr.Text.Trim());
          Row_Politician = db.Row_First_Optional(sql);
          if (Row_Politician != null)
          {
            sql = string.Empty;
            sql += " UPDATE Politicians";
            sql += " SET StateEmailAddr = ''";
            sql += " WHERE PoliticianKey = " + db.SQLLit(Row_Politician["PoliticianKey"].ToString());
            db.ExecuteSQL(sql);
            deletedEmail = true;
          }
          else
          {
            sql = string.Empty;
            sql += " SELECT PoliticianKey";
            sql += " FROM Politicians";
            sql += " WHERE EmailAddrVoteUSA = " + db.SQLLit(TextBoxEmailAddr.Text.Trim());
            Row_Politician = db.Row_First_Optional(sql);
            if (Row_Politician != null)
            {
              sql = string.Empty;
              sql += " UPDATE Politicians";
              sql += " SET EmailAddrVoteUSA = ''";
              sql += " WHERE PoliticianKey = " + db.SQLLit(Row_Politician["PoliticianKey"].ToString());
              db.ExecuteSQL(sql);
              deletedEmail = true;
            }
            else
            {
              sql = string.Empty;
              sql += " SELECT PoliticianKey";
              sql += " FROM Politicians";
              sql += " WHERE CampaignEmail = " + db.SQLLit(TextBoxEmailAddr.Text.Trim());
              Row_Politician = db.Row_First_Optional(sql);
              if (Row_Politician != null)
              {
                sql = string.Empty;
                sql += " UPDATE Politicians";
                sql += " SET CampaignEmail = ''";
                sql += " WHERE PoliticianKey = " + db.SQLLit(Row_Politician["PoliticianKey"].ToString());
                db.ExecuteSQL(sql);
                deletedEmail = true;
              }
              else
              {
                sql = string.Empty;
                sql += " SELECT PoliticianKey";
                sql += " FROM Politicians";
                sql += " WHERE LDSEmailAddr = " + db.SQLLit(TextBoxEmailAddr.Text.Trim());
                Row_Politician = db.Row_First_Optional(sql);
                if (Row_Politician != null)
                {
                  sql = string.Empty;
                  sql += " UPDATE Politicians";
                  sql += " SET LDSEmailAddr = ''";
                  sql += " WHERE PoliticianKey = " + db.SQLLit(Row_Politician["PoliticianKey"].ToString());
                  db.ExecuteSQL(sql);
                  deletedEmail = true;
                }
              }
            }
          }
        }

        if (deletedEmail)
          Msg.Text = db.Ok(TextBoxEmailAddr.Text.Trim() + " email address has been deleted.");
        else
          Msg.Text = db.Fail(TextBoxEmailAddr.Text.Trim() + " email address was not found and deleted.");

        TextBoxEmailAddr.Text = string.Empty;
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void ButtonDeleteWebAddress_Click(object sender, EventArgs e)
    {
      try
      {
        string sql = string.Empty;

        sql = " UPDATE Politicians";
        sql += " SET WebAddr = ''";
        sql += " WHERE WebAddr = " + db.SQLLit(TextBoxWebAddress.Text.Trim());
        db.ExecuteSQL(sql);

        sql = " UPDATE Politicians";
        sql += " SET StateWebAddr = ''";
        sql += " WHERE StateWebAddr = " + db.SQLLit(TextBoxWebAddress.Text.Trim());
        db.ExecuteSQL(sql);

        sql = " UPDATE Politicians";
        sql += " SET LDSWebAddr = ''";
        sql += " WHERE LDSWebAddr = " + db.SQLLit(TextBoxWebAddress.Text.Trim());
        db.ExecuteSQL(sql);

        Msg.Text = db.Ok("ALL " + TextBoxWebAddress.Text.Trim()
          + " website addresses have been deleted.");

        TextBoxWebAddress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    protected void Page_Load(object sender, System.EventArgs e)
    {
      //Table_Old_Issue_Reports.Visible = false;
      //Table_Old_Issue_Reports.Visible = true;

      if (!IsPostBack)
      {
        // Handled by superclass
        //if (!SecurePage.IsMasterUser)
        //  VoteSecurePage.HandleSecurityException();

        //If Master is restricted to a single State redirect to that State
        // Don't do this -- use ADMIN security
        //if (!string.IsNullOrEmpty(db.Security_Str(db.User_Name(), "UserStateCode")))
        //  Response.Redirect(db.Url_Admin_Default(
        //    db.Security_Str(db.User_Name(), "UserStateCode"))
        //    );

        Page.Title = "Master";

        try
        {
          PageTitle.Text = "MASTER Administration";

          #region Unrestricted Master Ron
          //if (SecurePage.IsSuperUser)
          //  UnrestrictedMaster.Visible = true;
          //else
          UnrestrictedMaster.Visible = IsSuperUser;
          #endregion Unrestricted Master Ron

          #region Session["UserStateCode"] Notes
          //Session["UserStateCode"] gets set at Login then:
          //Here is the only place Session["UserStateCode"] gets reset to string.Empty.
          //The only place it gets set to a StateCode when entering /Admin/Default.aspx
          #endregion Session["UserStateCode"] Notes
          Session["UserStateCode"] = string.Empty;

          //LabelStateAdminHomeLinks.Text = db.Master_Str("StateAdminHomeLinks");

          if (UnrestrictedMaster.Visible)
          {
            #region Load labels, checkboxes and radion buttons
            #region Labels
            //LabelNationalLinks.Text = National_Links();

            //LabelIssueLinks.Text = db.Master_Str("MasterIssueLinksLine");

            //LabelIssueReportsLinks.Text = db.Master_Str("MasterIssueReportsLinksLine");
            //Label_Issue_Anchors.Text = db.Master_Str("IssuesAnchors");

            //LabelDomainDesigns.Text = db.Master_Str("DesignCodeLinksLine");
            //LabelDomainOrganizations.Text = db.Master_Str("OrganizationCodeLinksLine");
            //LabelPartyLinks.Text = db.Master_Str("PoliticalPartyLinksLine");

            #region Cached Pages
            //Labels_Set_Cache_All();
            //Labels_Set_Cache_Ballot();
            //Labels_Set_Cache_Elected();
            //Labels_Set_Cache_Intro();
            //Labels_Set_Cache_PoliticianIssue();
            //Labels_Set_Cache_Issue();
            //Labels_Set_Cache_Referendum();
            //Labels_Set_Cache_ElectionReport();
            //Labels_Set_Cache_OfficialsReport();
            //Labels_Set_Cache_Archive();
            //Labels_Set_Cache_GlobalNavbar();
            //Labels_Set_Cache_Misc();
            #endregion Cached Pages

            #endregion Labels

            #region Radio Button Lists
            if (db.Master_Bool("IsDebugMode"))
              RadioButtonListDebugMode.SelectedValue = "T";
            else
              RadioButtonListDebugMode.SelectedValue = "F";

            if (db.Master_Bool("IsTestMode"))
              RadiobuttonlistTestMode.SelectedValue = "T";
            else
              RadiobuttonlistTestMode.SelectedValue = "F";

            //if (db.Master_Bool("IsCachePages"))
            //  RadioButtonListCachePages.SelectedValue = "T";
            //else
            //  RadioButtonListCachePages.SelectedValue = "F";

            if (db.Master_Bool("IsMasterControlsVisible"))
              RadioButtonListMasterControls.SelectedValue = "T";
            else
              RadioButtonListMasterControls.SelectedValue = "F";

            if (db.Master_Bool("IsZipLookupUseDbTables"))
              RadioButtonList_Zip_Lookup.SelectedValue = "T";
            else
              RadioButtonList_Zip_Lookup.SelectedValue = "F";

            if (db.Master_Bool("IsLog301And404Errors"))
              RadioButtonList_Log_301_404_Errors.SelectedValue = "T";
            else
              RadioButtonList_Log_301_404_Errors.SelectedValue = "F";

            //FutureSampleBallotDialog.SelectedValue =
            //  DB.Vote.Master.GetPresentGetFutureSampleBallotsDialog(false) ? "T" : "F";
            #endregion Radio Button Lists

            //#region Navbar CheckBoxes
            //if (db.Master_IsOmitAnchorGlobalElectionReport())
            //  CheckBox_Omit_Anchor_Global_Election_Report.Checked = true;
            //else
            //  CheckBox_Omit_Anchor_Global_Election_Report.Checked = false;

            //if (db.Master_IsOmitAnchorGlobalElectedReport())
            //  CheckBox_Omit_Anchor_Global_Elected_Report.Checked = true;
            //else
            //  CheckBox_Omit_Anchor_Global_Elected_Report.Checked = false;

            //if (db.Master_IsOmitNavbarFederal())
            //  CheckBox_Omit_Navbar_Federal.Checked = true;
            //else
            //  CheckBox_Omit_Navbar_Federal.Checked = false;

            //if (db.Master_IsOmitNavbarState())
            //  CheckBox_Omit_Navbar_State.Checked = true;
            //else
            //  CheckBox_Omit_Navbar_State.Checked = false;

            //if (db.Master_IsOmitAnchorsSampleBallot())
            //  CheckBox_Omit_Anchors_Sample_Ballot.Checked = true;
            //else
            //  CheckBox_Omit_Anchors_Sample_Ballot.Checked = false;

            //#endregion Navbar CheckBoxes

            #region diabled
            //if (db.Master_Bool("IsNewImageMethods"))
            //  RadioButtonList_Image_Method.SelectedValue = "T";
            //else
            //  RadioButtonList_Image_Method.SelectedValue = "F";
            #endregion diabled
            #endregion load, checkboxes labels and radion buttons

            #region Bulk Report Update Dates
            //Label_BulkUpdateElectionsUpcomingUS.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsUpcomingUS");
            //Label_BulkUpdateElectionsUpcomingStates.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsUpcomingStates");
            //Label_BulkUpdateElectionsUpcomingCounties.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsUpcomingCounties");
            //Label_BulkUpdateElectionsUpcomingLocals.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsUpcomingLocals");
            //Label_BulkUpdateElectionsPreviousUS.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsPreviousUS");
            //Label_BulkUpdateElectionsPreviousStates.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsPreviousStates");
            //Label_BulkUpdateElectionsPreviousCounties.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsPreviousCounties");
            //Label_BulkUpdateElectionsPreviousLocals.Text
            //  = db.Master_Date_Str("BulkUpdateElectionsPreviousLocals");
            //Label_BulkUpdateOfficialsUS.Text
            //  = db.Master_Date_Str("BulkUpdateOfficialsUS");
            //Label_BulkUpdateOfficialsStates.Text
            //  = db.Master_Date_Str("BulkUpdateOfficialsStates");
            //Label_BulkUpdateOfficialsCounties.Text
            //  = db.Master_Date_Str("BulkUpdateOfficialsCounties");
            //Label_BulkUpdateOfficialsLocals.Text
            //  = db.Master_Date_Str("BulkUpdateOfficialsLocals");
            #endregion Bulk Report Update Dates

            #region Load Email Dates and Numbers

            Label_Emails_Date_All_Rosters.Text =
              db.Master_Date("EmailsDateALLRosters").ToString();
            Label_Emails_Sent_All_Rosters.Text =
              db.Master_Int("EmailsSentALLRosters").ToString();

            Label_Emails_Date_Primary_Rosters.Text =
              db.Master_Date("EmailsDateAllPrimaryRosters").ToString();
            Label_Emails_Sent_Primary_Rosters.Text =
              db.Master_Int("EmailsSentAllPrimaryRosters").ToString();

            Label_Emails_Date_All_Candidates.Text =
              db.Master_Date("EmailsDateAllCandidates").ToString();
            Label_Emails_Sent_All_Candidates.Text =
              db.Master_Int("EmailsSentAllCandidates").ToString();
            #endregion Load Email Dates and Numbers

            #region Is Election Deletion Permitted
            if (db.Master_Bool("IsElectionDeletionPermitted"))
              RadioButtonListPermitElectionDeletions.SelectedValue = "T";
            else
              RadioButtonListPermitElectionDeletions.SelectedValue = "F";

            //if (db.User_Name().ToLower() == "ron")
            if (SecurePage.IsSuperUser)
              RadioButtonListPermitElectionDeletions.Enabled = true;
            else
              RadioButtonListPermitElectionDeletions.Enabled = false;
            #endregion
          }
        }

        catch (Exception ex)
        {
          #region
          Msg.Text = db.Fail(ex.Message);
          db.Log_Error_Admin(ex);
          #endregion
        }
      }
    }

    protected DataTable TableEmails(string stateCode, string emailAddrColumn)
    {
      string sql = string.Empty;
      sql += "SELECT EmailAddr,StateEmailAddr,EmailAddrVoteUSA,LDSEmailAddr,FName,MName,Nickname,LName,Suffix,Address,CityStateZip,StateAddress,StateCityStateZip,LDSCityStateZip";
      sql += " FROM Politicians";
      sql += " WHERE StateCode = " + db.SQLLit(stateCode);
      sql += " AND " + emailAddrColumn + " != ''";

      return db.Table(sql);
    }

    protected string LName(DataRow Row_Email)
    {
      string lName = string.Empty;
      if (!string.IsNullOrEmpty(Row_Email["MName"].ToString()))
        lName += Row_Email["MName"].ToString() + " ";
      lName += Row_Email["LName"].ToString() + " ";
      if (!string.IsNullOrEmpty(Row_Email["Suffix"].ToString()))
        lName += Row_Email["Suffix"].ToString();
      lName = lName.Trim();

      return lName;
    }

    protected bool Address_CityStateZip(
      DataRow Row_Email
      , string address_1_column
      , string cityStateZip_1_column
      , string address_2_column
      , string cityStateZip_2_column
      , ref string address
      , ref string cityStateZip
      )
    {
      bool is_Insert_Email = false;
      if (
        (!string.IsNullOrEmpty(Row_Email[address_1_column].ToString()))
        && (!string.IsNullOrEmpty(Row_Email[cityStateZip_1_column].ToString()))
        )
      {
        is_Insert_Email = true;
        address = Row_Email[address_1_column].ToString();
        cityStateZip = Row_Email[cityStateZip_1_column].ToString();
      }
      else if (
        (!string.IsNullOrEmpty(Row_Email[address_2_column].ToString()))
        && (!string.IsNullOrEmpty(Row_Email[cityStateZip_2_column].ToString()))
        )
      {
        is_Insert_Email = true;
        address = Row_Email[address_2_column].ToString();
        cityStateZip = Row_Email[cityStateZip_2_column].ToString();
      }
      return is_Insert_Email;
    }

    protected int Insert_Temp_Email_Addresses(
      string emailAddress,
      string fName,
      string lName,
      string address,
      string cityStateZip
      )
    {
      string sqlInsert = string.Empty;
      sqlInsert += "INSERT INTO votetemp.tempemailaddresses";
      sqlInsert += "(";
      sqlInsert += "EmailAddress";
      sqlInsert += ",Contact";
      sqlInsert += ",PoliticianKey";
      sqlInsert += ",OfficeKey";
      sqlInsert += ",ElectionKey";
      sqlInsert += ",StateCode";
      sqlInsert += ",PartyKey";
      sqlInsert += ",FName";
      sqlInsert += ",LName";
      sqlInsert += ",Title";
      sqlInsert += ",Address";
      sqlInsert += ",CityStateZip";
      sqlInsert += ")";
      sqlInsert += " VALUES";
      sqlInsert += "(";
      sqlInsert += db.SQLLit(emailAddress);
      sqlInsert += ",''";
      sqlInsert += ",''";
      sqlInsert += ",''";
      sqlInsert += ",''";
      sqlInsert += ",''";
      sqlInsert += ",''";
      sqlInsert += "," + db.SQLLit(fName);
      sqlInsert += "," + db.SQLLit(lName);
      sqlInsert += ",''";
      sqlInsert += "," + db.SQLLit(address);
      sqlInsert += "," + db.SQLLit(cityStateZip);
      sqlInsert += ")";

      try
      {
        db.ExecuteSQL(sqlInsert);
        return 1;
      }
      catch
      {
        //fails if there is a duplicate email
        //so just ignore
        return 0;
      }
    }

    protected void ButtonBuildTempEmails_Click(object sender, EventArgs e)
    {
      try
      {
        #region checks
        db.Throw_Exception_TextBox_Html_Or_Script(TextBoxStateCode);
        if (!StateCache.IsValidStateCode(TextBoxStateCode.Text.Trim()))
          throw new ApplicationException("The state code is invalid.");
        #endregion checks

        int emails = 0;
        string sql = string.Empty;

        sql = "Truncate Table votetemp.tempemailaddresses";
        db.ExecuteSQL(sql);

        #region EmailAddr column with email addresses
        DataTable Table_Emails = TableEmails(TextBoxStateCode.Text.Trim(), "EmailAddr");

        foreach (DataRow Row_Email in Table_Emails.Rows)
        {
          bool is_Insert_Email = false;

          string emailAddress = Row_Email["EmailAddr"].ToString();

          string fName = Row_Email["FName"].ToString();

          string lName = LName(Row_Email);

          #region address & cityStateZip
          string address = string.Empty;
          string cityStateZip = string.Empty;
          is_Insert_Email =
            Address_CityStateZip(
               Row_Email
              , "Address"
              , "CityStateZip"
              , "StateAddress"
              , "StateCityStateZip"
              , ref  address
              , ref  cityStateZip
              );
          #endregion address & cityStateZip

          if (is_Insert_Email)
          {
            emails += Insert_Temp_Email_Addresses(
                   emailAddress,
                   fName,
                   lName,
                   address,
                   cityStateZip
                  );
          }
        }
        #endregion EmailAddr column with email addresses

        #region StateEmailAddr column with email address
        Table_Emails = TableEmails(TextBoxStateCode.Text.Trim(), "StateEmailAddr");

        foreach (DataRow Row_Email in Table_Emails.Rows)
        {
          bool is_Insert_Email = false;

          string emailAddress = Row_Email["StateEmailAddr"].ToString();

          string fName = Row_Email["FName"].ToString();
          string lName = LName(Row_Email);

          #region address & cityStateZip
          string address = string.Empty;
          string cityStateZip = string.Empty;
          is_Insert_Email =
           Address_CityStateZip(
              Row_Email
             , "StateAddress"
             , "StateCityStateZip"
             , "Address"
             , "CityStateZip"
             , ref  address
             , ref  cityStateZip
             );
          #endregion address & cityStateZip

          if (is_Insert_Email)
          {
            emails += Insert_Temp_Email_Addresses(
                   emailAddress,
                   fName,
                   lName,
                   address,
                   cityStateZip
                  );
          }
        }

        #endregion StateEmailAddr column with email address

        #region EmailAddrVoteUSA column with email address
        Table_Emails = TableEmails(TextBoxStateCode.Text.Trim(), "EmailAddrVoteUSA");

        foreach (DataRow Row_Email in Table_Emails.Rows)
        {
          bool is_Insert_Email = false;

          string emailAddress = Row_Email["EmailAddrVoteUSA"].ToString();

          string fName = Row_Email["FName"].ToString();

          string lName = LName(Row_Email);

          #region address & cityStateZip
          string address = string.Empty;
          string cityStateZip = string.Empty;
          is_Insert_Email =
            Address_CityStateZip(
               Row_Email
              , "Address"
              , "CityStateZip"
              , "StateAddress"
              , "StateCityStateZip"
              , ref  address
              , ref  cityStateZip
              );
          #endregion address & cityStateZip

          if (is_Insert_Email)
          {
            emails += Insert_Temp_Email_Addresses(
                   emailAddress,
                   fName,
                   lName,
                   address,
                   cityStateZip
                  );
          }
        }

        #endregion EmailAddrVoteUSA column with email address

        #region LDSEmailAddr column with email addresses
        Table_Emails = TableEmails(TextBoxStateCode.Text.Trim(), "LDSEmailAddr");

        foreach (DataRow Row_Email in Table_Emails.Rows)
        {
          bool is_Insert_Email = false;

          string emailAddress = Row_Email["LDSEmailAddr"].ToString();

          string fName = Row_Email["FName"].ToString();

          string lName = LName(Row_Email);

          #region address & cityStateZip
          string address = string.Empty;
          string cityStateZip = string.Empty;
          is_Insert_Email =
            Address_CityStateZip(
               Row_Email
              , "LDSEmailAddr"
              , "LDSCityStateZip"
              , "Address"
              , "CityStateZip"
              , ref  address
              , ref  cityStateZip
              );
          #endregion address & cityStateZip

          if (is_Insert_Email)
          {
            emails += Insert_Temp_Email_Addresses(
                   emailAddress,
                   fName,
                   lName,
                   address,
                   cityStateZip
                  );
          }
        }
        #endregion LDSEmailAddr column with email addresses

        Msg.Text = db.Ok("The votetemp.tempemailaddresses Table has been created with "
          + emails.ToString() + " email addresses.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void TextBoxEmailAddr_TextChanged(object sender, EventArgs e)
    {

    }

    protected void ButtonDeleteEmail_Click(object sender, EventArgs e)
    {
      try
      {
        int rows = db.Rows_Count_From("Addresses WHERE Email = "
          + db.SQLLit(TextBoxDeleteEmail.Text.Trim()));
        if (rows == 1)
        {
          string SQL = string.Empty;
          if (CheckBoxListDeleteEmail.SelectedValue == "Row")
          {
            SQL += "DELETE";
            SQL += " FROM Addresses";
            SQL += " WHERE Email = " + db.SQLLit(TextBoxDeleteEmail.Text.Trim());
            db.ExecuteSQL(SQL);

            Msg.Text = db.Ok("The Addresses Table Row with and Email of: "
              + TextBoxDeleteEmail.Text.Trim() + " has been deleted.");
          }
          else
          {
            //SelectedValue == "Email"
            SQL += "UPDATE Addresses";
            SQL += " SET Email = ''";
            SQL += " WHERE Email = " + db.SQLLit(TextBoxDeleteEmail.Text.Trim());
            db.ExecuteSQL(SQL);

            Msg.Text = db.Ok("Only the Email: "
              + TextBoxDeleteEmail.Text.Trim() + " has been deleted in the Addresses Table.");
          }

          TextBoxDeleteEmail.Text = string.Empty;
        }
        else
        {
          Msg.Text = db.Fail("There is no row in the Addresses Table with and Email of: "
            + TextBoxDeleteEmail.Text.Trim());
        }
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }

    }

    protected void CheckBoxListDeleteEmail_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    #region Dead code

    //#region sql
    //protected string sql_Elections_Federal(bool IsUpcoming)
    //{
    //  string SQL = string.Empty;
    //  SQL += " SELECT Elections.ElectionKey";
    //  SQL += " FROM Elections";
    //  SQL += " WHERE ((Elections.StateCode = 'U1')";
    //  SQL += " OR (Elections.StateCode = 'U2')";
    //  SQL += " OR (Elections.StateCode = 'U3')";
    //  SQL += " OR (Elections.StateCode = 'U4'))";
    //  if (IsUpcoming)
    //    SQL += " AND Elections.ElectionDate > " + db.SQLLit(Db.DbToday);
    //  else
    //    SQL += " AND Elections.ElectionDate <= " + db.SQLLit(Db.DbToday);
    //  SQL += " ORDER BY Elections.StateCode,Elections.ElectionDate DESC";
    //  return SQL;
    //}
    //protected string sql_Elections_State(string StateCode, bool IsUpcoming)
    //{
    //  string SQL = string.Empty;
    //  SQL += " SELECT Elections.ElectionKey";
    //  SQL += " FROM Elections";
    //  SQL += " WHERE Elections.StateCode = " + db.SQLLit(StateCode);
    //  SQL += " AND Elections.CountyCode = ''";
    //  if (IsUpcoming)
    //    SQL += " AND Elections.ElectionDate > " + db.SQLLit(Db.DbToday);
    //  else
    //    SQL += " AND Elections.ElectionDate <= " + db.SQLLit(Db.DbToday);
    //  SQL += " ORDER BY Elections.StateCode,Elections.ElectionDate DESC";
    //  return SQL;
    //}
    //protected string sql_Elections_County(string StateCode, string CountyCode, bool IsUpcoming)
    //{
    //  string SQL = string.Empty;
    //  SQL += " SELECT Elections.ElectionKey";
    //  SQL += " FROM Elections";
    //  SQL += " WHERE Elections.StateCode = " + db.SQLLit(StateCode);
    //  SQL += " AND Elections.CountyCode = " + db.SQLLit(CountyCode);
    //  SQL += " AND Elections.LocalCode = ''";
    //  if (IsUpcoming)
    //    SQL += " AND Elections.ElectionDate > " + db.SQLLit(Db.DbToday);
    //  else
    //    SQL += " AND Elections.ElectionDate <= " + db.SQLLit(Db.DbToday);
    //  SQL += " ORDER BY StateCode,CountyCode,ElectionDate DESC";
    //  return SQL;
    //}
    //protected string sql_Elections_Local(string StateCode, string CountyCode, string LocalCode, bool IsUpcoming)
    //{
    //  string SQL = string.Empty;
    //  SQL += " SELECT Elections.ElectionKey";
    //  SQL += " FROM Elections";
    //  SQL += " WHERE Elections.StateCode = " + db.SQLLit(StateCode);
    //  SQL += " AND Elections.CountyCode = " + db.SQLLit(CountyCode);
    //  SQL += " AND Elections.LocalCode = " + db.SQLLit(LocalCode);
    //  if (IsUpcoming)
    //    SQL += " AND Elections.ElectionDate > " + db.SQLLit(Db.DbToday);
    //  else
    //    SQL += " AND Elections.ElectionDate <= " + db.SQLLit(Db.DbToday);
    //  SQL += " ORDER BY StateCode,CountyCode,LocalCode,ElectionDate DESC";
    //  return SQL;
    //}

    //protected string sql_ReportsElections(string ElectionKey)
    //{
    //  string SQL = string.Empty;
    //  SQL += " SELECT ElectionKey,IsReportCurrent";
    //  SQL += " FROM ReportsElections";
    //  SQL += " WHERE ElectionKey = " + db.SQLLit(ElectionKey);
    //  return SQL;
    //}
    //#endregion sql
    //protected void ButtonCleanOfficials_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    Server.ScriptTimeout = 60000;// = 1000 min = 16 hrs
    //    #region Delete all ReportsOfficials rows where there are no OfficesOfficials rows for the StateCode, CountyCode and LocalCode
    //    int OfficesOfficials_Rows_Deleted = 0;
    //    string Msg_Return = string.Empty;
    //    DataTable ReportsOfficialsTable = db.Table("SELECT StateCode,CountyCode,LocalCode FROM ReportsOfficials");
    //    foreach (DataRow ReportsOfficialsRow in ReportsOfficialsTable.Rows)
    //    {
    //      //string SQL = "SELECT COUNT(*)";
    //      //SQL += " FROM OfficesOfficials";
    //      //SQL += " WHERE OfficesOfficials.StateCode = "
    //      //  + db.SQLLit(ReportsOfficialsRow["StateCode"].ToString());
    //      //SQL += " AND OfficesOfficials.CountyCode = "
    //      //  + db.SQLLit(ReportsOfficialsRow["CountyCode"].ToString());
    //      //SQL += " AND OfficesOfficials.LocalCode = "
    //      //  + db.SQLLit(ReportsOfficialsRow["LocalCode"].ToString());

    //      int OfficesOfficials_Rows = db.Rows("OfficesOfficials"
    //        , "StateCode", ReportsOfficialsRow["StateCode"].ToString()
    //        , "CountyCode", ReportsOfficialsRow["CountyCode"].ToString()
    //        , "LocalCode", ReportsOfficialsRow["LocalCode"].ToString()
    //        );
    //      if (OfficesOfficials_Rows == 0)
    //      {
    //        string sql_delete = "DELETE FROM ReportsOfficials WHERE StateCode ="
    //          + db.SQLLit(ReportsOfficialsRow["StateCode"].ToString());
    //        sql_delete += " AND CountyCode = "
    //          + db.SQLLit(ReportsOfficialsRow["CountyCode"].ToString());
    //        sql_delete += " AND LocalCode = "
    //          + db.SQLLit(ReportsOfficialsRow["LocalCode"].ToString());
    //        db.ExecuteSQL(sql_delete);

    //        OfficesOfficials_Rows_Deleted++;
    //      }

    //    }
    //    Msg_Return += "<br>" + OfficesOfficials_Rows_Deleted.ToString() + " ReportsOfficials rows deleted.";
    //    #endregion Delete all ReportsOfficials rows where there are no OfficesOfficials rows for the StateCode, CountyCode and LocalCode
    //    Msg.Text = db.Ok(Msg_Return);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //    protected void xOld_One_Shot_Utilities()
    //    {
    //      Server.ScriptTimeout = 60000;// = 1000 min = 16 hrs
    //      #region Inits
    //      string Message = string.Empty;
    //      string SQL = string.Empty;
    //      string SQLSELECT = string.Empty;
    //      string SQLSELECT1 = string.Empty;
    //      string SQLINSERT = string.Empty;
    //      string SQLUPDATE = string.Empty;
    //      string SQLUPDATE1 = string.Empty;
    //      string SQLUPDATE2 = string.Empty;
    //      string SQLUPDATE3 = string.Empty;
    //      string SQLUPDATE4 = string.Empty;
    //      string SQLUPDATE5 = string.Empty;
    //      string SQLUPDATE6 = string.Empty;
    //      string SQLDELETE = string.Empty;
    //      string StateCode = string.Empty;
    //      string ElectionKey = string.Empty;
    //      string NewOfficeLine2 = string.Empty;
    //      //DataTable Table = null;
    //      //DataTable StatesTable = null;
    //      //DataTable CommonIssuesTable = null;
    //      //DataTable OfficesTable = null;
    //      //DataTable PoliticiansTable = null;
    //      //DataTable ElectionsPoliticiansTable = null;
    //      string OldPoliticianKey = string.Empty;
    //      string OldOfficeKey = string.Empty;
    //      string OldRunningMateKey = string.Empty;
    //      //int rows = 0;

    //      string ST = string.Empty;
    //      string CNTY = string.Empty;
    //      string CD = string.Empty;
    //      string SD = string.Empty;
    //      string HD = string.Empty;
    //      string USHouseCode = string.Empty;
    //      string StateSenateCode = string.Empty;
    //      string StateHouseCode = string.Empty;
    //      string CountyCode = string.Empty;
    //      string State = string.Empty;
    //      string County = string.Empty;
    //      string USHouse = string.Empty;
    //      string StateSenate = string.Empty;
    //      string StateHouse = string.Empty;
    //      //DataRow BallotRow = null;
    //      //DataRow StatesRow = null;
    //      //DataRow BallotRowTest = null;
    //      #endregion Inits

    //#if false
    //      if (true == false)
    //      {
    //        #region OUTTER true == false

    //        if (true == false)
    //        {
    //          #region
    //          SQLSELECT = "Select ZIP5,ZIP4 from USZDNew";
    //          DataTable USZ_Table = db.Table(SQLSELECT);
    //          foreach (DataRow USZ_Row in USZ_Table.Rows)
    //          {
    //            string Zip5 = USZ_Row["ZIP5"].ToString();
    //            string Zip4 = USZ_Row["ZIP4"].ToString();

    //            SQL = string.Empty;
    //            SQL += " INSERT INTO USZDNewKeys ";
    //            SQL += "(";
    //            SQL += "ZIP5";
    //            SQL += ",ZIP4";
    //            SQL += ")";
    //            SQL += " VALUES ";
    //            SQL += "(";
    //            SQL += db.SQLLit(USZ_Row["ZIP5"].ToString());
    //            SQL += "," + db.SQLLit(USZ_Row["ZIP5"].ToString());
    //            SQL += ")";
    //            db.ExecuteSQL(SQL);
    //          }

    //          SqlConnection cn = new SqlConnection(db.Connection);
    //          cn.Open();

    //          SQL = "SELECT ST, CNTY, CD,SD,HD FROM USZDOld ORDER BY ZIP_4 DESC";//change to USZD or USZDOld
    //          SqlCommand comm = new SqlCommand(SQL, cn);
    //          comm.CommandTimeout = 360000;
    //          comm.Connection = cn;
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "select electionkey,electiondate from elections order by electiondate asc, electionkey";
    //          DataTable ElectionsTable = db.Table(SQL);//7500 elections
    //          foreach (DataRow ElectionRow in ElectionsTable.Rows)
    //          {
    //            SQLSELECT = "select OfficeKey,PoliticianKey FROM ElectionsPoliticians WHERE ElectionKey= " + db.SQLLit(ElectionRow["electionkey"].ToString());
    //            ElectionsPoliticiansTable = db.Table(SQLSELECT);
    //            foreach (DataRow ElectionsPoliticianRow in ElectionsPoliticiansTable.Rows)
    //            {
    //              SQLUPDATE2 = "update Politicians set OfficeKey = " + db.SQLLit(ElectionsPoliticianRow["OfficeKey"].ToString())
    //              + " WHERE PoliticianKey =" + db.SQLLit(ElectionsPoliticianRow["PoliticianKey"].ToString());
    //              db.ExecuteSQL(SQLUPDATE2);
    //            }
    //          }
    //          #endregion
    //        }


    //        if (true == false)
    //        {
    //          //Need to do for production DB - update Elections
    //          #region
    //          Table = null;

    //          SQL = string.Empty;
    //          SQL += "SELECT ";
    //          SQL += " OfficeKey,PoliticianKey ";
    //          SQL += " FROM ElectionsPoliticians ";
    //          SQL += " WHERE ElectionKey= 'VA20091103OA'";
    //          Table = db.Table(SQL);
    //          foreach (DataRow Row in Table.Rows)
    //          {
    //            SQLUPDATE2 = "update Politicians set OfficeKey = " + db.SQLLit(Row["OfficeKey"].ToString())
    //            + " WHERE PoliticianKey =" + db.SQLLit(Row["PoliticianKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE2);
    //          }
    //          #endregion
    //        }

    //        //Step 2 - Need to do for production DB - update ElectionKey_State  in ElectionsOffices
    //        if (true == false)
    //        {
    //          #region
    //          SQL = string.Empty;
    //          SQL += "SELECT ";
    //          SQL += " ElectionKey ";
    //          SQL += " FROM Elections ";
    //          Table = db.Table(SQL);
    //          foreach (DataRow Row in Table.Rows)
    //          {
    //            SQLUPDATE2 = "update ElectionsOffices set ElectionKeyState = " + db.SQLLit(db.ElectionKey_State(Row["ElectionKey"].ToString()))
    //              + "  where ElectionKey = " + db.SQLLit(Row["ElectionKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE2);
    //          }
    //        }
    //        //Step 3 - Need to do for production DB - update ElectionKey_Federal in ElectionsOffices, ElectionsPoliticians
    //        if (true == false)
    //        {
    //          SQL = string.Empty;
    //          SQL += "SELECT ";
    //          SQL += " ElectionKey,OfficeKey ";
    //          SQL += " FROM ElectionsOffices ";
    //          Table = db.Table(SQL);
    //          foreach (DataRow Row in Table.Rows)
    //          {
    //            SQLUPDATE2 = "update ElectionsOffices set ElectionKeyFederal = " + db.SQLLit(db.ElectionKey_Federal(Row["ElectionKey"].ToString(), Row["OfficeKey"].ToString()))
    //              + "  where ElectionKey = " + db.SQLLit(Row["ElectionKey"].ToString())
    //              + " and OfficeKey = " + db.SQLLit(Row["OfficeKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE2);
    //          }

    //          //SQL = string.Empty;
    //          //SQL += "SELECT ";
    //          //SQL += " ElectionKey,OfficeKey ";
    //          //SQL += " FROM ElectionsPoliticians ";
    //          //Table = db.Table(SQL);
    //          //foreach (DataRow Row in Table.Rows)
    //          //{
    //          //  SQLUPDATE3 = "update ElectionsPoliticians set ElectionKeyFederal = " + db.SQLLit(db.ElectionKey_Federal(Row["ElectionKey"].ToString(), Row["OfficeKey"].ToString()))
    //          //    + "  where ElectionKey = " + db.SQLLit(Row["ElectionKey"].ToString())
    //          //    + " and OfficeKey = " + db.SQLLit(Row["OfficeKey"].ToString());
    //          //  db.ExecuteSQL(SQLUPDATE3);
    //          //}
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          StatesTable = db.Table(sql.States_51());
    //          foreach (DataRow StateRow in StatesTable.Rows)
    //          {
    //            for (int Office_Class = db.Office_US_President; Office_Class <= db.Office_Local_Party; Office_Class++)
    //            {
    //              int OfficeOrder = Office_Class * 10;
    //              SQLINSERT = "INSERT INTO ElectionsBallotOrder "
    //               + "("
    //               + "StateCode"
    //               + ",OfficeLevel"
    //               + ",OfficeOrder"
    //               + ")"
    //               + " VALUES("
    //               + db.SQLLit(StateRow["StateCode"].ToString())
    //               + "," + Office_Class.ToString()
    //               + "," + OfficeOrder.ToString()
    //               + ")";
    //              db.ExecuteSQL(SQLINSERT);
    //            }
    //          }
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          if (true == true)
    //          {
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " Offices.OfficeKey ";
    //            SQL += " ,Offices.DistrictCode ";
    //            SQL += " ,Offices.DistrictCodeAlpha ";
    //            SQL += " FROM Offices ";
    //            SQL += " where len(districtcode) = 3";
    //            SQL += " and len(districtcode) !=0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              string DistrictCode = db.Str_Remove_Non_Digits(OfficeRow["DistrictCode"].ToString());
    //              if (DistrictCode.Length < 3)
    //              {
    //                //preceed with 0s
    //                if (DistrictCode.Length != 0)
    //                  DistrictCode = DistrictCode.PadLeft(3, '0');
    //                SQLUPDATE = "update offices";
    //                SQLUPDATE += " set districtcode =" + db.SQLLit(DistrictCode);
    //                SQLUPDATE += " where officekey=" + db.SQLLit(OfficeRow["OfficeKey"].ToString());
    //                db.ExecuteSQL(SQLUPDATE);
    //              }
    //            }
    //          }
    //          if (true == true)
    //          {
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " ElectionsOffices.OfficeKey ";
    //            SQL += " ,ElectionsOffices.DistrictCode ";
    //            SQL += " FROM ElectionsOffices ";
    //            SQL += " where len(districtcode) = 3";
    //            SQL += " and len(districtcode) !=0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              string DistrictCode = db.Str_Remove_Non_Digits(OfficeRow["DistrictCode"].ToString());
    //              if (DistrictCode.Length < 3)
    //              {
    //                //preceed with 0s
    //                if (DistrictCode.Length != 0)
    //                  DistrictCode = DistrictCode.PadLeft(3, '0');
    //                SQLUPDATE = "update ElectionsOffices";
    //                SQLUPDATE += " set districtcode =" + db.SQLLit(DistrictCode);
    //                SQLUPDATE += " where officekey=" + db.SQLLit(OfficeRow["OfficeKey"].ToString());
    //                db.ExecuteSQL(SQLUPDATE);
    //              }
    //            }
    //          }
    //          if (true == true)
    //          {
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " Offices.OfficeKey ";
    //            SQL += " ,Offices.DistrictCode ";
    //            SQL += " ,Offices.DistrictCodeAlpha ";
    //            SQL += " FROM Offices ";
    //            SQL += " where len(DistrictCodeAlpha) != 0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              string DistrictCodeAlpha = db.Str_Remove_Digits(OfficeRow["DistrictCodeAlpha"].ToString());
    //              SQLUPDATE = "update offices";
    //              SQLUPDATE += " set DistrictCodeAlpha =" + db.SQLLit(DistrictCodeAlpha);
    //              SQLUPDATE += " where officekey=" + db.SQLLit(OfficeRow["OfficeKey"].ToString());
    //              db.ExecuteSQL(SQLUPDATE);
    //            }
    //          }
    //          if (true == true)
    //          {
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " StateCode ";
    //            SQL += " ,JudicialDistrictCode ";
    //            SQL += " ,JudicialDistrictCodeAlpha ";
    //            SQL += " FROM JudicialDistricts ";
    //            SQL += " where len(JudicialDistrictCode) = 3";
    //            SQL += " and len(JudicialDistrictCode) !=0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              string OldJudicialDistrictCode = OfficeRow["JudicialDistrictCode"].ToString();
    //              string JudicialDistrictCode = db.Str_Remove_Non_Digits(OfficeRow["JudicialDistrictCode"].ToString());
    //              if (JudicialDistrictCode.Length < 3)
    //              {
    //                //preceed with 0s
    //                if (JudicialDistrictCode.Length != 0)
    //                  JudicialDistrictCode = JudicialDistrictCode.PadLeft(3, '0');
    //                SQLUPDATE = "update JudicialDistricts";
    //                SQLUPDATE += " set JudicialDistrictCode =" + db.SQLLit(JudicialDistrictCode);
    //                SQLUPDATE += " where StateCode=" + db.SQLLit(OfficeRow["StateCode"].ToString());
    //                SQLUPDATE += " and JudicialDistrictCode=" + db.SQLLit(OldJudicialDistrictCode);
    //                db.ExecuteSQL(SQLUPDATE);
    //              }
    //            }
    //          }
    //          if (true == true)
    //          {
    //            string OldJudicialDistrictCode = string.Empty;
    //            string OldJudicialDistrictCodeAlpha = string.Empty;
    //            string JudicialDistrictCodeAlpha = string.Empty;
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " StateCode ";
    //            SQL += " ,JudicialDistrictCode ";
    //            SQL += " ,JudicialDistrictCodeAlpha ";
    //            SQL += " FROM JudicialDistricts ";
    //            SQL += " where len(JudicialDistrictCodeAlpha) != 0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              OldJudicialDistrictCode = OfficeRow["JudicialDistrictCode"].ToString();
    //              OldJudicialDistrictCodeAlpha = OfficeRow["JudicialDistrictCodeAlpha"].ToString();
    //              JudicialDistrictCodeAlpha = db.Str_Remove_Digits(OfficeRow["JudicialDistrictCodeAlpha"].ToString());
    //              SQLUPDATE = "update JudicialDistricts";
    //              SQLUPDATE += " set JudicialDistrictCodeAlpha =" + db.SQLLit(JudicialDistrictCodeAlpha);
    //              SQLUPDATE += " where StateCode=" + db.SQLLit(OfficeRow["StateCode"].ToString());
    //              SQLUPDATE += " and JudicialDistrictCode=" + db.SQLLit(OldJudicialDistrictCode);
    //              SQLUPDATE += " and JudicialDistrictCodeAlpha=" + db.SQLLit(OldJudicialDistrictCodeAlpha);
    //              db.ExecuteSQL(SQLUPDATE);
    //            }
    //          }
    //          if (true == true)
    //          {
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " StateCode ";
    //            SQL += " ,JudicialDistrictCode ";
    //            SQL += " ,JudicialDistrictCodeAlpha ";
    //            SQL += " FROM JudicialDistrictCounties ";
    //            SQL += " where len(JudicialDistrictCode) = 3";
    //            SQL += " and len(JudicialDistrictCode) !=0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              string OldJudicialDistrictCode = OfficeRow["JudicialDistrictCode"].ToString();
    //              string JudicialDistrictCode = db.Str_Remove_Non_Digits(OfficeRow["JudicialDistrictCode"].ToString());
    //              if (JudicialDistrictCode.Length < 3)
    //              {
    //                //preceed with 0s
    //                if (JudicialDistrictCode.Length != 0)
    //                  JudicialDistrictCode = JudicialDistrictCode.PadLeft(3, '0');
    //                SQLUPDATE = "update JudicialDistrictCounties";
    //                SQLUPDATE += " set JudicialDistrictCode =" + db.SQLLit(JudicialDistrictCode);
    //                SQLUPDATE += " where StateCode=" + db.SQLLit(OfficeRow["StateCode"].ToString());
    //                SQLUPDATE += " and JudicialDistrictCode=" + db.SQLLit(OldJudicialDistrictCode);
    //                db.ExecuteSQL(SQLUPDATE);
    //              }
    //            }
    //          }
    //          if (true == true)
    //          {
    //            string OldJudicialDistrictCode = string.Empty;
    //            string OldJudicialDistrictCodeAlpha = string.Empty;
    //            string JudicialDistrictCodeAlpha = string.Empty;
    //            SQL = string.Empty;
    //            SQL += " SELECT ";
    //            SQL += " StateCode ";
    //            SQL += " ,JudicialDistrictCode ";
    //            SQL += " ,JudicialDistrictCodeAlpha ";
    //            SQL += " FROM JudicialDistrictCounties ";
    //            SQL += " where len(JudicialDistrictCodeAlpha) != 0";
    //            OfficesTable = db.Table(SQL);
    //            foreach (DataRow OfficeRow in OfficesTable.Rows)
    //            {
    //              //strip alphas
    //              OldJudicialDistrictCode = OfficeRow["JudicialDistrictCode"].ToString();
    //              OldJudicialDistrictCodeAlpha = OfficeRow["JudicialDistrictCodeAlpha"].ToString();
    //              JudicialDistrictCodeAlpha = db.Str_Remove_Digits(OfficeRow["JudicialDistrictCodeAlpha"].ToString());
    //              SQLUPDATE = "update JudicialDistrictCounties";
    //              SQLUPDATE += " set JudicialDistrictCodeAlpha =" + db.SQLLit(JudicialDistrictCodeAlpha);
    //              SQLUPDATE += " where StateCode=" + db.SQLLit(OfficeRow["StateCode"].ToString());
    //              SQLUPDATE += " and JudicialDistrictCode=" + db.SQLLit(OldJudicialDistrictCode);
    //              SQLUPDATE += " and JudicialDistrictCodeAlpha=" + db.SQLLit(OldJudicialDistrictCodeAlpha);
    //              db.ExecuteSQL(SQLUPDATE);
    //            }
    //          }
    //          Msg.Text = db.Ok("Done!");
    //          #endregion
    //        }
    //        if (true == false)
    //        {
    //          #region
    //          StatesTable = db.Table(sql.States_51());
    //          foreach (DataRow StateRow in StatesTable.Rows)
    //          {
    //            SQLINSERT = "INSERT INTO Security "
    //              + "("
    //              + "UserName"
    //              + ",UserPassword"
    //              + ",UserSecurity"
    //              + ",UserOrganizationCode"
    //              + ",UserDesignCode"
    //              + ",UserStateCode"
    //              + ")"
    //              + " VALUES("
    //              + db.SQLLit(StateRow["StateCode"].ToString().ToLower())
    //              + "," + db.SQLLit(StateRow["StateCode"].ToString().ToLower() + "voterak")
    //              + ",'ADMIN'"
    //              + ",'VOTE-USA'"
    //              + "," + db.SQLLit("VOTE-" + StateRow["StateCode"].ToString().ToUpper())
    //              + "," + db.SQLLit(StateRow["StateCode"].ToString().ToUpper())
    //              + ")";
    //            db.ExecuteSQL(SQLINSERT);
    //            //-----------------------------------------------
    //            //SQLINSERT = "INSERT INTO Security "
    //            //  + "("
    //            //  + "UserName"
    //            //  + ",UserPassword"
    //            //  + ",UserSecurity"
    //            //  + ",DomainServerName"
    //            //  + ")"
    //            //  + " VALUES("
    //            //  + db.SQLLit(StateRow["StateCode"].ToString().ToLower())
    //            //  + "," + db.SQLLit(StateRow["StateCode"].ToString().ToLower() + "voterak")
    //            //  + ",'ADMIN'"
    //            //  + "," + db.SQLLit("www.vote-" + StateRow["StateCode"].ToString().ToLower() + ".org")
    //            //  + ")";
    //            //db.ExecuteSQL(SQLINSERT);
    //            ////-----------------------------------------------
    //            //SQLINSERT = "INSERT INTO Security "
    //            //  + "("
    //            //  + "UserName"
    //            //  + ",UserPassword"
    //            //  + ",UserSecurity"
    //            //  + ",DomainServerName"
    //            //  + ")"
    //            //  + " VALUES("
    //            //  + db.SQLLit(StateRow["StateCode"].ToString().ToLower())
    //            //  + "," + db.SQLLit(StateRow["StateCode"].ToString().ToLower() + "voterak")
    //            //  + ",'ADMIN'"
    //            //  + "," + db.SQLLit(StateRow["StateCode"].ToString().ToLower() + ".vote-usa.org")
    //            //  + ")";
    //            //db.ExecuteSQL(SQLINSERT);
    //            //-----------------------------------------------
    //          }
    //          Msg.Text = db.Ok("Done!");
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "select ReferendumKey from Referendums ";
    //          DataTable ReferendumTable = db.Table(SQL);
    //          foreach (DataRow ReferendumRow in ReferendumTable.Rows)
    //          {
    //            SQLSELECT = "Select ElectionKey from Referendums"
    //            + " where ReferendumKey = " + db.SQLLit(ReferendumRow["ReferendumKey"].ToString());
    //            DataRow ElectionsReferendumsRow = db.Row_Optional(SQLSELECT);
    //            if (ElectionsReferendumsRow != null)
    //            {
    //              SQLUPDATE = "Update Referendums "
    //              + " Set ElectionKey = " + db.SQLLit(ElectionsReferendumsRow["ElectionKey"].ToString())
    //              + " where ReferendumKey = " + db.SQLLit(ReferendumRow["ReferendumKey"].ToString());
    //              db.ExecuteSQL(SQLUPDATE);
    //              //string x = "";
    //            }
    //          }
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "Select officekey,OfficeLevel"
    //             + " from offices ";
    //          OfficesTable = db.Table(SQL);
    //          foreach (DataRow OfficesRow in OfficesTable.Rows)
    //          {
    //            SQLUPDATE = "Update ElectionsOffices"
    //            + " set OfficeLevel = " + OfficesRow["OfficeLevel"].ToString()
    //            + " Where OfficeKey =" + db.SQLLit(OfficesRow["OfficeKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE);
    //          }
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "Select statecode,officekey,CountyCode"
    //              + " from offices "
    //              + " where officesublevel = 3"
    //              + " and Officeline2 = ''"
    //              + " order by statecode,OfficeLine1,OfficeLine2";
    //          OfficesTable = db.Table(SQL);
    //          foreach (DataRow OfficesRow in OfficesTable.Rows)
    //          {
    //            County = db.Name_County(OfficesRow["statecode"].ToString(), OfficesRow["CountyCode"].ToString());
    //            SQLUPDATE = "Update Offices set OfficeLine2 = " + db.SQLLit(County)
    //            + " Where OfficeKey =" + db.SQLLit(OfficesRow["OfficeKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE);
    //          }
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "Select * from Answers";
    //          DataTable AnswersTableX = db.Table(SQL);
    //          foreach (DataRow AnswerRowx in AnswersTableX.Rows)
    //          {
    //            SQLUPDATE = "UPDATE Answers SET";
    //            //SQLUPDATE += " AnswerLength = " + AnswerRowx["Answer"].ToString().Length.ToString();
    //            SQLUPDATE += " WHERE PoliticianKey = " + db.SQLLit(AnswerRowx["PoliticianKey"].ToString());
    //            SQLUPDATE += " AND QuestionKey = " + db.SQLLit(AnswerRowx["QuestionKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE);
    //            string x = string.Empty;
    //          }
    //          Msg.Text = db.Ok("Done!");
    //          #endregion
    //        }


    //        if (true == false)
    //        {
    //          #region
    //          SQL = "Select * from electionspoliticians where election = '20071106'and substring(electionkey,12,3) != '000'";
    //          DataTable electionspoliticiansTable = db.Table(SQL);
    //          foreach (DataRow electionspoliticiansRow in electionspoliticiansTable.Rows)
    //          {
    //            db.Politicians_Update_Str(electionspoliticiansRow["PoliticianKey"].ToString(), "OfficeKey"
    //              , electionspoliticiansRow["OfficeKey"].ToString());
    //            string x = string.Empty;
    //          }
    //          Msg.Text = db.Ok("Done!");
    //          #endregion
    //        }


    //        if (true == false)
    //        {
    //          #region
    //          SQL = "Select PoliticianKey,Nickname from Politicians";
    //          PoliticiansTable = db.Table(SQL);
    //          foreach (DataRow PoliticianRow in PoliticiansTable.Rows)
    //          {
    //            if (PoliticianRow["Nickname"].ToString() != string.Empty)
    //            {
    //              string theNickname = db.Str_Remove_Single_And_Double_Quotes(PoliticianRow["Nickname"].ToString().Trim());
    //              SQLUPDATE = "Update Politicians Set Nickname = " + db.SQLLit(theNickname)
    //                + " where PoliticianKey = " + db.SQLLit(PoliticianRow["PoliticianKey"].ToString());
    //              db.ExecuteSQL(SQLUPDATE);
    //              string x = string.Empty;
    //            }
    //          }
    //          #endregion
    //        }


    //        if (true == false)
    //        {
    //          #region
    //          StatesTable = db.Table(sql.States_51());
    //          foreach (DataRow StateRow in StatesTable.Rows)
    //          {
    //            string OfficeKey = StateRow["StateCode"].ToString() + "President";
    //            SQLDELETE = "DELETE FROM OfficesOfficials "
    //            + " WHERE OfficeKey = " + db.SQLLit(OfficeKey);
    //            db.ExecuteSQL(SQLDELETE);
    //            string x = string.Empty;
    //          }
    //          #endregion
    //        }

    //        if (true == false)
    //        {
    //          #region
    //          SQL = "SELECT ElectionKey,ElectionKeyFederal,OfficeKey,PoliticianKey FROM ElectionsPoliticians WHERE StateCode = 'US' AND OfficeKey = 'USPresident'";
    //          ElectionsPoliticiansTable = db.Table(SQL);
    //          foreach (DataRow ElectionsPoliticiansRow in ElectionsPoliticiansTable.Rows)
    //          {
    //            StateCode = db.StateCode_Or_FederalCode_In_ElectionKey(ElectionsPoliticiansRow["ElectionKeyFederal"].ToString());
    //            SQLUPDATE = "UPDATE ElectionsPoliticians";
    //            SQLUPDATE += " SET StateCode =" + db.SQLLit(StateCode);
    //            SQLUPDATE += " ,ElectionKey =" + db.SQLLit(ElectionsPoliticiansRow["ElectionKeyFederal"].ToString());
    //            SQLUPDATE += " WHERE ElectionKey =" + db.SQLLit(ElectionsPoliticiansRow["ElectionKey"].ToString());
    //            SQLUPDATE += " AND OfficeKey =" + db.SQLLit(ElectionsPoliticiansRow["OfficeKey"].ToString());
    //            SQLUPDATE += " AND PoliticianKey =" + db.SQLLit(ElectionsPoliticiansRow["PoliticianKey"].ToString());
    //            db.ExecuteSQL(SQLUPDATE);
    //            string x = string.Empty;
    //          }
    //          #endregion
    //        }


    //        if (true == false)
    //        {
    //          #region
    //          StatesTable = db.Table(sql.States_51());
    //          foreach (DataRow StateRow in StatesTable.Rows)
    //          {
    //            OldOfficeKey = StateRow["StateCode"].ToString() + "President";
    //            SQLUPDATE = "UPDATE ElectionsOffices";
    //            SQLUPDATE += " SET OfficeKey = 'USPresident'";
    //            SQLUPDATE += " WHERE OfficeKey =" + db.SQLLit(OldOfficeKey);
    //            db.ExecuteSQL(SQLUPDATE);
    //          }
    //          #endregion
    //        }

    //      if (true == false)
    //        {
    //          #region restructure office level 17 (Multi-county district offices) for new DistrictCode implementation
    //          string sql_Offices = string.Empty;
    //          string sql_JudicialDistricts = string.Empty;
    //          string sql_Districts = string.Empty;
    //          string sql_JudicialDistrictCounties = string.Empty;
    //          string District = string.Empty;
    //          string District_Code_New = string.Empty;
    //          string OfficeKey_New = string.Empty;

    //          sql_Offices = " select OfficeKey,StateCode,DistrictCode,DistrictCodeAlpha from offices";
    //          sql_Offices += " where officelevel =17";
    //          sql_Offices += " order by statecode,districtcode,districtcodealpha";
    //          DataTable Offices_Table = db.Table(sql_Offices);
    //          foreach (DataRow Office_Row in Offices_Table.Rows)
    //          {
    //            //Find judicial district for office
    //            sql_JudicialDistricts = " select District from JudicialDistricts";
    //            sql_JudicialDistricts += " where StateCode = " + db.SQLLit(Office_Row["StateCode"].ToString());
    //            sql_JudicialDistricts += " and DistrictCode = " + db.SQLLit(Office_Row["DistrictCode"].ToString());
    //            sql_JudicialDistricts += " and DistrictCodeAlpha = " + db.SQLLit(Office_Row["DistrictCodeAlpha"].ToString());
    //            DataRow JudicialDistricts_Row = db.Row_Optional(sql_JudicialDistricts);
    //            if (JudicialDistricts_Row != null)
    //            {
    //              District = JudicialDistricts_Row["District"].ToString();
    //              //Existing Districts Row
    //              sql_Districts = " Districts";
    //              sql_Districts += " where JudicialDistrictCode = " + db.SQLLit(Office_Row["DistrictCode"].ToString());
    //              sql_Districts += " and JudicialDistrictCodeAlpha = " + db.SQLLit(Office_Row["DistrictCodeAlpha"].ToString());
    //              if (db.Rows_Count_From(sql_Districts) == 0)
    //              {
    //                #region New District and DistrictsCounties
    //                //Insert new District row
    //                District_Code_New = db.DistrictCode_Next(Office_Row["StateCode"].ToString());
    //                db.xDistricts_Insert_Temp(
    //                  Office_Row["StateCode"].ToString()
    //                , District_Code_New
    //                , District
    //                , Office_Row["DistrictCode"].ToString()
    //                , Office_Row["DistrictCodeAlpha"].ToString()
    //                );

    //                //Insert new DistrictsCounties rows
    //                sql_JudicialDistrictCounties = " select * from JudicialDistrictCounties";
    //                sql_JudicialDistrictCounties += " where StateCode = " + db.SQLLit(Office_Row["StateCode"].ToString());
    //                sql_JudicialDistrictCounties += " and DistrictCode = " + db.SQLLit(Office_Row["DistrictCode"].ToString());
    //                sql_JudicialDistrictCounties += " and DistrictCodeAlpha = " + db.SQLLit(Office_Row["DistrictCodeAlpha"].ToString());
    //                DataTable DistrictCounties_Table = db.Table(sql_JudicialDistrictCounties);
    //                foreach (DataRow DistrictCounties_Row in DistrictCounties_Table.Rows)
    //                {
    //                  db.DistrictsCounties_Insert(
    //                    Office_Row["StateCode"].ToString()
    //                  , District_Code_New
    //                  , DistrictCounties_Row["CountyCode"].ToString()
    //                  );
    //                }
    //                #endregion New District and DistrictsCounties
    //              }
    //              //Update officelevel 17 office with NEW OfficeKey,NEW DistrictCode DistrictCodeAlpha = ''
    //              OfficeKey_New = Office_Row["OfficeKey"].ToString();
    //              OfficeKey_New = OfficeKey_New.Remove(2, 3);
    //              OfficeKey_New = OfficeKey_New.Insert(2, District_Code_New);
    //              db.OfficeKey_Update_Tables_All(
    //                Office_Row["OfficeKey"].ToString()
    //                , OfficeKey_New);
    //              db.Offices_Update_Str(OfficeKey_New, "DistrictCode", District_Code_New);
    //              db.Offices_Update_Str(OfficeKey_New, "DistrictCodeAlpha", string.Empty);
    //            }
    //          }
    //          #endregion restructure office level 17 (Multi-county district offices) for new DistrictCode implementation
    //        }
    //        if (true == false)
    //        {
    //          DataTable Table_States = db.Table(sql.States_51());
    //          foreach (DataRow Row_State in Table_States.Rows)
    //          {
    //            SQL = string.Empty;
    //            SQL += " INSERT INTO Sitemap ";
    //            SQL += "(";
    //            SQL += "DomainCode";
    //            SQL += ",DomainName";
    //            SQL += ")";
    //            SQL += " VALUES ";
    //            SQL += "(";
    //            SQL += db.SQLLit(Row_State["StateCode"].ToString());
    //            SQL += ",'Vote-"
    //                + Row_State["StateCode"].ToString()
    //                + ".org'";
    //            SQL += ")";
    //            db.ExecuteSQL(SQL);
    //          }
    //        }
    //        #endregion OUTTER true == false

    //        #region commented out
    //        //string sql = "select PartyKey,PartyEmail,PartyPhone from Parties";
    //        //DataTable Table_Parties = db.Table(sql);
    //        //foreach (DataRow Row_Party in Table_Parties.Rows)
    //        //{
    //        //  if (
    //        //    (!string.IsNullOrEmpty(Row_Party["PartyEmail"].ToString()))
    //        //    && (db.Rows_Count_From("PartiesEmails where PartyEmail = "
    //        //    + db.SQLLit(Row_Party["PartyEmail"].ToString())) == 0)
    //        //    )
    //        //  {
    //        //    string sql_insert = "INSERT INTO PartiesEmails(";
    //        //    sql_insert += "PartyEmail";
    //        //    sql_insert += ",PartyKey";
    //        //    sql_insert += ",PartyContactPhone";
    //        //    sql_insert += ")VALUES(";
    //        //    sql_insert += db.SQLLit(Row_Party["PartyEmail"].ToString());
    //        //    sql_insert += "," + db.SQLLit(Row_Party["PartyKey"].ToString());
    //        //    sql_insert += "," + db.SQLLit(Row_Party["PartyPhone"].ToString());
    //        //    sql_insert += ")";
    //        //    db.ExecuteSQL(sql_insert);
    //        //  }
    //        //}
    //        #endregion commented out
    //      }
    //#endif

    //    }
    //string sql = "Select * from Districts";
    //DataTable Table_Districts = db.Table(sql);
    //foreach (DataRow Row_District in Table_Districts.Rows)
    //{
    //  string DistrictKey = db.Make_DistrictKey(
    //     Row_District["StateCode"].ToString()
    //    , Row_District["District"].ToString()
    //    );
    //  string UpdateSQL = "UPDATE Districts"
    //  + " SET DistrictKey = " + db.SQLLit(DistrictKey)
    //  + " WHERE StateCode = " + db.SQLLit(Row_District["StateCode"].ToString())
    //  + " AND DistrictKey = " + db.SQLLit(Row_District["DistrictKey"].ToString())
    //  ;
    //  //db.ExecuteSQL(UpdateSQL);

    //protected void CheckBox_ZipStreetNumbers_ZipAptSuites_CheckedChanged(object sender, EventArgs e)
    //{
    //  //May implement later
    //}

    //protected void FutureSampleBallotDialog_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string msg;
    //    if (FutureSampleBallotDialog.SelectedValue == "T")
    //    {
    //      DB.Vote.Master.UpdatePresentGetFutureSampleBallotsDialog(true);
    //      msg = db.Msg("The 'Get Future Sample Ballots Automatically' dialog has been ENABLED.");
    //    }
    //    else
    //    {
    //      DB.Vote.Master.UpdatePresentGetFutureSampleBallotsDialog(false);
    //      msg = db.Msg("The 'Get Future Sample Ballots Automatically' dialog has been DISABLED.");
    //    }

    //    //db.Cache_Remove_Ballot_All();
    //    //Msg.Text = db.Ok(msg + " Ballot Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonUpdateDomainDesignLinks_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Master_Update_Str("DesignCodeLinksLine", db.DesignCodeLinks());

    //    LabelDomainDesigns.Text = db.Master_Str("DesignCodeLinksLine");

    //    string Message = "Domain Design Code Links below have been recreated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonUpdateDomainOrganizationLinks_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Master_Update_Str("OrganizationCodeLinksLine", db.OrganizationCodeLinks());
    //    LabelDomainOrganizations.Text = db.Master_Str("OrganizationCodeLinksLine");

    //    string Message = "Domain Organization Code Links have been recreated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonStateLinks_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string StateAdminHomeLinks = string.Empty;

    //    #region States
    //    foreach (var stateCode in StateCache.All51StateCodes)
    //    {
    //      StateAdminHomeLinks += " | ";
    //      StateAdminHomeLinks += db.Anchor_Admin_Default(stateCode, string.Empty,
    //        string.Empty, StateCache.GetStateName(stateCode));
    //    }
    //    //DataTable StateStatusTable = db.Table(sql.States_51());
    //    //foreach (DataRow StateStatusRow in StateStatusTable.Rows)
    //    //{
    //    //  StateAdminHomeLinks += " | ";
    //    //  //StateAdminHomeLinks += Anchor_Admin_Home_State(
    //    //  StateAdminHomeLinks += db.Anchor_Admin_Default(
    //    //    StateStatusRow["StateCode"].ToString()
    //    //    , string.Empty
    //    //    , string.Empty
    //    //    , StateCache.GetStateName(StateStatusRow["StateCode"].ToString())
    //    //    );
    //    //}
    //    StateAdminHomeLinks += " | ";
    //    #endregion States

    //    //db.Master_Update_Str("StateAdminHomeLinks", StateAdminHomeLinks);
    //    //LabelStateAdminHomeLinks.Text = db.Master_Str("StateAdminHomeLinks");

    //    string Message = "State Links have been recreated.";
    //    Msg.Text = db.Ok(Message);


    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void RadioButtonListParty_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //  //try
    //  //{
    //  //  #region States
    //  //  LabelStatePartyLinks.Text = string.Empty;
    //  //  DataTable StateStatusTable = db.Table(sql.States_51());
    //  //  foreach (DataRow StateStatusRow in StateStatusTable.Rows)
    //  //  {
    //  //    string partyKey = StateStatusRow["StateCode"].ToString();
    //  //    partyKey += RadioButtonListParty.SelectedValue;
    //  //    LabelStatePartyLinks.Text += " | ";
    //  //    LabelStatePartyLinks.Text += db.Anchor_Party_Default(partyKey);
    //  //  }
    //  //  LabelStatePartyLinks.Text += " | ";
    //  //  #endregion States

    //  //  Msg.Text = db.Ok("Click on a state link to edit politician data for the party you selected in that state.");
    //  //}
    //  //catch (Exception ex)
    //  //{
    //  //  #region
    //  //  Msg.Text = db.Fail(ex.Message);
    //  //  db.Log_Error_Admin(ex);
    //  //  #endregion
    //  //}
    //}
    //protected string National_Links()
    //{
    //  string nationalLinks = "<br>";

    //  #region National Presidential Primaries
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "US"
    //    , string.Empty
    //    , string.Empty
    //    , "Remaining Presidential Party Primary Candidates"
    //    );
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "PP"
    //    , string.Empty
    //    , string.Empty
    //    , "Template of Major Presidential Party Primary Candidates"
    //    );
    //  nationalLinks += " | ";
    //  #endregion National Presidential Primaries

    //  nationalLinks += "<br><br>";

    //  #region State-By-State US President, US Senate, US House, Governors Links
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "U1"
    //    , string.Empty
    //    , string.Empty
    //    //, "U.S. President State-By-State"
    //    , "U.S. President"
    //    );
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "U2"
    //    , string.Empty
    //    , string.Empty
    //    //, "U.S. Senate State-By-State"
    //    , "U.S. Senate"
    //    );
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "U3"
    //    , string.Empty
    //    , string.Empty
    //    //, "U.S. House of Representatives State-By-State"
    //    , "U.S. House of Representatives"
    //    );
    //  nationalLinks += " | ";
    //  nationalLinks += db.Anchor_Admin_Default(
    //    "U4"
    //    , string.Empty
    //    , string.Empty
    //    //, "Governors State-By-State"
    //    , "Governors"
    //    );
    //  nationalLinks += " | ";
    //  nationalLinks += "<br>&nbsp;";
    //  #endregion State-By-State US Presiden, US Senate, US House, Governors Links

    //  return nationalLinks;
    //}

    //protected void Button_Update_Issue_Links_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string Issues_Anchors = db.Issue_Anchors();

    //    db.Master_Update_Str("IssuesAnchors", Issues_Anchors);
    //    Label_Issue_Anchors.Text = db.Master_Str("IssuesAnchors");

    //    string Message = "Issue Anchors have been updated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonIssueReportsLinks_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    //Issue Report Links on /Master/Default.aspx
    //    string MasterIssueReportsLinksLine = db.IssueReportsLinks();
    //    db.Master_Update_Str("MasterIssueReportsLinksLine", MasterIssueReportsLinksLine);
    //    LabelIssueReportsLinks.Text = db.Master_Str("MasterIssueReportsLinksLine");

    //    string Message = "Issue Reports Links has been recreated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //    protected void LDSTablesButton_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/LDSData.aspx");
//    }

//    protected void ButtonSecurity_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Security.aspx");
//    }

//    protected void UpdatePoliticians(string PoliticianKey, string LName, string PoliticianName, string Last2Chars)
//    {
//#if false
//      {
//        int Len = LName.Length;
//        string NewLName = LName.Substring(0, Len - 2);//get rid of 01
//        NewLName = NewLName.TrimEnd(' ');
//        NewLName = NewLName.TrimEnd('-');
//        NewLName = NewLName.TrimEnd(' ');
//        //int PoliticianLen = PoliticianName.Length;
//        //string NewPoliticianName = PoliticianName.Substring(0, PoliticianLen - 2);//get rid of 01
//        //NewPoliticianName = NewPoliticianName.TrimEnd(' ');
//        //NewPoliticianName = NewPoliticianName.TrimEnd('-');
//        //NewPoliticianName = NewPoliticianName.TrimEnd(' ');
//        string SQLUPDATE = "UPDATE Politicians "
//          + " SET LName = " + db.SQLLit(NewLName)
//          + ", AddOn = '" + "SMD " + Last2Chars + "'"
//          //+ ", PoliticianName = " + db.SQLLit(NewPoliticianName)
//          + " WHERE PoliticianKey = " + db.SQLLit(PoliticianKey);
//        db.ExecuteSQL(SQLUPDATE);
//        //			string xxx = string.Empty;
//      }
//#endif
//    }

//    protected void ButtonIssuesReport_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect(db.Url_Admin_QuestionAnswers());
//    }

//    protected void Button7_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Defaults4AddressEntry.aspx");
//    }

//    protected void ButtonSitesDomains_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/DomainsTable.aspx");
//    }

//    protected void ButtonHomePage_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Defaults4AddressEntry.aspx");
//    }

//    protected void ButtonPartyCodes_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/PartiesTable.aspx");

//    }

//    protected void ButtonReports_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Reports.aspx");
//    }

//    protected void ButtonAboutUsPage_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Defaults4AboutUs.aspx");
//    }

//    protected void ButtonContactUsPage_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Defaults4ContactUs.aspx");
//    }

//    protected void ButtonDonatePage_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/Defaults4Donate.aspx");
//    }

//    protected void ButtonOfficials_Click(object sender, System.EventArgs e)
//    {
//      Response.Redirect("/Master/LDSElectedOfficials.aspx");
//    }


//    protected string sql_ReportsOfficials(string StateCode, string CountyCode, string LocalCode)
//    {
//      string SQL = string.Empty;
//      SQL += " SELECT StateCode";
//      SQL += ",CountyCode";
//      SQL += ",LocalCode";
//      SQL += ",IsReportCurrent";
//      SQL += " FROM ReportsOfficials";
//      SQL += " WHERE StateCode = " + db.SQLLit(StateCode);
//      SQL += " AND CountyCode = " + db.SQLLit(CountyCode);
//      SQL += " AND LocalCode = " + db.SQLLit(LocalCode);
//      return SQL;
//    }

    //protected void ButtonIssueLinks_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    //Issue Links on /Master/Default.aspx
    //    string MasterIssueLinksLine = db.IssueLinks();
    //    db.Master_Update_Str("MasterIssueLinksLine", MasterIssueLinksLine);
    //    //LabelIssueLinks.Text = db.Master_Str("MasterIssueLinksLine");

    //    string Message = "Issue Links has been recreated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void Button1_Click1(object sender, EventArgs e)
    //{
    //  Response.Redirect("/Master/ChangeAll4AddressEntry.aspx");
    //}

    //protected void UploadAndSave(string PathWithoutExt, string PathSmallWithoutExt)
    //{
    //  if (File.Exists(PathWithoutExt + ".jpg"))
    //  {
    //    if (File.Exists(PathSmallWithoutExt + ".jpg"))
    //    {
    //      File.SetAttributes(PathSmallWithoutExt + ".jpg", FileAttributes.Normal);//in case file is Read Only 
    //      File.Delete(PathSmallWithoutExt + ".jpg");
    //    }
    //    using (System.Drawing.Image src_image = System.Drawing.Image.FromFile(PathWithoutExt + ".jpg"))
    //    {
    //      if (src_image.Height <= 200)
    //      {
    //        File.Copy(PathWithoutExt + ".jpg", PathSmallWithoutExt + ".jpg");
    //      }
    //      else
    //      {
    //        Bitmap bitmap = new Bitmap((src_image.Width * 200) / src_image.Height, 200);
    //        Graphics new_g = Graphics.FromImage(bitmap);
    //        new_g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
    //        new_g.InterpolationMode =
    //          System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    //        new_g.DrawImage(src_image, 0, 0, bitmap.Width, bitmap.Height);
    //        bitmap.Save(PathSmallWithoutExt + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
    //        bitmap.Dispose();
    //        new_g.Dispose();
    //      }
    //      //src_image.Dispose(); // disposed by using
    //    }
    //  }
    //}

    //protected void ButtonSmallImages_Click(object sender, EventArgs e)
    //{
    //  //string PathWithoutExt = string.Empty;
    //  //string PathSmallWithoutExt = string.Empty;
    //  try
    //  {
    //    DataTable PoliticiansTable = db.Table(sql.Politicians());
    //    foreach (DataRow PoliticianRow in PoliticiansTable.Rows)
    //    {
    //      if (!db.Is_Localhost)
    //      {
    //        //PathWithoutExt = @"\\vote-1\d\Webhosting\images\Candidates\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathSmallWithoutExt = @"\\vote-1\d\Webhosting\images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathWithoutExt = db.PathProduction1() + @"images\Candidates\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathSmallWithoutExt = db.PathProduction1() + @"images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString();
    //        using (Impersonate imp = new Impersonate(Environment.MachineName, "Administrator", "v0+3u$@"))
    //        {
    //          UploadAndSave(db.PathProduction1() + @"images\Candidates\" + PoliticianRow["PoliticianKey"].ToString()
    //            , db.PathProduction1() + @"images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString());
    //          UploadAndSave(db.PathProduction2() + @"images\Candidates\" + PoliticianRow["PoliticianKey"].ToString()
    //            , db.PathProduction1() + @"images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString());
    //        }
    //      }
    //      else
    //      {
    //        //PathWithoutExt = @"D:\Inetpub\wwwroot\images\Candidates\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathSmallWithoutExt = @"D:\Inetpub\wwwroot\images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathWithoutExt = PathWithoutExt = db.PathDevelopment() + @"images\Candidates\" + PoliticianRow["PoliticianKey"].ToString();
    //        //PathSmallWithoutExt = PathWithoutExt = db.PathDevelopment() + @"images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString();
    //        UploadAndSave(db.PathDevelopment() + @"images\Candidates\" + PoliticianRow["PoliticianKey"].ToString()
    //          , db.PathProduction1() + @"images\CandidatesSmall\" + PoliticianRow["PoliticianKey"].ToString());
    //      }
    //    }
    //    Msg.Text = db.Ok("New small images have been created.");
    //  }
    //  catch (Exception ex)
    //  {
    //    Msg.Text = db.Fail("Bad image: " + ex.Message);
    //    db.Log_Error_Admin(ex);
    //  }
    //}

    //protected void RadioButtonList_Image_Method_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    #region disabled
    //    //if (RadioButtonList_Image_Method.SelectedValue == "T")
    //    //{
    //    //  db.Master_Update_Bool("IsNewImageMethods", true);
    //    //  Msg.Text = db.Msg("The new image capture in database and methods will be used.");
    //    //}
    //    //else
    //    //{
    //    //  db.Master_Update_Bool("IsNewImageMethods", false);
    //    //  Msg.Text = db.Msg("The OLD image capture and store in files will be used.");
    //    //}
    //    #endregion disabled
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //protected void Button_Load_PoliticiansImages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string Path_Candidates_Directory = string.Empty;
    //    string Path_Server = string.Empty;
    //    if (!db.Is_Localhost)
    //    {
    //      #region Production Server
    //      using (Impersonate imp = new Impersonate(Environment.MachineName, "Administrator", "v0+3u$@"))
    //      {
    //        Path_Server = db.PathProduction2();
    //        Path_Candidates_Directory = db.PathProduction2()
    //          + db.Path_Part_Image_Candidate();
    //      }
    //      #endregion
    //    }
    //    else
    //    {
    //      Path_Server = db.PathDevelopment();
    //      Path_Candidates_Directory = db.PathDevelopment()
    //        + db.Path_Part_Image_Candidate();
    //    }

    //    int Count = 0;
    //    string[] PathEntries = Directory.GetFiles(Path_Candidates_Directory);
    //    foreach (string Path_fileName in PathEntries)
    //    {
    //      string Path_Image_File = Path_fileName.ToString().Replace(Path_Server, string.Empty);
    //      #region each image
    //      string Politician_Key = Path.GetFileNameWithoutExtension(Path_fileName);
    //      if (db.Is_Valid_Politician(Politician_Key))
    //      {
    //        if (db.PoliticiansImages_ProfileOriginal(Politician_Key) == null)
    //        {
    //          Count++;
    //          db.PoliticiansImages_Update_All(
    //            Politician_Key
    //          , Path_Image_File
    //          );
    //        }
    //      }

    //      #endregion each image
    //    }
    //    Msg.Text = db.Ok(Count.ToString() + " Politicians' images processed.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //protected void Button_Remake_All_Images_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    int Count = 0;
    //    byte[] ProfileOriginal_Blob = null;
    //    string SQL = string.Empty;
    //    SQL += "select Politiciankey";
    //    SQL += " from PoliticiansImages";
    //    SQL += " order by politiciankey";
    //    DataTable Table_PoliticiansImages = db.Table(SQL);
    //    foreach (DataRow Row_PoliticiansImages in Table_PoliticiansImages.Rows)
    //    {
    //      if (db.PoliticiansImages_ProfileOriginal(
    //        Row_PoliticiansImages["Politiciankey"].ToString()) != null)
    //      {
    //        #region Remake all Profile images from ProfileOriginal

    //        ProfileOriginal_Blob = db.PoliticiansImages_ProfileOriginal(
    //          Row_PoliticiansImages["Politiciankey"].ToString());

    //        #endregion Remake all Profile images from ProfileOriginal
    //        if (db.PoliticiansImages_HeadshotOriginal(
    //          Row_PoliticiansImages["Politiciankey"].ToString()) != null)
    //        {
    //          #region Remake all Headshot images from HeadshotOriginal
    //          #endregion Remake all Headshot images from HeadshotOriginal
    //        }
    //        else
    //        {
    //          #region Remake all Headshot images from ProfileOriginal
    //          #endregion Remake all Headshot images from ProfileOriginal
    //        }
    //        Count++;
    //      }
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

//    #region replaced with Button_ZipAddresses_Click

//    protected string xZipStreets_Insert_Or_Update(
//      DataRow Row_ZipStreetsDownloaded
//      )
//    {
//      if (db.Rows("ZipCities"
//        , "PreferredLastLineKey"
//        , Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString()
//        ) == 1)
//      {
//        #region Good ZipStreetsDownload row

//        #region Get CityNameKey for the PreferredLastLineKey
//        string CityNameKey = db.Single_Key_Str(
//          "ZipCities"
//          , "CityNameKey"
//          , "PreferredLastLineKey"
//          , Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString()
//          );
//        #endregion Get CityNameKey for the PreferredLastLineKey

//        string From = "ZipStreetsTemp WHERE UpdateKey="
//          + db.SQLLit(Row_ZipStreetsDownloaded["UpdateKey"].ToString());
//        if (db.Rows_Count_From(From) == 0)
//        {
//          #region INSERT INTO ZipStreetsTemp
//          string SQL = "INSERT INTO ZipStreetsTemp ";
//          SQL += "(";
//          SQL += "UpdateKey";
//          SQL += ",StateCode";
//          SQL += ",CityNameKey";
//          SQL += ",PreferredLastLineKey";
//          SQL += ",AddressType";
//          SQL += ",StreetPre";
//          SQL += ",Street";
//          SQL += ",StreetType";
//          SQL += ",StreetDirection";
//          SQL += ",StreetNumberLow";
//          SQL += ",StreetNumberHigh";
//          SQL += ",StreetEvenOdd";
//          SQL += ",AptSuiteType";
//          SQL += ",AptSuiteNumberLow";
//          SQL += ",AptSuiteNumberHigh";
//          SQL += ",AptSuiteEvenOdd";
//          SQL += ",Zip5";
//          SQL += ",Zip4Low";
//          SQL += ",Zip4High";
//          SQL += ")";
//          SQL += " VALUES ";
//          SQL += "(";
//          SQL += db.SQLLit(Row_ZipStreetsDownloaded["UpdateKey"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["State"].ToString());
//          SQL += "," + db.SQLLit(CityNameKey);
//          SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString());

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["RecordType"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["RecordType"].ToString());
//          else
//            SQL += ",''";


//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StPreDirAbbr"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["StPreDirAbbr"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StName"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["StName"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StSuffixAbbr"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["StSuffixAbbr"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StPostDirAbbr"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["StPostDirAbbr"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryLowNumber"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryLowNumber"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryHighNumber"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryHighNumber"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryEvenOdd"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryEvenOdd"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecAbbr"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecAbbr"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecLowNumber"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecLowNumber"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecHighNumber"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecHighNumber"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecOddEven"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecOddEven"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["ZipCode"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["ZipCode"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["Plus4Low"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["Plus4Low"].ToString());
//          else
//            SQL += ",''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["Plus4High"].ToString()))
//            SQL += "," + db.SQLLit(Row_ZipStreetsDownloaded["Plus4High"].ToString());
//          else
//            SQL += ",''";

//          SQL += ")";

//          //SQL_Debug = SQL;

//          db.ExecuteSQL(SQL);
//          #endregion INSERT INTO ZipStreetsTemp
//        }
//        else
//        {
//          #region UPDATE ZipStreetsTemp
//          string UpdateSQL = "UPDATE ZipStreetsTemp";
//          UpdateSQL += " SET PreferredLastLineKey=" + db.SQLLit(Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString());

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["RecordType"].ToString()))
//            UpdateSQL += ",AddressType=" + db.SQLLit(Row_ZipStreetsDownloaded["RecordType"].ToString());
//          else
//            UpdateSQL += ",AddressType=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["State"].ToString()))
//            UpdateSQL += ",StateCode=" + db.SQLLit(Row_ZipStreetsDownloaded["State"].ToString());
//          else
//            UpdateSQL += ",StateCode=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StPreDirAbbr"].ToString()))
//            UpdateSQL += ",StreetPre=" + db.SQLLit(Row_ZipStreetsDownloaded["StPreDirAbbr"].ToString());
//          else
//            UpdateSQL += ",StreetPre=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StName"].ToString()))
//            UpdateSQL += ",Street=" + db.SQLLit(Row_ZipStreetsDownloaded["StName"].ToString());
//          else
//            UpdateSQL += ",Street=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StSuffixAbbr"].ToString()))
//            UpdateSQL += ",StreetType=" + db.SQLLit(Row_ZipStreetsDownloaded["StSuffixAbbr"].ToString());
//          else
//            UpdateSQL += ",StreetType=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["StPostDirAbbr"].ToString()))
//            UpdateSQL += ",StreetDirection=" + db.SQLLit(Row_ZipStreetsDownloaded["StPostDirAbbr"].ToString());
//          else
//            UpdateSQL += ",StreetDirection=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryLowNumber"].ToString()))
//            UpdateSQL += ",StreetNumberLow=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryLowNumber"].ToString());
//          else
//            UpdateSQL += ",StreetNumberLow=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryHighNumber"].ToString()))
//            UpdateSQL += ",StreetNumberHigh=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryHighNumber"].ToString());
//          else
//            UpdateSQL += ",StreetNumberHigh=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressPrimaryEvenOdd"].ToString()))
//            UpdateSQL += ",StreetEvenOdd=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressPrimaryEvenOdd"].ToString());
//          else
//            UpdateSQL += ",StreetEvenOdd=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecAbbr"].ToString()))
//            UpdateSQL += ",AptSuiteType=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecAbbr"].ToString());
//          else
//            UpdateSQL += ",AptSuiteType=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecLowNumber"].ToString()))
//            UpdateSQL += ",AptSuiteNumberLow=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecLowNumber"].ToString());
//          else
//            UpdateSQL += ",AptSuiteNumberLow=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecHighNumber"].ToString()))
//            UpdateSQL += ",AptSuiteNumberHigh=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecHighNumber"].ToString());
//          else
//            UpdateSQL += ",AptSuiteNumberHigh=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["AddressSecOddEven"].ToString()))
//            UpdateSQL += ",AptSuiteEvenOdd=" + db.SQLLit(Row_ZipStreetsDownloaded["AddressSecOddEven"].ToString());
//          else
//            UpdateSQL += ",AptSuiteEvenOdd=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["ZipCode"].ToString()))
//            UpdateSQL += ",Zip5=" + db.SQLLit(Row_ZipStreetsDownloaded["ZipCode"].ToString());
//          else
//            UpdateSQL += ",Zip5=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["Plus4Low"].ToString()))
//            UpdateSQL += ",Zip4Low=" + db.SQLLit(Row_ZipStreetsDownloaded["Plus4Low"].ToString());
//          else
//            UpdateSQL += ",Zip4Low=''";

//          if (!string.IsNullOrEmpty(Row_ZipStreetsDownloaded["Plus4High"].ToString()))
//            UpdateSQL += ",Zip4High=" + db.SQLLit(Row_ZipStreetsDownloaded["Plus4High"].ToString());
//          else
//            UpdateSQL += ",Zip4High=''";

//          UpdateSQL += " WHERE UpdateKey=" + db.SQLLit(Row_ZipStreetsDownloaded["UpdateKey"].ToString());

//          //SQL_Debug = UpdateSQL;

//          db.ExecuteSQL(UpdateSQL);
//          #endregion UPDATE ZipStreetsTemp
//        }
//        #endregion Good ZipStreetsDownload row

//        return string.Empty;
//      }
//      else
//      {
//        #region ZipStreetLogBadCityKeys
//        string SQL = "INSERT INTO ZipStreetLogBadCityKeys ";
//        SQL += "(";
//        SQL += "PreferredLastLineKey";
//        SQL += ")";
//        SQL += " VALUES ";
//        SQL += "(";
//        SQL += db.SQLLit(Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString());
//        SQL += ")";
//        db.ExecuteSQL(SQL);
//        #endregion ZipStreetLogBadCityKeys

//        return Row_ZipStreetsDownloaded["PreferredLastLineKey"].ToString();
//      }
//    }


//    protected void xZipAptSuites_Insert_Or_Update(
//      DataRow Row_ZipStreets
//      , string Postal_Apt_Number
//      , string Zip4_Number
//      )
//    {
//      #region Unique Key
//      string From = "ZipAptSuites ";
//      From += " WHERE UpdateKey=" + db.SQLLit(Row_ZipStreets["UpdateKey"].ToString());
//      From += " AND AptSuiteNumber=" + db.SQLLit(Postal_Apt_Number);
//      #endregion Unique Key
//      if (db.Rows_Count_From(From) == 0)
//      {
//        #region INSERT INTO ZipAptSuites
//        string SQL = "INSERT INTO ZipAptSuites ";
//        SQL += "(";
//        SQL += "UpdateKey";
//        SQL += ",AptSuiteType";
//        SQL += ",AptSuiteNumber";
//        SQL += ",Zip5";
//        SQL += ",Zip4";
//        SQL += ")";
//        SQL += " VALUES ";
//        SQL += "(";
//        SQL += db.SQLLit(Row_ZipStreets["UpdateKey"].ToString());
//        SQL += "," + db.SQLLit(Row_ZipStreets["AptSuiteType"].ToString());
//        SQL += "," + db.SQLLit(Postal_Apt_Number);
//        SQL += "," + db.SQLLit(Row_ZipStreets["Zip5"].ToString());
//        SQL += "," + db.SQLLit(Zip4_Number.PadLeft(4, '0'));
//        SQL += ")";

//#if DEBUG
//        //db.Session_Put("ErrSQL", SQL);
//#endif

//        db.ExecuteSQL(SQL);
//        #endregion INSERT INTO ZipAptSuites
//      }
//      else
//      {
//        #region UPDATE ZipAptSuites
//        string UpdateSQL = "UPDATE ZipAptSuites";
//        UpdateSQL += " SET AptSuiteType=" + db.SQLLit(Row_ZipStreets["AptSuiteType"].ToString());
//        UpdateSQL += ",Zip5=" + db.SQLLit(Row_ZipStreets["Zip5"].ToString());
//        UpdateSQL += ",Zip4=" + db.SQLLit(Zip4_Number.PadLeft(4, '0'));
//        UpdateSQL += " WHERE UpdateKey=" + db.SQLLit(Row_ZipStreets["UpdateKey"].ToString());
//        //UpdateSQL += " AND AptSuiteNumber=" + db.SQLLit(Postal_Apt_Number);

//#if DEBUG
//        //db.Session_Put("ErrSQL", UpdateSQL);
//#endif
//        db.ExecuteSQL(UpdateSQL);
//        #endregion UPDATE ZipAptSuites
//      }
//    }
//    #endregion replaced with Button_ZipAddresses_Click

    //protected bool Is_Unique_ZipAddresses_PrimaryKey_Internal(
    //  ref DataTable ZipAddresses_Internal
    //  , DataRow Row_ZipStreets
    //  , string Postal_Number
    //  )
    //{
    //  bool Is_Unique = true;
    //  for (int Row = 0; Row <= ZipAddresses_Internal.Rows.Count - 1; Row++)
    //  {
    //    if (Is_Unique)
    //    {
    //      DataRow Row_ZipAddresses_Internal = ZipAddresses_Internal.Rows[Row];
    //      if (
    //        (Row_ZipStreets["StateCode"].ToString() == Row_ZipAddresses_Internal["StateCode"].ToString())
    //        && (Row_ZipStreets["CityNameKey"].ToString() == Row_ZipAddresses_Internal["CityNameKey"].ToString())
    //        && (Postal_Number == Row_ZipAddresses_Internal["StreetNumber"].ToString())
    //        && (Row_ZipStreets["StreetPre"].ToString() == Row_ZipAddresses_Internal["StreetPre"].ToString())
    //        && (Row_ZipStreets["Street"].ToString() == Row_ZipAddresses_Internal["Street"].ToString())
    //        && (Row_ZipStreets["StreetType"].ToString() == Row_ZipAddresses_Internal["StreetType"].ToString())
    //        && (Row_ZipStreets["StreetDirection"].ToString() == Row_ZipAddresses_Internal["StreetDirection"].ToString())
    //        )
    //      {
    //        Is_Unique = false;
    //      }
    //    }
    //  }

    //  return Is_Unique;
    //}
    //protected bool Is_Unique_ZipAptSuites_PrimaryKey_Internal(
    //  ref DataTable ZipAptSuites_Internal
    //  , DataRow Row_ZipStreets
    //  , string Postal_Number
    //  )
    //{
    //  bool Is_Unique = true;
    //  for (int Row = 0; Row <= ZipAptSuites_Internal.Rows.Count - 1; Row++)
    //  {
    //    if (Is_Unique)
    //    {
    //      DataRow Row_ZipAptSuites_Internal = ZipAptSuites_Internal.Rows[Row];
    //      if (
    //        (Row_ZipStreets["UpdateKey"].ToString() == Row_ZipAptSuites_Internal["UpdateKey"].ToString())
    //        && (Postal_Number == Row_ZipAptSuites_Internal["AptSuiteNumber"].ToString())
    //        )
    //      {
    //        Is_Unique = false;
    //      }
    //    }
    //  }

    //  return Is_Unique;
    //}

    //protected int Rows_ZipAptSuites_PrimaryKey_Db(
    //  DataRow Row_ZipStreets
    //  , string Postal_Number
    //  )
    //{
    //  #region Unique Key
    //  string From = "ZipAptSuites ";
    //  From += " WHERE UpdateKey=" + db.SQLLit(Row_ZipStreets["UpdateKey"].ToString().Trim());
    //  From += " AND AptSuiteNumber=" + db.SQLLit(Postal_Number);
    //  #endregion Unique Key
    //  return db.Rows_Count_From(From);
    //}

//    protected void ZipAddresses_Insert_Or_Update(
//      DataRow Row_ZipStreets
//      , string Postal_Number
//      , string Zip4_Number
//      )
//    {
//      #region Note
//      //Needs to be completely rewritten to 
//      //INSERT or UPDATE Tables:
//      //ZipStreetsUnique ZipStreetsRanges 
//      //ZipStreetsNumbers ZipAptSuites 
//      #endregion Note
//      if (Is_Process_ZipStreets_Row(Row_ZipStreets))
//      {
//        if (Rows_ZipAddresses_PrimaryKey_Db(Row_ZipStreets, Postal_Number) == 0)
//        {
//          #region INSERT INTO xZipAddresses

//          string SQL = "INSERT INTO xZipAddresses ";
//          SQL += "(";
//          SQL += "UpdateKey";
//          SQL += ",StateCode";
//          SQL += ",CityNameKey";
//          SQL += ",PreferredLastLineKey";
//          SQL += ",AddressType";
//          SQL += ",StreetNumber";
//          SQL += ",StreetPre";
//          SQL += ",Street";
//          SQL += ",StreetType";
//          SQL += ",StreetDirection";
//          SQL += ",Zip5";
//          SQL += ",Zip4";
//          SQL += ")";
//          SQL += " VALUES ";
//          SQL += "(";
//          SQL += db.SQLLit(Row_ZipStreets["UpdateKey"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["StateCode"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["CityNameKey"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["PreferredLastLineKey"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["AddressType"].ToString());
//          SQL += "," + db.SQLLit(Postal_Number);
//          SQL += "," + db.SQLLit(Row_ZipStreets["StreetPre"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["Street"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["StreetType"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["StreetDirection"].ToString());
//          SQL += "," + db.SQLLit(Row_ZipStreets["Zip5"].ToString());
//          SQL += "," + db.SQLLit(Zip4_Number.PadLeft(4, '0'));
//          SQL += ")";
//#if DEBUG
//          //db.Session_Put("ErrSQL", SQL);
//#endif
//          db.ExecuteSQL(SQL);
//          #endregion INSERT INTO xZipAddresses
//        }
//        else
//        {
//          #region UPDATE ZipStreetsTemp
//          string UpdateSQL = "UPDATE xZipAddresses";
//          UpdateSQL += " SET AddressType=" + db.SQLLit(Row_ZipStreets["AddressType"].ToString());
//          UpdateSQL += ",Zip4=" + db.SQLLit(Zip4_Number.PadLeft(4, '0'));
//          UpdateSQL += " WHERE StateCode=" + db.SQLLit(Row_ZipStreets["StateCode"].ToString());
//          UpdateSQL += " AND CityNameKey=" + db.SQLLit(Row_ZipStreets["CityNameKey"].ToString());
//          UpdateSQL += " AND StreetNumber=" + db.SQLLit(Postal_Number);
//          UpdateSQL += " AND StreetPre=" + db.SQLLit(Row_ZipStreets["StreetPre"].ToString());
//          UpdateSQL += " AND Street=" + db.SQLLit(Row_ZipStreets["Street"].ToString());
//          UpdateSQL += " AND StreetType=" + db.SQLLit(Row_ZipStreets["StreetType"].ToString());
//          UpdateSQL += " AND StreetDirection=" + db.SQLLit(Row_ZipStreets["StreetDirection"].ToString());
//#if DEBUG
//          //db.Session_Put("ErrSQL", UpdateSQL);
//#endif

//          db.ExecuteSQL(UpdateSQL);
//          #endregion UPDATE ZipStreetsTemp
//        }
//      }
//    }

    //protected bool Is_Process_ZipStreets_Row(DataRow Row_ZipStreets)
    //{
    //  #region Note
    //  //Highrise and Firms have 2 rows for a single address
    //  //one for the building and one for the apartments or suites in the building
    //  //The row with NO low and high apt numbers is skipped.
    //  #endregion Note
    //  bool Is_Process_Row = true;
    //  if (
    //    (
    //      (Row_ZipStreets["AddressType"].ToString().ToUpper() == "H")//highrise
    //      || (Row_ZipStreets["AddressType"].ToString().ToUpper() == "F")//firm
    //    )
    //    && (string.IsNullOrEmpty(Row_ZipStreets["AptSuiteNumberLow"].ToString().ToUpper()))
    //    )
    //    Is_Process_Row = false;
    //  return Is_Process_Row;
    //}

    //protected int Rows_ZipAddresses_PrimaryKey_Db(
    //  DataRow Row_ZipStreets
    //  , string Postal_Number
    //  )
    //{
    //  //if (Postal_Number == "3599")
    //  //{
    //  //  string Break = string.Empty;
    //  //}
    //  #region Unique Key
    //  string From = "xZipAddresses ";
    //  From += " WHERE StateCode=" + db.SQLLit(Row_ZipStreets["StateCode"].ToString().Trim());
    //  From += " AND CityNameKey=" + db.SQLLit(Row_ZipStreets["CityNameKey"].ToString().Trim());
    //  From += " AND StreetNumber=" + db.SQLLit(Postal_Number);
    //  From += " AND StreetPre=" + db.SQLLit(Row_ZipStreets["StreetPre"].ToString().Trim());
    //  From += " AND Street=" + db.SQLLit(Row_ZipStreets["Street"].ToString().Trim());
    //  From += " AND StreetType=" + db.SQLLit(Row_ZipStreets["StreetType"].ToString().Trim());
    //  From += " AND StreetDirection=" + db.SQLLit(Row_ZipStreets["StreetDirection"].ToString().Trim());
    //  #endregion Unique Key
    //  return db.Rows_Count_From(From);
    //}

    //protected void ButtonNotCurrentStatePoliticians_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.ExecuteSQL("UPDATE ReportsPoliticians SET IsReportCurrent = 0");

    //    Msg.Text = db.Ok("All State, County and Local District Politician Lisits have been set as NOT CURRENT!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }

    //}

    //protected void ButtonNotCurrentStateOffices_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.ExecuteSQL("UPDATE ReportsOffices SET IsReportCurrent = 0");

    //    Msg.Text = db.Ok("All State, County and Local District Offices Lisits have been set as NOT CURRENT!");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void RadioButtonListCachePages_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (RadioButtonListCachePages.SelectedValue == "T")
    //    {
    //      db.Master_Update_Bool("IsCachePages", true);
    //      Msg.Text = db.Msg("Cache Pages has been set ON.");
    //    }
    //    else
    //    {
    //      db.Master_Update_Bool("IsCachePages", false);
    //      Msg.Text = db.Msg("Cache Pages has been set OFF.");
    //    }
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonPoliticalPartyLinks_Click1(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    string PartyLinks = string.Empty;
    //    PartyLinks += db.Anchor_Admin_Parties(
    //      "US"
    //      , " National "
    //      );
    //    DataTable StatesTable = db.Table(sql.States_51());
    //    foreach (DataRow StateURLRow in StatesTable.Rows)
    //    {
    //      string StateName = StateURLRow["State"].ToString().Trim();
    //      string StateCode = StateURLRow["StateCode"].ToString().Trim();
    //      PartyLinks += " | ";
    //      PartyLinks += db.Anchor_Admin_Parties(
    //        StateCode
    //        , StateName
    //        );
    //    }
    //    //Political Party Links on /Master/Default.aspx
    //    db.Master_Update_Str("PoliticalPartyLinksLine", PartyLinks);
    //    LabelPartyLinks.Text = db.Master_Str("PoliticalPartyLinksLine");

    //    string Message = "Political Party Links have been recreated.";
    //    Msg.Text = db.Ok(Message);
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteIntroPagesAfterElection_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    DateTime LastTimeIntoPagesRemoved4Elections = db.Master_Date("Cache_RemoveElectionPagesIntro");

    //    string SQL = string.Empty;
    //    SQL += " SELECT ";
    //    SQL += " ElectionKey";
    //    SQL += " FROM Elections ";
    //    SQL += " WHERE ElectionDate < " + db.SQLLit(Db.DbToday);//previous elections
    //    SQL += " AND ElectionDate > '" + LastTimeIntoPagesRemoved4Elections + "'";//only elections after last time this operation was performed
    //    SQL += " ORDER BY StateCode,ElectionKey";

    //    DataTable ElectionsTable = db.Table(SQL);
    //    foreach (DataRow ElectionRow in ElectionsTable.Rows)
    //    {
    //      db.Cache_Remove_Intro_Election(ElectionRow["ElectionKey"].ToString());
    //    }

    //    db.Master_Update_Date("Cache_RemoveElectionPagesIntro", DateTime.Now);

    //    Msg.Text = db.Ok("Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //#region Cache Pages Methods

    //protected Int32 All_Cached()
    //{
    //  Int32 All_Cached_Pages = 0;

    //  //All_Cached_Pages += db.Rows_Count_From("CacheBallotPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheElectedPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheIntroPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CachePoliticianIssuePages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheIssuePages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheReferendumPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheElectionPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CacheOfficialsPages");
    //  //All_Cached_Pages += db.Rows_Count_From("CachePages");

    //  All_Cached_Pages += DB.VoteCache.CacheBallotPages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheElectedPages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheIntroPages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CachePoliticianIssuePages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheIssuePages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheReferendumPages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheElectionPages.CountTable();
    //  All_Cached_Pages += DB.VoteCache.CacheOfficialsPages.CountTable();
    //  //All_Cached_Pages += CachePages.CountTable();

    //  return All_Cached_Pages;
    //}

    //protected void Labels_Set_Cache_All()
    //{
    //  //Label_Cache_Removed_All.Text =
    //  //  db.Master_Date_Cache_Removed_All();
    //  //Label_Cache_Pages_All.Text =
    //  //  All_Cached().ToString();

    //  Labels_Set_Cache_Ballot();
    //  Labels_Set_Cache_Elected();
    //  Labels_Set_Cache_Intro();
    //  Labels_Set_Cache_PoliticianIssue();
    //  Labels_Set_Cache_Issue();
    //  Labels_Set_Cache_Referendum();
    //  Labels_Set_Cache_ElectionReport();
    //  Labels_Set_Cache_OfficialsReport();
    //  Labels_Set_Cache_Archive();
    //  Labels_Set_Cache_GlobalNavbar();
    //  Labels_Set_Cache_Misc();
    //}

    //protected void Labels_Set_Cache_Ballot()
    //{
    //  Label_Cache_Removed_Ballot.Text =
    //    db.Master_Date_Cache_Removed_Ballot();
    //  //Label_Cache_Pages_Ballot.Text =
    //  //  db.Rows_Count_From("CacheBallotPages").ToString();
    //  Label_Cache_Pages_Ballot.Text =
    //    DB.VoteCache.CacheBallotPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_Elected()
    //{
    //  Label_Cache_Removed_Elected.Text =
    //    db.Master_Date_Cache_Removed_Elected();
    //  //Label_Cache_Pages_Elected.Text =
    //  //  db.Rows_Count_From("CacheElectedPages").ToString();
    //  Label_Cache_Pages_Elected.Text =
    //    DB.VoteCache.CacheElectedPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_Intro()
    //{
    //  Label_Cache_Removed_Intro.Text =
    //    db.Master_Date_Cache_Removed_Intro();
    //  //Label_Cache_Pages_Intro.Text =
    //  //  db.Rows_Count_From("CacheIntroPages").ToString();
    //  Label_Cache_Pages_Intro.Text =
    //    DB.VoteCache.CacheIntroPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_PoliticianIssue()
    //{
    //  Label_Cache_Removed_PoliticianIssue.Text =
    //    db.Master_Date_Cache_Removed_PoliticianIssue();
    //  //Label_Cache_Pages_PoliticianIssue.Text =
    //  //  db.Rows_Count_From("CachePoliticianIssuePages").ToString();
    //  Label_Cache_Pages_PoliticianIssue.Text =
    //    DB.VoteCache.CachePoliticianIssuePages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_Issue()
    //{
    //  Label_Cache_Removed_Issue.Text =
    //    db.Master_Date_Cache_Removed_Issue();
    //  //Label_Cache_Pages_Issue.Text =
    //  //  db.Rows_Count_From("CacheIssuePages").ToString();
    //  Label_Cache_Pages_Issue.Text =
    //    DB.VoteCache.CacheIssuePages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_Referendum()
    //{
    //  Label_Cache_Removed_Referendum.Text =
    //    db.Master_Date_Cache_Removed_Referendum();
    //  //Label_Cache_Pages_Referendum.Text =
    //  //  db.Rows_Count_From("CacheReferendumPages").ToString();
    //  Label_Cache_Pages_Referendum.Text =
    //     DB.VoteCache.CacheReferendumPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_ElectionReport()
    //{
    //  Label_Cache_Removed_ElectionReport.Text =
    //    db.Master_Date_Cache_Removed_ElectionReport();
    //  //Label_Cache_Pages_ElectionReport.Text =
    //  //  db.Rows_Count_From("CacheElectionPages").ToString();
    //  Label_Cache_Pages_ElectionReport.Text =
    //    DB.VoteCache.CacheElectionPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_OfficialsReport()
    //{
    //  Label_Cache_Removed_OfficialsReport.Text =
    //    db.Master_Date_Cache_Removed_OfficialsReport();
    //  //Label_Cache_Pages_OfficialsReport.Text =
    //  //  db.Rows_Count_From("CacheOfficialsPages").ToString();
    //  Label_Cache_Pages_OfficialsReport.Text =
    //    DB.VoteCache.CacheOfficialsPages.CountTable().ToString();
    //}

    //protected void Labels_Set_Cache_Archive()
    //{
    //  Label_Cache_Removed_Archive.Text =
    //    db.Master_Date_Cache_Removed_Archive();
    //}

    //protected void Labels_Set_Cache_GlobalNavbar()
    //{
    //  Label_Cache_Removed_GlobalNavbar.Text =
    //    db.Master_Date_Cache_Removed_GlobalNavbar();
    //  Label_Cache_Pages_GlobalNavbar.Text =
    //    All_Cached().ToString();
    //}

    //protected void Labels_Set_Cache_Misc()
    //{
    //  Label_Cache_Removed_Misc.Text =
    //    db.Master_Date_Cache_Removed_Misc();
    //  //Label_Cache_Pages_Misc.Text =
    //  //  db.Rows_Count_From("CachePages").ToString();
    //  //Label_Cache_Pages_Misc.Text =
    //  //  CachePages.CountTable().ToString();
    //}
    //#endregion Cache Pages Methods

    //protected void ButtonDeleteCachePages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_All();

    //    Labels_Set_Cache_All();

    //    Msg.Text = db.Ok("All Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteBallotPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Ballot_All();
    //    //db.Master_Update_Date_Cache_Removed_Ballot();
    //    Labels_Set_Cache_Ballot();
    //    Labels_Set_Cache_All();

    //    Msg.Text = db.Ok("Ballot Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteElectedPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Elected_All();
    //    db.Master_Update_Date_Cache_Removed_Elected();
    //    Labels_Set_Cache_Elected();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("Elected Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteIntroPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Intro_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_Intro();
    //    Labels_Set_Cache_Intro();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("Intro Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeletePoliticianIssuePages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_PoliticianIssue_Pages_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_PoliticianIssue();
    //    Labels_Set_Cache_PoliticianIssue();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("PoliticianIssue Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteIssuePages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Issue_Pages_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_Issue();
    //    Labels_Set_Cache_Issue();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("Issue Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteReferendumPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_RemoveReferendumPages_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_Referendum();
    //    Labels_Set_Cache_Referendum();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("Referendum Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteElectionPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Election_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_ElectionReport();
    //    Labels_Set_Cache_ElectionReport();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("ElectionReport Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteOfficialsPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_Officials_All();//<-------------------------------------
    //    db.Master_Update_Date_Cache_Removed_OfficialsReport();
    //    Labels_Set_Cache_OfficialsReport();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("OfficialsReport Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteArchivePages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    //db.Cache_Remove_Archives_All();
    //    //db.Master_Update_Date_Cache_Removed_Archive();
    //    //Labels_Set_Cache_Archive();
    //    //Labels_Set_Cache_All();
    //    //Msg.Text = db.Ok("Archive Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    //protected void ButtonDeleteGlobalNavbarPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    db.Cache_Remove_All();
    //    db.Master_Update_Date_Cache_Removed_GlobalNavbar();
    //    Labels_Set_Cache_GlobalNavbar();
    //    Labels_Set_Cache_All();
    //    Msg.Text = db.Ok("All Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}
    //protected void ButtonDeleteMiscPages_Click(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    ////db.Cache_Remove_Pages_All();
    //    ////db.Master_Update_Date_Cache_Removed_Misc();
    //    ////Labels_Set_Cache_Misc();
    //    ////Labels_Set_Cache_All();
    //    ////Msg.Text = db.Ok("Misc Cached Pages will be cleared in 5 to 6 minutes.");
    //  }
    //  catch (Exception ex)
    //  {
    //    #region
    //    Msg.Text = db.Fail(ex.Message);
    //    db.Log_Error_Admin(ex);
    //    #endregion
    //  }
    //}

    #endregion Dead code


  }

}
