using System;
using System.Data;
using System.Globalization;

namespace Vote.Admin
{
  /// <summary>
  /// Summary description for IssueQuestionsTable.
  /// </summary>
  public partial class QuestionsPage : SecureAdminPage, IAllowEmptyStateCode
  {
    #region from db

    private static string PageTitle4Questions(string stateCode, string issueKey, string issueLevel)
    {
      var pageTitle = db.Issues_Issue(issueKey) + " QUESTIONS";
      switch (issueLevel)
      {
        case "A":
          pageTitle += "<br>for ALL Offices";
          break;
        case "B":
          pageTitle += "<br>for ALL NATIONAL Offices";
          break;
        case "c":
          pageTitle += "<br>for " + StateCache.GetStateName(stateCode) + " Offices";
          break;
      }

      return pageTitle;
    }

    private static string Url_Admin_QuestionAnswers(string issueLevel, string stateCode)
    {
      return "/Admin/QuestionAnswers.aspx"
      + "?IssueLevel=" + issueLevel
      + "&State=" + stateCode;
    }

    private static string Anchor_AdminQuestions(string issueGroup, string issueKey,
      string questionKey, string anchorText)
    {
      var anchor = string.Empty;
      anchor += "<a href=";
      anchor += "\"";
      anchor += db.Url_Admin_Questions(issueGroup, issueKey, questionKey);
      anchor += "\"";
      anchor += ">";
      anchor += "<nobr>" + anchorText + "</nobr>";
      anchor += "</a>";
      return anchor;
    }

    #endregion from db

    private void CheckOrder()
    {
      if (QuestionOrder.Text.Trim() == string.Empty)//create an order as last in list
      {
        var questionsCount = db.Rows(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));
        var rowNumber = (questionsCount + 1) * 10;
        QuestionOrder.Text = rowNumber.ToString(CultureInfo.InvariantCulture);
      }
      if (!db.Is_Valid_Integer(QuestionOrder.Text.Trim()))
        throw new ApplicationException("The Order needs to be a whole number.");
    }

    private void CheckQuestion()
    {
      if (Question.Text == string.Empty)
        throw new ApplicationException("Question field was empty.");
    }

    private void CheckQuestionNotExist()
    {
      var sql = "SELECT Question FROM Questions"
      + " WHERE Question = " + db.SQLLit(Question.Text.Trim())
      + " AND SUBSTRING(QuestionKey,1,1) = " + db.SQLLit(ViewState["IssueLevel"].ToString());
      var questionRows = db.Rows(sql);
      if (questionRows > 0)
        throw new ApplicationException("This is a duplicate question.");
    }

    private void Check4Answers(string questionKey)
    {
      var answers = db.Rows(sql.Answers4Question(questionKey));
      if (answers > 0)
        throw new ApplicationException(
          "[" + db.Questions_Str(questionKey, "Question") + "]"
          + " was not deleted."
          + " There are " + answers + " Answers for this question."
          + " You need to move the answers to a different question."
          + " Click the [Move Questions Answers] Button to do this.");
    }

    private void LoadControls()
    {
      //DataRow QuestionRow = db.Row(sql.Question(ViewState["QuestionKey"].ToString()));
      var sql = string.Empty;
      sql += " SELECT ";
      sql += " Questions.QuestionKey ";
      sql += " ,Questions.IssueKey ";
      sql += " ,Questions.QuestionOrder ";
      sql += " ,Questions.Question ";
      sql += " ,Questions.IsQuestionOmit ";
      sql += " FROM Questions ";
      sql += " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
      var questionRow = db.Row(sql);

      Question.Text = questionRow["Question"].ToString();
      QuestionOrder.Text = questionRow["QuestionOrder"].ToString();

      if ((bool)questionRow["IsQuestionOmit"])
        RadioButtonListOmit.SelectedValue = "Yes";
      else
        RadioButtonListOmit.SelectedValue = "No";

      //if ((bool)QuestionRow["xIsQuestionTagForDeletion"])
      //  RadiobuttonlistDelete.SelectedValue = "Yes";
      //else
      //  RadiobuttonlistDelete.SelectedValue = "No";
    }
    private void ClearControls()
    {
      Question.Text = string.Empty;
      QuestionOrder.Text = string.Empty;
      RadioButtonListOmit.SelectedValue = "No";
      RadiobuttonlistDelete.SelectedValue = "No";
    }

    private string EditRadioButtonListOmit()
    {
      return RadioButtonListOmit.SelectedValue == "Yes"
        ? "1"
        : "0";
    }

    private void ShowQuestions()
    {
      var questionsHTMLTable = string.Empty;
      questionsHTMLTable += "<table cellspacing=0 cellpadding=0>";

      #region Heading
      questionsHTMLTable += "<tr>";

      questionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      questionsHTMLTable += "O D";
      questionsHTMLTable += "</td>";

      questionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      questionsHTMLTable += "Order";
      questionsHTMLTable += "</td>";

      questionsHTMLTable += "<td class=tdReportGroupHeadingLeft>";
      questionsHTMLTable += "Question (Answers)";
      questionsHTMLTable += "</td>";

      questionsHTMLTable += "</tr>";
      #endregion

      var questionsTable = db.Table(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));

      if (questionsTable.Rows.Count > 0)
      {
        foreach (DataRow questionRow in questionsTable.Rows)
        {
          questionsHTMLTable += "<tr>";

          var omitAndDelete = string.Empty;
          if ((bool)questionRow["IsQuestionOmit"])
            omitAndDelete += " O";
          //if ((bool)QuestionRow["xIsQuestionTagForDeletion"] == true)
          //  OmitAndDelete += " D";

          questionsHTMLTable += "<td class=tdReportDetail>";
          questionsHTMLTable += omitAndDelete;
          questionsHTMLTable += "</td>";

          questionsHTMLTable += "<td class=tdReportDetail>";
          questionsHTMLTable += questionRow["QuestionOrder"].ToString();
          questionsHTMLTable += "</td>";

          var sqlText = "Answers ";
          sqlText += " WHERE Answers.QuestionKey = " + db.SQLLit(questionRow["QuestionKey"].ToString());
          //int Answers = db.Rows_Sql(sql.Answers4Question(QuestionRow["QuestionKey"].ToString()));
          var answers = db.Rows_Count_From(sqlText);
          questionsHTMLTable += "<td class=tdReportDetail>";
          //QuestionsHTMLTable += db.Anchor("/Admin/Questions.aspx"
          //  + "?Question=" + QuestionRow["QuestionKey"].ToString()
          //  + "&Issue=" + ViewState["IssueKey"].ToString(),
          //  QuestionRow["Question"].ToString()
          //  + " (" + Answers.ToString() + ")"
          //  );
          questionsHTMLTable += Anchor_AdminQuestions(
            ViewState["IssuesGroup"].ToString()
            , ViewState["IssueKey"].ToString()
          , questionRow["QuestionKey"].ToString()
          , questionRow["Question"] + " (" + answers + ")"
          );

          questionsHTMLTable += "</td>";

          questionsHTMLTable += "</tr>";
          ViewState["HighestOrder"] = questionRow["QuestionOrder"];
        }
      }
      else
      {
        questionsHTMLTable += "<tr>";
        questionsHTMLTable += "<td  class=tdReportDetail colspan=3>";
        questionsHTMLTable += "No Questions";
        questionsHTMLTable += "</td>";
        questionsHTMLTable += "</tr>";

        ViewState["HighestOrder"] = 0;
      }
      questionsHTMLTable += "</table>";
      LabelQuestionsTable.Text = questionsHTMLTable;
    }

    protected void RadioButtonListOmit_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (Question.Text == string.Empty)
          throw new ApplicationException("You need to select a question before you can change its status.");

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        var updateSQL = "UPDATE Questions SET "
          + " IsQuestionOmit =" + EditRadioButtonListOmit()
          + " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        db.ExecuteSql(updateSQL);
        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") will be omitted on all pages.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void RadiobuttonlistDelete_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        if (Question.Text == string.Empty)
          throw new ApplicationException("You need to select a question before you can change its status.");

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        //string UpdateSQL = "UPDATE Questions SET "
        //  + " xIsQuestionTagForDeletion =" + EditIsRadiobuttonlistDelete()
        //  + " WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        //db.ExecuteSQL(UpdateSQL);
        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") is tagged for deletion.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void ButtonUpdate_Click1(object sender, EventArgs e)
    {
      try
      {
        #region Check TextBoxes for Illegal Stuff
        db.Throw_Exception_TextBox_Script(QuestionOrder);
        db.Throw_Exception_TextBox_Html(QuestionOrder);

        db.Throw_Exception_TextBox_Script(Question);
        db.Throw_Exception_TextBox_Html(Question);

        #endregion Check TextBoxes for Illegal Stuff

        #region Edit Checks for Add and Update
        CheckOrder();
        CheckQuestion();
        #endregion

        #region Remove Issue.aspx cached pages for the Issue
        #region commented out
        //switch (ViewState["IssueLevel"].ToString())
        //{
        //  case db.AllOffices:
        //  //Reasons & Objectives remove all pages with an IssueKey = ALLPersonal
        //    db.Cache_RemoveIssuePages4IssueLevel(ViewState["IssueLevel"].ToString());
        //    break;
        //  case db.NationalOffices:
        //    break;
        //  case db.StateOffices:
        //    break;
        //  case db.CountyOffices://not implemented
        //    break;
        //}
        #endregion
        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());
        #endregion

        #region Update QUESTION
        var updateSQL = "UPDATE Questions SET "
          + " Question = " + db.SQLLit(Question.Text.Trim())
          + ",QuestionOrder = " + db.SQLLit(QuestionOrder.Text.Trim())
          //+ ",IsQuestionOmit =" + EditRadioButtonListOmit()
          //+ ",xIsQuestionTagForDeletion =" + EditIsRadiobuttonlistDelete()
          + "   WHERE QuestionKey = " + db.SQLLit(ViewState["QuestionKey"].ToString());
        db.ExecuteSql(updateSQL);
        #endregion

        ClearControls();

        ButtonUpdate.Visible = false;
        ButtonClear.Visible = true;
        ButtonAdd.Visible = true;

        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") was UPDATED.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonClear_Click(object sender, EventArgs e)
    {
      try
      {
        ClearControls();
        ButtonUpdate.Visible = false;
        ButtonAdd.Visible = true;
        Msg.Text = db.Msg("Enter a question to Add. The Order is optional.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }
    protected void ButtonAdd_Click1(object sender, EventArgs e)
    {
      try
      {
        #region Check TextBoxes for Illegal Stuff
        db.Throw_Exception_TextBox_Script(QuestionOrder);
        db.Throw_Exception_TextBox_Html(QuestionOrder);

        db.Throw_Exception_TextBox_Script(Question);
        db.Throw_Exception_TextBox_Html(Question);

        #endregion Check TextBoxes for Illegal Stuff

        #region Edit Checks for Add and Update
        CheckOrder();
        CheckQuestion();
        CheckQuestionNotExist();
        #endregion

        ViewState["QuestionKey"] = ViewState["IssueKey"] + db.MakeUnique6Digits();

        //db.Cache_Remove_Issue_Pages(ViewState["IssueKey"].ToString());
        //db.Cache_Remove_PoliticianIssue_Issue(ViewState["IssueKey"].ToString());

        #region Add the Question
        var insertSQL = "INSERT INTO Questions ("
          + "QuestionKey"
          + ",IssueKey"
          + ",Question"
          //+ ",AnswerLines"
          + ",QuestionOrder"
          + ")"
          + " VALUES("
          + db.SQLLit(ViewState["QuestionKey"].ToString())
          + "," + db.SQLLit(ViewState["IssueKey"].ToString())
          + "," + db.SQLLit(Question.Text.ReplaceNewLinesWithEmptyString())
          //+ ",20"
          + "," + QuestionOrder.Text
          + ")";
        db.ExecuteSql(insertSQL);
        #endregion

        ClearControls();

        ShowQuestions();

        Msg.Text = db.Ok("Question ("
          + db.Questions_Str(ViewState["QuestionKey"].ToString(), "Question")
          + ") was ADDED.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonRenumber_Click1(object sender, EventArgs e)
    {
      try
      {
        var questionsTable = db.Table(sql.Questions4IssueAnyStatus(ViewState["IssueKey"].ToString()));
        if (questionsTable.Rows.Count > 0)
        {
          var count = 10;
          foreach (DataRow questionRow in questionsTable.Rows)
          {
            var updateSQL = "UPDATE Questions SET "
              + " QuestionOrder = " + count
              + " WHERE QuestionKey= " + db.SQLLit(questionRow["QuestionKey"].ToString());
            db.ExecuteSql(updateSQL);
            count += 10;
          }
        }

        ShowQuestions();
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }
    protected void ButtonMoveQuestion_Click1(object sender, EventArgs e)
    {
      //Response.Redirect("/Admin/QuestionAnswers.aspx"
      //  + "?IssueLevel=" + ViewState["IssueLevel"].ToString()
      //  + "&Group=" + ViewState["IssuesGroup"].ToString()
      //  );
      Response.Redirect(Url_Admin_QuestionAnswers(
        ViewState["IssueLevel"].ToString()
      , ViewState["IssuesGroup"].ToString()));
    }
    protected void ButtonDeleteTaggedQuestions_Click1(object sender, EventArgs e)
    {
      try
      {
        var questions2DeleteTable = db.Table(sql.Question4Issue2Delete(
            ViewState["IssueKey"].ToString()));
        foreach (DataRow question2DeleteRow in questions2DeleteTable.Rows)
        {
          Check4Answers(question2DeleteRow["QuestionKey"].ToString());
          var sqlText = "DELETE FROM Questions WHERE QuestionKey = "
            + db.SQLLit(question2DeleteRow["QuestionKey"].ToString());
          db.ExecuteSql(sqlText);
        }
        ShowQuestions();
        Msg.Text = db.Ok("All questions tagged for deletion have been physically deleted in the database.");
      }
      catch (Exception ex)
      {
        #region
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
        #endregion
      }
    }

    private void Page_Load(object sender, EventArgs e)
    {
      if (!IsPostBack)
      {
        #region Security Check and Values for ViewState["StateCode"] ViewState["CountyCode"] ViewState["LocalCode"]

        ViewState["StateCode"] = db.State_Code();
        ViewState["CountyCode"] = db.County_Code();
        ViewState["LocalCode"] = db.Local_Code();
        //if (!db.Is_User_Security_Ok())
        //  SecurePage.HandleSecurityException();

        #endregion Security Check and Values for ViewState["StateCode"] ViewState["CountyCode"] ViewState["LocalCode"]

        Title = H1.InnerText = "Questions";

        #region ViewState Values
        ViewState["IssueLevel"] = string.Empty;// A = All Offices, B = National Issues, C = State Issues
        ViewState["IssuesGroup"] = string.Empty;//Level A = LL - indicating all politicians; Level B = US; Level C and higher = StateCode
        ViewState["IssueKey"] = string.Empty;
        ViewState["QuestionKey"] = string.Empty;

        #region ViewState["IssuesGroup"] ViewState["IssueKey"] ViewState["IssueLevel"] ViewState["QuestionKey"] QueryString
        if (!string.IsNullOrEmpty(GetQueryString("Group")))
          ViewState["IssuesGroup"] = GetQueryString("Group");

        if (!string.IsNullOrEmpty(QueryIssue))
        {
          ViewState["IssueKey"] = QueryIssue;
          ViewState["IssueLevel"] = db.Issues_Str(ViewState["IssueKey"].ToString(), "IssueLevel");
        }

        if (!string.IsNullOrEmpty(QueryQuestion))
          ViewState["QuestionKey"] = QueryQuestion;
        #endregion
        #endregion ViewState Values

        #region Additional Security Checks
        if (
          (ViewState["IssuesGroup"].ToString() == string.Empty)
          || (ViewState["IssueKey"].ToString() == string.Empty)
          )
          HandleFatalError("The IssueGroup and/or IssueKey is missing");
        #endregion Security Checks

        try
        {
          #region Page Title
          //PageTitle.Text = db.Issues_Str(ViewState["IssueKey"].ToString(), "Issue") + " QUESTIONS";
          //if (ViewState["IssueLevel"].ToString() == "A")
          //  PageTitle.Text += "<br>for ALL Offices";
          //else if (ViewState["IssueLevel"].ToString() == "B")
          //  PageTitle.Text += "<br>for ALL NATIONAL Offices";
          //else if (ViewState["IssueLevel"].ToString() == "c")
          //  PageTitle.Text += "<br>for " + db.States_Str(ViewState["IssuesGroup"].ToString(), "State") + " Offices";
          #endregion

          PageTitle.Text = PageTitle4Questions(ViewState["IssuesGroup"].ToString()
            , ViewState["IssueKey"].ToString()
            , ViewState["IssueLevel"].ToString());

          HyperLinkReport.NavigateUrl = db.Url_Admin_IssuesReport(
            ViewState["IssueLevel"].ToString()
          , ViewState["IssuesGroup"].ToString());



          if ((ViewState["QuestionKey"] as string) == string.Empty)
          {
            #region From: /Admin/Issues.aspx
            ClearControls();
            ButtonUpdate.Visible = false;
            #endregion
          }
          else
          {
            #region From: Table of Questions at bottom of this page
            LoadControls();
            Msg.Text = db.Msg("You can now either: (1) change the Order or Question"
              + " and click Update"
              + " or (2) chage the Status by clicking a radio button"
            + " or (3) click Clear to clear the order and topic question in preparation to Add a Question.");

            ButtonUpdate.Visible = true;
            ButtonAdd.Visible = false;
            #endregion
          }

          ShowQuestions();
        }
        catch (Exception ex)
        {
          #region
          Msg.Text = db.Fail(ex.Message);
          db.Log_Error_Admin(ex);
          #endregion
        }
      }
    }

    #region Dead code


    //private string EditIsRadiobuttonlistDelete()
    //{
    //  if (RadiobuttonlistDelete.SelectedValue == "Yes")
    //    return "1";
    //  else
    //    return "0";
    //}

    //protected void Page_PreRender(object sender, EventArgs e)
    //{
    //  try
    //  {
    //    if (Session["ErrNavBarAdmin"].ToString() != string.Empty)
    //      Msg.Text = db.Fail(Session["ErrNavBarAdmin"].ToString());
    //  }
    //  catch /*(Exception ex)*/
    //  {
    //  }
    //}

    #endregion Dead code


  }
}
